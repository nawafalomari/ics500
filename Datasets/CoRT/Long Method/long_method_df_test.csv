Code,Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , cancelProcess_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public boolean shouldClientThrottle ( short version ) { return version >= 0 ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" void viewSpecification ( IHTTPOutput out , Locale locale , DocumentSpecification ds ) throws ManifoldCFException , IOException ;",No
" private void readConstantPool ( ) throws IOException { ConstantPoolItem [ ] items = new ConstantPoolItem [ constant_Pool_Count ] ; byte tag ; for ( int i = 1 ; i < constant_Pool_Count ; i ++ ) { tag = in . readByte ( ) ; switch ( tag ) { case Constants . CONSTANT_Class : items [ i ] = new Constant_Class ( in . readUnsignedShort ( ) ) ; break ; case Constants . CONSTANT_Fieldref : items [ i ] = new Constant_Fieldref ( in . readUnsignedShort ( ) , in . readUnsignedShort ( ) ) ; break ; case Constants . CONSTANT_Methodref : items [ i ] = new Constant_Methodref ( in . readUnsignedShort ( ) , in . readUnsignedShort ( ) ) ; break ; case Constants . CONSTANT_InterfaceMethodref : items [ i ] = new Constant_InterfaceMethodref ( in . readUnsignedShort ( ) , in . readUnsignedShort ( ) ) ; break ; case Constants . CONSTANT_String : items [ i ] = new Constant_String ( in . readUnsignedShort ( ) ) ; break ; case Constants . CONSTANT_Integer : items [ i ] = new Constant_Integer ( in . readInt ( ) ) ; break ; case Constants . CONSTANT_Float : items [ i ] = new Constant_Float ( in . readFloat ( ) ) ; break ; case Constants . CONSTANT_Long : items [ i ] = new Constant_Long ( in . readLong ( ) ) ; i ++ ; break ; case Constants . CONSTANT_Double : items [ i ] = new Constant_Double ( in . readDouble ( ) ) ; i ++ ; break ; case Constants . CONSTANT_NameAndType : items [ i ] = new Constant_NameAndType ( in . readUnsignedShort ( ) , in . readUnsignedShort ( ) ) ; break ; case Constants . CONSTANT_Utf8 : items [ i ] = new Constant_Utf8 ( in . readUTF ( ) ) ; break ; default : throw new IOException ( ""Error inputing class file, unexpected tag:"" + tag + "". i = "" + i ) ; } } constantPool = new ConstantPool ( items ) ; }",Smelly
" public static void main ( String [ ] args ) throws Exception { LinearDRPCTopologyBuilder builder = construct ( ) ; Config conf = new Config ( ) ; if ( args == null || args . length == 0 ) { conf . setMaxTaskParallelism ( 3 ) ; LocalDRPC drpc = new LocalDRPC ( ) ; LocalCluster cluster = new LocalCluster ( ) ; cluster . submitTopology ( ""reach-drpc"" , conf , builder . createLocalTopology ( drpc ) ) ; String [ ] urlsToTry = new String [ ] { ""foo.com/blog/1"" , ""engineering.twitter.com/blog/5"" , ""notaurl.com"" } ; for ( String url : urlsToTry ) { System . out . println ( ""Reach of "" + url + "": "" + drpc . execute ( ""reach"" , url ) ) ; } cluster . shutdown ( ) ; drpc . shutdown ( ) ; } else { conf . setNumWorkers ( 6 ) ; StormSubmitter . submitTopologyWithProgressBar ( args [ 0 ] , conf , builder . createRemoteTopology ( ) ) ; } }",No
 public int getMemoryUsed ( ) { return memoryUsed ; },Smelly
" protected void load ( StructInstance instance , int colPos , Object val ) { instance . maps [ colPos ] = ( ImmutableMap ) val ; }",No
" private Map < String , String > getDefaultHeaders ( ) { Map < String , String > headers = new HashMap < > ( ) ; String [ ] splitVal = X_CONTENT_TYPE_OPTIONS . split ( "":"" ) ; headers . put ( HTTP_HEADER_PREFIX + splitVal [ 0 ] , splitVal [ 1 ] ) ; splitVal = X_XSS_PROTECTION . split ( "":"" ) ; headers . put ( HTTP_HEADER_PREFIX + splitVal [ 0 ] , splitVal [ 1 ] ) ; return headers ; }",Smelly
 public Set < String > getUriPrefixes ( ) { return URI_PREFIXES ; },No
 public Schema getSchema ( ) { return schema ; },Smelly
" public void publish ( MessageContext msgCtx ) throws AiravataException { try { log . info ( ""Publishing status to rabbitmq..."" ) ; byte [ ] body = ThriftUtils . serializeThriftObject ( msgCtx . getEvent ( ) ) ; Message message = new Message ( ) ; message . setEvent ( body ) ; message . setMessageId ( msgCtx . getMessageId ( ) ) ; message . setMessageType ( msgCtx . getType ( ) ) ; message . setUpdatedTime ( msgCtx . getUpdatedTime ( ) . getTime ( ) ) ; String gatewayId = msgCtx . getGatewayId ( ) ; String routingKey = null ; if ( msgCtx . getType ( ) == MessageType . EXPERIMENT ) { ExperimentStatusChangeEvent event = ( ExperimentStatusChangeEvent ) msgCtx . getEvent ( ) ; routingKey = gatewayId + ""."" + event . getExperimentId ( ) ; } else if ( msgCtx . getType ( ) == MessageType . TASK ) { TaskStatusChangeEvent event = ( TaskStatusChangeEvent ) msgCtx . getEvent ( ) ; routingKey = gatewayId + ""."" + event . getTaskIdentity ( ) . getExperimentId ( ) + ""."" + event . getTaskIdentity ( ) . getProcessId ( ) + ""."" + event . getTaskIdentity ( ) . getTaskId ( ) ; } else if ( msgCtx . getType ( ) == MessageType . PROCESSOUTPUT ) { TaskOutputChangeEvent event = ( TaskOutputChangeEvent ) msgCtx . getEvent ( ) ; routingKey = gatewayId + ""."" + event . getTaskIdentity ( ) . getExperimentId ( ) + ""."" + event . getTaskIdentity ( ) . getProcessId ( ) + ""."" + event . getTaskIdentity ( ) . getTaskId ( ) ; } else if ( msgCtx . getType ( ) == MessageType . PROCESS ) { ProcessStatusChangeEvent event = ( ProcessStatusChangeEvent ) msgCtx . getEvent ( ) ; ProcessIdentifier processIdentifier = event . getProcessIdentity ( ) ; routingKey = gatewayId + ""."" + processIdentifier . getExperimentId ( ) + ""."" + processIdentifier . getProcessId ( ) ; } else if ( msgCtx . getType ( ) == MessageType . JOB ) { JobStatusChangeEvent event = ( JobStatusChangeEvent ) msgCtx . getEvent ( ) ; JobIdentifier identity = event . getJobIdentity ( ) ; routingKey = gatewayId + ""."" + identity . getExperimentId ( ) + ""."" + identity . getProcessId ( ) + ""."" + identity . getTaskId ( ) + ""."" + identity . getJobId ( ) ; } byte [ ] messageBody = ThriftUtils . serializeThriftObject ( message ) ; rabbitMQProducer . send ( messageBody , routingKey ) ; } catch ( TException e ) { String msg = ""Error while deserializing the object"" ; log . error ( msg , e ) ; throw new AiravataException ( msg , e ) ; } catch ( Exception e ) { String msg = ""Error while sending to rabbitmq"" ; log . error ( msg , e ) ; throw new AiravataException ( msg , e ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 1 , 3 , ""only"" , ""some"" , ""text"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 2 , 1 , ""only some text"" ) ; cas . release ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected void configureBroker ( BrokerService answer , String uri ) throws Exception { File dataFileDir = new File ( ""target/test-amq-data/perfTest/temp-amqdb"" ) ; dataFileDir . mkdirs ( ) ; answer . setDeleteAllMessagesOnStartup ( true ) ; TempKahaDBStore adaptor = new TempKahaDBStore ( ) ; adaptor . setDirectory ( dataFileDir ) ; answer . setDataDirectoryFile ( dataFileDir ) ; answer . setPersistenceAdapter ( adaptor ) ; answer . addConnector ( uri ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected QueueBrowser createBrowser ( ) throws JMSException { return getSession ( ) . createBrowser ( getQueue ( ) , getSelector ( ) ) ; }",No
" public void testWriteReadPrincipal ( ) { File tempDir = new File ( System . getProperty ( ""tomcat.test.temp"" , ""output/tmp"" ) ) ; if ( ! tempDir . mkdirs ( ) && ! tempDir . isDirectory ( ) ) { fail ( ""Unable to create temporary directory for test"" ) ; } List < String > roles = new ArrayList < String > ( ) ; roles . add ( ""RoleA"" ) ; roles . add ( ""RoleB"" ) ; TesterPrincipal tpOriginal = new TesterPrincipal ( ""inner"" ) ; GenericPrincipal gpOriginal = new GenericPrincipal ( ""usr"" , ""pwd"" , roles , tpOriginal ) ; File file = null ; try { file = File . createTempFile ( ""ser"" , null , tempDir ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; fail ( ""ioe creating temporary file"" ) ; } GenericPrincipal gpNew = null ; try { FileOutputStream fos = null ; try { fos = new FileOutputStream ( file ) ; ObjectOutputStream oos = new ObjectOutputStream ( fos ) ; SerializablePrincipal . writePrincipal ( gpOriginal , oos ) ; oos . close ( ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; fail ( ""fnfe creating object output stream"" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; fail ( ""ioe serializing principal"" ) ; } finally { if ( fos != null ) { try { fos . close ( ) ; } catch ( IOException ignored ) { } } } FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; ObjectInputStream ois = new ObjectInputStream ( fis ) ; gpNew = SerializablePrincipal . readPrincipal ( ois ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; fail ( ""fnfe reading object output stream"" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; fail ( ""ioe de-serializing principal"" ) ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; fail ( ""cnfe de-serializing principal"" ) ; } finally { if ( fis != null ) { try { fis . close ( ) ; } catch ( IOException ignored ) { } } } } finally { if ( ! file . delete ( ) ) { System . out . println ( ""Failed to delete "" + file ) ; } } assertEquals ( ""User names different"" , gpOriginal . getName ( ) , gpNew . getName ( ) ) ; assertEquals ( ""Passwords different"" , gpOriginal . getPassword ( ) , gpNew . getPassword ( ) ) ; assertEquals ( ""Number of roles different"" , gpOriginal . getRoles ( ) . length , gpNew . getRoles ( ) . length ) ; for ( int i = 0 ; i < gpOriginal . getRoles ( ) . length ; i ++ ) { assertEquals ( ""Role name index "" + i + ""different"" , gpOriginal . getRoles ( ) [ i ] , gpNew . getRoles ( ) [ i ] ) ; } assertNotSame ( ""Inner principal not present"" , gpNew , gpNew . getUserPrincipal ( ) ) ; assertEquals ( ""Inner user names are different"" , tpOriginal . getName ( ) , gpNew . getUserPrincipal ( ) . getName ( ) ) ; }",Smelly
" public void interpret ( String token , String value ) throws InterpretException { int dotPosition = token . indexOf ( DOT ) ; if ( dotPosition == - 1 ) { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } String serviceRole = token . substring ( 0 , dotPosition ) ; if ( serviceRole != null && serviceRole . isEmpty ( ) ) { serviceRole = null ; } String nextToken = token . substring ( dotPosition + 1 ) ; dotPosition = nextToken . indexOf ( DOT ) ; if ( dotPosition == - 1 ) { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } String serviceName = nextToken . substring ( 0 , dotPosition ) ; if ( serviceName != null && serviceName . isEmpty ( ) ) { serviceName = null ; } nextToken = nextToken . substring ( dotPosition + 1 ) ; Service service = topology . getService ( serviceRole , serviceName , null ) ; if ( service == null ) { service = new Service ( ) ; service . setName ( serviceName ) ; service . setRole ( serviceRole ) ; topology . addService ( service ) ; } if ( SERVICE_URL . equalsIgnoreCase ( nextToken ) ) { service . addUrl ( value ) ; } else { dotPosition = nextToken . indexOf ( DOT ) ; if ( dotPosition != - 1 ) { String aggregator = nextToken . substring ( 0 , dotPosition ) ; nextToken = nextToken . substring ( dotPosition + 1 ) ; if ( AGGREGATOR_PARAM . equalsIgnoreCase ( aggregator ) ) { new ServiceParameterPropertyInterpreter ( service ) . interpret ( nextToken , value ) ; } else { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } } else { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } } }",Smelly
" public Integer process ( Integer input , Context context ) { return input + 100 ; }",No
" public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof StoredByDesc ) ) return false ; StoredByDesc that = ( StoredByDesc ) o ; return xequals ( this . className , that . className ) && xequals ( this . properties , that . properties ) ; }",No
" private int getResultsSize ( Table ht , Scan scan ) throws IOException { ResultScanner scanner = ht . getScanner ( scan ) ; List < Cell > results = new ArrayList < > ( ) ; Result r ; while ( ( r = scanner . next ( ) ) != null ) { for ( Cell kv : r . listCells ( ) ) { results . add ( kv ) ; } } return results . size ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , CompactionStrategyConfig struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . className = iprot . readString ( ) ; struct . setClassNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TMap _map160 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . options = new HashMap < String , String > ( 2 * _map160 . size ) ; for ( int _i161 = 0 ; _i161 < _map160 . size ; ++ _i161 ) { String _key162 ; String _val163 ; _key162 = iprot . readString ( ) ; _val163 = iprot . readString ( ) ; struct . options . put ( _key162 , _val163 ) ; } } struct . setOptionsIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , replicateKeyValues_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readI64 ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . e = new RemoteReplicationException ( ) ; struct . e . read ( iprot ) ; struct . setEIsSet ( true ) ; } }",Smelly
 public void shutdown ( ) { _execService . shutdown ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void setGallery ( Gallery gallery ) { if ( objectContext != null ) { objectContext . prepareForAccess ( this , ""gallery"" , true ) ; } else if ( this . gallery == null ) { this . gallery = new PersistentObjectHolder ( this , ""gallery"" ) ; } Object oldValue = this . gallery . getValueDirectly ( ) ; if ( objectContext != null ) { objectContext . propertyChanged ( this , ""gallery"" , oldValue , gallery ) ; } this . gallery . setValue ( gallery ) ; }",No
" public List < Column > getColumns ( ITuple tuple ) { List < Column > columns = new ArrayList < Column > ( ) ; for ( Column column : schemaColumns ) { String columnName = column . getColumnName ( ) ; Integer columnSqlType = column . getSqlType ( ) ; if ( Util . getJavaType ( columnSqlType ) . equals ( String . class ) ) { String value = tuple . getStringByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Short . class ) ) { Short value = tuple . getShortByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Integer . class ) ) { Integer value = tuple . getIntegerByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Long . class ) ) { Long value = tuple . getLongByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Double . class ) ) { Double value = tuple . getDoubleByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Float . class ) ) { Float value = tuple . getFloatByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Boolean . class ) ) { Boolean value = tuple . getBooleanByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( byte [ ] . class ) ) { byte [ ] value = tuple . getBinaryByField ( columnName ) ; columns . add ( new Column ( columnName , value , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Date . class ) ) { Long value = tuple . getLongByField ( columnName ) ; columns . add ( new Column ( columnName , new Date ( value ) , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Time . class ) ) { Long value = tuple . getLongByField ( columnName ) ; columns . add ( new Column ( columnName , new Time ( value ) , columnSqlType ) ) ; } else if ( Util . getJavaType ( columnSqlType ) . equals ( Timestamp . class ) ) { Long value = tuple . getLongByField ( columnName ) ; columns . add ( new Column ( columnName , new Timestamp ( value ) , columnSqlType ) ) ; } else { throw new RuntimeException ( ""Unsupported java type in tuple "" + Util . getJavaType ( columnSqlType ) ) ; } } return columns ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" private void doTestTransformFunction ( final int n , final double tol , final TransformType type ) { final RealTransformer transformer = createRealTransformer ( ) ; final UnivariateFunction f = getValidFunction ( ) ; final double a = getValidLowerBound ( ) ; final double b = getValidUpperBound ( ) ; final double [ ] x = createRealData ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { final double t = a + i * ( b - a ) / n ; x [ i ] = f . value ( t ) ; } final double [ ] expected = transform ( x , type ) ; final double [ ] actual = transformer . transform ( f , a , b , n , type ) ; for ( int i = 0 ; i < n ; i ++ ) { final String msg = String . format ( ""%d, %d"" , n , i ) ; final double delta = tol * FastMath . abs ( expected [ i ] ) ; Assert . assertEquals ( msg , expected [ i ] , actual [ i ] , delta ) ; } }",No
" public static String updateGeneric ( HttpServletRequest request , HttpServletResponse response ) { String entityName = request . getParameter ( ""entityName"" ) ; Locale locale = UtilHttp . getLocale ( request ) ; if ( entityName == null || entityName . length ( ) <= 0 ) { String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.entity_name_not_specified"" , locale ) + ""."" ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; Debug . logWarning ( ""[GenericWebEvent.updateGeneric] The entityName was not specified, but is required."" , module ) ; return ""error"" ; } Security security = ( Security ) request . getAttribute ( ""security"" ) ; Delegator delegator = ( Delegator ) request . getAttribute ( ""delegator"" ) ; if ( security == null ) { String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.security_object_not_found"" , locale ) + ""."" ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; Debug . logWarning ( ""[updateGeneric] The security object was not found in the request, please check the control servlet init."" , module ) ; return ""error"" ; } if ( delegator == null ) { String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.delegator_object_not_found"" , locale ) + ""."" ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; Debug . logWarning ( ""[updateGeneric] The delegator object was not found in the request, please check the control servlet init."" , module ) ; return ""error"" ; } ModelReader reader = delegator . getModelReader ( ) ; ModelEntity entity = null ; try { entity = reader . getModelEntity ( entityName ) ; } catch ( GenericEntityException e ) { Debug . logError ( e , module ) ; } String updateMode = request . getParameter ( ""UPDATE_MODE"" ) ; if ( updateMode == null || updateMode . length ( ) <= 0 ) { String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.update_mode_not_specified"" , locale ) + ""."" ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; Debug . logWarning ( ""[updateGeneric] Update Mode was not specified, but is required; entityName: "" + entityName , module ) ; return ""error"" ; } if ( ! security . hasEntityPermission ( ""ENTITY_DATA"" , ""_"" + updateMode , request . getSession ( ) ) && ! security . hasEntityPermission ( entity . getPlainTableName ( ) , ""_"" + updateMode , request . getSession ( ) ) ) { Map < String , String > messageMap = UtilMisc . toMap ( ""updateMode"" , updateMode , ""entityName"" , entity . getEntityName ( ) , ""entityPlainTableName"" , entity . getPlainTableName ( ) ) ; String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.not_sufficient_permissions_01"" , messageMap , locale ) ; errMsg += UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.not_sufficient_permissions_02"" , messageMap , locale ) + ""."" ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } GenericValue findByEntity = delegator . makeValue ( entityName ) ; String errMsgPk = """" ; Iterator < ModelField > pksIter = entity . getPksIterator ( ) ; while ( pksIter . hasNext ( ) ) { String errMsg = """" ; ModelField field = pksIter . next ( ) ; ModelFieldType type = null ; try { type = delegator . getEntityFieldType ( entity , field . getType ( ) ) ; } catch ( GenericEntityException e ) { Debug . logWarning ( e , module ) ; Map < String , String > messageMap = UtilMisc . toMap ( ""fieldType"" , field . getType ( ) ) ; errMsg += UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.fatal_error_param"" , messageMap , locale ) + ""."" ; } String fval = request . getParameter ( field . getName ( ) ) ; if ( UtilValidate . isNotEmpty ( fval ) ) { try { findByEntity . setString ( field . getName ( ) , fval ) ; } catch ( Exception e ) { Map < String , String > messageMap = UtilMisc . toMap ( ""fval"" , fval ) ; errMsg = errMsg + ""<li>"" + field . getColName ( ) + UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.conversion_failed"" , messageMap , locale ) + type . getJavaType ( ) + ""."" ; Debug . logWarning ( ""[updateGeneric] "" + field . getColName ( ) + "" conversion failed: \"""" + fval + ""\"" is not a valid "" + type . getJavaType ( ) + ""; entityName: "" + entityName , module ) ; } } } if ( errMsgPk . length ( ) > 0 ) { request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsgPk ) ; return ""error"" ; } if ( updateMode . equals ( ""DELETE"" ) ) { try { delegator . removeByPrimaryKey ( findByEntity . getPrimaryKey ( ) ) ; } catch ( GenericEntityException e ) { String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.delete_failed"" , locale ) + "": "" + e . toString ( ) ; Debug . logWarning ( e , errMsg , module ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } return ""success"" ; } String errMsgNonPk = """" ; Iterator < ModelField > nopksIter = entity . getNopksIterator ( ) ; while ( nopksIter . hasNext ( ) ) { ModelField field = nopksIter . next ( ) ; ModelFieldType type = null ; try { type = delegator . getEntityFieldType ( entity , field . getType ( ) ) ; } catch ( GenericEntityException e ) { Debug . logWarning ( e , module ) ; Map < String , String > messageMap = UtilMisc . toMap ( ""fieldType"" , field . getType ( ) ) ; errMsgNonPk += UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.fatal_error_param"" , messageMap , locale ) + ""."" ; } String fval = request . getParameter ( field . getName ( ) ) ; if ( UtilValidate . isNotEmpty ( fval ) ) { try { findByEntity . setString ( field . getName ( ) , fval ) ; } catch ( Exception e ) { Map < String , String > messageMap = UtilMisc . toMap ( ""fval"" , fval ) ; errMsgNonPk += field . getColName ( ) + UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.conversion_failed"" , messageMap , locale ) + type . getJavaType ( ) + ""."" ; Debug . logWarning ( ""[updateGeneric] "" + field . getColName ( ) + "" conversion failed: \"""" + fval + ""\"" is not a valid "" + type . getJavaType ( ) + ""; entityName: "" + entityName , module ) ; } } else { findByEntity . set ( field . getName ( ) , null ) ; } } if ( errMsgNonPk . length ( ) > 0 ) { request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsgNonPk ) ; return ""error"" ; } if ( updateMode . equals ( ""CREATE"" ) ) { GenericValue tempEntity = null ; try { tempEntity = delegator . findOne ( findByEntity . getEntityName ( ) , findByEntity . getPrimaryKey ( ) , false ) ; } catch ( GenericEntityException e ) { String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.create_failed_by_check"" , locale ) + "": "" + e . toString ( ) ; Debug . logWarning ( e , errMsg , module ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } if ( tempEntity != null ) { Map < String , String > messageMap = UtilMisc . toMap ( ""primaryKey"" , findByEntity . getPrimaryKey ( ) . toString ( ) ) ; String errMsg = ""[updateGeneric] "" + entity . getEntityName ( ) + UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.already_exists_pk"" , messageMap , locale ) + ""."" ; Debug . logWarning ( errMsg , module ) ; } } String errMsgParam = """" ; Iterator < ModelField > fieldIter = entity . getFieldsIterator ( ) ; while ( fieldIter . hasNext ( ) ) { ModelField field = fieldIter . next ( ) ; for ( String curValidate : field . getValidators ( ) ) { Class < ? > [ ] paramTypes = new Class [ ] { String . class } ; Object [ ] params = new Object [ ] { findByEntity . get ( field . getName ( ) ) . toString ( ) } ; String className = ""org.ofbiz.base.util.UtilValidate"" ; String methodName = curValidate ; if ( curValidate . indexOf ( '.' ) > 0 ) { className = curValidate . substring ( 0 , curValidate . lastIndexOf ( '.' ) ) ; methodName = curValidate . substring ( curValidate . lastIndexOf ( '.' ) + 1 ) ; } Class < ? > valClass ; try { ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; valClass = loader . loadClass ( className ) ; } catch ( ClassNotFoundException cnfe ) { Debug . logError ( ""[updateGeneric] Could not find validation class: "" + className + ""; ignoring."" , module ) ; continue ; } Method valMethod ; try { valMethod = valClass . getMethod ( methodName , paramTypes ) ; } catch ( NoSuchMethodException cnfe ) { Debug . logError ( ""[updateGeneric] Could not find validation method: "" + methodName + "" of class "" + className + ""; ignoring."" , module ) ; continue ; } Boolean resultBool ; try { resultBool = ( Boolean ) valMethod . invoke ( null , params ) ; } catch ( Exception e ) { Debug . logError ( ""[updateGeneric] Could not access validation method: "" + methodName + "" of class "" + className + ""; returning true."" , module ) ; resultBool = Boolean . TRUE ; } if ( ! resultBool . booleanValue ( ) ) { Field msgField ; String message ; try { msgField = valClass . getField ( curValidate + ""Msg"" ) ; message = ( String ) msgField . get ( null ) ; } catch ( Exception e ) { Debug . logError ( ""[updateGeneric] Could not find validation message field: "" + curValidate + ""Msg of class "" + className + ""; returning generic validation failure message."" , module ) ; message = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.validation_failed"" , locale ) + ""."" ; } errMsgParam += field . getColName ( ) + "" "" + curValidate + "" "" + UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.failed"" , locale ) + "": "" + message ; Debug . logWarning ( ""[updateGeneric] "" + field . getColName ( ) + "" "" + curValidate + "" failed: "" + message , module ) ; } } } if ( errMsgParam . length ( ) > 0 ) { errMsgParam = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.following_error_occurred"" , locale ) + errMsgParam ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsgParam ) ; return ""error"" ; } if ( updateMode . equals ( ""CREATE"" ) ) { try { delegator . create ( findByEntity . getEntityName ( ) , findByEntity . getAllFields ( ) ) ; } catch ( GenericEntityException e ) { Map < String , String > messageMap = UtilMisc . toMap ( ""entityName"" , entity . getEntityName ( ) ) ; String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.creation_param_failed"" , messageMap , locale ) + "": "" + findByEntity . toString ( ) + "": "" + e . toString ( ) ; Debug . logWarning ( e , errMsg , module ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } } else if ( updateMode . equals ( ""UPDATE"" ) ) { GenericValue value = delegator . makeValue ( findByEntity . getEntityName ( ) , findByEntity . getAllFields ( ) ) ; try { value . store ( ) ; } catch ( GenericEntityException e ) { Map < String , String > messageMap = UtilMisc . toMap ( ""entityName"" , entity . getEntityName ( ) ) ; String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.update_of_param_failed"" , messageMap , locale ) + "": "" + value . toString ( ) + "": "" + e . toString ( ) ; Debug . logWarning ( e , errMsg , module ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } } else { Map < String , String > messageMap = UtilMisc . toMap ( ""updateMode"" , updateMode ) ; String errMsg = UtilProperties . getMessage ( GenericWebEvent . err_resource , ""genericWebEvent.update_of_param_failed"" , messageMap , locale ) + ""."" ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; Debug . logWarning ( ""updateGeneric: Update Mode specified ("" + updateMode + "") was not valid for entity: "" + findByEntity . toString ( ) , module ) ; return ""error"" ; } return ""success"" ; }",Smelly
 private void addTraversal ( final Traversal . Admin t ) { this . traversals . add ( t ) ; for ( final Object ss : t . getSteps ( ) ) { if ( ss instanceof Scoping ) { for ( String label : ( ( Scoping ) ss ) . getScopeKeys ( ) ) { this . referencedLabels . add ( label ) ; } } } },No
 public Document makeDocument ( ) throws Exception { String [ ] tuple = parser . next ( ) ; return getDocState ( ) . setFields ( tuple ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public ComplexD getD ( ) { return this . d ; },No
 public CompletableFuture < TransactionMetadataStore > openStore ( TransactionCoordinatorID transactionCoordinatorId ) { return CompletableFuture . completedFuture ( new InMemTransactionMetadataStore ( transactionCoordinatorId ) ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , DecimalColumnStatsData struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . lowValue = new Decimal ( ) ; struct . lowValue . read ( iprot ) ; struct . setLowValueIsSet ( true ) ; struct . highValue = new Decimal ( ) ; struct . highValue . read ( iprot ) ; struct . setHighValueIsSet ( true ) ; struct . numNulls = iprot . readI64 ( ) ; struct . setNumNullsIsSet ( true ) ; struct . numDVs = iprot . readI64 ( ) ; struct . setNumDVsIsSet ( true ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Operator struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . operatorId = iprot . readString ( ) ; struct . setOperatorIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . operatorType = OperatorType . findByValue ( iprot . readI32 ( ) ) ; struct . setOperatorTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map36 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . operatorAttributes = new HashMap < String , String > ( 2 * _map36 . size ) ; for ( int _i37 = 0 ; _i37 < _map36 . size ; ++ _i37 ) { String _key38 ; String _val39 ; _key38 = iprot . readString ( ) ; _val39 = iprot . readString ( ) ; struct . operatorAttributes . put ( _key38 , _val39 ) ; } } struct . setOperatorAttributesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map40 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . operatorCounters = new HashMap < String , Long > ( 2 * _map40 . size ) ; for ( int _i41 = 0 ; _i41 < _map40 . size ; ++ _i41 ) { String _key42 ; long _val43 ; _key42 = iprot . readString ( ) ; _val43 = iprot . readI64 ( ) ; struct . operatorCounters . put ( _key42 , _val43 ) ; } } struct . setOperatorCountersIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . done = iprot . readBool ( ) ; struct . setDoneIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . started = iprot . readBool ( ) ; struct . setStartedIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; JobModel other = ( JobModel ) obj ; if ( config == null ) { if ( other . config != null ) return false ; } else if ( ! config . equals ( other . config ) ) return false ; if ( containers == null ) { if ( other . containers != null ) return false ; } else if ( ! containers . equals ( other . containers ) ) return false ; return true ; },No
" private String getLangCode ( ) { String code = LOG . getResourceBundle ( ) . getLocale ( ) . getLanguage ( ) ; if ( StringUtils . isEmpty ( code ) ) { return ""en"" ; } return code ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public Object convert ( final Class type , final Object value ) { if ( value == null ) { if ( useDefault ) { return ( defaultValue ) ; } else { throw new ConversionException ( ""No value specified"" ) ; } } if ( MODEL == value . getClass ( ) ) { return ( value ) ; } if ( strings . getClass ( ) == value . getClass ( ) ) { try { final String [ ] values = ( String [ ] ) value ; final boolean [ ] results = new boolean [ values . length ] ; for ( int i = 0 ; i < values . length ; i ++ ) { final String stringValue = values [ i ] ; final Object result = booleanConverter . convert ( Boolean . class , stringValue ) ; results [ i ] = ( ( Boolean ) result ) . booleanValue ( ) ; } return ( results ) ; } catch ( final Exception e ) { if ( useDefault ) { return ( defaultValue ) ; } else { throw new ConversionException ( value . toString ( ) , e ) ; } } } try { final List list = parseElements ( value . toString ( ) ) ; final boolean [ ] results = new boolean [ list . size ( ) ] ; for ( int i = 0 ; i < results . length ; i ++ ) { final String stringValue = ( String ) list . get ( i ) ; final Object result = booleanConverter . convert ( Boolean . class , stringValue ) ; results [ i ] = ( ( Boolean ) result ) . booleanValue ( ) ; } return ( results ) ; } catch ( final Exception e ) { if ( useDefault ) { return ( defaultValue ) ; } else { throw new ConversionException ( value . toString ( ) , e ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public final void testExecuteStringRunnablelonglong ( ) { final MockControl mainConfigControl = createStrictControl ( Configuration . class ) ; final Configuration mainConfig = ( Configuration ) mainConfigControl . getMock ( ) ; mainConfigControl . expectAndReturn ( mainConfig . getChild ( ""thread-factory"" ) , createValueConfigMock ( DefaultRunnableManager . DEFAULT_THREAD_FACTORY , DefaultRunnableManager . DEFAULT_THREAD_FACTORY ) ) ; mainConfigControl . expectAndReturn ( mainConfig . getChild ( ""thread-pools"" ) , createChildrenConfigMock ( ""thread-pool"" , new Configuration [ 0 ] ) ) ; mainConfigControl . replay ( ) ; final MockControl childLoggerDefaultControl = createStrictControl ( Logger . class ) ; final Logger childLoggerDefault = ( Logger ) childLoggerDefaultControl . getMock ( ) ; childLoggerDefaultControl . expectAndReturn ( childLoggerDefault . isDebugEnabled ( ) , true ) ; childLoggerDefault . debug ( ""Executing Command: org.apache.cocoon.components.thread.DefaultRunnableManager"" ) ; childLoggerDefaultControl . setMatcher ( MockControl . ALWAYS_MATCHER ) ; childLoggerDefaultControl . replay ( ) ; final MockControl childLoggerMyPoolControl = createStrictControl ( Logger . class ) ; final Logger childLoggerMyPool = ( Logger ) childLoggerMyPoolControl . getMock ( ) ; childLoggerMyPoolControl . expectAndReturn ( childLoggerMyPool . isDebugEnabled ( ) , true ) ; childLoggerMyPool . debug ( ""Executing Command: EasyMock for interface java.lang.Runnable,pool=mypool"" ) ; childLoggerMyPoolControl . replay ( ) ; final MockControl loggerControl = createStrictControl ( Logger . class ) ; final Logger logger = ( Logger ) loggerControl . getMock ( ) ; loggerControl . expectAndReturn ( logger . getChildLogger ( ""default"" ) , childLoggerDefault ) ; loggerControl . expectAndReturn ( logger . isInfoEnabled ( ) , true ) ; logger . info ( ""ThreadPool named \""default\"" created with maximum queue-size=2147483647,max-pool-size=5,min-pool-size=5,priority=5,isDaemon=false,keep-alive-time-ms=60000,block-policy=\""RUN\"",shutdown-wait-time-ms=-1"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""starting heart"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Entering loop"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""No commands available. Will just wait for one"" ) ; loggerControl . expectAndReturn ( logger . getChildLogger ( ""mypool"" ) , childLoggerMyPool ) ; loggerControl . expectAndReturn ( logger . isInfoEnabled ( ) , true ) ; logger . info ( ""ThreadPool named \""mypool\"" created with maximum queue-size=230,max-pool-size=15,min-pool-size=12,priority=1,isDaemon=false,keep-alive-time-ms=15500,block-policy=\""DISCARD\"",shutdown-wait-time-ms=22200"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Command entered: EasyMock for interface java.lang.Runnable,pool=mypool,delay=100,interval=100"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Hand over Command EasyMock for interface java.lang.Runnable to pool \""mypool\"" with delay=100 and interval=100"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Exiting loop"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Disposing all thread pools"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Disposing thread pool mypool"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Thread pool mypool disposed"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Disposing thread pool default"" ) ; loggerControl . expectAndReturn ( logger . isDebugEnabled ( ) , true ) ; logger . debug ( ""Thread pool default disposed"" ) ; loggerControl . replay ( ) ; final DefaultRunnableManager runnableManager = new DefaultRunnableManager ( ) ; runnableManager . enableLogging ( logger ) ; try { runnableManager . configure ( mainConfig ) ; } catch ( final ConfigurationException ce ) { assertTrue ( ""Throw unexpected ConfigurationException"" , false ) ; } final MockControl runnableControl = createStrictControl ( Runnable . class ) ; final Runnable runnable = ( Runnable ) runnableControl . getMock ( ) ; runnable . run ( ) ; runnableControl . replay ( ) ; try { runnableManager . start ( ) ; Thread . yield ( ) ; Thread . sleep ( 20 ) ; runnableManager . createPool ( ""mypool"" , 230 , 15 , 12 , Thread . MIN_PRIORITY , false , 15500 , ""DISCARD"" , false , 22200 ) ; runnableManager . execute ( ""mypool"" , runnable , 100 , 100 ) ; Thread . yield ( ) ; Thread . sleep ( 200 ) ; runnableManager . stop ( ) ; Thread . yield ( ) ; Thread . sleep ( 20 ) ; runnableManager . dispose ( ) ; Thread . sleep ( 20 ) ; } catch ( final Throwable ex ) { ex . printStackTrace ( ) ; assertTrue ( ""Unexpected Exception"" , false ) ; } verify ( ) ; }",Smelly
" void checkSnapshots ( ) throws Exception { for ( Path snapshot : statusMap . keySet ( ) ) { FileStatus currentStatus = fs . exists ( snapshot ) ? fs . getFileStatus ( snapshot ) : null ; FileStatus originalStatus = statusMap . get ( snapshot ) ; assertEquals ( currentStatus , originalStatus ) ; if ( currentStatus != null ) { assertEquals ( currentStatus . toString ( ) , originalStatus . toString ( ) ) ; } } }",No
 boolean matched ( ) ;,No
" public void processElement ( ProcessContext c ) throws Exception { UserString userString = c . element ( ) . getValue ( ) . get ( concatStringTag ) ; KV < Integer , String > value = KV . of ( c . element ( ) . getValue ( ) . get ( maxIntTag ) , userString == null ? null : userString . strValue ) ; c . output ( KV . of ( c . element ( ) . getKey ( ) , value ) ) ; }",No
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { super . looseMarshal ( wireFormat , o , dataOut ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 boolean equalsTo ( Expr expr ) { return expr instanceof NullLiteral ; },No
 protected Iterator < CorbaObjectHandler > getNestedTypes ( ) { return iterator ; },No
" public void entity_forExceptionWithCause ( ) throws Exception { context . allowing ( mockHttpHeaders ) ; final Exception rootCause = new Exception ( ""bozfoz"" ) ; final Exception cause = new Exception ( ""barfoo"" , rootCause ) ; final RestfulObjectsApplicationException ex = RestfulObjectsApplicationException . createWithCauseAndMessage ( HttpStatusCode . BAD_REQUEST , cause , ""foobar"" ) ; final Response response = exceptionMapper . toResponse ( ex ) ; final String entity = ( String ) response . getEntity ( ) ; assertThat ( entity , is ( not ( nullValue ( ) ) ) ) ; final JsonRepresentation jsonRepr = JsonMapper . instance ( ) . read ( entity , JsonRepresentation . class ) ; assertThat ( ( String ) response . getMetadata ( ) . get ( ""Warning"" ) . get ( 0 ) , is ( ""199 RestfulObjects foobar"" ) ) ; assertThat ( jsonRepr . getString ( ""message"" ) , is ( ""foobar"" ) ) ; final JsonRepresentation detail = jsonRepr . getRepresentation ( ""detail"" ) ; assertThat ( detail , is ( not ( nullValue ( ) ) ) ) ; assertThat ( detail . getString ( ""message"" ) , is ( ""foobar"" ) ) ; final JsonRepresentation causedBy = detail . getRepresentation ( ""causedBy"" ) ; assertThat ( causedBy , is ( not ( nullValue ( ) ) ) ) ; assertThat ( causedBy . getString ( ""message"" ) , is ( cause . getMessage ( ) ) ) ; }",No
" public < TKey > RecordWriter < TKey , QuadWritable > createQuadWriter ( Writer writer , Configuration config ) { return new StreamRdfQuadWriter < > ( new StreamWriterTriX ( new WriterOutputStream ( writer , Charset . forName ( ""utf-8"" ) ) ) , writer ) ; }",No
 public FONode make ( FONode parent ) { return new PDFPagePieceElement ( parent ) ; },No
 public Target setCapabilities ( Object o ) { getFields ( ) [ FIELD_CAPABILITIES ] = o ; return this ; },No
 public CharSequence getCharContent ( boolean ignoreEncodingErrors ) { return code ; },Smelly
" public void handle ( Callback [ ] callbacks ) throws UnsupportedCallbackException { AuthorizeCallback ac = null ; for ( Callback callback : callbacks ) { if ( callback instanceof AuthorizeCallback ) { ac = ( AuthorizeCallback ) callback ; } else { throw new UnsupportedCallbackException ( callback , ""Unrecognized SASL GSSAPI Callback"" ) ; } } if ( ac != null ) { String authid = ac . getAuthenticationID ( ) ; String authzid = ac . getAuthorizationID ( ) ; if ( authid . equals ( authzid ) ) { ac . setAuthorized ( true ) ; } else { ac . setAuthorized ( false ) ; } if ( ac . isAuthorized ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""SASL server GSSAPI callback: setting "" + ""canonicalized client ID: "" + authzid ) ; } ac . setAuthorizedID ( authzid ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public Kind getKind ( ) { return kind ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ComponentStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . state = org . apache . airavata . model . ComponentState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . reason = iprot . readString ( ) ; struct . setReasonIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . timeofStateChange = iprot . readI64 ( ) ; struct . setTimeofStateChangeIsSet ( true ) ; } }",Smelly
" public static String descriptorToString ( String type ) { if ( type == null || type . trim ( ) . length ( ) == 0 ) { return """" ; } switch ( type . charAt ( 0 ) ) { case 'B' : return ""byte"" ; case 'C' : return ""char"" ; case 'D' : return ""double"" ; case 'F' : return ""float"" ; case 'I' : return ""int"" ; case 'J' : return ""long"" ; case 'L' : return type . substring ( 1 , type . length ( ) - 1 ) . replace ( '/' , '.' ) ; case 'S' : return ""short"" ; case 'Z' : return ""boolean"" ; case '[' : int dim = 1 ; String brackets = ""[]"" ; while ( type . charAt ( dim ) == '[' ) { dim ++ ; brackets = brackets + ""[]"" ; } return descriptorToString ( type . substring ( dim ) ) + brackets ; case 'V' : return ""void"" ; default : return ""[unknow type("" + type + "")]"" ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void handle ( Directory directory , Metadata metadata ) throws MetadataException { GeoLocation geoLocation = ( ( GpsDirectory ) directory ) . getGeoLocation ( ) ; if ( geoLocation != null ) { DecimalFormat geoDecimalFormat = new DecimalFormat ( GEO_DECIMAL_FORMAT_STRING , new DecimalFormatSymbols ( Locale . ENGLISH ) ) ; metadata . set ( TikaCoreProperties . LATITUDE , geoDecimalFormat . format ( geoLocation . getLatitude ( ) ) ) ; metadata . set ( TikaCoreProperties . LONGITUDE , geoDecimalFormat . format ( geoLocation . getLongitude ( ) ) ) ; } }",No
 public void validate ( ) throws TException { },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ColumnUpdate struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . colFamily = iprot . readBinary ( ) ; struct . setColFamilyIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . colQualifier = iprot . readBinary ( ) ; struct . setColQualifierIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . colVisibility = iprot . readBinary ( ) ; struct . setColVisibilityIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . timestamp = iprot . readI64 ( ) ; struct . setTimestampIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . value = iprot . readBinary ( ) ; struct . setValueIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . deleteCell = iprot . readBool ( ) ; struct . setDeleteCellIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 static void fork ( Command command ) { throw new UnsupportedOperationException ( ) ; },No
 public void setLeafAData ( String leafAData ) { this . leafAData = leafAData ; },No
" public int compare ( Object key1 , Object key2 ) { if ( key1 == null && key2 == null ) { return 0 ; } else if ( key1 == null ) { return - 1 ; } else if ( key2 == null ) { return 1 ; } return ByteUtil . compare ( ByteUtil . toBytes ( key1 . toString ( ) ) , ByteUtil . toBytes ( key2 . toString ( ) ) ) ; }",No
" public RecordReader < LongWritable , QuadWritable > createQuadReader ( ) { return new WholeFileNQuadsReader ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 void start ( ) throws IOException ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",No
" public void setProperty ( Object propertyName , Object propertyValue ) { }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void testSerdeNoSequence ( ) throws IOException { ByteBuffer key = ByteBuffer . wrap ( ""hi"" . getBytes ( ) ) ; ByteBuffer value = ByteBuffer . wrap ( ""there"" . getBytes ( ) ) ; long baseOffset = 37 ; int offsetDelta = 10 ; long baseTimestamp = System . currentTimeMillis ( ) ; long timestampDelta = 323 ; ByteBufferOutputStream out = new ByteBufferOutputStream ( 1024 ) ; DefaultRecord . writeTo ( new DataOutputStream ( out ) , offsetDelta , timestampDelta , key , value , new Header [ 0 ] ) ; ByteBuffer buffer = out . buffer ( ) ; buffer . flip ( ) ; DefaultRecord record = DefaultRecord . readFrom ( buffer , baseOffset , baseTimestamp , RecordBatch . NO_SEQUENCE , null ) ; assertNotNull ( record ) ; assertEquals ( RecordBatch . NO_SEQUENCE , record . sequence ( ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void testTestMD5 ( ) { },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void test ( ) throws Exception { Schema outscheme = new Pair < Utf8 , Long > ( new Utf8 ( """" ) , 0L ) . getSchema ( ) ; File midscfile = new File ( INPUT_DIR . getRoot ( ) . getPath ( ) , ""midschema.avpr"" ) ; try ( FileWriter hf = new FileWriter ( midscfile ) ) { hf . write ( outscheme . toString ( ) ) ; } JobConf job = new JobConf ( ) ; String inputPathStr = INPUT_DIR . getRoot ( ) . getPath ( ) ; String outputPathStr = OUTPUT_DIR . getRoot ( ) . getPath ( ) ; Path outputPath = new Path ( outputPathStr ) ; outputPath . getFileSystem ( job ) . delete ( outputPath , true ) ; WordCountUtil . writeLinesFile ( inputPathStr + ""/lines.avro"" ) ; String execargs = ""-classpath "" + System . getProperty ( ""java.class.path"" ) ; execargs += "" org.apache.avro.mapred.tether.WordCountTask"" ; java . util . List < String > runargs = new java . util . ArrayList < > ( ) ; runargs . addAll ( java . util . Arrays . asList ( ""--program"" , ""java"" ) ) ; runargs . addAll ( asList ( ""--exec_args"" , '""' + execargs + '""' ) ) ; runargs . addAll ( asList ( ""--exec_cached"" , ""false"" ) ) ; runargs . addAll ( asList ( ""--in"" , inputPathStr ) ) ; runargs . addAll ( asList ( ""--out"" , outputPath . toString ( ) ) ) ; runargs . addAll ( asList ( ""--outschema"" , midscfile . toString ( ) ) ) ; TetherTool tool = new TetherTool ( ) ; tool . run ( null , null , System . err , runargs ) ; int numWords = 0 ; DatumReader < Pair < Utf8 , Long > > reader = new SpecificDatumReader < > ( ) ; try ( InputStream cin = new BufferedInputStream ( new FileInputStream ( outputPathStr + ""/part-00000.avro"" ) ) ) { DataFileStream < Pair < Utf8 , Long > > counts = new DataFileStream < > ( cin , reader ) ; for ( Pair < Utf8 , Long > wc : counts ) { assertEquals ( wc . key ( ) . toString ( ) , WordCountUtil . COUNTS . get ( wc . key ( ) . toString ( ) ) , wc . value ( ) ) ; numWords ++ ; } } assertEquals ( WordCountUtil . COUNTS . size ( ) , numWords ) ; }",Smelly
" public String getRefStr ( ) { return String . format ( ""RecordBufferPage[id=%d]"" , getBackingBlock ( ) . getId ( ) ) ; }",No
 public void run ( ) { try { Thread . sleep ( 200 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } },No
" public static boolean isValidKey ( String key ) { if ( StringUtils . isEmpty ( key ) || "".."" . equals ( key ) || ""."" . equals ( key ) || ! TOPOLOGY_KEY_PATTERN . matcher ( key ) . matches ( ) ) { LOG . error ( ""'{}' does not appear to be valid. It must match {}. And it can't be \"".\"", \""..\"", null or empty string."" , key , TOPOLOGY_KEY_PATTERN ) ; return false ; } return true ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" protected DemandForwardingBridgeSupport createBridge ( Transport local , Transport remote ) { CompositeDemandForwardingBridge bridge = new CompositeDemandForwardingBridge ( this , local , remote ) ; bridge . setBrokerService ( getBrokerService ( ) ) ; return bridge ; }",No
" public static void main ( String [ ] args ) throws Exception { IZooReaderWriter zk = ZooReaderWriter . getInstance ( ) ; String rootDir = args [ 0 ] ; File reportDir = new File ( args [ 1 ] ) ; int numReaders = Integer . parseInt ( args [ 2 ] ) ; int numVerifications = Integer . parseInt ( args [ 3 ] ) ; int numData = NUM_DATA ; boolean dataSExists = false ; int count = 0 ; zk . putPersistentData ( rootDir , new byte [ 0 ] , NodeExistsPolicy . FAIL ) ; for ( int i = 0 ; i < numData ; i ++ ) { zk . putPersistentData ( rootDir + ""/data"" + i , new byte [ 0 ] , NodeExistsPolicy . FAIL ) ; } zk . putPersistentData ( rootDir + ""/dir"" , new byte [ 0 ] , NodeExistsPolicy . FAIL ) ; ArrayList < String > children = new ArrayList < > ( ) ; Random r = new Random ( ) ; while ( count ++ < numVerifications ) { Map < String , String > expectedData = null ; for ( int u = 0 ; u < r . nextInt ( 4 ) + 1 ; u ++ ) { expectedData = new TreeMap < > ( ) ; if ( r . nextFloat ( ) < .5 ) { String child = UUID . randomUUID ( ) . toString ( ) ; zk . putPersistentData ( rootDir + ""/dir/"" + child , new byte [ 0 ] , NodeExistsPolicy . SKIP ) ; children . add ( child ) ; } else if ( children . size ( ) > 0 ) { int index = r . nextInt ( children . size ( ) ) ; String child = children . remove ( index ) ; zk . recursiveDelete ( rootDir + ""/dir/"" + child , NodeMissingPolicy . FAIL ) ; } for ( String child : children ) { expectedData . put ( rootDir + ""/dir/"" + child , """" ) ; } for ( int i = 0 ; i < numData ; i ++ ) { byte data [ ] = Long . toString ( r . nextLong ( ) , 16 ) . getBytes ( UTF_8 ) ; zk . putPersistentData ( rootDir + ""/data"" + i , data , NodeExistsPolicy . OVERWRITE ) ; expectedData . put ( rootDir + ""/data"" + i , new String ( data , UTF_8 ) ) ; } if ( r . nextFloat ( ) < .5 ) { byte data [ ] = Long . toString ( r . nextLong ( ) , 16 ) . getBytes ( UTF_8 ) ; if ( ! dataSExists ) { zk . putPersistentData ( rootDir + ""/dataS"" , data , NodeExistsPolicy . SKIP ) ; dataSExists = true ; } else { zk . putPersistentData ( rootDir + ""/dataS"" , data , NodeExistsPolicy . OVERWRITE ) ; } expectedData . put ( rootDir + ""/dataS"" , new String ( data , UTF_8 ) ) ; } else { if ( dataSExists ) { zk . recursiveDelete ( rootDir + ""/dataS"" , NodeMissingPolicy . FAIL ) ; dataSExists = false ; } } } System . out . println ( ""expectedData "" + expectedData ) ; while ( true ) { File [ ] files = reportDir . listFiles ( ) ; if ( files == null ) { throw new IllegalStateException ( ""report directory is inaccessible"" ) ; } System . out . println ( ""files.length "" + files . length ) ; if ( files . length == numReaders ) { boolean ok = true ; for ( int i = 0 ; i < files . length ; i ++ ) { try { FileInputStream fis = new FileInputStream ( files [ i ] ) ; ObjectInputStream ois = new ObjectInputStream ( fis ) ; @ SuppressWarnings ( ""unchecked"" ) Map < String , String > readerMap = ( Map < String , String > ) ois . readObject ( ) ; fis . close ( ) ; ois . close ( ) ; System . out . println ( ""read "" + readerMap ) ; if ( ! readerMap . equals ( expectedData ) ) { System . out . println ( ""maps not equals"" ) ; ok = false ; } } catch ( IOException ioe ) { ok = false ; } } if ( ok ) break ; } UtilWaitThread . sleep ( 5 ) ; } } zk . putPersistentData ( rootDir + ""/die"" , new byte [ 0 ] , NodeExistsPolicy . FAIL ) ; }",Smelly
" public void handleMessage ( Message message ) throws Fault { W3CDOMStreamWriter domWriter = ( W3CDOMStreamWriter ) message . getContent ( XMLStreamWriter . class ) ; XMLStreamWriter origWriter = ( XMLStreamWriter ) message . get ( LogicalHandlerOutInterceptor . ORIGINAL_WRITER ) ; HandlerChainInvoker invoker = getInvoker ( message ) ; LogicalMessageContextImpl lctx = new LogicalMessageContextImpl ( message ) ; invoker . setLogicalMessageContext ( lctx ) ; boolean requestor = isRequestor ( message ) ; XMLStreamReader reader = ( XMLStreamReader ) message . get ( ""LogicalHandlerInterceptor.INREADER"" ) ; SOAPMessage origMessage = null ; if ( reader != null ) { origMessage = message . getContent ( SOAPMessage . class ) ; message . setContent ( XMLStreamReader . class , reader ) ; message . removeContent ( SOAPMessage . class ) ; } else if ( domWriter . getCurrentFragment ( ) != null ) { DocumentFragment frag = domWriter . getCurrentFragment ( ) ; Node nd = frag . getFirstChild ( ) ; while ( nd != null && ! ( nd instanceof Element ) ) { nd = nd . getNextSibling ( ) ; } Source source = new DOMSource ( nd ) ; message . setContent ( Source . class , source ) ; message . setContent ( XMLStreamReader . class , new W3CDOMStreamReader ( domWriter . getCurrentFragment ( ) ) ) ; } else if ( domWriter . getDocument ( ) . getDocumentElement ( ) != null ) { Source source = new DOMSource ( domWriter . getDocument ( ) ) ; message . setContent ( Source . class , source ) ; message . setContent ( XMLStreamReader . class , StaxUtils . createXMLStreamReader ( domWriter . getDocument ( ) ) ) ; } if ( ! invoker . invokeLogicalHandlers ( requestor , lctx ) ) { if ( requestor ) { message . getInterceptorChain ( ) . abort ( ) ; if ( ! message . getExchange ( ) . isOneWay ( ) ) { Endpoint e = message . getExchange ( ) . get ( Endpoint . class ) ; Message responseMsg = new MessageImpl ( ) ; responseMsg . setExchange ( message . getExchange ( ) ) ; responseMsg = e . getBinding ( ) . createMessage ( responseMsg ) ; MessageObserver observer = message . getExchange ( ) . get ( MessageObserver . class ) ; if ( observer != null ) { responseMsg . setContent ( XMLStreamReader . class , message . getContent ( XMLStreamReader . class ) ) ; message . getExchange ( ) . setInMessage ( responseMsg ) ; responseMsg . put ( PhaseInterceptorChain . STARTING_AT_INTERCEPTOR_ID , LogicalHandlerInInterceptor . class . getName ( ) ) ; observer . onMessage ( responseMsg ) ; } } } else { } return ; } if ( origMessage != null ) { message . setContent ( SOAPMessage . class , origMessage ) ; } try { reader = message . getContent ( XMLStreamReader . class ) ; message . removeContent ( XMLStreamReader . class ) ; if ( reader != null ) { StaxUtils . copy ( reader , origWriter ) ; } else if ( domWriter . getDocument ( ) . getDocumentElement ( ) != null ) { StaxUtils . copy ( domWriter . getDocument ( ) , origWriter ) ; } message . setContent ( XMLStreamWriter . class , origWriter ) ; } catch ( XMLStreamException e ) { throw new Fault ( e ) ; } }",Smelly
" public void fillBackground ( Rectangle rect , Paint fill , BorderProps bpsBefore , BorderProps bpsAfter , BorderProps bpsStart , BorderProps bpsEnd ) throws IFException { }",No
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { super . looseMarshal ( wireFormat , o , dataOut ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 final boolean hasValidMemberId ( ) { return generation != Generation . NO_GENERATION && generation . hasMemberId ( ) ; },Smelly
" private TimestampedValue < KV < String , GameActionInfo > > event ( TestUser user , int score , Duration baseTimeOffset ) { return TimestampedValue . of ( KV . of ( user . getTeam ( ) , new GameActionInfo ( user . getUser ( ) , user . getTeam ( ) , score , baseTime . plus ( baseTimeOffset ) . getMillis ( ) ) ) , baseTime . plus ( baseTimeOffset ) ) ; }",No
 BODY body ( String selector ) ;,No
" public boolean validatePolicy ( AssertionInfoMap aim , Message message , List < WSSecurityEngineResult > results , List < WSSecurityEngineResult > signedResults , List < WSSecurityEngineResult > encryptedResults ) { Collection < AssertionInfo > ais = aim . get ( SP12Constants . SIGNED_SUPPORTING_TOKENS ) ; if ( ais == null || ais . isEmpty ( ) ) { return true ; } setMessage ( message ) ; setResults ( results ) ; setSignedResults ( signedResults ) ; setEncryptedResults ( encryptedResults ) ; for ( AssertionInfo ai : ais ) { SupportingToken binding = ( SupportingToken ) ai . getAssertion ( ) ; if ( SPConstants . SupportTokenType . SUPPORTING_TOKEN_SIGNED != binding . getTokenType ( ) ) { continue ; } ai . setAsserted ( true ) ; setSignedParts ( binding . getSignedParts ( ) ) ; setEncryptedParts ( binding . getEncryptedParts ( ) ) ; setSignedElements ( binding . getSignedElements ( ) ) ; setEncryptedElements ( binding . getEncryptedElements ( ) ) ; List < Token > tokens = binding . getTokens ( ) ; for ( Token token : tokens ) { if ( ! isTokenRequired ( token , message ) ) { continue ; } boolean processingFailed = false ; if ( token instanceof UsernameToken ) { if ( ! processUsernameTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SamlToken ) { if ( ! processSAMLTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KerberosToken ) { if ( ! processKerberosTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof X509Token ) { if ( ! processX509Tokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KeyValueToken ) { if ( ! processKeyValueTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SecurityContextToken ) { if ( ! processSCTokens ( ) ) { processingFailed = true ; } } else if ( ! ( token instanceof IssuedToken ) ) { processingFailed = true ; } if ( processingFailed ) { ai . setNotAsserted ( ""The received token does not match the signed supporting token requirement"" ) ; return false ; } } } return true ; }",Smelly
" public Integer create ( PipelineOptions options ) { StreamingDataflowWorkerOptions streamingOptions = options . as ( StreamingDataflowWorkerOptions . class ) ; if ( streamingEngineEnabled ( streamingOptions ) && hasExperiment ( streamingOptions , ""windmill_service_streaming_rpc_batching"" ) ) { return Integer . MAX_VALUE ; } return 1 ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , WriterOptions struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . maxMemory = iprot . readI64 ( ) ; struct . setMaxMemoryIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . latencyMs = iprot . readI64 ( ) ; struct . setLatencyMsIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . timeoutMs = iprot . readI64 ( ) ; struct . setTimeoutMsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . threads = iprot . readI32 ( ) ; struct . setThreadsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . durability = Durability . findByValue ( iprot . readI32 ( ) ) ; struct . setDurabilityIsSet ( true ) ; } }",Smelly
" public void testBeginRowHelp ( ) { assertTrue ( ""-b should say it is inclusive"" , new DeleteManyCommand ( ) . getOptions ( ) . getOption ( ""b"" ) . getDescription ( ) . contains ( ""row (inclusive)"" ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected void handle ( Message msg ) { Exchange exchange = msg . getExchange ( ) ; Bus bus = exchange . get ( Bus . class ) ; Endpoint e = exchange . get ( Endpoint . class ) ; if ( null == e ) { LOG . fine ( ""No endpoint."" ) ; return ; } EndpointInfo ei = e . getEndpointInfo ( ) ; PolicyEngine pe = bus . getExtension ( PolicyEngine . class ) ; if ( null == pe ) { return ; } List < Interceptor < ? extends Message > > interceptors = new ArrayList < Interceptor < ? extends Message > > ( ) ; Collection < Assertion > assertions = new ArrayList < Assertion > ( ) ; Policy p = ( Policy ) msg . getContextualProperty ( PolicyConstants . POLICY_OVERRIDE ) ; if ( p != null ) { EndpointPolicyImpl endpi = new EndpointPolicyImpl ( p ) ; EffectivePolicyImpl effectivePolicy = new EffectivePolicyImpl ( ) ; effectivePolicy . initialise ( endpi , ( PolicyEngineImpl ) pe , true ) ; msg . put ( EffectivePolicy . class , effectivePolicy ) ; PolicyUtils . logPolicy ( LOG , Level . FINEST , ""Using effective policy: "" , effectivePolicy . getPolicy ( ) ) ; interceptors . addAll ( effectivePolicy . getInterceptors ( ) ) ; assertions . addAll ( effectivePolicy . getChosenAlternative ( ) ) ; } else if ( MessageUtils . isRequestor ( msg ) ) { BindingOperationInfo boi = exchange . get ( BindingOperationInfo . class ) ; if ( boi == null ) { Conduit conduit = exchange . getConduit ( msg ) ; EndpointPolicy ep = pe . getClientEndpointPolicy ( ei , conduit ) ; if ( ep != null ) { interceptors . addAll ( ep . getInterceptors ( ) ) ; assertions . addAll ( ep . getVocabulary ( ) ) ; } } else { EffectivePolicy ep = pe . getEffectiveClientResponsePolicy ( ei , boi ) ; if ( ep != null ) { interceptors . addAll ( ep . getInterceptors ( ) ) ; if ( ep . getPolicy ( ) != null ) { msg . put ( AssertionInfoMap . class , new AssertionInfoMap ( ep . getPolicy ( ) ) ) ; msg . getInterceptorChain ( ) . add ( PolicyVerificationInInterceptor . INSTANCE ) ; } } } } else { Destination destination = exchange . getDestination ( ) ; EndpointPolicy ep = pe . getServerEndpointPolicy ( ei , destination ) ; if ( ep != null ) { interceptors . addAll ( ep . getInterceptors ( ) ) ; assertions . addAll ( ep . getVocabulary ( ) ) ; } } for ( Interceptor < ? extends Message > i : interceptors ) { msg . getInterceptorChain ( ) . add ( i ) ; } if ( ! assertions . isEmpty ( ) ) { msg . put ( AssertionInfoMap . class , new AssertionInfoMap ( assertions ) ) ; msg . getInterceptorChain ( ) . add ( PolicyVerificationInInterceptor . INSTANCE ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , OpenTxnRequest struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . num_txns = iprot . readI32 ( ) ; struct . setNum_txnsIsSet ( true ) ; struct . user = iprot . readString ( ) ; struct . setUserIsSet ( true ) ; struct . hostname = iprot . readString ( ) ; struct . setHostnameIsSet ( true ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RemoteInterpreterContext struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 9 ) ; if ( incoming . get ( 0 ) ) { struct . noteId = iprot . readString ( ) ; struct . setNoteIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . paragraphId = iprot . readString ( ) ; struct . setParagraphIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . replName = iprot . readString ( ) ; struct . setReplNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . paragraphTitle = iprot . readString ( ) ; struct . setParagraphTitleIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . paragraphText = iprot . readString ( ) ; struct . setParagraphTextIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . authenticationInfo = iprot . readString ( ) ; struct . setAuthenticationInfoIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . config = iprot . readString ( ) ; struct . setConfigIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . gui = iprot . readString ( ) ; struct . setGuiIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . runners = iprot . readString ( ) ; struct . setRunnersIsSet ( true ) ; } }",Smelly
 public static long calculateMemorySize ( Tuple tuple ) { long total = ClassSize . OBJECT ; for ( Datum datum : tuple . getValues ( ) ) { switch ( datum . type ( ) ) { case NULL_TYPE : total += NULL_DATUM ; break ; case BOOLEAN : total += BOOL_DATUM ; break ; case BIT : total += BIT_DATUM ; break ; case CHAR : total += CHAR_DATUM + datum . size ( ) ; break ; case INT1 : case INT2 : total += INT2_DATUM ; break ; case INT4 : total += INT4_DATUM ; break ; case INT8 : total += INT8_DATUM ; break ; case FLOAT4 : total += FLOAT4_DATUM ; break ; case FLOAT8 : total += FLOAT4_DATUM ; break ; case TEXT : total += TEXT_DATUM + datum . size ( ) ; break ; case BLOB : total += BLOB_DATUM + datum . size ( ) ; break ; case DATE : total += DATE_DATUM ; break ; case TIME : total += TIME_DATUM ; break ; case TIMESTAMP : total += TIMESTAMP_DATUM ; break ; default : break ; } } return total ; },Smelly
 public int hashCode ( ) { int result = Objects . hash ( bytes2 ) ; result = 31 * result + Arrays . hashCode ( bytes1 ) ; return result ; },No
 public Cardinality getCardinality ( ) { return Cardinality . COLLECTION ; },No
" public int getBigTablePosition ( ParseContext parseCtx , JoinOperator joinOp , Set < Integer > bigTableCandidates ) throws SemanticException { int bigTablePos = - 1 ; long maxSize = - 1 ; int numPartitionsCurrentBigTable = 0 ; HiveConf conf = parseCtx . getConf ( ) ; try { List < TableScanOperator > topOps = new ArrayList < TableScanOperator > ( ) ; getListTopOps ( joinOp , topOps ) ; int currentPos = 0 ; for ( TableScanOperator topOp : topOps ) { if ( topOp == null ) { return - 1 ; } if ( ! bigTableCandidates . contains ( currentPos ) ) { currentPos ++ ; continue ; } int numPartitions = 1 ; Table table = parseCtx . getTopToTable ( ) . get ( topOp ) ; long averageSize = 0 ; if ( ! table . isPartitioned ( ) ) { averageSize = getSize ( conf , table ) ; } else { PrunedPartitionList partsList = PartitionPruner . prune ( topOp , parseCtx , null ) ; numPartitions = partsList . getNotDeniedPartns ( ) . size ( ) ; long totalSize = 0 ; for ( Partition part : partsList . getNotDeniedPartns ( ) ) { totalSize += getSize ( conf , part ) ; } averageSize = numPartitions == 0 ? 0 : totalSize / numPartitions ; } if ( averageSize > maxSize ) { maxSize = averageSize ; bigTablePos = currentPos ; numPartitionsCurrentBigTable = numPartitions ; } else if ( averageSize == maxSize ) { if ( numPartitions < numPartitionsCurrentBigTable ) { bigTablePos = currentPos ; numPartitionsCurrentBigTable = numPartitions ; } } currentPos ++ ; } } catch ( HiveException e ) { throw new SemanticException ( e . getMessage ( ) ) ; } return bigTablePos ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" private Class < ? extends Page > getPageTargetClass ( ) { if ( page == null ) { String pageParam = getPageParameters ( ) . get ( PAGE_CLASS ) . toOptionalString ( ) ; if ( pageParam == null ) { if ( log . isErrorEnabled ( ) ) { log . error ( ""key: "" + PAGE_CLASS + "" is null."" ) ; } getRequestCycle ( ) . replaceAllRequestHandlers ( new ErrorCodeRequestHandler ( 404 , ""Could not find sources for the page you requested"" ) ) ; } else if ( ! pageParam . startsWith ( ""org.apache.wicket.examples"" ) ) { if ( log . isErrorEnabled ( ) ) { log . error ( ""user is trying to access class: "" + pageParam + "" which is not in the scope of org.apache.wicket.examples"" ) ; } throw new UnauthorizedInstantiationException ( getClass ( ) ) ; } page = WicketObjects . resolveClass ( pageParam ) ; if ( page == null ) { getRequestCycle ( ) . replaceAllRequestHandlers ( new ErrorCodeRequestHandler ( 404 , ""Could not find sources for the page you requested"" ) ) ; } } return page ; }",No
 public Coder < DestinationT > getDestinationCoder ( ) { return spec . getDestinationCoder ( ) ; },No
" protected String getMatchString ( Map objectModel , Parameters parameters ) { String uri = ObjectModelHelper . getRequest ( objectModel ) . getSitemapURI ( ) ; if ( uri . startsWith ( ""/"" ) ) { uri = uri . substring ( 1 ) ; } return uri ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ApplicationModule struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . appModuleId = iprot . readString ( ) ; struct . setAppModuleIdIsSet ( true ) ; struct . appModuleName = iprot . readString ( ) ; struct . setAppModuleNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . appModuleVersion = iprot . readString ( ) ; struct . setAppModuleVersionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . appModuleDescription = iprot . readString ( ) ; struct . setAppModuleDescriptionIsSet ( true ) ; } }",Smelly
 ChangeLogSearchEngine getChangeLogSearchEngine ( ) ;,No
 protected boolean isSelected ( IModel < ? > model ) { return ( ( Foo ) model . getObject ( ) ) . string == getModelObject ( ) . string ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public void contextualize ( Context context ) throws ContextException { this . context = context ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , HiveObjectRef struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . objectType = HiveObjectType . findByValue ( iprot . readI32 ( ) ) ; struct . setObjectTypeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . dbName = iprot . readString ( ) ; struct . setDbNameIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . objectName = iprot . readString ( ) ; struct . setObjectNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list13 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . partValues = new ArrayList < String > ( _list13 . size ) ; for ( int _i14 = 0 ; _i14 < _list13 . size ; ++ _i14 ) { String _elem15 ; _elem15 = iprot . readString ( ) ; struct . partValues . add ( _elem15 ) ; } } struct . setPartValuesIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . columnName = iprot . readString ( ) ; struct . setColumnNameIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RecoveryStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . runtime = iprot . readI32 ( ) ; struct . setRuntimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . progress = iprot . readDouble ( ) ; struct . setProgressIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , WorkflowStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . state = org . apache . airavata . model . WorkflowState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . timeOfStateChange = iprot . readI64 ( ) ; struct . setTimeOfStateChangeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . reason = iprot . readString ( ) ; struct . setReasonIsSet ( true ) ; } }",Smelly
 public void setConfig ( AccessConfigurationDTO config ) { this . config = config ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public String getLocalizedMessage ( ) { return super . getLocalizedMessage ( ) ; },No
" public void combine ( Iterable < Tuple5 < Integer , Long , String , Long , Integer > > values , Collector < Tuple5 < Integer , Long , String , Long , Integer > > out ) throws Exception { }",No
 public static boolean is203LayoutVersion ( int layoutVersion ) { for ( int lv203 : LAYOUT_VERSIONS_203 ) { if ( lv203 == layoutVersion ) { return true ; } } return false ; },No
" public void read ( String body , @ XQuery ( ""/foo/@id"" ) String foo ) { this . foo = foo ; this . body = body ; LOG . info ( ""read() method called on "" + this ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 public void init ( ) { BundleContext context = bundleContext . getBundle ( 0 ) . getBundleContext ( ) ; ProxyLoginModule . init ( context ) ; },No
 public void setGeneratePublicSalt ( boolean generatePublicSalt ) { this . generatePublicSalt = generatePublicSalt ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void saveSyncErrorInfo ( EntitySyncContext esc ) { if ( esc != null ) { List < Object > errorList = FastList . newInstance ( ) ; esc . saveSyncErrorInfo ( ""ESR_SERVICE_ERROR"" , errorList ) ; this . addErrorMessages ( errorList ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 public static NodeProcessor getDefaultProc ( ) { return new DefaultPCR ( ) ; },Smelly
 private < T > T getRandomSetElement ( Set < T > source ) { int element = _random . nextInt ( source . size ( ) ) ; int i = 0 ; for ( T node : source ) { if ( i == element ) { return node ; } i ++ ; } return null ; },No
" public void test ( ) throws IOException { SdkComponents sdkComponents = SdkComponents . create ( ) ; sdkComponents . registerEnvironment ( Environments . createDockerEnvironment ( ""java"" ) ) ; String coderId = sdkComponents . registerCoder ( original ) ; Components . Builder components = sdkComponents . toComponents ( ) . toBuilder ( ) ; String updatedCoderId = LengthPrefixUnknownCoders . addLengthPrefixedCoder ( coderId , components , replaceWithByteArray ) ; assertEquals ( expected , RehydratedComponents . forComponents ( components . build ( ) ) . getCoder ( updatedCoderId ) ) ; }",No
" public Credential validate ( Credential credential , RequestData data ) throws WSSecurityException { Credential validatedCredential = super . validate ( credential , data ) ; AssertionWrapper token = validatedCredential . getAssertion ( ) ; if ( token == null || token . getSaml2 ( ) == null || ! ""b-issuer"" . equals ( token . getIssuerString ( ) ) ) { throw new WSSecurityException ( WSSecurityException . FAILURE ) ; } return validatedCredential ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TExecuteStatementReq struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . sessionHandle = new TSessionHandle ( ) ; struct . sessionHandle . read ( iprot ) ; struct . setSessionHandleIsSet ( true ) ; struct . statement = iprot . readString ( ) ; struct . setStatementIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TMap _map168 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . confOverlay = new HashMap < String , String > ( 2 * _map168 . size ) ; for ( int _i169 = 0 ; _i169 < _map168 . size ; ++ _i169 ) { String _key170 ; String _val171 ; _key170 = iprot . readString ( ) ; _val171 = iprot . readString ( ) ; struct . confOverlay . put ( _key170 , _val171 ) ; } } struct . setConfOverlayIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . runAsync = iprot . readBool ( ) ; struct . setRunAsyncIsSet ( true ) ; } }",Smelly
" public void setVersionedComponentId ( final String versionedComponentId ) { boolean updated = false ; while ( ! updated ) { final String currentId = this . versionedComponentId . get ( ) ; if ( currentId == null ) { updated = this . versionedComponentId . compareAndSet ( null , versionedComponentId ) ; } else if ( currentId . equals ( versionedComponentId ) ) { return ; } else if ( versionedComponentId == null ) { updated = this . versionedComponentId . compareAndSet ( currentId , null ) ; } else { throw new IllegalStateException ( this + "" is already under version control"" ) ; } } }",Smelly
" public void run ( ) { QuerySchedulingInfo query ; while ( ! isStopped && ! Thread . currentThread ( ) . isInterrupted ( ) ) { try { query = queryQueue . take ( ) ; } catch ( InterruptedException e ) { LOG . warn ( e . getMessage ( ) , e ) ; break ; } int maxAvailable = getResourceCalculator ( ) . computeAvailableContainers ( getMaximumResourceCapability ( ) , getQMMinimumResourceCapability ( ) ) ; if ( assignedQueryMasterMap . size ( ) >= Math . floor ( maxAvailable * MAXIMUM_RUNNING_QM_RATE ) ) { queryQueue . add ( query ) ; synchronized ( this ) { try { this . wait ( 1000 ) ; } catch ( InterruptedException e ) { if ( ! isStopped ) { LOG . fatal ( e . getMessage ( ) , e ) ; return ; } } } } else { QueryInfo queryInfo = getQueryInfo ( query . getQueryId ( ) ) ; List < AllocationResourceProto > allocation = reserve ( query . getQueryId ( ) , createQMResourceRequest ( queryInfo ) ) ; if ( allocation . size ( ) == 0 ) { queryQueue . add ( query ) ; LOG . info ( ""No Available Resources for QueryMaster :"" + queryInfo . getQueryId ( ) + "","" + queryInfo ) ; synchronized ( this ) { try { this . wait ( 100 ) ; } catch ( InterruptedException e ) { LOG . fatal ( e ) ; } } } else { try { boolean started = startQuery ( query . getQueryId ( ) , allocation . get ( 0 ) ) ; if ( ! started ) { queryQueue . put ( query ) ; } else { assignedQueryMasterMap . put ( query . getQueryId ( ) , allocation . get ( 0 ) . getWorkerId ( ) ) ; } } catch ( Throwable t ) { LOG . fatal ( ""Exception during query startup:"" , t ) ; masterContext . getQueryJobManager ( ) . stopQuery ( query . getQueryId ( ) ) ; } } } LOG . info ( ""Running Queries: "" + assignedQueryMasterMap . size ( ) ) ; } }",Smelly
" public void postAnalyze ( HiveSemanticAnalyzerHookContext context , List < Task < ? extends Serializable > > rootTasks ) throws SemanticException { if ( rootTasks . size ( ) == 0 ) { return ; } CreateTableDesc desc = ( ( DDLTask ) rootTasks . get ( rootTasks . size ( ) - 1 ) ) . getWork ( ) . getCreateTblDesc ( ) ; if ( desc == null ) { return ; } Map < String , String > tblProps = desc . getTblProps ( ) ; if ( tblProps == null ) { tblProps = new HashMap < String , String > ( ) ; } String storageHandler = desc . getStorageHandler ( ) ; if ( StringUtils . isEmpty ( storageHandler ) ) { } else { try { HCatStorageHandler storageHandlerInst = HCatUtil . getStorageHandler ( context . getConf ( ) , desc . getStorageHandler ( ) , desc . getSerName ( ) , desc . getInputFormat ( ) , desc . getOutputFormat ( ) ) ; } catch ( IOException e ) { throw new SemanticException ( e ) ; } } if ( desc != null ) { try { Table table = context . getHive ( ) . newTable ( desc . getTableName ( ) ) ; if ( desc . getLocation ( ) != null ) { table . setDataLocation ( new Path ( desc . getLocation ( ) ) ) ; } if ( desc . getStorageHandler ( ) != null ) { table . setProperty ( org . apache . hadoop . hive . metastore . api . hive_metastoreConstants . META_TABLE_STORAGE , desc . getStorageHandler ( ) ) ; } for ( Map . Entry < String , String > prop : tblProps . entrySet ( ) ) { table . setProperty ( prop . getKey ( ) , prop . getValue ( ) ) ; } for ( Map . Entry < String , String > prop : desc . getSerdeProps ( ) . entrySet ( ) ) { table . setSerdeParam ( prop . getKey ( ) , prop . getValue ( ) ) ; } if ( HiveConf . getBoolVar ( context . getConf ( ) , HiveConf . ConfVars . HIVE_AUTHORIZATION_ENABLED ) ) { authorize ( table , Privilege . CREATE ) ; } } catch ( HiveException ex ) { throw new SemanticException ( ex ) ; } } desc . setTblProps ( tblProps ) ; context . getConf ( ) . set ( HCatConstants . HCAT_CREATE_TBL_NAME , tableName ) ; }",Smelly
 public CustomerBeanInterface unmarshal ( CustomerBean v ) throws Exception { return v ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TColumnDesc struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . columnName = iprot . readString ( ) ; struct . setColumnNameIsSet ( true ) ; struct . typeDesc = new TTypeDesc ( ) ; struct . typeDesc . read ( iprot ) ; struct . setTypeDescIsSet ( true ) ; struct . position = iprot . readI32 ( ) ; struct . setPositionIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . comment = iprot . readString ( ) ; struct . setCommentIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected ParserModel loadModel ( InputStream modelIn ) throws IOException , InvalidFormatException { return new ParserModel ( modelIn ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ErrorModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . errorId = iprot . readString ( ) ; struct . setErrorIdIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . actualErrorMessage = iprot . readString ( ) ; struct . setActualErrorMessageIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . userFriendlyMessage = iprot . readString ( ) ; struct . setUserFriendlyMessageIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . transientOrPersistent = iprot . readBool ( ) ; struct . setTransientOrPersistentIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . rootCauseErrorIdList = new ArrayList < String > ( _list5 . size ) ; String _elem6 ; for ( int _i7 = 0 ; _i7 < _list5 . size ; ++ _i7 ) { _elem6 = iprot . readString ( ) ; struct . rootCauseErrorIdList . add ( _elem6 ) ; } } struct . setRootCauseErrorIdListIsSet ( true ) ; } }",No
" public void run ( ) { try { IThreadContext threadContext = ThreadContextFactory . make ( ) ; IJobManager jobManager = JobManagerFactory . make ( threadContext ) ; IRepositoryConnectionManager connectionMgr = RepositoryConnectionManagerFactory . make ( threadContext ) ; while ( true ) { try { long waitTime = 10000L ; Logging . threads . debug ( ""Deleting jobs that need cleanup"" ) ; jobManager . deleteJobsReadyForDelete ( ) ; ManifoldCF . sleep ( waitTime ) ; } catch ( ManifoldCFException e ) { if ( e . getErrorCode ( ) == ManifoldCFException . INTERRUPTED ) break ; if ( e . getErrorCode ( ) == ManifoldCFException . DATABASE_CONNECTION_ERROR ) { Logging . threads . error ( ""Job delete thread aborting and restarting due to database connection reset: "" + e . getMessage ( ) , e ) ; try { ManifoldCF . sleep ( 10000L ) ; } catch ( InterruptedException se ) { break ; } continue ; } Logging . threads . error ( ""Exception tossed: "" + e . getMessage ( ) , e ) ; if ( e . getErrorCode ( ) == ManifoldCFException . SETUP_ERROR ) { System . exit ( 1 ) ; } } catch ( InterruptedException e ) { break ; } catch ( OutOfMemoryError e ) { System . err . println ( ""agents process ran out of memory - shutting down"" ) ; e . printStackTrace ( System . err ) ; System . exit ( - 200 ) ; } catch ( Throwable e ) { Logging . threads . fatal ( ""Error tossed: "" + e . getMessage ( ) , e ) ; } } } catch ( Throwable e ) { System . err . println ( ""agents process could not start - shutting down"" ) ; Logging . threads . fatal ( ""JobDeleteThread initialization error tossed: "" + e . getMessage ( ) , e ) ; System . exit ( - 300 ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void initialize ( ) throws InstantiationException , IllegalAccessException { registerAggregator ( SMC_AGG , DoubleOverwriteAggregator . class ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" PropertyState createNewPropertyState ( PropertyEntry entry , QPropertyDefinition definition , QValue [ ] values , int propertyType ) throws RepositoryException ;",No
 Iterator < IWizardStep > stepIterator ( ) ;,No
" public static URI create ( final ContextURL contextURL ) { StringBuilder result = new StringBuilder ( ) ; if ( contextURL . getServiceRoot ( ) != null ) { result . append ( contextURL . getServiceRoot ( ) ) ; } else if ( contextURL . getODataPath ( ) != null ) { String oDataPath = contextURL . getODataPath ( ) ; char [ ] chars = oDataPath . toCharArray ( ) ; for ( int i = 1 ; i < chars . length - 1 ; i ++ ) { if ( chars [ i ] == '/' && chars [ i - 1 ] != '/' ) { result . append ( ""../"" ) ; } } } result . append ( Constants . METADATA ) ; if ( contextURL . getEntitySetOrSingletonOrType ( ) != null ) { result . append ( '#' ) ; if ( contextURL . isCollection ( ) ) { result . append ( ""Collection("" ) . append ( Encoder . encode ( contextURL . getEntitySetOrSingletonOrType ( ) ) ) . append ( "")"" ) ; } else { result . append ( Encoder . encode ( contextURL . getEntitySetOrSingletonOrType ( ) ) ) ; } } if ( contextURL . getDerivedEntity ( ) != null ) { if ( contextURL . getEntitySetOrSingletonOrType ( ) == null ) { throw new IllegalArgumentException ( ""ContextURL: Derived Type without anything to derive from!"" ) ; } result . append ( '/' ) . append ( Encoder . encode ( contextURL . getDerivedEntity ( ) ) ) ; } if ( contextURL . getKeyPath ( ) != null ) { result . append ( '(' ) . append ( contextURL . getKeyPath ( ) ) . append ( ')' ) ; } if ( contextURL . getNavOrPropertyPath ( ) != null ) { result . append ( '/' ) . append ( contextURL . getNavOrPropertyPath ( ) ) ; } if ( contextURL . getSelectList ( ) != null ) { result . append ( '(' ) . append ( contextURL . getSelectList ( ) ) . append ( ')' ) ; } if ( contextURL . isReference ( ) ) { if ( contextURL . getEntitySetOrSingletonOrType ( ) != null ) { throw new IllegalArgumentException ( ""ContextURL: $ref with Entity Set"" ) ; } if ( contextURL . isCollection ( ) ) { result . append ( '#' ) . append ( ""Collection("" ) . append ( ContextURL . Suffix . REFERENCE . getRepresentation ( ) ) . append ( "")"" ) ; } else { result . append ( '#' ) . append ( ContextURL . Suffix . REFERENCE . getRepresentation ( ) ) ; } } else if ( contextURL . getSuffix ( ) != null ) { if ( contextURL . getEntitySetOrSingletonOrType ( ) == null ) { throw new IllegalArgumentException ( ""ContextURL: Suffix without preceding Entity Set!"" ) ; } result . append ( '/' ) . append ( contextURL . getSuffix ( ) . getRepresentation ( ) ) ; } return URI . create ( result . toString ( ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , terminateExperiment_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" void setValueLengthSafe ( int index , int length ) ;",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public String getValue ( ) { return Short . toString ( ( short ) value ) ; },No
" private void parseClass ( ) throws ParsingException , GrammerException { scanner . nextToken ( ) ; if ( scanner . tokenType ( ) == Attribute ) { parseMajorOrMinor ( ) ; } parseClassSignature ( ) ; parseFields ( ) ; parseMethods ( ) ; parseClassAttributes ( ) ; if ( scanner . tokenType ( ) != Bracket_Right ) { exception ( scanner , ""'}'.expected.here"" ) ; } if ( scanner . nextToken ( ) != EOF ) { exception ( scanner , ""end.of.class.expected.here"" ) ; } javaClass . constantPool = cpl . getConstantPool ( ) ; javaClass . constant_pool_count = javaClass . constantPool . getConstantPoolCount ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public void setNodeStartTime ( Date nodeStartTime ) { this . nodeStartTime = nodeStartTime ; },No
 protected AuthenticationSession getAuthenticationSession ( ) { return authenticationSessionProvider . getAuthenticationSession ( ) ; },No
 protected NodeWritable selectKey ( Triple triple ) { return new NodeWritable ( triple . getPredicate ( ) ) ; },No
" public void write ( Config config ) throws IOException { PrintWriter out = null ; if ( config . configName == null || config . configName . isEmpty ( ) ) { throw new RuntimeException ( ""Config Name is null or empty"" ) ; } String fileName = config . templateName == null || config . templateName . isEmpty ( ) ? config . configName : config . templateName ; if ( ! fileName . endsWith ( "".xml"" ) ) { fileName += "".xml"" ; } try { File file = new File ( fileName ) ; out = new PrintWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , ""UTF-8"" ) ) ; out . println ( ""<?xml version=\""1.0\""?>"" ) ; out . println ( ""<?xml-stylesheet type=\""text/xsl\"" href=\""configuration.xsl\""?>"" ) ; out . println ( ) ; out . println ( ""<!-- WARNING: THIS IS A GENERATED TEMPLATE PURELY FOR DOCUMENTATION PURPOSES"" ) ; out . println ( "" AND SHOULD NOT BE USED AS A CONFIGURATION FILE FOR TEZ -->"" ) ; out . println ( ) ; out . println ( ""<configuration>"" ) ; for ( ConfigProperty configProperty : config . configProperties . values ( ) ) { if ( ! isValidConfigProperty ( configProperty ) ) { continue ; } out . println ( ) ; out . println ( ""  <property>"" ) ; out . println ( ""    <name>"" + configProperty . propertyName + ""</name>"" ) ; if ( configProperty . defaultValue != null && ! configProperty . defaultValue . isEmpty ( ) ) { out . println ( ""    <defaultValue>"" + configProperty . defaultValue + ""</defaultValue>"" ) ; } if ( configProperty . description != null && ! configProperty . description . isEmpty ( ) ) { out . println ( ""    <description>"" + StringEscapeUtils . escapeXml ( configProperty . description ) + ""</description>"" ) ; } if ( configProperty . type != null && ! configProperty . type . isEmpty ( ) ) { out . println ( ""    <type>"" + configProperty . type + ""</type>"" ) ; } if ( configProperty . isUnstable ) { out . println ( ""    <unstable>true</unstable>"" ) ; } if ( configProperty . isEvolving ) { out . println ( ""    <evolving>true</evolving>"" ) ; } if ( configProperty . isPrivate ) { out . println ( ""    <private>true</private>"" ) ; } out . println ( ""  </property>"" ) ; } out . println ( ) ; out . println ( ""</configuration>"" ) ; } finally { if ( out != null ) { out . close ( ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , DiskUsage struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . tables = new ArrayList < String > ( _list5 . size ) ; for ( int _i6 = 0 ; _i6 < _list5 . size ; ++ _i6 ) { String _elem7 ; _elem7 = iprot . readString ( ) ; struct . tables . add ( _elem7 ) ; } } struct . setTablesIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . usage = iprot . readI64 ( ) ; struct . setUsageIsSet ( true ) ; } }",No
" public static NodeInfoWrapper walkExprTree ( String tabAlias , ArrayList < Partition > parts , List < VirtualColumn > vcs , ExprNodeDesc pred ) throws SemanticException { PcrExprProcCtx pprCtx = new PcrExprProcCtx ( tabAlias , parts , vcs ) ; Map < Rule , NodeProcessor > exprRules = new LinkedHashMap < Rule , NodeProcessor > ( ) ; exprRules . put ( new RuleRegExp ( ""R1"" , ExprNodeColumnDesc . class . getName ( ) + ""%"" ) , getColumnProcessor ( ) ) ; exprRules . put ( new RuleRegExp ( ""R2"" , ExprNodeFieldDesc . class . getName ( ) + ""%"" ) , getFieldProcessor ( ) ) ; exprRules . put ( new RuleRegExp ( ""R5"" , ExprNodeGenericFuncDesc . class . getName ( ) + ""%"" ) , getGenericFuncProcessor ( ) ) ; Dispatcher disp = new DefaultRuleDispatcher ( getDefaultExprProcessor ( ) , exprRules , pprCtx ) ; GraphWalker egw = new DefaultGraphWalker ( disp ) ; List < Node > startNodes = new ArrayList < Node > ( ) ; startNodes . add ( pred ) ; HashMap < Node , Object > outputMap = new HashMap < Node , Object > ( ) ; egw . startWalking ( startNodes , outputMap ) ; return ( NodeInfoWrapper ) outputMap . get ( pred ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private static boolean isWrappedStandbyException ( Exception e ) { if ( ! ( e instanceof RemoteException ) ) { return false ; } Exception unwrapped = ( ( RemoteException ) e ) . unwrapRemoteException ( StandbyException . class ) ; return unwrapped instanceof StandbyException ; },No
" public ScriptApply apply ( RutaStream stream , InferenceCrowd crowd ) { BlockApply result = new BlockApply ( this ) ; crowd . beginVisit ( this , result ) ; RuleApply apply = rule . apply ( stream , crowd , true ) ; for ( AbstractRuleMatch < ? extends AbstractRule > eachMatch : apply . getList ( ) ) { if ( eachMatch . matched ( ) ) { List < AnnotationFS > matchedAnnotations = ( ( RuleMatch ) eachMatch ) . getMatchedAnnotations ( null , null ) ; if ( matchedAnnotations == null || matchedAnnotations . isEmpty ( ) ) { continue ; } AnnotationFS each = matchedAnnotations . get ( 0 ) ; if ( each == null ) { continue ; } boolean stop = false ; Type type = ( ( RutaRuleElement ) rule . getRuleElements ( ) . get ( 0 ) ) . getMatcher ( ) . getType ( getParent ( ) == null ? this : getParent ( ) , stream ) ; RutaStream window = stream . getWindowStream ( each , type ) ; for ( RutaStatement element : getElements ( ) ) { if ( stop ) break ; if ( element != null ) { ScriptApply elementApply = element . apply ( window , crowd ) ; if ( elementApply instanceof BlockApply ) { BlockApply ba = ( BlockApply ) elementApply ; if ( ba . getRuleApply ( ) . getApplied ( ) > 0 ) { stop = true ; } } else if ( elementApply instanceof RuleApply ) { RuleApply ra = ( RuleApply ) elementApply ; if ( ra . getApplied ( ) > 0 ) { stop = true ; } } } } } } crowd . endVisit ( this , result ) ; return result ; }",Smelly
 public Collection < Class < ? extends Module > > overrides ( ) { Collection c = Collections . singletonList ( Module5 . class ) ; return c ; },No
 public Integer getId ( ) { return id ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 protected List < ClassInstance > getAllInstances ( ) { List < ClassInstance > result = new ArrayList ( colDefs . size ( ) + 2 ) ; result . add ( sd ) ; result . addAll ( colDefs ) ; result . add ( this ) ; return result ; },No
 protected abstract String getRootName ( T rawRecord ) ;,No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public boolean matches ( Object o ) { if ( ! ( o instanceof RangerAccessRequest ) ) { return false ; } final RangerAccessRequest other = ( RangerAccessRequest ) o ; final boolean clientIpsMatch = ( other . getClientIPAddress ( ) == null && request . getClientIPAddress ( ) == null ) || ( other . getClientIPAddress ( ) != null && request . getClientIPAddress ( ) != null && other . getClientIPAddress ( ) . equals ( request . getClientIPAddress ( ) ) ) ; return other . getResource ( ) . equals ( request . getResource ( ) ) && other . getAccessType ( ) . equals ( request . getAccessType ( ) ) && other . getAction ( ) . equals ( request . getAction ( ) ) && other . getUser ( ) . equals ( request . getUser ( ) ) && clientIpsMatch ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" KeyValueIterator < Windowed < K > , V > fetchAll ( final Instant from , final Instant to ) { return fetchAll ( ApiUtils . validateMillisecondInstant ( from , prepareMillisCheckFailMsgPrefix ( from , ""from"" ) ) , ApiUtils . validateMillisecondInstant ( to , prepareMillisCheckFailMsgPrefix ( to , ""to"" ) ) ) ; }",No
 protected boolean getAscending ( ) { return false ; },No
 public void process ( WatchedEvent event ) { },No
" BaseRobotRules getRobotRules ( Text url , CrawlDatum datum , List < Content > robotsTxtContent ) ;",No
" public void translate ( GBKIntoKeyedWorkItems < K , InputT > transform , TranslationContext context ) { ApexProcessFnOperator < KV < K , InputT > > operator = ApexProcessFnOperator . toKeyedWorkItems ( context . getPipelineOptions ( ) ) ; context . addOperator ( operator , operator . outputPort ) ; context . addStream ( context . getInput ( ) , operator . inputPort ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Index struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 10 ) ; if ( incoming . get ( 0 ) ) { struct . indexName = iprot . readString ( ) ; struct . setIndexNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . indexHandlerClass = iprot . readString ( ) ; struct . setIndexHandlerClassIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . dbName = iprot . readString ( ) ; struct . setDbNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . origTableName = iprot . readString ( ) ; struct . setOrigTableNameIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . createTime = iprot . readI32 ( ) ; struct . setCreateTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . lastAccessTime = iprot . readI32 ( ) ; struct . setLastAccessTimeIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . indexTableName = iprot . readString ( ) ; struct . setIndexTableNameIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . sd = new StorageDescriptor ( ) ; struct . sd . read ( iprot ) ; struct . setSdIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TMap _map232 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . parameters = new HashMap < String , String > ( 2 * _map232 . size ) ; for ( int _i233 = 0 ; _i233 < _map232 . size ; ++ _i233 ) { String _key234 ; String _val235 ; _key234 = iprot . readString ( ) ; _val235 = iprot . readString ( ) ; struct . parameters . put ( _key234 , _val235 ) ; } } struct . setParametersIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . deferredRebuild = iprot . readBool ( ) ; struct . setDeferredRebuildIsSet ( true ) ; } }",No
" private static boolean portNameMatches ( Server s , String portName ) { boolean ret = false ; if ( null == portName || portName . equals ( s . getEndpoint ( ) . getEndpointInfo ( ) . getName ( ) . getLocalPart ( ) ) ) { return true ; } return ret ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public String getBString ( ) { return bString ; },No
" protected void processBeans ( ApplicationContext beanFactory ) { if ( beanFactory == null ) { return ; } String [ ] beanNames = beanFactory . getBeanNamesForType ( type ) ; ConfigurableApplicationContext ctxt = ( ConfigurableApplicationContext ) beanFactory ; for ( int i = 0 ; i < beanNames . length ; i ++ ) { BeanDefinition def = ctxt . getBeanFactory ( ) . getBeanDefinition ( beanNames [ i ] ) ; if ( ! beanFactory . isSingleton ( beanNames [ i ] ) || def . isAbstract ( ) ) { continue ; } try { Collection < ? > ids = null ; PropertyValue pv = def . getPropertyValues ( ) . getPropertyValue ( idsProperty ) ; if ( pv != null ) { Object value = pv . getValue ( ) ; if ( ! ( value instanceof Collection ) ) { throw new RuntimeException ( ""The property "" + idsProperty + "" must be a collection!"" ) ; } if ( value instanceof Mergeable ) { if ( ! ( ( Mergeable ) value ) . isMergeEnabled ( ) ) { ids = ( Collection < ? > ) value ; } } else { ids = ( Collection < ? > ) value ; } } if ( ids == null ) { ids = getIds ( ctxt . getBean ( beanNames [ i ] ) ) ; if ( ids == null ) { continue ; } } if ( ids instanceof ManagedSet || ids instanceof ManagedList ) { List < String > newIds = new ArrayList < String > ( ) ; for ( Iterator < ? > itr = ids . iterator ( ) ; itr . hasNext ( ) ; ) { Object o = itr . next ( ) ; if ( o instanceof TypedStringValue ) { newIds . add ( ( ( TypedStringValue ) o ) . getValue ( ) ) ; } else { newIds . add ( ( String ) o ) ; } } ids = newIds ; } for ( Object id : ids ) { getBeanListForId ( id . toString ( ) ) . add ( beanNames [ i ] ) ; } } catch ( BeanIsAbstractException e ) { continue ; } } processBeans ( ctxt . getParent ( ) ) ; }",Smelly
 protected BrokerService createBroker ( ) throws Exception { BrokerService broker = super . createBroker ( ) ; PersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter ( ) ; broker . setPersistenceAdapter ( persistenceAdapter ) ; return broker ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void run ( SessionState sess , Set < ReadEntity > inputs , Set < WriteEntity > outputs , LineageInfo linfo , UserGroupInformation ugi ) throws Exception { LogHelper console = SessionState . getConsole ( ) ; if ( console == null ) { return ; } if ( sess != null ) { console . printError ( ""POSTHOOK: query: "" + sess . getCmd ( ) . trim ( ) ) ; console . printError ( ""POSTHOOK: type: "" + sess . getCommandType ( ) ) ; } PreExecutePrinter . printEntities ( console , inputs , ""POSTHOOK: Input: "" ) ; PreExecutePrinter . printEntities ( console , outputs , ""POSTHOOK: Output: "" ) ; if ( linfo != null ) { LinkedList < Map . Entry < DependencyKey , Dependency > > entry_list = new LinkedList < Map . Entry < DependencyKey , Dependency > > ( linfo . entrySet ( ) ) ; Collections . sort ( entry_list , new DependencyKeyComp ( ) ) ; Iterator < Map . Entry < DependencyKey , Dependency > > iter = entry_list . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < DependencyKey , Dependency > it = iter . next ( ) ; Dependency dep = it . getValue ( ) ; DependencyKey depK = it . getKey ( ) ; if ( dep == null ) { continue ; } StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""POSTHOOK: Lineage: "" ) ; if ( depK . getDataContainer ( ) . isPartition ( ) ) { Partition part = depK . getDataContainer ( ) . getPartition ( ) ; sb . append ( part . getTableName ( ) ) ; sb . append ( "" PARTITION("" ) ; int i = 0 ; for ( FieldSchema fs : depK . getDataContainer ( ) . getTable ( ) . getPartitionKeys ( ) ) { if ( i != 0 ) { sb . append ( "","" ) ; } sb . append ( fs . getName ( ) + ""="" + part . getValues ( ) . get ( i ++ ) ) ; } sb . append ( "")"" ) ; } else { sb . append ( depK . getDataContainer ( ) . getTable ( ) . getTableName ( ) ) ; } sb . append ( ""."" + depK . getFieldSchema ( ) . getName ( ) + "" "" + dep . getType ( ) + "" "" ) ; sb . append ( ""["" ) ; for ( BaseColumnInfo col : dep . getBaseCols ( ) ) { sb . append ( ""("" + col . getTabAlias ( ) . getTable ( ) . getTableName ( ) + "")"" + col . getTabAlias ( ) . getAlias ( ) + ""."" + col . getColumn ( ) + "", "" ) ; } sb . append ( ""]"" ) ; console . printError ( sb . toString ( ) ) ; } } }",Smelly
 private long getTimeFromCheckpoint ( String name ) throws ParseException { long time ; try { synchronized ( CHECKPOINT ) { time = CHECKPOINT . parse ( name ) . getTime ( ) ; } } catch ( ParseException pe ) { synchronized ( OLD_CHECKPOINT ) { time = OLD_CHECKPOINT . parse ( name ) . getTime ( ) ; } } return time ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TFetchResultsResp struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . status = new TStatus ( ) ; struct . status . read ( iprot ) ; struct . setStatusIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . hasMoreRows = iprot . readBool ( ) ; struct . setHasMoreRowsIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . results = new TRowSet ( ) ; struct . results . read ( iprot ) ; struct . setResultsIsSet ( true ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void shutdown ( ) { synchronized ( mJobs ) { graceful = true ; shutdown = true ; } executor . shutdown ( ) ; },Smelly
" public void stop ( ) { try { client . close ( ) ; } catch ( Exception e ) { LOG . error ( ""Failed to close proxy client "" , e ) ; } }",No
 DataFormatType getDataFormat ( String ref ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , InputDataObjectType struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 11 ) ; if ( incoming . get ( 0 ) ) { struct . value = iprot . readString ( ) ; struct . setValueIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . type = org . apache . airavata . model . application . io . DataType . findByValue ( iprot . readI32 ( ) ) ; struct . setTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . applicationArgument = iprot . readString ( ) ; struct . setApplicationArgumentIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . standardInput = iprot . readBool ( ) ; struct . setStandardInputIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . userFriendlyDescription = iprot . readString ( ) ; struct . setUserFriendlyDescriptionIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . metaData = iprot . readString ( ) ; struct . setMetaDataIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . inputOrder = iprot . readI32 ( ) ; struct . setInputOrderIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . isRequired = iprot . readBool ( ) ; struct . setIsRequiredIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . requiredToAddedToCommandLine = iprot . readBool ( ) ; struct . setRequiredToAddedToCommandLineIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . dataStaged = iprot . readBool ( ) ; struct . setDataStagedIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; } }",Smelly
 public void handleMessage ( Message m ) { m . getInterceptorChain ( ) . suspend ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ScanOptions struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TSet _set41 = new org . apache . thrift . protocol . TSet ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . authorizations = new HashSet < ByteBuffer > ( 2 * _set41 . size ) ; for ( int _i42 = 0 ; _i42 < _set41 . size ; ++ _i42 ) { ByteBuffer _elem43 ; _elem43 = iprot . readBinary ( ) ; struct . authorizations . add ( _elem43 ) ; } } struct . setAuthorizationsIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . range = new Range ( ) ; struct . range . read ( iprot ) ; struct . setRangeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list44 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . columns = new ArrayList < ScanColumn > ( _list44 . size ) ; for ( int _i45 = 0 ; _i45 < _list44 . size ; ++ _i45 ) { ScanColumn _elem46 ; _elem46 = new ScanColumn ( ) ; _elem46 . read ( iprot ) ; struct . columns . add ( _elem46 ) ; } } struct . setColumnsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list47 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . iterators = new ArrayList < IteratorSetting > ( _list47 . size ) ; for ( int _i48 = 0 ; _i48 < _list47 . size ; ++ _i48 ) { IteratorSetting _elem49 ; _elem49 = new IteratorSetting ( ) ; _elem49 . read ( iprot ) ; struct . iterators . add ( _elem49 ) ; } } struct . setIteratorsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . bufferSize = iprot . readI32 ( ) ; struct . setBufferSizeIsSet ( true ) ; } }",Smelly
 public void shouldInjectContainer ( ) { context . checking ( new Expectations ( ) { { one ( mockDomainObject ) . setContainer ( mockContainer ) ; one ( mockDomainObject ) . setMixin ( mockContainer ) ; one ( mockDomainObject ) . setService1 ( mockService1 ) ; one ( mockDomainObject ) . setService2 ( mockService2 ) ; } } ) ; injector . injectServicesInto ( mockDomainObject ) ; },No
" private void updateDeliveryTag ( CuratorFramework curatorClient , String gfacServerName , ProcessSubmitEvent event , MessageContext messageContext ) throws Exception { String experimentId = event . getExperimentId ( ) ; String processId = event . getProcessId ( ) ; long deliveryTag = messageContext . getDeliveryTag ( ) ; String processNodePath = ZKPaths . makePath ( GFacUtils . getExperimentNodePath ( experimentId ) , processId ) ; Stat stat = curatorClient . checkExists ( ) . forPath ( processNodePath ) ; if ( stat != null ) { String deliveryTagPath = ZKPaths . makePath ( processNodePath , ZkConstants . ZOOKEEPER_DELIVERYTAG_NODE ) ; curatorClient . setData ( ) . withVersion ( - 1 ) . forPath ( deliveryTagPath , GFacUtils . longToBytes ( deliveryTag ) ) ; } }",Smelly
" public String toString ( ) { return MoreObjects . toStringHelper ( this ) . add ( ""dispatchThrottlingRateInMsg"" , dispatchThrottlingRateInMsg ) . add ( ""dispatchThrottlingRateInByte"" , dispatchThrottlingRateInByte ) . add ( ""ratePeriodInSecond"" , ratePeriodInSecond ) . toString ( ) ; }",No
 public RexNode visitCall ( RexCall call ) { for ( ; ; ) { call = ( RexCall ) super . visitCall ( call ) ; final RexCall old = call ; call = pushPredicateIntoCase ( call ) ; if ( call == old ) { return call ; } } },No
" SamzaRelTableKeyConverter create ( SystemStream systemStream , Config config ) ;",No
" public void testResettingCounters ( ) throws Exception { HBaseTestingUtility htu = new HBaseTestingUtility ( ) ; Configuration conf = htu . getConfiguration ( ) ; FileSystem fs = FileSystem . get ( conf ) ; byte [ ] table = Bytes . toBytes ( name . getMethodName ( ) ) ; byte [ ] [ ] families = new byte [ ] [ ] { Bytes . toBytes ( ""family1"" ) , Bytes . toBytes ( ""family2"" ) , Bytes . toBytes ( ""family3"" ) } ; int numQualifiers = 10 ; byte [ ] [ ] qualifiers = new byte [ numQualifiers ] [ ] ; for ( int i = 0 ; i < numQualifiers ; i ++ ) qualifiers [ i ] = Bytes . toBytes ( ""qf"" + i ) ; int numRows = 10 ; byte [ ] [ ] rows = new byte [ numRows ] [ ] ; for ( int i = 0 ; i < numRows ; i ++ ) rows [ i ] = Bytes . toBytes ( ""r"" + i ) ; HTableDescriptor htd = new HTableDescriptor ( TableName . valueOf ( table ) ) ; for ( byte [ ] family : families ) htd . addFamily ( new HColumnDescriptor ( family ) ) ; HRegionInfo hri = new HRegionInfo ( htd . getTableName ( ) , null , null , false ) ; String testDir = htu . getDataTestDir ( ) + ""/TestResettingCounters/"" ; Path path = new Path ( testDir ) ; if ( fs . exists ( path ) ) { if ( ! fs . delete ( path , true ) ) { throw new IOException ( ""Failed delete of "" + path ) ; } } HRegion region = HBaseTestingUtility . createRegionAndWAL ( hri , path , conf , htd ) ; try { Increment odd = new Increment ( rows [ 0 ] ) ; odd . setDurability ( Durability . SKIP_WAL ) ; Increment even = new Increment ( rows [ 0 ] ) ; even . setDurability ( Durability . SKIP_WAL ) ; Increment all = new Increment ( rows [ 0 ] ) ; all . setDurability ( Durability . SKIP_WAL ) ; for ( int i = 0 ; i < numQualifiers ; i ++ ) { if ( i % 2 == 0 ) even . addColumn ( families [ 0 ] , qualifiers [ i ] , 1 ) ; else odd . addColumn ( families [ 0 ] , qualifiers [ i ] , 1 ) ; all . addColumn ( families [ 0 ] , qualifiers [ i ] , 1 ) ; } for ( int i = 0 ; i < 5 ; i ++ ) region . increment ( odd , HConstants . NO_NONCE , HConstants . NO_NONCE ) ; region . flush ( true ) ; for ( int i = 0 ; i < 5 ; i ++ ) region . increment ( even , HConstants . NO_NONCE , HConstants . NO_NONCE ) ; Result result = region . increment ( all , HConstants . NO_NONCE , HConstants . NO_NONCE ) ; assertEquals ( numQualifiers , result . size ( ) ) ; Cell [ ] kvs = result . rawCells ( ) ; for ( int i = 0 ; i < kvs . length ; i ++ ) { System . out . println ( kvs [ i ] . toString ( ) ) ; assertTrue ( CellUtil . matchingQualifier ( kvs [ i ] , qualifiers [ i ] ) ) ; assertEquals ( 6 , Bytes . toLong ( CellUtil . cloneValue ( kvs [ i ] ) ) ) ; } } finally { HBaseTestingUtility . closeRegionAndWAL ( region ) ; } HBaseTestingUtility . closeRegionAndWAL ( region ) ; }",Smelly
" public static Test suite ( ) { TestSuite suite = new TestSuite ( ""javax.jcr tests"" ) ; suite . addTestSuite ( RootNodeTest . class ) ; suite . addTestSuite ( NodeReadMethodsTest . class ) ; suite . addTestSuite ( PropertyTypeTest . class ) ; suite . addTestSuite ( NodeDiscoveringNodeTypesTest . class ) ; suite . addTestSuite ( BinaryPropertyTest . class ) ; suite . addTestSuite ( BooleanPropertyTest . class ) ; suite . addTestSuite ( DatePropertyTest . class ) ; suite . addTestSuite ( DoublePropertyTest . class ) ; suite . addTestSuite ( LongPropertyTest . class ) ; suite . addTestSuite ( NamePropertyTest . class ) ; suite . addTestSuite ( PathPropertyTest . class ) ; suite . addTestSuite ( ReferencePropertyTest . class ) ; suite . addTestSuite ( StringPropertyTest . class ) ; suite . addTestSuite ( UndefinedPropertyTest . class ) ; suite . addTestSuite ( NamespaceRegistryReadMethodsTest . class ) ; suite . addTestSuite ( NamespaceRemappingTest . class ) ; suite . addTestSuite ( NodeIteratorTest . class ) ; suite . addTestSuite ( PropertyReadMethodsTest . class ) ; suite . addTestSuite ( RepositoryDescriptorTest . class ) ; suite . addTestSuite ( SessionReadMethodsTest . class ) ; suite . addTestSuite ( WorkspaceReadMethodsTest . class ) ; suite . addTestSuite ( ReferenceableRootNodesTest . class ) ; suite . addTestSuite ( ExportSysViewTest . class ) ; suite . addTestSuite ( ExportDocViewTest . class ) ; suite . addTestSuite ( NameTest . class ) ; suite . addTestSuite ( PathTest . class ) ; suite . addTestSuite ( AddNodeTest . class ) ; suite . addTestSuite ( NamespaceRegistryTest . class ) ; suite . addTestSuite ( ReferencesTest . class ) ; suite . addTestSuite ( SessionTest . class ) ; suite . addTestSuite ( SessionUUIDTest . class ) ; suite . addTestSuite ( NodeTest . class ) ; suite . addTestSuite ( NodeUUIDTest . class ) ; suite . addTestSuite ( NodeOrderableChildNodesTest . class ) ; suite . addTestSuite ( PropertyTest . class ) ; suite . addTestSuite ( SetValueBinaryTest . class ) ; suite . addTestSuite ( SetValueBooleanTest . class ) ; suite . addTestSuite ( SetValueDateTest . class ) ; suite . addTestSuite ( SetValueDecimalTest . class ) ; suite . addTestSuite ( SetValueDoubleTest . class ) ; suite . addTestSuite ( SetValueLongTest . class ) ; suite . addTestSuite ( SetValueReferenceTest . class ) ; suite . addTestSuite ( SetValueStringTest . class ) ; suite . addTestSuite ( SetValueConstraintViolationExceptionTest . class ) ; suite . addTestSuite ( SetValueValueFormatExceptionTest . class ) ; suite . addTestSuite ( SetValueVersionExceptionTest . class ) ; suite . addTestSuite ( SetPropertyBooleanTest . class ) ; suite . addTestSuite ( SetPropertyCalendarTest . class ) ; suite . addTestSuite ( SetPropertyDecimalTest . class ) ; suite . addTestSuite ( SetPropertyDoubleTest . class ) ; suite . addTestSuite ( SetPropertyInputStreamTest . class ) ; suite . addTestSuite ( SetPropertyLongTest . class ) ; suite . addTestSuite ( SetPropertyNodeTest . class ) ; suite . addTestSuite ( SetPropertyStringTest . class ) ; suite . addTestSuite ( SetPropertyValueTest . class ) ; suite . addTestSuite ( SetPropertyConstraintViolationExceptionTest . class ) ; suite . addTestSuite ( SetPropertyAssumeTypeTest . class ) ; suite . addTestSuite ( NodeItemIsModifiedTest . class ) ; suite . addTestSuite ( NodeItemIsNewTest . class ) ; suite . addTestSuite ( PropertyItemIsModifiedTest . class ) ; suite . addTestSuite ( PropertyItemIsNewTest . class ) ; suite . addTestSuite ( NodeAddMixinTest . class ) ; suite . addTestSuite ( NodeCanAddMixinTest . class ) ; suite . addTestSuite ( NodeRemoveMixinTest . class ) ; suite . addTestSuite ( NodeSetPrimaryTypeTest . class ) ; suite . addTestSuite ( WorkspaceCloneReferenceableTest . class ) ; suite . addTestSuite ( WorkspaceCloneSameNameSibsTest . class ) ; suite . addTestSuite ( WorkspaceCloneTest . class ) ; suite . addTestSuite ( WorkspaceCloneVersionableTest . class ) ; suite . addTestSuite ( WorkspaceCopyBetweenWorkspacesReferenceableTest . class ) ; suite . addTestSuite ( WorkspaceCopyBetweenWorkspacesSameNameSibsTest . class ) ; suite . addTestSuite ( WorkspaceCopyBetweenWorkspacesTest . class ) ; suite . addTestSuite ( WorkspaceCopyBetweenWorkspacesVersionableTest . class ) ; suite . addTestSuite ( WorkspaceCopyReferenceableTest . class ) ; suite . addTestSuite ( WorkspaceCopySameNameSibsTest . class ) ; suite . addTestSuite ( WorkspaceCopyTest . class ) ; suite . addTestSuite ( WorkspaceCopyVersionableTest . class ) ; suite . addTestSuite ( WorkspaceMoveReferenceableTest . class ) ; suite . addTestSuite ( WorkspaceMoveSameNameSibsTest . class ) ; suite . addTestSuite ( WorkspaceMoveTest . class ) ; suite . addTestSuite ( WorkspaceMoveVersionableTest . class ) ; suite . addTestSuite ( RepositoryLoginTest . class ) ; suite . addTestSuite ( ImpersonateTest . class ) ; suite . addTestSuite ( CheckPermissionTest . class ) ; suite . addTestSuite ( DocumentViewImportTest . class ) ; suite . addTestSuite ( SerializationTest . class ) ; suite . addTestSuite ( ValueFactoryTest . class ) ; suite . addTestSuite ( GetWeakReferencesTest . class ) ; suite . addTestSuite ( SessionRemoveItemTest . class ) ; suite . addTestSuite ( HasPermissionTest . class ) ; suite . addTestSuite ( WorkspaceTest . class ) ; suite . addTestSuite ( ShareableNodeTest . class ) ; suite . addTestSuite ( RepositoryFactoryTest . class ) ; suite . addTestSuite ( LifecycleTest . class ) ; return suite ; }",Smelly
" public PCollection < Triple < KeyT , ValueT , ScoreT > > expand ( PCollectionList < InputT > inputs ) { final PCollection < Triple < KeyT , ValueT , ScoreT > > extracted = MapElements . named ( ""extract-key-value-score"" ) . of ( PCollectionLists . getOnlyElement ( inputs ) ) . using ( elem -> Triple . of ( getKeyExtractor ( ) . apply ( elem ) , getValueExtractor ( ) . apply ( elem ) , getScoreExtractor ( ) . apply ( elem ) ) , getOutputType ( ) . orElse ( null ) ) . output ( ) ; return ReduceByKey . named ( ""combine-by-key"" ) . of ( extracted ) . keyBy ( Triple :: getFirst , getKeyType ( ) . orElse ( null ) ) . combineBy ( ( Stream < Triple < KeyT , ValueT , ScoreT > > triplets ) -> triplets . reduce ( ( a , b ) -> a . getThird ( ) . compareTo ( b . getThird ( ) ) > 0 ? a : b ) . orElseThrow ( IllegalStateException :: new ) ) . applyIf ( getWindow ( ) . isPresent ( ) , builder -> { @ SuppressWarnings ( ""unchecked"" ) final ReduceByKey . WindowByInternalBuilder < InputT , KeyT , Triple < KeyT , ValueT , ScoreT > > casted = ( ReduceByKey . WindowByInternalBuilder ) builder ; return casted . windowBy ( getWindow ( ) . orElseThrow ( ( ) -> new IllegalStateException ( ""Unable to resolve windowing for TopPerKey expansion."" ) ) ) ; } ) . outputValues ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , UnicoreJobSubmission struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . jobSubmissionInterfaceId = iprot . readString ( ) ; struct . setJobSubmissionInterfaceIdIsSet ( true ) ; struct . securityProtocol = org . apache . airavata . model . data . movement . SecurityProtocol . findByValue ( iprot . readI32 ( ) ) ; struct . setSecurityProtocolIsSet ( true ) ; struct . unicoreEndPointURL = iprot . readString ( ) ; struct . setUnicoreEndPointURLIsSet ( true ) ; }",Smelly
" protected Map < Class < ? > , SupportsCheck > getCheckTable ( ) { return s_supportsChecks ; }",No
 int addNumbers ( @ WebParam @ XmlAttachmentRef DataHandler body ) ;,No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" protected void handle ( Message msg ) { if ( MessageUtils . isRequestor ( msg ) ) { LOG . fine ( ""Is a requestor."" ) ; return ; } Exchange exchange = msg . getExchange ( ) ; assert null != exchange ; BindingOperationInfo boi = exchange . get ( BindingOperationInfo . class ) ; if ( null == boi ) { LOG . fine ( ""No binding operation info."" ) ; return ; } Endpoint e = exchange . get ( Endpoint . class ) ; if ( null == e ) { LOG . fine ( ""No endpoint."" ) ; return ; } EndpointInfo ei = e . getEndpointInfo ( ) ; Bus bus = exchange . get ( Bus . class ) ; PolicyEngine pe = bus . getExtension ( PolicyEngine . class ) ; if ( null == pe ) { return ; } Destination destination = exchange . getDestination ( ) ; Exception ex = exchange . get ( Exception . class ) ; List < Interceptor < ? extends Message > > faultInterceptors = new ArrayList < Interceptor < ? extends Message > > ( ) ; Collection < Assertion > assertions = new ArrayList < Assertion > ( ) ; Policy p = ( Policy ) msg . getContextualProperty ( PolicyConstants . POLICY_OVERRIDE ) ; if ( p != null ) { EndpointPolicyImpl endpi = new EndpointPolicyImpl ( p ) ; EffectivePolicyImpl effectivePolicy = new EffectivePolicyImpl ( ) ; effectivePolicy . initialise ( endpi , ( PolicyEngineImpl ) pe , false , true ) ; PolicyUtils . logPolicy ( LOG , Level . FINEST , ""Using effective policy: "" , effectivePolicy . getPolicy ( ) ) ; faultInterceptors . addAll ( effectivePolicy . getInterceptors ( ) ) ; assertions . addAll ( effectivePolicy . getChosenAlternative ( ) ) ; } else { BindingFaultInfo bfi = getBindingFaultInfo ( msg , ex , boi ) ; if ( bfi == null && msg . get ( FaultMode . class ) != FaultMode . UNCHECKED_APPLICATION_FAULT && msg . get ( FaultMode . class ) != FaultMode . CHECKED_APPLICATION_FAULT ) { return ; } EffectivePolicy effectivePolicy = pe . getEffectiveServerFaultPolicy ( ei , boi , bfi , destination ) ; if ( effectivePolicy != null ) { faultInterceptors . addAll ( effectivePolicy . getInterceptors ( ) ) ; assertions . addAll ( effectivePolicy . getChosenAlternative ( ) ) ; } } for ( Interceptor < ? extends Message > oi : faultInterceptors ) { msg . getInterceptorChain ( ) . add ( oi ) ; LOG . log ( Level . FINE , ""Added interceptor of type {0}"" , oi . getClass ( ) . getSimpleName ( ) ) ; } if ( null != assertions && ! assertions . isEmpty ( ) ) { msg . put ( AssertionInfoMap . class , new AssertionInfoMap ( assertions ) ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void processElement ( ProcessContext c ) throws Exception { Iterable < MutationGroup > mutations = c . element ( ) ; boolean tryIndividual = false ; try { mutationGroupBatchesCounter . inc ( ) ; Iterable < Mutation > batch = Iterables . concat ( mutations ) ; spannerAccessor . getDatabaseClient ( ) . writeAtLeastOnce ( batch ) ; mutationGroupWriteSuccessCounter . inc ( Iterables . size ( mutations ) ) ; return ; } catch ( SpannerException e ) { if ( failureMode == FailureMode . REPORT_FAILURES ) { tryIndividual = true ; } else if ( failureMode == FailureMode . FAIL_FAST ) { throw e ; } else { throw new IllegalArgumentException ( ""Unknown failure mode "" + failureMode ) ; } } if ( tryIndividual ) { for ( MutationGroup mg : mutations ) { try { spannerAccessor . getDatabaseClient ( ) . writeAtLeastOnce ( mg ) ; mutationGroupWriteSuccessCounter . inc ( ) ; } catch ( SpannerException e ) { mutationGroupWriteFailCounter . inc ( ) ; LOG . warn ( ""Failed to write the mutation group: "" + mg , e ) ; c . output ( failedTag , mg ) ; } } } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 final boolean vectorFieldsInOrder ( FieldInfo fi ) { try { if ( lastVectorFieldName != null ) return lastVectorFieldName . compareTo ( fi . name ) < 0 ; else return true ; } finally { lastVectorFieldName = fi . name ; } },No
" private static void throwE ( JsonParser jp , String e ) throws JsonParseException { throw new JsonParseException ( e , jp . getCurrentLocation ( ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , MasterMonitorInfo struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 8 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TMap _map45 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . tableMap = new HashMap < String , TableInfo > ( 2 * _map45 . size ) ; for ( int _i46 = 0 ; _i46 < _map45 . size ; ++ _i46 ) { String _key47 ; TableInfo _val48 ; _key47 = iprot . readString ( ) ; _val48 = new TableInfo ( ) ; _val48 . read ( iprot ) ; struct . tableMap . put ( _key47 , _val48 ) ; } } struct . setTableMapIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list49 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . tServerInfo = new ArrayList < TabletServerStatus > ( _list49 . size ) ; for ( int _i50 = 0 ; _i50 < _list49 . size ; ++ _i50 ) { TabletServerStatus _elem51 ; _elem51 = new TabletServerStatus ( ) ; _elem51 . read ( iprot ) ; struct . tServerInfo . add ( _elem51 ) ; } } struct . setTServerInfoIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map52 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . BYTE , iprot . readI32 ( ) ) ; struct . badTServers = new HashMap < String , Byte > ( 2 * _map52 . size ) ; for ( int _i53 = 0 ; _i53 < _map52 . size ; ++ _i53 ) { String _key54 ; byte _val55 ; _key54 = iprot . readString ( ) ; _val55 = iprot . readByte ( ) ; struct . badTServers . put ( _key54 , _val55 ) ; } } struct . setBadTServersIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . state = MasterState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . goalState = MasterGoalState . findByValue ( iprot . readI32 ( ) ) ; struct . setGoalStateIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . unassignedTablets = iprot . readI32 ( ) ; struct . setUnassignedTabletsIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { { org . apache . thrift . protocol . TSet _set56 = new org . apache . thrift . protocol . TSet ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . serversShuttingDown = new HashSet < String > ( 2 * _set56 . size ) ; for ( int _i57 = 0 ; _i57 < _set56 . size ; ++ _i57 ) { String _elem58 ; _elem58 = iprot . readString ( ) ; struct . serversShuttingDown . add ( _elem58 ) ; } } struct . setServersShuttingDownIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { { org . apache . thrift . protocol . TList _list59 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . deadTabletServers = new ArrayList < DeadServer > ( _list59 . size ) ; for ( int _i60 = 0 ; _i60 < _list59 . size ; ++ _i60 ) { DeadServer _elem61 ; _elem61 = new DeadServer ( ) ; _elem61 . read ( iprot ) ; struct . deadTabletServers . add ( _elem61 ) ; } } struct . setDeadTabletServersIsSet ( true ) ; } }",Smelly
 void stop ( List < Long > bundleIds ) throws MBeanException ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , finishFateOperation_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . sec = new org . apache . accumulo . core . client . impl . thrift . ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } }",Smelly
" protected abstract Format getFormat ( String pattern , Locale locale ) ;",No
" public String getAutoMigrateCubeDestConfig ( ) { return getOptional ( ""kylin.tool.auto-migrate-cube.dest-config"" , """" ) ; }",No
 public static void main ( String [ ] args ) throws Exception { if ( args . length != 0 ) { TestCombineFileInputFormat test = new TestCombineFileInputFormat ( ) ; test . splitRealFiles ( args ) ; } else { TestCombineFileInputFormat test = new TestCombineFileInputFormat ( ) ; test . testSplitPlacement ( ) ; } },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public Map < String , SamplingTestPlugin > otherSamples ( ) { return samples ; }",No
" public void TestOverGuaranteeEviction ( ) { INimbus iNimbus = new TestUtilsForResourceAwareScheduler . INimbusTest ( ) ; Map < String , Number > resourceMap = new HashMap < String , Number > ( ) ; resourceMap . put ( Config . SUPERVISOR_CPU_CAPACITY , 100.0 ) ; resourceMap . put ( Config . SUPERVISOR_MEMORY_CAPACITY_MB , 1000.0 ) ; Map < String , SupervisorDetails > supMap = TestUtilsForResourceAwareScheduler . genSupervisors ( 4 , 4 , resourceMap ) ; Config config = new Config ( ) ; config . putAll ( Utils . readDefaultConfig ( ) ) ; config . put ( Config . RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY , org . apache . storm . scheduler . resource . strategies . eviction . DefaultEvictionStrategy . class . getName ( ) ) ; config . put ( Config . RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY , org . apache . storm . scheduler . resource . strategies . priority . DefaultSchedulingPriorityStrategy . class . getName ( ) ) ; config . put ( Config . TOPOLOGY_SCHEDULER_STRATEGY , org . apache . storm . scheduler . resource . strategies . scheduling . DefaultResourceAwareStrategy . class . getName ( ) ) ; config . put ( Config . TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT , 100.0 ) ; config . put ( Config . TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB , 500 ) ; config . put ( Config . TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB , 500 ) ; Map < String , Map < String , Number > > resourceUserPool = new HashMap < String , Map < String , Number > > ( ) ; resourceUserPool . put ( ""jerry"" , new HashMap < String , Number > ( ) ) ; resourceUserPool . get ( ""jerry"" ) . put ( ""cpu"" , 70.0 ) ; resourceUserPool . get ( ""jerry"" ) . put ( ""memory"" , 700.0 ) ; resourceUserPool . put ( ""bobby"" , new HashMap < String , Number > ( ) ) ; resourceUserPool . get ( ""bobby"" ) . put ( ""cpu"" , 100.0 ) ; resourceUserPool . get ( ""bobby"" ) . put ( ""memory"" , 1000.0 ) ; resourceUserPool . put ( ""derek"" , new HashMap < String , Number > ( ) ) ; resourceUserPool . get ( ""derek"" ) . put ( ""cpu"" , 25.0 ) ; resourceUserPool . get ( ""derek"" ) . put ( ""memory"" , 250.0 ) ; config . put ( Config . RESOURCE_AWARE_SCHEDULER_USER_POOLS , resourceUserPool ) ; Cluster cluster = new Cluster ( iNimbus , supMap , new HashMap < String , SchedulerAssignmentImpl > ( ) , config ) ; TopologyDetails topo1 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-1"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 20 , ""jerry"" ) ; TopologyDetails topo2 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-2"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 20 , ""jerry"" ) ; TopologyDetails topo3 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-3"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 10 , ""bobby"" ) ; TopologyDetails topo4 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-4"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 10 , ""bobby"" ) ; TopologyDetails topo5 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-5"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 29 , ""derek"" ) ; TopologyDetails topo6 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-6"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 10 , ""derek"" ) ; Map < String , TopologyDetails > topoMap = new HashMap < String , TopologyDetails > ( ) ; topoMap . put ( topo1 . getId ( ) , topo1 ) ; topoMap . put ( topo3 . getId ( ) , topo3 ) ; topoMap . put ( topo4 . getId ( ) , topo4 ) ; topoMap . put ( topo5 . getId ( ) , topo5 ) ; Topologies topologies = new Topologies ( topoMap ) ; ResourceAwareScheduler rs = new ResourceAwareScheduler ( ) ; rs . prepare ( config ) ; rs . schedule ( topologies , cluster ) ; for ( TopologyDetails topo : rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesInvalid ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesAttempted ( ) . size ( ) ) ; topoMap . put ( topo6 . getId ( ) , topo6 ) ; topologies = new Topologies ( topoMap ) ; rs . schedule ( topologies , cluster ) ; for ( TopologyDetails topo : rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 1 , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesInvalid ( ) . size ( ) ) ; Assert . assertEquals ( ""correct topology in attempted queue"" , ""topo-5"" , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . iterator ( ) . next ( ) . getName ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesInvalid ( ) . size ( ) ) ; topoMap . put ( topo2 . getId ( ) , topo2 ) ; topologies = new Topologies ( topoMap ) ; rs . schedule ( topologies , cluster ) ; for ( TopologyDetails topo : rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 2 , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesInvalid ( ) . size ( ) ) ; Assert . assertEquals ( ""correct topology in attempted queue"" , ""topo-6"" , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . iterator ( ) . next ( ) . getName ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesInvalid ( ) . size ( ) ) ; }",Smelly
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { Response info = ( Response ) o ; super . looseMarshal ( wireFormat , o , dataOut ) ; dataOut . writeInt ( info . getCorrelationId ( ) ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" private SortedSet < String > getConfusionMatrixTagset ( Map < String , ConfusionMatrixLine > data ) { SortedSet < String > tags = new TreeSet < > ( getMatrixLabelComparator ( data ) ) ; tags . addAll ( data . keySet ( ) ) ; List < String > col = new LinkedList < > ( ) ; for ( String t : tags ) { col . addAll ( data . get ( t ) . line . keySet ( ) ) ; } tags . addAll ( col ) ; return Collections . unmodifiableSortedSet ( tags ) ; }",Smelly
" public String getValue ( ) { return """" + value ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , DataReplicaLocationModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . replicaId = iprot . readString ( ) ; struct . setReplicaIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . productUri = iprot . readString ( ) ; struct . setProductUriIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . replicaName = iprot . readString ( ) ; struct . setReplicaNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . replicaDescription = iprot . readString ( ) ; struct . setReplicaDescriptionIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . lastModifiedTime = iprot . readI64 ( ) ; struct . setLastModifiedTimeIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . validUntilTime = iprot . readI64 ( ) ; struct . setValidUntilTimeIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . replicaLocationCategory = org . apache . airavata . model . data . replica . ReplicaLocationCategory . findByValue ( iprot . readI32 ( ) ) ; struct . setReplicaLocationCategoryIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . replicaPersistentType = org . apache . airavata . model . data . replica . ReplicaPersistentType . findByValue ( iprot . readI32 ( ) ) ; struct . setReplicaPersistentTypeIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . filePath = iprot . readString ( ) ; struct . setFilePathIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { { org . apache . thrift . protocol . TMap _map24 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . replicaMetadata = new HashMap < String , String > ( 2 * _map24 . size ) ; String _key25 ; String _val26 ; for ( int _i27 = 0 ; _i27 < _map24 . size ; ++ _i27 ) { _key25 = iprot . readString ( ) ; _val26 = iprot . readString ( ) ; struct . replicaMetadata . put ( _key25 , _val26 ) ; } } struct . setReplicaMetadataIsSet ( true ) ; } }",Smelly
" public static Map < String , Object > replaceImageToExistImage ( DispatchContext dctx , Map < String , ? extends Object > context ) { LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; Delegator delegator = dctx . getDelegator ( ) ; GenericValue userLogin = ( GenericValue ) context . get ( ""userLogin"" ) ; String imageServerPath = FlexibleStringExpander . expandString ( UtilProperties . getPropertyValue ( ""catalog"" , ""image.management.path"" ) , context ) ; String productId = ( String ) context . get ( ""productId"" ) ; String contentIdExist = ( String ) context . get ( ""contentIdExist"" ) ; String contentIdReplace = ( String ) context . get ( ""contentIdReplace"" ) ; String dataResourceNameExist = ( String ) context . get ( ""dataResourceNameExist"" ) ; String dataResourceNameReplace = ( String ) context . get ( ""dataResourceNameReplace"" ) ; if ( UtilValidate . isNotEmpty ( dataResourceNameExist ) ) { if ( UtilValidate . isNotEmpty ( contentIdReplace ) ) { if ( contentIdExist . equals ( contentIdReplace ) ) { String errMsg = ""Cannot replace because both images are the same image."" ; Debug . logError ( errMsg , module ) ; return ServiceUtil . returnError ( errMsg ) ; } } else { String errMsg = ""Please choose image to replace."" ; Debug . logError ( errMsg , module ) ; return ServiceUtil . returnError ( errMsg ) ; } } else { String errMsg = ""Please choose replacement image."" ; Debug . logError ( errMsg , module ) ; return ServiceUtil . returnError ( errMsg ) ; } try { BufferedImage bufImg = ImageIO . read ( new File ( imageServerPath + ""/"" + productId + ""/"" + dataResourceNameReplace ) ) ; ImageIO . write ( bufImg , ""jpg"" , new File ( imageServerPath + ""/"" + productId + ""/"" + dataResourceNameExist ) ) ; List < GenericValue > contentAssocReplaceList = delegator . findByAnd ( ""ContentAssoc"" , UtilMisc . toMap ( ""contentId"" , contentIdReplace , ""contentAssocTypeId"" , ""IMAGE_THUMBNAIL"" ) , null , false ) ; if ( contentAssocReplaceList . size ( ) > 0 ) { for ( int i = 0 ; i < contentAssocReplaceList . size ( ) ; i ++ ) { GenericValue contentAssocReplace = contentAssocReplaceList . get ( i ) ; List < GenericValue > dataResourceAssocReplaceList = delegator . findByAnd ( ""ContentDataResourceView"" , UtilMisc . toMap ( ""contentId"" , contentAssocReplace . get ( ""contentIdTo"" ) ) , null , false ) ; GenericValue dataResourceAssocReplace = EntityUtil . getFirst ( dataResourceAssocReplaceList ) ; List < GenericValue > contentAssocExistList = delegator . findByAnd ( ""ContentAssoc"" , UtilMisc . toMap ( ""contentId"" , contentIdExist , ""contentAssocTypeId"" , ""IMAGE_THUMBNAIL"" , ""mapKey"" , contentAssocReplace . get ( ""mapKey"" ) ) , null , false ) ; GenericValue contentAssocExist = EntityUtil . getFirst ( contentAssocExistList ) ; List < GenericValue > dataResourceAssocExistList = delegator . findByAnd ( ""ContentDataResourceView"" , UtilMisc . toMap ( ""contentId"" , contentAssocExist . get ( ""contentIdTo"" ) ) , null , false ) ; GenericValue dataResourceAssocExist = EntityUtil . getFirst ( dataResourceAssocExistList ) ; if ( UtilValidate . isNotEmpty ( dataResourceAssocExist ) ) { BufferedImage bufImgAssocReplace = ImageIO . read ( new File ( imageServerPath + ""/"" + productId + ""/"" + dataResourceAssocReplace . get ( ""drDataResourceName"" ) ) ) ; ImageIO . write ( bufImgAssocReplace , ""jpg"" , new File ( imageServerPath + ""/"" + productId + ""/"" + dataResourceAssocExist . get ( ""drDataResourceName"" ) ) ) ; } else { BufferedImage bufImgAssocReplace = ImageIO . read ( new File ( imageServerPath + ""/"" + productId + ""/"" + dataResourceAssocReplace . get ( ""drDataResourceName"" ) ) ) ; ImageIO . write ( bufImgAssocReplace , ""jpg"" , new File ( imageServerPath + ""/"" + productId + ""/"" + dataResourceNameExist . substring ( 0 , dataResourceNameExist . length ( ) - 4 ) + ""-"" + contentAssocReplace . get ( ""mapKey"" ) + "".jpg"" ) ) ; } } } List < GenericValue > productContentList = delegator . findByAnd ( ""ProductContent"" , UtilMisc . toMap ( ""productId"" , productId , ""contentId"" , contentIdReplace , ""productContentTypeId"" , ""IMAGE"" ) , null , false ) ; GenericValue productContent = EntityUtil . getFirst ( productContentList ) ; if ( productContent != null ) { Map < String , Object > productContentCtx = FastMap . newInstance ( ) ; productContentCtx . put ( ""productId"" , productId ) ; productContentCtx . put ( ""contentId"" , contentIdReplace ) ; productContentCtx . put ( ""productContentTypeId"" , ""IMAGE"" ) ; productContentCtx . put ( ""fromDate"" , productContent . get ( ""fromDate"" ) ) ; productContentCtx . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""removeProductContentAndImageFile"" , productContentCtx ) ; } } catch ( Exception e ) { String errMsg = ""Cannot replace image."" ; Debug . logError ( errMsg , module ) ; return ServiceUtil . returnError ( errMsg ) ; } String successMsg = ""Replace image successfully."" ; return ServiceUtil . returnSuccess ( successMsg ) ; }",Smelly
 void onMessage ( Message message ) throws Exception ;,Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" private static < T > T uncheckedClone ( Coder < T > coder , T value ) { try { return CoderUtils . clone ( coder , value ) ; } catch ( CoderException e ) { throw new RuntimeException ( e ) ; } }",No
" public void dump ( Writer writer ) throws IOException { if ( xml instanceof SaxBuffer ) { writer . write ( ""[XMLizable] Begin nested SaxBuffer\n"" ) ; ( ( SaxBuffer ) xml ) . dump ( writer ) ; writer . write ( ""[XMLizable] End nested SaxBuffer\n"" ) ; } else { writer . write ( ""[XMLizable] xml="" + xml + ""\n"" ) ; } }",No
" public WriteResult expand ( PCollection < KV < DestinationT , TableRow > > input ) { return ( triggeringFrequency != null ) ? expandTriggered ( input ) : expandUntriggered ( input ) ; }",No
 public String getPrevCollectionName ( ) { return null ; },No
 public boolean shouldProcessURL ( String URL ) { return true ; },No
 public Enumeration getInitParameterNames ( ) { return null ; },No
" public final void multiLineFileTest ( ) throws IOException { consumer = Mockito . mock ( PushSource . class ) ; Mockito . doNothing ( ) . when ( consumer ) . consume ( ( Record < byte [ ] > ) any ( Record . class ) ) ; Map < String , Object > map = new HashMap < String , Object > ( ) ; map . put ( ""inputDirectory"" , TMP_DIR ) ; try { generateFiles ( 1 , 10 ) ; listingThread = new FileListingThread ( FileSourceConfig . load ( map ) , workQueue , inProcess , recentlyProcessed ) ; consumerThread = new FileConsumerThread ( consumer , workQueue , inProcess , recentlyProcessed ) ; executor . execute ( listingThread ) ; executor . execute ( consumerThread ) ; Thread . sleep ( 2000 ) ; for ( File produced : producedFiles ) { verify ( workQueue , times ( 1 ) ) . offer ( produced ) ; verify ( inProcess , times ( 1 ) ) . add ( produced ) ; verify ( inProcess , times ( 1 ) ) . remove ( produced ) ; verify ( recentlyProcessed , times ( 1 ) ) . add ( produced ) ; } verify ( workQueue , times ( 1 ) ) . offer ( any ( File . class ) ) ; verify ( workQueue , atLeast ( 1 ) ) . take ( ) ; verify ( inProcess , times ( 1 ) ) . add ( any ( File . class ) ) ; verify ( inProcess , times ( 1 ) ) . remove ( any ( File . class ) ) ; verify ( recentlyProcessed , times ( 1 ) ) . add ( any ( File . class ) ) ; verify ( consumer , times ( 10 ) ) . consume ( ( Record < byte [ ] > ) any ( Record . class ) ) ; } catch ( InterruptedException | ExecutionException e ) { fail ( ""Unable to generate files"" + e . getLocalizedMessage ( ) ) ; } }",Smelly
 protected Log getLog ( ) { return log ; },Smelly
 public List < CrawlDatum > update ( CrawlDatum ... values ) { return update ( Arrays . asList ( values ) ) ; },No
" public UnboundedSource < T , ? > getCurrentSource ( ) { return TestUnboundedSource . this ; }",No
" public static Path getTaskAttemptDir ( TaskAttemptId quid ) { Path workDir = StorageUtil . concatPath ( ExecutionBlockContext . getBaseInputDir ( quid . getTaskId ( ) . getExecutionBlockId ( ) ) , String . valueOf ( quid . getTaskId ( ) . getId ( ) ) , String . valueOf ( quid . getId ( ) ) ) ; return workDir ; }",Smelly
 List < CoderProvider > getCoderProviders ( ) ;,No
" public static GenericHelper getHelper ( GenericHelperInfo helperInfo ) { GenericHelper helper = helperCache . get ( helperInfo . getHelperFullName ( ) ) ; if ( helper == null ) { synchronized ( GenericHelperFactory . class ) { helper = helperCache . get ( helperInfo . getHelperFullName ( ) ) ; if ( helper == null ) { try { Datasource datasourceInfo = EntityConfigUtil . getDatasource ( helperInfo . getHelperBaseName ( ) ) ; if ( datasourceInfo == null ) { throw new IllegalStateException ( ""Could not find datasource definition with name "" + helperInfo . getHelperBaseName ( ) ) ; } String helperClassName = datasourceInfo . getHelperClass ( ) ; Class < ? > helperClass = null ; if ( UtilValidate . isNotEmpty ( helperClassName ) ) { try { ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; helperClass = loader . loadClass ( helperClassName ) ; } catch ( ClassNotFoundException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } } Class < ? > [ ] paramTypes = new Class < ? > [ ] { GenericHelperInfo . class } ; Object [ ] params = new Object [ ] { helperInfo } ; java . lang . reflect . Constructor < ? > helperConstructor = null ; if ( helperClass != null ) { try { helperConstructor = helperClass . getConstructor ( paramTypes ) ; } catch ( NoSuchMethodException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } } try { helper = ( GenericHelper ) helperConstructor . newInstance ( params ) ; } catch ( IllegalAccessException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } catch ( InstantiationException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } catch ( java . lang . reflect . InvocationTargetException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } if ( helper != null ) helperCache . put ( helperInfo . getHelperFullName ( ) , helper ) ; } catch ( SecurityException e ) { Debug . logError ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class: "" + e . toString ( ) ) ; } } } } return helper ; }",Smelly
 public int sayHi ( Currency tickerSymbol ) { return 100 ; },No
" public String getWelcomePlain ( ) { StringBuffer text = new StringBuffer ( ) ; text . append ( tika . toString ( ) ) ; text . append ( ""\n"" ) ; text . append ( ""For endpoints, please see "" ) ; text . append ( DOCS_URL ) ; text . append ( ""\n\n"" ) ; for ( Endpoint e : identifyEndpoints ( ) ) { text . append ( e . httpMethod ) ; text . append ( "" "" ) ; text . append ( e . path ) ; text . append ( ""\n"" ) ; for ( String produces : e . produces ) { text . append ( "" => "" ) ; text . append ( produces ) ; text . append ( ""\n"" ) ; } } return text . toString ( ) ; }",No
 public void setLink ( final Link link ) { this . link = link ; },No
 public static < E > ListIterator < E > emptyListIterator ( ) { return INSTANCE ; },No
 public void end ( final String name ) { AnnotationVisitor av = ( AnnotationVisitor ) pop ( ) ; if ( av != null ) { av . visitEnd ( ) ; } },No
" public Response getTypesByFilter ( @ Context HttpServletRequest request , @ QueryParam ( ""type"" ) String typeCategory , @ QueryParam ( ""supertype"" ) String supertype , @ QueryParam ( ""notsupertype"" ) String notsupertype ) throws AtlasBaseException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""==> TypesResource.getTypesByFilter({}, {}, {})"" , typeCategory , supertype , notsupertype ) ; } AtlasPerfTracer perf = null ; if ( AtlasPerfTracer . isPerfTraceEnabled ( PERF_LOG ) ) { perf = AtlasPerfTracer . getPerfTracer ( PERF_LOG , ""TypesResource.getTypesByFilter("" + typeCategory + "", "" + supertype + "", "" + notsupertype + "")"" ) ; } JSONObject response = new JSONObject ( ) ; try { List < String > result = TypeConverterUtil . getTypeNames ( typesREST . getTypeDefHeaders ( request ) ) ; response . put ( AtlasClient . RESULTS , new JSONArray ( result ) ) ; response . put ( AtlasClient . COUNT , result . size ( ) ) ; response . put ( AtlasClient . REQUEST_ID , Servlets . getRequestId ( ) ) ; return Response . ok ( response ) . build ( ) ; } catch ( AtlasBaseException e ) { LOG . warn ( ""TypesREST exception: {} {}"" , e . getClass ( ) . getSimpleName ( ) , e . getMessage ( ) ) ; throw new WebApplicationException ( Servlets . getErrorResponse ( e ) ) ; } catch ( WebApplicationException e ) { LOG . error ( ""Unable to get types list"" , e ) ; throw e ; } catch ( Throwable e ) { LOG . error ( ""Unable to get types list"" , e ) ; throw new WebApplicationException ( Servlets . getErrorResponse ( e , Response . Status . INTERNAL_SERVER_ERROR ) ) ; } finally { AtlasPerfTracer . log ( perf ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""<== TypesResource.getTypesByFilter({}, {}, {})"" , typeCategory , supertype , notsupertype ) ; } } }",Smelly
 private Set < ByteSequence > newCFSet ( String ... cfs ) { HashSet < ByteSequence > cfSet = new HashSet < > ( ) ; for ( String cf : cfs ) { cfSet . add ( new ArrayByteSequence ( cf ) ) ; } return cfSet ; },No
 protected HttpEntity createRequestEntity ( HttpServletRequest request ) throws IOException { return null ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , MultiScanResult struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list45 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . results = new ArrayList < TKeyValue > ( _list45 . size ) ; for ( int _i46 = 0 ; _i46 < _list45 . size ; ++ _i46 ) { TKeyValue _elem47 ; _elem47 = new TKeyValue ( ) ; _elem47 . read ( iprot ) ; struct . results . add ( _elem47 ) ; } } struct . setResultsIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TMap _map48 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRUCT , org . apache . thrift . protocol . TType . LIST , iprot . readI32 ( ) ) ; struct . failures = new HashMap < TKeyExtent , List < TRange > > ( 2 * _map48 . size ) ; for ( int _i49 = 0 ; _i49 < _map48 . size ; ++ _i49 ) { TKeyExtent _key50 ; List < TRange > _val51 ; _key50 = new TKeyExtent ( ) ; _key50 . read ( iprot ) ; { org . apache . thrift . protocol . TList _list52 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; _val51 = new ArrayList < TRange > ( _list52 . size ) ; for ( int _i53 = 0 ; _i53 < _list52 . size ; ++ _i53 ) { TRange _elem54 ; _elem54 = new TRange ( ) ; _elem54 . read ( iprot ) ; _val51 . add ( _elem54 ) ; } } struct . failures . put ( _key50 , _val51 ) ; } } struct . setFailuresIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list55 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . fullScans = new ArrayList < TKeyExtent > ( _list55 . size ) ; for ( int _i56 = 0 ; _i56 < _list55 . size ; ++ _i56 ) { TKeyExtent _elem57 ; _elem57 = new TKeyExtent ( ) ; _elem57 . read ( iprot ) ; struct . fullScans . add ( _elem57 ) ; } } struct . setFullScansIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . partScan = new TKeyExtent ( ) ; struct . partScan . read ( iprot ) ; struct . setPartScanIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . partNextKey = new TKey ( ) ; struct . partNextKey . read ( iprot ) ; struct . setPartNextKeyIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . partNextKeyInclusive = iprot . readBool ( ) ; struct . setPartNextKeyInclusiveIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . more = iprot . readBool ( ) ; struct . setMoreIsSet ( true ) ; } }",Smelly
" public void testToMultimapDoFn ( ) throws Exception { Coder < IntervalWindow > windowCoder = IntervalWindow . getCoder ( ) ; DoFnTester < KV < Integer , Iterable < KV < IntervalWindow , WindowedValue < KV < Long , Long > > > > > , IsmRecord < WindowedValue < TransformedMap < Long , Iterable < WindowedValue < Long > > , Iterable < Long > > > > > doFnTester = DoFnTester . of ( new BatchViewOverrides . BatchViewAsMultimap . ToMultimapDoFn < Long , Long , IntervalWindow > ( windowCoder ) ) ; IntervalWindow windowA = new IntervalWindow ( new Instant ( 0 ) , new Instant ( 10 ) ) ; IntervalWindow windowB = new IntervalWindow ( new Instant ( 10 ) , new Instant ( 20 ) ) ; IntervalWindow windowC = new IntervalWindow ( new Instant ( 20 ) , new Instant ( 30 ) ) ; Iterable < KV < Integer , Iterable < KV < IntervalWindow , WindowedValue < KV < Long , Long > > > > > > inputElements = ImmutableList . of ( KV . of ( 1 , ( Iterable < KV < IntervalWindow , WindowedValue < KV < Long , Long > > > > ) ImmutableList . of ( KV . of ( windowA , WindowedValue . of ( KV . of ( 1L , 11L ) , new Instant ( 3 ) , windowA , PaneInfo . NO_FIRING ) ) , KV . of ( windowA , WindowedValue . of ( KV . of ( 1L , 11L ) , new Instant ( 3 ) , windowA , PaneInfo . NO_FIRING ) ) , KV . of ( windowA , WindowedValue . of ( KV . of ( 1L , 12L ) , new Instant ( 5 ) , windowA , PaneInfo . NO_FIRING ) ) , KV . of ( windowA , WindowedValue . of ( KV . of ( 2L , 21L ) , new Instant ( 7 ) , windowA , PaneInfo . NO_FIRING ) ) , KV . of ( windowB , WindowedValue . of ( KV . of ( 2L , 21L ) , new Instant ( 13 ) , windowB , PaneInfo . NO_FIRING ) ) , KV . of ( windowB , WindowedValue . of ( KV . of ( 3L , 31L ) , new Instant ( 15 ) , windowB , PaneInfo . NO_FIRING ) ) ) ) , KV . of ( 2 , ( Iterable < KV < IntervalWindow , WindowedValue < KV < Long , Long > > > > ) ImmutableList . of ( KV . of ( windowC , WindowedValue . of ( KV . of ( 4L , 41L ) , new Instant ( 25 ) , windowC , PaneInfo . NO_FIRING ) ) ) ) ) ; List < IsmRecord < WindowedValue < TransformedMap < Long , Iterable < WindowedValue < Long > > , Iterable < Long > > > > > output = doFnTester . processBundle ( inputElements ) ; assertEquals ( 3 , output . size ( ) ) ; Map < Long , Iterable < Long > > outputMap ; outputMap = output . get ( 0 ) . getValue ( ) . getValue ( ) ; assertEquals ( 2 , outputMap . size ( ) ) ; assertThat ( outputMap . get ( 1L ) , containsInAnyOrder ( 11L , 11L , 12L ) ) ; assertThat ( outputMap . get ( 2L ) , containsInAnyOrder ( 21L ) ) ; outputMap = output . get ( 1 ) . getValue ( ) . getValue ( ) ; assertEquals ( 2 , outputMap . size ( ) ) ; assertThat ( outputMap . get ( 2L ) , containsInAnyOrder ( 21L ) ) ; assertThat ( outputMap . get ( 3L ) , containsInAnyOrder ( 31L ) ) ; outputMap = output . get ( 2 ) . getValue ( ) . getValue ( ) ; assertEquals ( 1 , outputMap . size ( ) ) ; assertThat ( outputMap . get ( 4L ) , containsInAnyOrder ( 41L ) ) ; }",No
 public void setMappedSuperclassData ( String mappedSuperclassData ) { this . mappedSuperclassData = mappedSuperclassData ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Operator struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . operatorId = iprot . readString ( ) ; struct . setOperatorIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . operatorType = OperatorType . findByValue ( iprot . readI32 ( ) ) ; struct . setOperatorTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map36 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . operatorAttributes = new HashMap < String , String > ( 2 * _map36 . size ) ; for ( int _i37 = 0 ; _i37 < _map36 . size ; ++ _i37 ) { String _key38 ; String _val39 ; _key38 = iprot . readString ( ) ; _val39 = iprot . readString ( ) ; struct . operatorAttributes . put ( _key38 , _val39 ) ; } } struct . setOperatorAttributesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map40 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . operatorCounters = new HashMap < String , Long > ( 2 * _map40 . size ) ; for ( int _i41 = 0 ; _i41 < _map40 . size ; ++ _i41 ) { String _key42 ; long _val43 ; _key42 = iprot . readString ( ) ; _val43 = iprot . readI64 ( ) ; struct . operatorCounters . put ( _key42 , _val43 ) ; } } struct . setOperatorCountersIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . done = iprot . readBool ( ) ; struct . setDoneIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . started = iprot . readBool ( ) ; struct . setStartedIsSet ( true ) ; } }",Smelly
" public void setLastStoredSequenceId ( long l ) { auditProducerSequenceIds = true ; if ( connectionContext . isNetworkConnection ( ) ) { brokerService = connectionContext . getBroker ( ) . getBrokerService ( ) ; isNetworkProducer = true ; } lastSendSequenceNumber . set ( l ) ; LOG . debug ( ""last stored sequence id set: "" + l ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" < S , R > CoprocessorServiceBuilder < S , R > coprocessorService ( Function < RpcChannel , S > stubMaker , ServiceCaller < S , R > callable , CoprocessorCallback < R > callback ) ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void permute ( List < SqlNode > selectItems , List < Map . Entry < String , RelDataType > > fields ) { if ( trivial ) { return ; } final List < SqlNode > oldSelectItems = ImmutableList . copyOf ( selectItems ) ; selectItems . clear ( ) ; final List < Map . Entry < String , RelDataType > > oldFields = ImmutableList . copyOf ( fields ) ; fields . clear ( ) ; for ( ImmutableIntList source : sources ) { final int p0 = source . get ( 0 ) ; Map . Entry < String , RelDataType > field = oldFields . get ( p0 ) ; final String name = field . getKey ( ) ; RelDataType type = field . getValue ( ) ; SqlNode selectItem = oldSelectItems . get ( p0 ) ; for ( int p1 : Util . skip ( source ) ) { final Map . Entry < String , RelDataType > field1 = oldFields . get ( p1 ) ; final SqlNode selectItem1 = oldSelectItems . get ( p1 ) ; final RelDataType type1 = field1 . getValue ( ) ; final boolean nullable = type . isNullable ( ) && type1 . isNullable ( ) ; final RelDataType type2 = SqlTypeUtil . leastRestrictiveForComparison ( typeFactory , type , type1 ) ; selectItem = SqlStdOperatorTable . AS . createCall ( SqlParserPos . ZERO , SqlStdOperatorTable . COALESCE . createCall ( SqlParserPos . ZERO , maybeCast ( selectItem , type , type2 ) , maybeCast ( selectItem1 , type1 , type2 ) ) , new SqlIdentifier ( name , SqlParserPos . ZERO ) ) ; type = typeFactory . createTypeWithNullability ( type2 , nullable ) ; } fields . add ( Pair . of ( name , type ) ) ; selectItems . add ( selectItem ) ; } }",Smelly
" public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""sasl_ssf="" + strength ) ; String whoClauseToString = super . toString ( ) ; if ( whoClauseToString . length ( ) > 0 ) { sb . append ( "" "" ) ; sb . append ( whoClauseToString ) ; } return sb . toString ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" private static DisruptorQueue createQueue ( String name , int queueSize ) { return new DisruptorQueue ( name , ProducerType . MULTI , queueSize , 0L , 1 , 1L , ""test"" , ""test"" , 1000 , 1000 ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected void doFlush ( final PersistenceChanges changes , final TransactionItems items ) { final Map < Integer , URI > responses = new HashMap < Integer , URI > ( ) ; int index = 0 ; for ( Map . Entry < ODataBatchableRequest , EntityInvocationHandler > entry : changes . getChanges ( ) . entrySet ( ) ) { index ++ ; final ODataRequest request = ODataRequest . class . cast ( entry . getKey ( ) ) ; final ODataResponse response ; try { String uri = request . getURI ( ) . toASCIIString ( ) ; if ( uri . startsWith ( ""$"" ) ) { int slashIndex = uri . indexOf ( '/' ) ; final Integer toBeReplaced = Integer . valueOf ( uri . substring ( 1 , slashIndex < 0 ? uri . length ( ) : slashIndex ) ) ; if ( responses . containsKey ( toBeReplaced ) ) { uri = uri . replace ( ""$"" + toBeReplaced , responses . get ( toBeReplaced ) . toASCIIString ( ) ) ; request . setURI ( URI . create ( uri ) ) ; } } if ( ODataStreamedRequest . class . isAssignableFrom ( request . getClass ( ) ) ) { response = ( ( ODataStreamedRequest < ? , ? > ) request ) . payloadManager ( ) . getResponse ( ) ; } else { response = ( ( ODataBasicRequest < ? > ) request ) . execute ( ) ; } if ( entry . getValue ( ) != null && response instanceof ODataEntityCreateResponse && ( response . getStatusCode ( ) == 201 || response . getStatusCode ( ) == 204 ) ) { if ( response . getStatusCode ( ) == 201 ) { entry . getValue ( ) . setEntity ( ( ( ODataEntityCreateResponse < ? > ) response ) . getBody ( ) ) ; responses . put ( index , entry . getValue ( ) . getEntityURI ( ) ) ; LOG . debug ( ""Upgrade created object '{}'"" , entry . getValue ( ) ) ; } else { entry . getValue ( ) . applyChanges ( ) ; responses . put ( index , null ) ; } } else if ( entry . getValue ( ) != null && response instanceof ODataEntityUpdateResponse && ( response . getStatusCode ( ) == 200 || response . getStatusCode ( ) == 204 ) ) { if ( response . getStatusCode ( ) == 200 ) { entry . getValue ( ) . setEntity ( ( ( ODataEntityUpdateResponse < ? > ) response ) . getBody ( ) ) ; responses . put ( index , entry . getValue ( ) . getEntityURI ( ) ) ; LOG . debug ( ""Upgrade updated object '{}'"" , entry . getValue ( ) ) ; } else { entry . getValue ( ) . applyChanges ( ) ; responses . put ( index , null ) ; } } else { responses . put ( index , null ) ; } } catch ( ODataRuntimeException e ) { LOG . error ( ""While performing {}"" , entry . getKey ( ) . getURI ( ) , e ) ; throw new ODataFlushException ( 0 , Collections . singletonList ( new ODataResponseError ( e , index , request ) ) ) ; } } }",Smelly
" public void onAuthenticationSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) throws ServletException , IOException { RangerSessionFixationProtectionStrategy rangerSessionFixationProtectionStrategy = new RangerSessionFixationProtectionStrategy ( ) ; rangerSessionFixationProtectionStrategy . onAuthentication ( authentication , request , response ) ; WebAuthenticationDetails details = ( WebAuthenticationDetails ) authentication . getDetails ( ) ; String remoteAddress = details != null ? details . getRemoteAddress ( ) : """" ; String sessionId = details != null ? details . getSessionId ( ) : """" ; boolean isValidUser = sessionMgr . isValidXAUser ( authentication . getName ( ) ) ; String rangerAuthenticationMethod = PropertiesUtil . getProperty ( ""ranger.authentication.method"" , ""NONE"" ) ; if ( ! isValidUser && ! ""NONE"" . equalsIgnoreCase ( rangerAuthenticationMethod ) ) { xUserMgr . createServiceConfigUser ( authentication . getName ( ) ) ; isValidUser = sessionMgr . isValidXAUser ( authentication . getName ( ) ) ; } response . setContentType ( ""application/json;charset=UTF-8"" ) ; response . setHeader ( ""Cache-Control"" , ""no-cache"" ) ; response . setHeader ( ""X-Frame-Options"" , ""DENY"" ) ; VXResponse vXResponse = new VXResponse ( ) ; if ( ! isValidUser ) { sessionMgr . processFailureLogin ( XXAuthSession . AUTH_STATUS_USER_NOT_FOUND , XXAuthSession . AUTH_TYPE_PASSWORD , authentication . getName ( ) , remoteAddress , sessionId ) ; authentication . setAuthenticated ( false ) ; vXResponse . setStatusCode ( HttpServletResponse . SC_PRECONDITION_FAILED ) ; vXResponse . setMsgDesc ( ""Auth Succeeded but user is not synced yet for "" + authentication . getName ( ) ) ; response . setStatus ( HttpServletResponse . SC_PRECONDITION_FAILED ) ; response . getWriter ( ) . write ( jsonUtil . writeObjectAsString ( vXResponse ) ) ; logger . info ( ""Auth Succeeded but user is not synced yet for "" + authentication . getName ( ) ) ; } else { String ajaxRequestHeader = request . getHeader ( ""X-Requested-With"" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""commence() X-Requested-With="" + ajaxRequestHeader ) ; } if ( ajaxRequestHeader != null && ""XMLHttpRequest"" . equalsIgnoreCase ( ajaxRequestHeader ) ) { String jsonResp = """" ; try { vXResponse . setStatusCode ( HttpServletResponse . SC_OK ) ; vXResponse . setMsgDesc ( ""Login Successful"" ) ; response . setStatus ( HttpServletResponse . SC_OK ) ; jsonResp = jsonUtil . writeObjectAsString ( vXResponse ) ; response . getWriter ( ) . write ( jsonResp ) ; } catch ( IOException e ) { logger . info ( ""Error while writing JSON in HttpServletResponse"" ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""Sending login success response : "" + jsonResp ) ; } clearAuthenticationAttributes ( request ) ; } else { String jsonResp = """" ; try { vXResponse . setStatusCode ( HttpServletResponse . SC_OK ) ; vXResponse . setMsgDesc ( ""Login Successful"" ) ; response . setStatus ( HttpServletResponse . SC_OK ) ; jsonResp = jsonUtil . writeObjectAsString ( vXResponse ) ; response . getWriter ( ) . write ( jsonResp ) ; } catch ( IOException e ) { logger . info ( ""Error while writing JSON in HttpServletResponse"" ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""Sending login success response : "" + jsonResp ) ; } } } }",Smelly
 public void setId ( String id ) { this . id = id ; },No
" public void acceptVisit ( CriteriaExpressionVisitor visitor ) { Expressions . acceptVisit ( visitor , this , _args ) ; }",No
