Code,Smelly
" void showUsage ( ) { HelpFormatter formater = new HelpFormatter ( ) ; formater . printHelp ( ""perfTester"" , options ) ; }",No
" public void testTaggingDecodingOption ( ) throws IOException { Type1 aType1 = new Type1 ( ) ; aType1 . decode ( TYPE1_EXPECTED_BYTES ) ; assertThat ( aType1 . getValue ( ) ) . isEqualTo ( TEST_STRING ) ; aType1 = new Type1 ( ) ; aType1 . taggedDecode ( TYPE2_EXPECTED_BYTES , TaggingOption . newImplicitAppSpecific ( 3 ) ) ; assertThat ( aType1 . getValue ( ) ) . isEqualTo ( TEST_STRING ) ; Type2 aType2 = new Type2 ( ) ; aType2 . taggedDecode ( TYPE3_EXPECTED_BYTES , TaggingOption . newExplicitContextSpecific ( 2 ) ) ; assertThat ( aType2 . getValue ( ) . getValue ( ) ) . isEqualTo ( TEST_STRING ) ; Type3 aType3 = new Type3 ( ) ; aType3 . taggedDecode ( TYPE4_EXPECTED_BYTES , TaggingOption . newImplicitAppSpecific ( 7 ) ) ; assertThat ( aType3 . getValue ( ) . getValue ( ) . getValue ( ) ) . isEqualTo ( TEST_STRING ) ; aType2 = new Type2 ( ) ; aType2 . taggedDecode ( TYPE5_EXPECTED_BYTES , TaggingOption . newImplicitContextSpecific ( 2 ) ) ; assertThat ( aType2 . getValue ( ) . getValue ( ) ) . isEqualTo ( TEST_STRING ) ; }",Smelly
" public void testGenericPDFTranscoder ( ) throws Exception { Transcoder transcoder = createTranscoder ( ) ; File svgFile = new File ( getBaseDir ( ) , ""test/resources/fop/svg/text.svg"" ) ; InputStream in = new java . io . FileInputStream ( svgFile ) ; try { TranscoderInput input = new TranscoderInput ( in ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; try { TranscoderOutput output = new TranscoderOutput ( out ) ; transcoder . transcode ( input , output ) ; } finally { out . close ( ) ; } assertTrue ( ""Some output expected"" , out . size ( ) > 0 ) ; } finally { in . close ( ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; Message info = ( Message ) object ; info . setProducerId ( createProducerId ( ""ProducerId:1"" ) ) ; info . setDestination ( createActiveMQDestination ( ""Destination:2"" ) ) ; info . setTransactionId ( createTransactionId ( ""TransactionId:3"" ) ) ; info . setOriginalDestination ( createActiveMQDestination ( ""OriginalDestination:4"" ) ) ; info . setMessageId ( createMessageId ( ""MessageId:5"" ) ) ; info . setOriginalTransactionId ( createTransactionId ( ""OriginalTransactionId:6"" ) ) ; info . setGroupID ( ""GroupID:7"" ) ; info . setGroupSequence ( 1 ) ; info . setCorrelationId ( ""CorrelationId:8"" ) ; info . setPersistent ( true ) ; info . setExpiration ( 1 ) ; info . setPriority ( ( byte ) 1 ) ; info . setReplyTo ( createActiveMQDestination ( ""ReplyTo:9"" ) ) ; info . setTimestamp ( 2 ) ; info . setType ( ""Type:10"" ) ; { byte data [ ] = ""Content:11"" . getBytes ( ) ; info . setContent ( new org . apache . activemq . util . ByteSequence ( data , 0 , data . length ) ) ; } { byte data [ ] = ""MarshalledProperties:12"" . getBytes ( ) ; info . setMarshalledProperties ( new org . apache . activemq . util . ByteSequence ( data , 0 , data . length ) ) ; } info . setDataStructure ( createDataStructure ( ""DataStructure:13"" ) ) ; info . setTargetConsumerId ( createConsumerId ( ""TargetConsumerId:14"" ) ) ; info . setCompressed ( false ) ; info . setRedeliveryCounter ( 2 ) ; { BrokerId value [ ] = new BrokerId [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { value [ i ] = createBrokerId ( ""BrokerPath:15"" ) ; } info . setBrokerPath ( value ) ; } info . setArrival ( 3 ) ; info . setUserID ( ""UserID:16"" ) ; info . setRecievedByDFBridge ( true ) ; info . setDroppable ( false ) ; { BrokerId value [ ] = new BrokerId [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { value [ i ] = createBrokerId ( ""Cluster:17"" ) ; } info . setCluster ( value ) ; } info . setBrokerInTime ( 4 ) ; info . setBrokerOutTime ( 5 ) ; }",Smelly
 protected String getCallMethod ( final CallRunner task ) { RpcCall call = task . getRpcCall ( ) ; if ( call != null && call . getMethod ( ) != null ) { return call . getMethod ( ) . getName ( ) ; } return null ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private void endReport ( Sink sink ) { sink . section1_ ( ) ; sink . body_ ( ) ; sink . flush ( ) ; sink . close ( ) ; },No
" protected Text convertEdgeToLine ( I sourceId , V sourceValue , Edge < I , E > edge ) throws IOException { StringBuilder msg = new StringBuilder ( ) ; if ( reverseOutput ) { msg . append ( edge . getValue ( ) . toString ( ) ) ; msg . append ( delimiter ) ; msg . append ( edge . getTargetVertexId ( ) . toString ( ) ) ; msg . append ( delimiter ) ; msg . append ( sourceId . toString ( ) ) ; } else { msg . append ( sourceId . toString ( ) ) ; msg . append ( delimiter ) ; msg . append ( edge . getTargetVertexId ( ) . toString ( ) ) ; msg . append ( delimiter ) ; msg . append ( edge . getValue ( ) . toString ( ) ) ; } return new Text ( msg . toString ( ) ) ; }",Smelly
 public String getMimeType ( ) { return MimeConstants . MIME_PNG ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 void setExecutionModeForBatch ( ExecutionMode executionMode ) ;,No
" TopicSession getSession ( ) throws NamingException , JMSException ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TI16Value struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . value = iprot . readI16 ( ) ; struct . setValueIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 protected long getCurrentOffset ( ) { return getCurrentBlockOffset ( ) ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , finishFateOperation_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . sec = new org . apache . accumulo . core . client . impl . thrift . ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public String [ ] getContext ( Parse [ ] constituents , int index ) { List < String > features = new ArrayList < > ( 100 ) ; int ps = constituents . length ; Collection < Parse > punct2s = null ; Collection < Parse > punct_2s = null ; Parse p_2 = null ; if ( index - 2 >= 0 ) { p_2 = constituents [ index - 2 ] ; } Parse p_1 = null ; if ( index - 1 >= 0 ) { p_1 = constituents [ index - 1 ] ; punct_2s = p_1 . getPreviousPunctuationSet ( ) ; } Parse p0 = constituents [ index ] ; Collection < Parse > punct_1s = p0 . getPreviousPunctuationSet ( ) ; Collection < Parse > punct1s = p0 . getNextPunctuationSet ( ) ; Parse p1 = null ; if ( index + 1 < ps ) { p1 = constituents [ index + 1 ] ; punct2s = p1 . getNextPunctuationSet ( ) ; } Parse p2 = null ; if ( index + 2 < ps ) { p2 = constituents [ index + 2 ] ; } boolean u_2 = true ; boolean u_1 = true ; boolean u0 = true ; boolean u1 = true ; boolean u2 = true ; boolean b_2_1 = true ; boolean b_10 = true ; boolean b01 = true ; boolean b12 = true ; boolean t_2_10 = true ; boolean t_101 = true ; boolean t012 = true ; if ( dict != null ) { if ( p_2 != null ) { unigram [ 0 ] = p_2 . getHead ( ) . getCoveredText ( ) ; u_2 = dict . contains ( new StringList ( unigram ) ) ; } if ( p2 != null ) { unigram [ 0 ] = p2 . getHead ( ) . getCoveredText ( ) ; u2 = dict . contains ( new StringList ( unigram ) ) ; } unigram [ 0 ] = p0 . getHead ( ) . getCoveredText ( ) ; u0 = dict . contains ( new StringList ( unigram ) ) ; if ( p_2 != null && p_1 != null ) { bigram [ 0 ] = p_2 . getHead ( ) . getCoveredText ( ) ; bigram [ 1 ] = p_1 . getHead ( ) . getCoveredText ( ) ; b_2_1 = dict . contains ( new StringList ( bigram ) ) ; trigram [ 0 ] = p_2 . getHead ( ) . getCoveredText ( ) ; trigram [ 1 ] = p_1 . getHead ( ) . getCoveredText ( ) ; trigram [ 2 ] = p0 . getHead ( ) . getCoveredText ( ) ; t_2_10 = dict . contains ( new StringList ( trigram ) ) ; } if ( p_1 != null && p1 != null ) { trigram [ 0 ] = p_1 . getHead ( ) . getCoveredText ( ) ; trigram [ 1 ] = p0 . getHead ( ) . getCoveredText ( ) ; trigram [ 2 ] = p1 . getHead ( ) . getCoveredText ( ) ; t_101 = dict . contains ( new StringList ( trigram ) ) ; } if ( p_1 != null ) { unigram [ 0 ] = p_1 . getHead ( ) . getCoveredText ( ) ; u_1 = dict . contains ( new StringList ( unigram ) ) ; b_2_1 = b_2_1 && u_1 & u_2 ; t_2_10 = t_2_10 && u_1 & u_2 & u0 ; t_101 = t_101 && u_1 & u0 && u1 ; bigram [ 0 ] = p_1 . getHead ( ) . getCoveredText ( ) ; bigram [ 1 ] = p0 . getHead ( ) . getCoveredText ( ) ; b_10 = dict . contains ( new StringList ( bigram ) ) && u_1 && u0 ; } if ( p1 != null && p2 != null ) { bigram [ 0 ] = p1 . getHead ( ) . getCoveredText ( ) ; bigram [ 1 ] = p2 . getHead ( ) . getCoveredText ( ) ; b12 = dict . contains ( new StringList ( bigram ) ) ; trigram [ 0 ] = p0 . getHead ( ) . getCoveredText ( ) ; trigram [ 1 ] = p1 . getHead ( ) . getCoveredText ( ) ; trigram [ 2 ] = p2 . getHead ( ) . getCoveredText ( ) ; t012 = dict . contains ( new StringList ( trigram ) ) ; } if ( p1 != null ) { unigram [ 0 ] = p1 . getHead ( ) . getCoveredText ( ) ; u1 = dict . contains ( new StringList ( unigram ) ) ; b12 = b12 && u1 && u2 ; t012 = t012 && u1 && u2 && u0 ; t_101 = t_101 && u0 && u_1 && u1 ; bigram [ 0 ] = p0 . getHead ( ) . getCoveredText ( ) ; bigram [ 1 ] = p1 . getHead ( ) . getCoveredText ( ) ; b01 = dict . contains ( new StringList ( bigram ) ) ; b01 = b01 && u0 && u1 ; } } String consp_2 = cons ( p_2 , - 2 ) ; String consp_1 = cons ( p_1 , - 1 ) ; String consp0 = cons ( p0 , 0 ) ; String consp1 = cons ( p1 , 1 ) ; String consp2 = cons ( p2 , 2 ) ; String consbop_2 = consbo ( p_2 , - 2 ) ; String consbop_1 = consbo ( p_1 , - 1 ) ; String consbop0 = consbo ( p0 , 0 ) ; String consbop1 = consbo ( p1 , 1 ) ; String consbop2 = consbo ( p2 , 2 ) ; Cons c_2 = new Cons ( consp_2 , consbop_2 , - 2 , u_2 ) ; Cons c_1 = new Cons ( consp_1 , consbop_1 , - 1 , u_1 ) ; Cons c0 = new Cons ( consp0 , consbop0 , 0 , u0 ) ; Cons c1 = new Cons ( consp1 , consbop1 , 1 , u1 ) ; Cons c2 = new Cons ( consp2 , consbop2 , 2 , u2 ) ; features . add ( ""default"" ) ; if ( u0 ) features . add ( consp0 ) ; features . add ( consbop0 ) ; if ( u_2 ) features . add ( consp_2 ) ; features . add ( consbop_2 ) ; if ( u_1 ) features . add ( consp_1 ) ; features . add ( consbop_1 ) ; if ( u1 ) features . add ( consp1 ) ; features . add ( consbop1 ) ; if ( u2 ) features . add ( consp2 ) ; features . add ( consbop2 ) ; cons2 ( features , c0 , c1 , punct1s , b01 ) ; cons2 ( features , c_1 , c0 , punct_1s , b_10 ) ; cons3 ( features , c0 , c1 , c2 , punct1s , punct2s , t012 , b01 , b12 ) ; cons3 ( features , c_2 , c_1 , c0 , punct_2s , punct_1s , t_2_10 , b_2_1 , b_10 ) ; cons3 ( features , c_1 , c0 , c1 , punct_1s , punct1s , t_101 , b_10 , b01 ) ; String p0Tag = p0 . getType ( ) ; if ( p0Tag . equals ( ""-RRB-"" ) ) { for ( int pi = index - 1 ; pi >= 0 ; pi -- ) { Parse p = constituents [ pi ] ; if ( p . getType ( ) . equals ( ""-LRB-"" ) ) { features . add ( ""bracketsmatch"" ) ; break ; } if ( p . getLabel ( ) . startsWith ( Parser . START ) ) { break ; } } } if ( p0Tag . equals ( ""-RCB-"" ) ) { for ( int pi = index - 1 ; pi >= 0 ; pi -- ) { Parse p = constituents [ pi ] ; if ( p . getType ( ) . equals ( ""-LCB-"" ) ) { features . add ( ""bracketsmatch"" ) ; break ; } if ( p . getLabel ( ) . startsWith ( Parser . START ) ) { break ; } } } if ( p0Tag . equals ( ""''"" ) ) { for ( int pi = index - 1 ; pi >= 0 ; pi -- ) { Parse p = constituents [ pi ] ; if ( p . getType ( ) . equals ( ""``"" ) ) { features . add ( ""quotesmatch"" ) ; break ; } if ( p . getLabel ( ) . startsWith ( Parser . START ) ) { break ; } } } if ( p0Tag . equals ( ""'"" ) ) { for ( int pi = index - 1 ; pi >= 0 ; pi -- ) { Parse p = constituents [ pi ] ; if ( p . getType ( ) . equals ( ""`"" ) ) { features . add ( ""quotesmatch"" ) ; break ; } if ( p . getLabel ( ) . startsWith ( Parser . START ) ) { break ; } } } if ( p0Tag . equals ( "","" ) ) { for ( int pi = index - 1 ; pi >= 0 ; pi -- ) { Parse p = constituents [ pi ] ; if ( p . getType ( ) . equals ( "","" ) ) { features . add ( ""iscomma"" ) ; break ; } if ( p . getLabel ( ) . startsWith ( Parser . START ) ) { break ; } } } if ( p0Tag . equals ( ""."" ) && index == ps - 1 ) { for ( int pi = index - 1 ; pi >= 0 ; pi -- ) { Parse p = constituents [ pi ] ; if ( p . getLabel ( ) . startsWith ( Parser . START ) ) { if ( pi == 0 ) { features . add ( ""endofsentence"" ) ; } break ; } } } return features . toArray ( new String [ features . size ( ) ] ) ; }",Smelly
" public static boolean equals ( Object object1 , Object object2 ) { if ( object1 == object2 ) { return true ; } if ( ( object1 == null ) || ( object2 == null ) ) { return false ; } return object1 . equals ( object2 ) ; }",No
" public static QueryPath deserialize ( DataInputStream din ) throws IOException { String cfName = din . readUTF ( ) ; ByteBuffer scName = ByteBufferUtil . readWithShortLength ( din ) ; ByteBuffer cName = ByteBufferUtil . readWithShortLength ( din ) ; return new QueryPath ( cfName . isEmpty ( ) ? null : cfName , scName . remaining ( ) == 0 ? null : scName , cName . remaining ( ) == 0 ? null : cName ) ; }",No
" private static final void checkBiggerEqualZero ( long n ) { if ( n < 0L ) { throw new IllegalArgumentException ( ""Keys and values must be >= 0"" ) ; } }",No
" protected void handle ( Message msg ) { Exchange exchange = msg . getExchange ( ) ; Bus bus = exchange . get ( Bus . class ) ; Endpoint e = exchange . get ( Endpoint . class ) ; if ( null == e ) { LOG . fine ( ""No endpoint."" ) ; return ; } EndpointInfo ei = e . getEndpointInfo ( ) ; PolicyEngine pe = bus . getExtension ( PolicyEngine . class ) ; if ( null == pe ) { return ; } List < Interceptor < ? extends Message > > interceptors = new ArrayList < Interceptor < ? extends Message > > ( ) ; Collection < Assertion > assertions = new ArrayList < Assertion > ( ) ; Policy p = ( Policy ) msg . getContextualProperty ( PolicyConstants . POLICY_OVERRIDE ) ; if ( p != null ) { EndpointPolicyImpl endpi = new EndpointPolicyImpl ( p ) ; EffectivePolicyImpl effectivePolicy = new EffectivePolicyImpl ( ) ; effectivePolicy . initialise ( endpi , ( PolicyEngineImpl ) pe , true ) ; msg . put ( EffectivePolicy . class , effectivePolicy ) ; PolicyUtils . logPolicy ( LOG , Level . FINEST , ""Using effective policy: "" , effectivePolicy . getPolicy ( ) ) ; interceptors . addAll ( effectivePolicy . getInterceptors ( ) ) ; assertions . addAll ( effectivePolicy . getChosenAlternative ( ) ) ; } else if ( MessageUtils . isRequestor ( msg ) ) { BindingOperationInfo boi = exchange . get ( BindingOperationInfo . class ) ; if ( boi == null ) { Conduit conduit = exchange . getConduit ( msg ) ; EndpointPolicy ep = pe . getClientEndpointPolicy ( ei , conduit ) ; if ( ep != null ) { interceptors . addAll ( ep . getInterceptors ( ) ) ; assertions . addAll ( ep . getVocabulary ( ) ) ; } } else { EffectivePolicy ep = pe . getEffectiveClientResponsePolicy ( ei , boi ) ; if ( ep != null ) { interceptors . addAll ( ep . getInterceptors ( ) ) ; if ( ep . getPolicy ( ) != null ) { msg . put ( AssertionInfoMap . class , new AssertionInfoMap ( ep . getPolicy ( ) ) ) ; msg . getInterceptorChain ( ) . add ( PolicyVerificationInInterceptor . INSTANCE ) ; } } } } else { Destination destination = exchange . getDestination ( ) ; EndpointPolicy ep = pe . getServerEndpointPolicy ( ei , destination ) ; if ( ep != null ) { interceptors . addAll ( ep . getInterceptors ( ) ) ; assertions . addAll ( ep . getVocabulary ( ) ) ; } } for ( Interceptor < ? extends Message > i : interceptors ) { msg . getInterceptorChain ( ) . add ( i ) ; } if ( ! assertions . isEmpty ( ) ) { msg . put ( AssertionInfoMap . class , new AssertionInfoMap ( assertions ) ) ; msg . getInterceptorChain ( ) . add ( PolicyVerificationInInterceptor . INSTANCE ) ; } }",Smelly
 public int hashCode ( ) { return node . hashCode ( ) ^ hashLink ; },No
" private HashSet < String > getRows ( Scanner scanner ) { HashSet < String > rows = new HashSet < > ( ) ; for ( Entry < Key , Value > entry : scanner ) { rows . add ( entry . getKey ( ) . getRow ( ) . toString ( ) ) ; } return rows ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; RemoveSubscriptionInfo info = ( RemoveSubscriptionInfo ) object ; info . setConnectionId ( createConnectionId ( ""ConnectionId:1"" ) ) ; info . setSubscriptionName ( ""SubcriptionName:2"" ) ; info . setClientId ( ""ClientId:3"" ) ; }",No
" public ChaosMonkey build ( ) { Action [ ] actions1 = new Action [ ] { new RestartRandomRsExceptMetaAction ( 60000 ) , new RestartActiveMasterAction ( 5000 ) , new RollingBatchRestartRsExceptMetaAction ( 5000 , 1.0f , 2 ) , new ForceBalancerAction ( ) , new RestartRandomDataNodeAction ( 60000 ) , new RestartRandomZKNodeAction ( 60000 ) } ; Action [ ] actions2 = new Action [ ] { new DumpClusterStatusAction ( ) } ; return new PolicyBasedChaosMonkey ( util , new CompositeSequentialPolicy ( new DoActionsOncePolicy ( 60 * 1000 , actions1 ) , new PeriodicRandomActionPolicy ( 60 * 1000 , actions1 ) ) , new PeriodicRandomActionPolicy ( 60 * 1000 , actions2 ) ) ; }",No
" public void fileaccess_50 ( ) { BlockAccess file = make ( ) ; Block b1 = data ( file , 10 ) ; Block b2 = data ( file , 20 ) ; file . write ( b1 ) ; file . write ( b2 ) ; Block b1a = file . read ( b1 . getId ( ) ) ; Block b2a = file . read ( b2 . getId ( ) ) ; assertNotSame ( b1a , b1 ) ; assertNotSame ( b2a , b2 ) ; sameValue ( b1 , b1a ) ; sameValue ( b2 , b2a ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TTableSchema struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; { org . apache . thrift . protocol . TList _list43 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . columns = new ArrayList < TColumnDesc > ( _list43 . size ) ; for ( int _i44 = 0 ; _i44 < _list43 . size ; ++ _i44 ) { TColumnDesc _elem45 ; _elem45 = new TColumnDesc ( ) ; _elem45 . read ( iprot ) ; struct . columns . add ( _elem45 ) ; } } struct . setColumnsIsSet ( true ) ; }",No
 public double end ( ) { return 0 ; },No
" public Option [ ] config ( ) { return options ( composite ( super . config ( ) ) , features ( maven ( ) . groupId ( ""org.ops4j.pax.cdi"" ) . artifactId ( ""pax-cdi-features"" ) . versionAsInProject ( ) . type ( ""xml"" ) . classifier ( ""features"" ) ) ) ; }",No
" public void testCreatedAdapter_AutoExplicit ( ) throws Exception { final DbAdapter adapter = mock ( JdbcAdapter . class ) ; when ( adapter . createTable ( any ( DbEntity . class ) ) ) . thenReturn ( ""XXXXX"" ) ; when ( adapter . unwrap ( ) ) . thenReturn ( adapter ) ; List < DbAdapterDetector > detectors = new ArrayList < > ( ) ; detectors . add ( md -> adapter ) ; MockConnection connection = new MockConnection ( ) ; MockDataSource dataSource = new MockDataSource ( ) ; dataSource . setupConnection ( connection ) ; Module testModule = binder -> { ServerModule . contributeProperties ( binder ) ; ServerModule . contributePkGenerators ( binder ) ; binder . bind ( PkGenerator . class ) . to ( JdbcPkGenerator . class ) ; binder . bind ( PkGeneratorFactoryProvider . class ) . to ( PkGeneratorFactoryProvider . class ) ; binder . bind ( ClassLoaderManager . class ) . to ( DefaultClassLoaderManager . class ) ; binder . bind ( JdbcEventLogger . class ) . to ( Slf4jJdbcEventLogger . class ) ; binder . bind ( AdhocObjectFactory . class ) . to ( DefaultAdhocObjectFactory . class ) ; binder . bind ( RuntimeProperties . class ) . to ( DefaultRuntimeProperties . class ) ; binder . bind ( BatchTranslatorFactory . class ) . toInstance ( mock ( BatchTranslatorFactory . class ) ) ; } ; Injector injector = DIBootstrap . createInjector ( testModule ) ; DefaultDbAdapterFactory factory = new DefaultDbAdapterFactory ( detectors ) ; injector . injectMembers ( factory ) ; DataNodeDescriptor nodeDescriptor = new DataNodeDescriptor ( ) ; nodeDescriptor . setAdapterType ( AutoAdapter . class . getName ( ) ) ; DbAdapter createdAdapter = factory . createAdapter ( nodeDescriptor , dataSource ) ; assertTrue ( createdAdapter instanceof AutoAdapter ) ; assertEquals ( ""XXXXX"" , createdAdapter . createTable ( new DbEntity ( ""Test"" ) ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TColumn struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . columnFamily = iprot . readBinary ( ) ; struct . setColumnFamilyIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . columnQualifier = iprot . readBinary ( ) ; struct . setColumnQualifierIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . columnVisibility = iprot . readBinary ( ) ; struct . setColumnVisibilityIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , finishFateOperation_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . sec = new org . apache . accumulo . core . client . impl . thrift . ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , ApplicationInterfaceDescription struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . applicationInterfaceId = iprot . readString ( ) ; struct . setApplicationInterfaceIdIsSet ( true ) ; struct . applicationName = iprot . readString ( ) ; struct . setApplicationNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . applicationDescription = iprot . readString ( ) ; struct . setApplicationDescriptionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list15 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . applicationModules = new ArrayList < String > ( _list15 . size ) ; String _elem16 ; for ( int _i17 = 0 ; _i17 < _list15 . size ; ++ _i17 ) { _elem16 = iprot . readString ( ) ; struct . applicationModules . add ( _elem16 ) ; } } struct . setApplicationModulesIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list18 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . applicationInputs = new ArrayList < org . apache . airavata . model . application . io . InputDataObjectType > ( _list18 . size ) ; org . apache . airavata . model . application . io . InputDataObjectType _elem19 ; for ( int _i20 = 0 ; _i20 < _list18 . size ; ++ _i20 ) { _elem19 = new org . apache . airavata . model . application . io . InputDataObjectType ( ) ; _elem19 . read ( iprot ) ; struct . applicationInputs . add ( _elem19 ) ; } } struct . setApplicationInputsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list21 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . applicationOutputs = new ArrayList < org . apache . airavata . model . application . io . OutputDataObjectType > ( _list21 . size ) ; org . apache . airavata . model . application . io . OutputDataObjectType _elem22 ; for ( int _i23 = 0 ; _i23 < _list21 . size ; ++ _i23 ) { _elem22 = new org . apache . airavata . model . application . io . OutputDataObjectType ( ) ; _elem22 . read ( iprot ) ; struct . applicationOutputs . add ( _elem22 ) ; } } struct . setApplicationOutputsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . archiveWorkingDirectory = iprot . readBool ( ) ; struct . setArchiveWorkingDirectoryIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . hasOptionalFileInputs = iprot . readBool ( ) ; struct . setHasOptionalFileInputsIsSet ( true ) ; } }",Smelly
" public void testBuild_RightJoinTypePropagation ( ) { final Pipeline pipeline = TestUtils . createTestPipeline ( ) ; final PCollection < String > left = TestUtils . createMockDataset ( pipeline , TypeDescriptors . strings ( ) ) ; final PCollection < String > right = TestUtils . createMockDataset ( pipeline , TypeDescriptors . strings ( ) ) ; final TypeDescriptor < Integer > keyType = TypeDescriptors . integers ( ) ; final TypeDescriptor < String > outputType = TypeDescriptors . strings ( ) ; final PCollection < KV < Integer , String > > joined = RightJoin . named ( ""Join1"" ) . of ( left , right ) . by ( String :: length , String :: length , keyType ) . using ( ( Optional < String > l , String r , Collector < String > c ) -> { } , outputType ) . output ( ) ; final Join join = ( Join ) TestUtils . getProducer ( joined ) ; TypePropagationAssert . assertOperatorTypeAwareness ( join , keyType , outputType ) ; }",Smelly
 boolean queryByExample ( ) ;,No
" public void testTokenComponentDisposeItselfFromComponentStack ( ) throws Exception { ActionErrorTag t = new ActionErrorTag ( ) ; t . setPageContext ( pageContext ) ; try { t . doStartTag ( ) ; TokenTag tag = new TokenTag ( ) ; tag . setPageContext ( pageContext ) ; tag . doStartTag ( ) ; assertEquals ( tag . getComponent ( ) . getComponentStack ( ) . peek ( ) , tag . getComponent ( ) ) ; tag . doEndTag ( ) ; assertEquals ( t . getComponent ( ) . getComponentStack ( ) . peek ( ) , t . getComponent ( ) ) ; t . doEndTag ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( e . toString ( ) ) ; } }",Smelly
" static String resolveTempLocation ( String tempLocationDir , String bigQueryOperationName , String stepUuid ) { return FileSystems . matchNewResource ( tempLocationDir , true ) . resolve ( bigQueryOperationName , ResolveOptions . StandardResolveOptions . RESOLVE_DIRECTORY ) . resolve ( stepUuid , ResolveOptions . StandardResolveOptions . RESOLVE_DIRECTORY ) . toString ( ) ; }",No
" public String toString ( ) { return left + "" "" + right + "" LT"" ; }",No
 public VariableMapItem getVariable ( String variableName ) { return ( VariableMapItem ) variableMap . get ( variableName ) ; },Smelly
 public void setLongValue ( long longValue ) { this . longValue = longValue ; },No
" public void cleanup ( ) throws IOException { numSegmentsCleanedUp ++ ; if ( numSegmentsCleanedUp == numSegmentsContained ) { fs . delete ( inName , true ) ; } }",Smelly
 Where where ( ) ;,No
 protected abstract Node selectGraph ( Triple triple ) ;,No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public long exposeToAvoidOptimization ( ) { return pi1 + p1 + p2 + p3 + p4 + p5 + p6 ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 1 , 1 , ""To negate the meaning of a condition, simply write \""-\"" before it"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 2 , 2 , ""NOT"" , ""Condition"" ) ; cas . release ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public Datum extract ( TimeMeta tm ) { return NullDatum . get ( ) ; },No
" private List < String > search ( String base , SearchScope scope , String filter , AliasDerefMode aliasDerefMode ) throws Exception { List < String > nextResults = new ArrayList < String > ( ) ; ExprNode exprNode = FilterParser . parse ( getService ( ) . getSchemaManager ( ) , filter ) ; Cursor < Entry > cursor = getService ( ) . getAdminSession ( ) . search ( new Dn ( base ) , scope , exprNode , aliasDerefMode ) ; cursor . beforeFirst ( ) ; while ( cursor . next ( ) ) { nextResults . add ( cursor . get ( ) . getDn ( ) . getName ( ) ) ; } try { List < String > prevResults = new ArrayList < String > ( ) ; cursor . afterLast ( ) ; while ( cursor . previous ( ) ) { prevResults . add ( 0 , cursor . get ( ) . getDn ( ) . getName ( ) ) ; } assertEquals ( nextResults . size ( ) , prevResults . size ( ) ) ; assertEquals ( nextResults , prevResults ) ; } catch ( UnsupportedOperationException e ) { LOG . warn ( ""Partition doesn't support previous test"" ) ; } finally { cursor . close ( ) ; } return nextResults ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public SecurityEvaluator open ( Assembler a , Resource root , Mode mode ) { Literal className = getUniqueLiteral ( root , EVALUATOR_CLASS ) ; if ( className == null ) { throw new AssemblerException ( root , String . format ( NO_X_PROVIDED , EVALUATOR_CLASS , root ) ) ; } Class < ? > clazz ; try { clazz = Class . forName ( className . getString ( ) ) ; } catch ( ClassNotFoundException e1 ) { throw new AssemblerException ( root , String . format ( ""Can not locate class %s as specified by %s in %s"" , className , EVALUATOR_CLASS , root ) ) ; } if ( ! SecurityEvaluator . class . isAssignableFrom ( clazz ) ) { throw new AssemblerException ( root , String . format ( ""Class %s as specified by %s in %s does not implement SecurityEvaluator"" , className , EVALUATOR_CLASS , root ) ) ; } List < Object > args = new ArrayList < > ( ) ; Resource argRes = getUniqueResource ( root , ARGUMENT_LIST ) ; if ( argRes != null ) { Seq seq = argRes . as ( Seq . class ) ; NodeIterator iter = seq . iterator ( ) ; RDFNode n = null ; while ( iter . hasNext ( ) ) { n = iter . next ( ) ; if ( n . isLiteral ( ) ) { args . add ( n . asLiteral ( ) . getValue ( ) ) ; } else if ( n . isResource ( ) ) { args . add ( a . open ( a , n . asResource ( ) , mode ) ) ; } else { throw new AssemblerException ( root , String . format ( ""%s must be a literal or a resource"" , n ) ) ; } } } for ( Constructor < ? > c : clazz . getConstructors ( ) ) { if ( c . getParameterTypes ( ) . length == args . size ( ) ) { try { if ( args . size ( ) == 0 ) { return ( SecurityEvaluator ) c . newInstance ( ) ; } else { return ( SecurityEvaluator ) c . newInstance ( args . toArray ( ) ) ; } } catch ( InstantiationException e ) { throw new AssemblerException ( root , e . getMessage ( ) , e ) ; } catch ( IllegalAccessException e ) { throw new AssemblerException ( root , e . getMessage ( ) , e ) ; } catch ( IllegalArgumentException e ) { throw new AssemblerException ( root , e . getMessage ( ) , e ) ; } catch ( InvocationTargetException e ) { throw new AssemblerException ( root , e . getMessage ( ) , e ) ; } } } throw new AssemblerException ( root , String . format ( ""Class %s does not have a %s argument constructor"" , className , args . size ( ) ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
" boolean resolve ( EntityResolver resolver , EJBQLQuery query ) { EJBQLCompiledExpression expression = query . getExpression ( resolver ) ; setPrefetchTree ( expression . getPrefetchTree ( ) ) ; resultSetMapping = expression . getResult ( ) != null ? expression . getResult ( ) . getResolvedComponents ( resolver ) : null ; ObjEntity root = expression . getRootDescriptor ( ) . getEntity ( ) ; if ( ! super . resolve ( root , resolver ) ) { return false ; } if ( QueryCacheStrategy . NO_CACHE == getCacheStrategy ( ) ) { return true ; } StringBuilder key = new StringBuilder ( ) ; if ( query . getEjbqlStatement ( ) != null ) { key . append ( '/' ) . append ( query . getEjbqlStatement ( ) ) ; } if ( query . getFetchLimit ( ) > 0 ) { key . append ( '/' ) . append ( query . getFetchLimit ( ) ) ; } Map < String , Object > namedParameters = query . getNamedParameters ( ) ; if ( ! namedParameters . isEmpty ( ) ) { List < String > keys = new ArrayList < > ( namedParameters . keySet ( ) ) ; Collections . sort ( keys ) ; for ( String parameterKey : keys ) { key . append ( '/' ) . append ( parameterKey ) . append ( '=' ) . append ( namedParameters . get ( parameterKey ) ) ; } } Map < Integer , Object > positionalParameters = query . getPositionalParameters ( ) ; if ( ! positionalParameters . isEmpty ( ) ) { List < Integer > keys = new ArrayList < > ( positionalParameters . keySet ( ) ) ; Collections . sort ( keys ) ; for ( Integer parameterKey : keys ) { key . append ( '/' ) . append ( parameterKey ) . append ( '=' ) . append ( positionalParameters . get ( parameterKey ) ) ; } } if ( query . getFetchOffset ( ) > 0 || query . getFetchLimit ( ) > 0 ) { key . append ( '/' ) ; if ( query . getFetchOffset ( ) > 0 ) { key . append ( 'o' ) . append ( query . getFetchOffset ( ) ) ; } if ( query . getFetchLimit ( ) > 0 ) { key . append ( 'l' ) . append ( query . getFetchLimit ( ) ) ; } } this . cacheKey = key . toString ( ) ; return true ; }",Smelly
" protected IAction createAction ( ITextEditor editor , IVerticalRulerInfo rulerInfo ) { return new RutaSelectAnnotationRulerAction ( DLTKEditorMessages . getBundleForConstructedKeys ( ) , ""SelectAnnotationRulerAction."" , editor , rulerInfo ) ; }",No
" public void testOptGroupNumbers ( ) throws Exception { ( ( TestAction ) action ) . setMap ( new LinkedHashMap ( ) { { put ( ""AAA"" , ""aaa"" ) ; put ( new Long ( 111111 ) , ""bbb"" ) ; put ( ""CCC"" , ""ccc"" ) ; } } ) ; SelectTag selectTag = new SelectTag ( ) ; selectTag . setName ( ""mySelection"" ) ; selectTag . setLabel ( ""My Selection"" ) ; selectTag . setList ( ""%{#{'ONE':'one','TWO':'two','THREE':'three'}}"" ) ; OptGroupTag optGroupTag1 = new OptGroupTag ( ) ; optGroupTag1 . setLabel ( ""My Label 1"" ) ; optGroupTag1 . setList ( ""map"" ) ; OptGroupTag optGroupTag2 = new OptGroupTag ( ) ; optGroupTag2 . setLabel ( ""My Label 2"" ) ; optGroupTag2 . setList ( ""%{#{'DDD':'ddd','EEE':'eee','FFF':'fff'}}"" ) ; selectTag . setPageContext ( pageContext ) ; selectTag . doStartTag ( ) ; optGroupTag1 . setPageContext ( pageContext ) ; optGroupTag1 . doStartTag ( ) ; optGroupTag1 . doEndTag ( ) ; optGroupTag2 . setPageContext ( pageContext ) ; optGroupTag2 . doStartTag ( ) ; optGroupTag2 . doEndTag ( ) ; selectTag . doEndTag ( ) ; verify ( SelectTag . class . getResource ( ""OptGroup-4.txt"" ) ) ; }",Smelly
 protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; ReplayCommand info = ( ReplayCommand ) object ; info . setFirstNakNumber ( 1 ) ; info . setLastNakNumber ( 2 ) ; },No
 boolean isRememberMe ( ) ;,No
 public boolean matched ( ) { return matched ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 protected Class < M > extractMessageValueClass ( ImmutableClassesGiraphConfiguration conf ) { return conf . getOutgoingMessageValueClass ( ) ; },No
 public HCatTableInfo getTableInfo ( ) { return tableInfo ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ThriftTableOperationException struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . tableId = iprot . readString ( ) ; struct . setTableIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . tableName = iprot . readString ( ) ; struct . setTableNameIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . op = TableOperation . findByValue ( iprot . readI32 ( ) ) ; struct . setOpIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . type = TableOperationExceptionType . findByValue ( iprot . readI32 ( ) ) ; struct . setTypeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } }",Smelly
 public long magnitude ( ) { return offset ; },No
" protected ExecuteResult doWork ( ExecutableContext context ) throws ExecuteException { try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { } throw new RuntimeException ( ""test error"" ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TKey struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . row = iprot . readBinary ( ) ; struct . setRowIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . colFamily = iprot . readBinary ( ) ; struct . setColFamilyIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . colQualifier = iprot . readBinary ( ) ; struct . setColQualifierIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . colVisibility = iprot . readBinary ( ) ; struct . setColVisibilityIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . timestamp = iprot . readI64 ( ) ; struct . setTimestampIsSet ( true ) ; } }",Smelly
 protected RouteBuilder createRouteBuilder ( ) { return NoRouteBuilder . getInstance ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public static TaskReporter createTaskReporter ( ApplicationId appId , TezTaskUmbilicalForTest umbilical ) { TaskReporter taskReporter = new TaskReporter ( umbilical , 100 , 1000 , 100 , new AtomicLong ( 0 ) , createContainerId ( appId ) . toString ( ) ) ; return taskReporter ; }",No
 public boolean isOptimized ( ) { ensureOpen ( ) ; return in . isOptimized ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void setSubjectDomainPolicy ( CertPolicyId subjectDomainPolicy ) { setFieldAs ( PolicyMappingField . SUBJECT_DOMAIN_POLICY , subjectDomainPolicy ) ; }",No
" protected void executeLifecycle ( HttpAction action ) { CounterSet csService = ( action . getDataService ( ) == null ) ? null : action . getDataService ( ) . getCounters ( ) ; CounterSet csOperation = null ; if ( action . getEndpoint ( ) != null ) csOperation = action . getEndpoint ( ) . getCounters ( ) ; incCounter ( csService , Requests ) ; incCounter ( csOperation , Requests ) ; try { validate ( action ) ; } catch ( ActionErrorException ex ) { incCounter ( csOperation , RequestsBad ) ; incCounter ( csService , RequestsBad ) ; throw ex ; } try { execute ( action ) ; incCounter ( csOperation , RequestsGood ) ; incCounter ( csService , RequestsGood ) ; } catch ( ActionErrorException | QueryCancelledException | RuntimeIOException ex ) { incCounter ( csOperation , RequestsBad ) ; incCounter ( csService , RequestsBad ) ; throw ex ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" protected static Map < String , String > cloneAttributes ( Map < String , String > attributes ) { Map < String , String > rval = new HashMap < String , String > ( ) ; Iterator < Map . Entry < String , String > > iter = attributes . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , String > entry = iter . next ( ) ; rval . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return rval ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" private boolean contains ( Set < OrderXml > orders0 , OrderXml o ) { int id = o . getId ( ) ; for ( OrderXml o0 : orders0 ) { if ( o0 . getId ( ) == id ) return true ; } return false ; }",No
" public void dump ( Writer writer ) throws IOException { if ( xml instanceof SaxBuffer ) { writer . write ( ""[XMLizable] Begin nested SaxBuffer\n"" ) ; ( ( SaxBuffer ) xml ) . dump ( writer ) ; writer . write ( ""[XMLizable] End nested SaxBuffer\n"" ) ; } else { writer . write ( ""[XMLizable] xml="" + xml + ""\n"" ) ; } }",No
" public void run ( ) { MultiScanSession session = ( MultiScanSession ) server . getSession ( scanID ) ; String oldThreadName = Thread . currentThread ( ) . getName ( ) ; try { if ( isCancelled ( ) || session == null ) return ; TableConfiguration acuTableConf = server . getTableConfiguration ( session . threadPoolExtent ) ; long maxResultsSize = acuTableConf . getMemoryInBytes ( Property . TABLE_SCAN_MAXMEM ) ; runState . set ( ScanRunState . RUNNING ) ; Thread . currentThread ( ) . setName ( ""Client: "" + session . client + "" User: "" + session . getUser ( ) + "" Start: "" + session . startTime + "" Table: "" ) ; long bytesAdded = 0 ; long maxScanTime = 4000 ; long startTime = System . currentTimeMillis ( ) ; List < KVEntry > results = new ArrayList < > ( ) ; Map < KeyExtent , List < Range > > failures = new HashMap < > ( ) ; List < KeyExtent > fullScans = new ArrayList < > ( ) ; KeyExtent partScan = null ; Key partNextKey = null ; boolean partNextKeyInclusive = false ; Iterator < Entry < KeyExtent , List < Range > > > iter = session . queries . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) && bytesAdded < maxResultsSize && ( System . currentTimeMillis ( ) - startTime ) < maxScanTime ) { Entry < KeyExtent , List < Range > > entry = iter . next ( ) ; iter . remove ( ) ; Tablet tablet = server . getOnlineTablet ( entry . getKey ( ) ) ; if ( tablet == null ) { failures . put ( entry . getKey ( ) , entry . getValue ( ) ) ; continue ; } Thread . currentThread ( ) . setName ( ""Client: "" + session . client + "" User: "" + session . getUser ( ) + "" Start: "" + session . startTime + "" Tablet: "" + entry . getKey ( ) . toString ( ) ) ; LookupResult lookupResult ; try { if ( isCancelled ( ) ) interruptFlag . set ( true ) ; lookupResult = tablet . lookup ( entry . getValue ( ) , session . columnSet , session . auths , results , maxResultsSize - bytesAdded , session . ssiList , session . ssio , interruptFlag ) ; interruptFlag . set ( false ) ; } catch ( IOException e ) { log . warn ( ""lookup failed for tablet "" + entry . getKey ( ) , e ) ; throw new RuntimeException ( e ) ; } bytesAdded += lookupResult . bytesAdded ; if ( lookupResult . unfinishedRanges . size ( ) > 0 ) { if ( lookupResult . closed ) { failures . put ( entry . getKey ( ) , lookupResult . unfinishedRanges ) ; } else { session . queries . put ( entry . getKey ( ) , lookupResult . unfinishedRanges ) ; partScan = entry . getKey ( ) ; partNextKey = lookupResult . unfinishedRanges . get ( 0 ) . getStartKey ( ) ; partNextKeyInclusive = lookupResult . unfinishedRanges . get ( 0 ) . isStartKeyInclusive ( ) ; } } else { fullScans . add ( entry . getKey ( ) ) ; } } long finishTime = System . currentTimeMillis ( ) ; session . totalLookupTime += ( finishTime - startTime ) ; session . numEntries += results . size ( ) ; List < TKeyValue > retResults = new ArrayList < > ( ) ; for ( KVEntry entry : results ) retResults . add ( new TKeyValue ( entry . getKey ( ) . toThrift ( ) , ByteBuffer . wrap ( entry . getValue ( ) . get ( ) ) ) ) ; Map < TKeyExtent , List < TRange > > retFailures = Translator . translate ( failures , Translators . KET , new Translator . ListTranslator < > ( Translators . RT ) ) ; List < TKeyExtent > retFullScans = Translator . translate ( fullScans , Translators . KET ) ; TKeyExtent retPartScan = null ; TKey retPartNextKey = null ; if ( partScan != null ) { retPartScan = partScan . toThrift ( ) ; retPartNextKey = partNextKey . toThrift ( ) ; } addResult ( new MultiScanResult ( retResults , retFailures , retFullScans , retPartScan , retPartNextKey , partNextKeyInclusive , session . queries . size ( ) != 0 ) ) ; } catch ( IterationInterruptedException iie ) { if ( ! isCancelled ( ) ) { log . warn ( ""Iteration interrupted, when scan not cancelled"" , iie ) ; addResult ( iie ) ; } } catch ( Throwable e ) { log . warn ( ""exception while doing multi-scan "" , e ) ; addResult ( e ) ; } finally { Thread . currentThread ( ) . setName ( oldThreadName ) ; runState . set ( ScanRunState . FINISHED ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected void configureShell ( Shell newShell ) { super . configureShell ( newShell ) ; newShell . setText ( Messages . getString ( ""RenameObjectClassDialog.RenameObjectClass"" ) ) ; }",No
 private BlankNodeAllocator make ( ) { return new BlankNodeAllocatorHash ( ) ; },No
 public static String getSystemTableFromSubject ( String subject ) { return scSink . getTableFromSubject ( subject ) ; },No
 int getReadTimeout ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
 BindingOperationInfo getBindingOperationInfo ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected String getPersistenceUnitName ( ) { return ""version-columns-xml"" ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TFetchResultsReq struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . operationHandle = new TOperationHandle ( ) ; struct . operationHandle . read ( iprot ) ; struct . setOperationHandleIsSet ( true ) ; struct . orientation = TFetchOrientation . findByValue ( iprot . readI32 ( ) ) ; struct . setOrientationIsSet ( true ) ; struct . maxRows = iprot . readI64 ( ) ; struct . setMaxRowsIsSet ( true ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void testPassesBidsThrough ( ) throws Exception { SchemaRegistry registry = SchemaRegistry . createDefault ( ) ; PCollection < Event > bids = testPipeline . apply ( TestStream . create ( registry . getSchema ( Event . class ) , registry . getToRowFunction ( Event . class ) , registry . getFromRowFunction ( Event . class ) ) . addElements ( new Event ( BID1 ) ) . addElements ( new Event ( BID2 ) ) . advanceWatermarkToInfinity ( ) ) ; PAssert . that ( bids . apply ( new SqlQuery0 ( ) ) ) . containsInAnyOrder ( BID1 , BID2 ) ; testPipeline . run ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public float getProgress ( ) throws IOException { return verticesRead * 100.0f / totalSplitVertices ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
" CharacterInput [ ] retrieveParentDataAsFiles ( String localIdentifier , String dataName ) throws ManifoldCFException ;",No
" private void writeFile ( Connector conn , String tableName ) throws Exception { BatchWriter bw = conn . createBatchWriter ( tableName , new BatchWriterConfig ( ) ) ; Mutation m = new Mutation ( ""row"" ) ; m . put ( ""cf"" , ""cq"" , ""value"" ) ; bw . addMutation ( m ) ; bw . close ( ) ; conn . tableOperations ( ) . flush ( tableName , null , null , true ) ; }",Smelly
 public ThreadPoolExecutor getExecutor ( ) { return executor ; },No
" protected void onConsumerDone ( ) { System . err . println ( ""IN consumer done"" ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Database struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . locationUri = iprot . readString ( ) ; struct . setLocationUriIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map100 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . parameters = new HashMap < String , String > ( 2 * _map100 . size ) ; for ( int _i101 = 0 ; _i101 < _map100 . size ; ++ _i101 ) { String _key102 ; String _val103 ; _key102 = iprot . readString ( ) ; _val103 = iprot . readString ( ) ; struct . parameters . put ( _key102 , _val103 ) ; } } struct . setParametersIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . privileges = new PrincipalPrivilegeSet ( ) ; struct . privileges . read ( iprot ) ; struct . setPrivilegesIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . ownerName = iprot . readString ( ) ; struct . setOwnerNameIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . ownerType = PrincipalType . findByValue ( iprot . readI32 ( ) ) ; struct . setOwnerTypeIsSet ( true ) ; } }",Smelly
 private Object readResolve ( ) throws ObjectStreamException { return INSTANCE ; },No
 protected FileReaderFactory < KeyValue > getFileReaderFactory ( ) { return new HFileReaderFactory ( ) ; },No
" public void testGenericRecordBuilderAvroByFieldIndexPojo ( ) { RecordSchemaBuilder people1SchemaBuilder = SchemaBuilder . record ( ""People1"" ) ; people1SchemaBuilder . field ( ""age"" ) . type ( SchemaType . INT32 ) ; people1SchemaBuilder . field ( ""height"" ) . type ( SchemaType . INT32 ) ; people1SchemaBuilder . field ( ""name"" ) . type ( SchemaType . STRING ) ; SchemaInfo people1SchemaInfo = people1SchemaBuilder . build ( SchemaType . AVRO ) ; GenericSchema < GenericRecord > people1Schema = Schema . generic ( people1SchemaInfo ) ; GenericRecordBuilder people1RecordBuilder = people1Schema . newRecordBuilder ( ) ; people1RecordBuilder . set ( people1Schema . getFields ( ) . get ( 0 ) , 20 ) ; people1RecordBuilder . set ( people1Schema . getFields ( ) . get ( 1 ) , 180 ) ; people1RecordBuilder . set ( people1Schema . getFields ( ) . get ( 2 ) , ""people1"" ) ; GenericRecord people1GenericRecord = people1RecordBuilder . build ( ) ; RecordSchemaBuilder people2SchemaBuilder = SchemaBuilder . record ( ""People2"" ) ; people2SchemaBuilder . field ( ""age"" ) . type ( SchemaType . INT32 ) ; people2SchemaBuilder . field ( ""height"" ) . type ( SchemaType . INT32 ) ; people2SchemaBuilder . field ( ""name"" ) . type ( SchemaType . STRING ) ; SchemaInfo people2SchemaInfo = people2SchemaBuilder . build ( SchemaType . AVRO ) ; GenericSchema < GenericRecord > people2Schema = Schema . generic ( people2SchemaInfo ) ; GenericRecordBuilder people2RecordBuilder = people2Schema . newRecordBuilder ( ) ; people2RecordBuilder . set ( people2Schema . getFields ( ) . get ( 0 ) , 20 ) ; people2RecordBuilder . set ( people2Schema . getFields ( ) . get ( 1 ) , 180 ) ; people2RecordBuilder . set ( people2Schema . getFields ( ) . get ( 2 ) , ""people2"" ) ; GenericRecord people2GenericRecord = people2RecordBuilder . build ( ) ; RecordSchemaBuilder peopleSchemaBuilder = SchemaBuilder . record ( ""People"" ) ; peopleSchemaBuilder . field ( ""people1"" , people1Schema ) . type ( SchemaType . AVRO ) ; peopleSchemaBuilder . field ( ""people2"" , people2Schema ) . type ( SchemaType . AVRO ) ; peopleSchemaBuilder . field ( ""name"" ) . type ( SchemaType . STRING ) ; SchemaInfo schemaInfo = peopleSchemaBuilder . build ( SchemaType . AVRO ) ; GenericSchema < GenericRecord > peopleSchema = Schema . generic ( schemaInfo ) ; GenericRecordBuilder peopleRecordBuilder = peopleSchema . newRecordBuilder ( ) ; peopleRecordBuilder . set ( peopleSchema . getFields ( ) . get ( 0 ) , people1GenericRecord ) ; peopleRecordBuilder . set ( peopleSchema . getFields ( ) . get ( 1 ) , people2GenericRecord ) ; peopleRecordBuilder . set ( peopleSchema . getFields ( ) . get ( 2 ) , ""people"" ) ; GenericRecord peopleRecord = peopleRecordBuilder . build ( ) ; byte [ ] peopleEncode = peopleSchema . encode ( peopleRecord ) ; Schema < People > peopleDecodeSchema = Schema . AVRO ( SchemaDefinition . < People > builder ( ) . withPojo ( People . class ) . withAlwaysAllowNull ( false ) . build ( ) ) ; People people = peopleDecodeSchema . decode ( peopleEncode ) ; assertEquals ( people . name , peopleRecord . getField ( ""name"" ) ) ; assertEquals ( people . getPeople1 ( ) . age , people1GenericRecord . getField ( ""age"" ) ) ; assertEquals ( people . getPeople1 ( ) . height , people1GenericRecord . getField ( ""height"" ) ) ; assertEquals ( people . getPeople1 ( ) . name , people1GenericRecord . getField ( ""name"" ) ) ; assertEquals ( people . getPeople2 ( ) . age , people2GenericRecord . getField ( ""age"" ) ) ; assertEquals ( people . getPeople2 ( ) . height , people2GenericRecord . getField ( ""height"" ) ) ; assertEquals ( people . getPeople2 ( ) . name , people2GenericRecord . getField ( ""name"" ) ) ; }",Smelly
 public List < E > current ( ) { return Arrays . asList ( elements . clone ( ) ) ; },No
" public < T > ObserverMethod < ? > getObservableMethodForAnnotatedMethod ( AnnotatedMethod < ? > annotatedMethod , InjectionTargetBean < T > bean ) { Asserts . assertNotNull ( annotatedMethod , ""annotatedMethod parameter can not be null"" ) ; Observes observes = AnnotationUtil . getAnnotatedMethodFirstParameterAnnotation ( annotatedMethod , Observes . class ) ; boolean ifExist = false ; if ( observes != null ) { if ( observes . notifyObserver ( ) . equals ( Reception . IF_EXISTS ) ) { ifExist = true ; } } Annotation [ ] observerQualifiers = bean . getWebBeansContext ( ) . getAnnotationManager ( ) . getAnnotatedMethodFirstParameterQualifierWithGivenAnnotation ( annotatedMethod , Observes . class ) ; Type type = AnnotationUtil . getAnnotatedMethodFirstParameterWithAnnotation ( annotatedMethod , Observes . class ) ; ObserverMethodImpl < T > observer = new ObserverMethodImpl ( bean , annotatedMethod . getJavaMember ( ) , ifExist , observerQualifiers , type ) ; observer . setAnnotatedMethod ( ( AnnotatedMethod < T > ) annotatedMethod ) ; addObserver ( observer , type ) ; return observer ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" static String add_escapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( ""\\b"" ) ; continue ; case '\t' : retval . append ( ""\\t"" ) ; continue ; case '\n' : retval . append ( ""\\n"" ) ; continue ; case '\f' : retval . append ( ""\\f"" ) ; continue ; case '\r' : retval . append ( ""\\r"" ) ; continue ; case '\""' : retval . append ( ""\\\"""" ) ; continue ; case '\'' : retval . append ( ""\\\'"" ) ; continue ; case '\\' : retval . append ( ""\\\\"" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = ""0000"" + Integer . toString ( ch , 16 ) ; retval . append ( ""\\u"" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; }",No
" public PCollection < T > expand ( PCollection < T > input ) { PCollectionView < Iterable < T > > empty = input . apply ( ""Consume"" , Filter . by ( SerializableFunctions . constant ( false ) ) ) . apply ( View . asIterable ( ) ) ; PCollection < T > materialized = input . apply ( ""Identity"" , ParDo . of ( new DoFn < T , T > ( ) { @ ProcessElement public void process ( ProcessContext c ) { c . output ( c . element ( ) ) ; } } ) . withSideInputs ( empty ) ) ; return materialized . apply ( Reshuffle . viaRandomKey ( ) ) ; }",No
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . toDeleteRuleTest2 = in . readObject ( ) ; }",No
" public static void main ( String [ ] args ) throws Exception { LOG . info ( ""Args "" + Arrays . toString ( args ) ) ; CommandLineParser parser = new GnuParser ( ) ; Options options = new Options ( ) ; options . addOption ( null , PROPERTIES , true , ""properties file"" ) ; options . addOption ( null , REPOSITORY , true , ""Overrides git repository in properties file"" ) ; options . addOption ( null , REPOSITORY_NAME , true , ""Overrides git repository *name* in properties file"" ) ; options . addOption ( null , BRANCH , true , ""Overrides git branch in properties file"" ) ; options . addOption ( null , PATCH , true , ""URI to patch, either file:/// or http(s)://"" ) ; options . addOption ( ANT_ARG , null , true , ""Supplemntal ant arguments"" ) ; options . addOption ( null , JAVA_HOME , true , ""Java Home for compiling and running tests (unless "" + JAVA_HOME_TEST + "" is specified)"" ) ; options . addOption ( null , JAVA_HOME_TEST , true , ""Java Home for running tests (optional)"" ) ; options . addOption ( null , ANT_TEST_ARGS , true , ""Arguments to ant test on slave nodes only"" ) ; options . addOption ( null , ANT_ENV_OPTS , true , ""ANT_OPTS environment variable setting"" ) ; CommandLine commandLine = parser . parse ( options , args ) ; if ( ! commandLine . hasOption ( PROPERTIES ) ) { throw new IllegalArgumentException ( Joiner . on ( "" "" ) . join ( PTest . class . getName ( ) , ""--"" + PROPERTIES , ""config.properties"" ) ) ; } String testConfigurationFile = commandLine . getOptionValue ( PROPERTIES ) ; ExecutionContextConfiguration executionContextConfiguration = ExecutionContextConfiguration . fromFile ( testConfigurationFile ) ; String buildTag = System . getenv ( ""BUILD_TAG"" ) == null ? ""undefined-"" + System . currentTimeMillis ( ) : System . getenv ( ""BUILD_TAG"" ) ; File logDir = Dirs . create ( new File ( executionContextConfiguration . getGlobalLogDirectory ( ) , buildTag ) ) ; LogDirectoryCleaner cleaner = new LogDirectoryCleaner ( new File ( executionContextConfiguration . getGlobalLogDirectory ( ) ) , 5 ) ; cleaner . setName ( ""LogCleaner-"" + executionContextConfiguration . getGlobalLogDirectory ( ) ) ; cleaner . setDaemon ( true ) ; cleaner . start ( ) ; TestConfiguration conf = TestConfiguration . fromFile ( testConfigurationFile , LOG ) ; String repository = Strings . nullToEmpty ( commandLine . getOptionValue ( REPOSITORY ) ) . trim ( ) ; if ( ! repository . isEmpty ( ) ) { conf . setRepository ( repository ) ; } String repositoryName = Strings . nullToEmpty ( commandLine . getOptionValue ( REPOSITORY_NAME ) ) . trim ( ) ; if ( ! repositoryName . isEmpty ( ) ) { conf . setRepositoryName ( repositoryName ) ; } String branch = Strings . nullToEmpty ( commandLine . getOptionValue ( BRANCH ) ) . trim ( ) ; if ( ! branch . isEmpty ( ) ) { conf . setBranch ( branch ) ; } String patch = Strings . nullToEmpty ( commandLine . getOptionValue ( PATCH ) ) . trim ( ) ; if ( ! patch . isEmpty ( ) ) { conf . setPatch ( patch ) ; } String javaHome = Strings . nullToEmpty ( commandLine . getOptionValue ( JAVA_HOME ) ) . trim ( ) ; if ( ! javaHome . isEmpty ( ) ) { conf . setJavaHome ( javaHome ) ; } String javaHomeForTests = Strings . nullToEmpty ( commandLine . getOptionValue ( JAVA_HOME_TEST ) ) . trim ( ) ; if ( ! javaHomeForTests . isEmpty ( ) ) { conf . setJavaHomeForTests ( javaHomeForTests ) ; } String antTestArgs = Strings . nullToEmpty ( commandLine . getOptionValue ( ANT_TEST_ARGS ) ) . trim ( ) ; if ( ! antTestArgs . isEmpty ( ) ) { conf . setAntTestArgs ( antTestArgs ) ; } String antEnvOpts = Strings . nullToEmpty ( commandLine . getOptionValue ( ANT_ENV_OPTS ) ) . trim ( ) ; if ( ! antEnvOpts . isEmpty ( ) ) { conf . setAntEnvOpts ( antEnvOpts ) ; } String antTestTarget = Strings . nullToEmpty ( commandLine . getOptionValue ( ANT_TEST_TARGET ) ) . trim ( ) ; if ( ! antTestTarget . isEmpty ( ) ) { conf . setAntTestTarget ( antTestTarget ) ; } String [ ] supplementalAntArgs = commandLine . getOptionValues ( ANT_ARG ) ; if ( supplementalAntArgs != null && supplementalAntArgs . length > 0 ) { String antArgs = Strings . nullToEmpty ( conf . getAntArgs ( ) ) ; if ( ! ( antArgs . isEmpty ( ) || antArgs . endsWith ( "" "" ) ) ) { antArgs += "" "" ; } antArgs += ""-"" + ANT_ARG + Joiner . on ( "" -"" + ANT_ARG ) . join ( supplementalAntArgs ) ; conf . setAntArgs ( antArgs ) ; } ExecutionContextProvider executionContextProvider = null ; ExecutionContext executionContext = null ; int exitCode = 0 ; try { executionContextProvider = executionContextConfiguration . getExecutionContextProvider ( ) ; executionContext = executionContextProvider . createExecutionContext ( ) ; PTest ptest = new PTest ( conf , executionContext , buildTag , logDir , new LocalCommandFactory ( LOG ) , new SSHCommandExecutor ( LOG ) , new RSyncCommandExecutor ( LOG ) , LOG ) ; exitCode = ptest . run ( ) ; } finally { if ( executionContext != null ) { executionContext . terminate ( ) ; } if ( executionContextProvider != null ) { executionContextProvider . close ( ) ; } } System . exit ( exitCode ) ; }",No
" public String toString ( ) { return ""JobIndexInfo [submitTime="" + submitTime + "", finishTime="" + finishTime + "", user="" + user + "", jobName="" + jobName + "", jobId="" + jobId + "", numMaps="" + numMaps + "", numReduces="" + numReduces + "", jobStatus="" + jobStatus + ""]"" ; }",No
" public static void main ( String [ ] args ) { String server1 , username1 , password1 , file1 ; String server2 , username2 , password2 , file2 ; String [ ] parts ; int port1 = 0 , port2 = 0 ; FTPClient ftp1 , ftp2 ; ProtocolCommandListener listener ; if ( args . length < 8 ) { System . err . println ( ""Usage: ftp <host1> <user1> <pass1> <file1> <host2> <user2> <pass2> <file2>"" ) ; System . exit ( 1 ) ; } server1 = args [ 0 ] ; parts = server1 . split ( "":"" ) ; if ( parts . length == 2 ) { server1 = parts [ 0 ] ; port1 = Integer . parseInt ( parts [ 1 ] ) ; } username1 = args [ 1 ] ; password1 = args [ 2 ] ; file1 = args [ 3 ] ; server2 = args [ 4 ] ; parts = server2 . split ( "":"" ) ; if ( parts . length == 2 ) { server2 = parts [ 0 ] ; port2 = Integer . parseInt ( parts [ 1 ] ) ; } username2 = args [ 5 ] ; password2 = args [ 6 ] ; file2 = args [ 7 ] ; listener = new PrintCommandListener ( new PrintWriter ( System . out ) , true ) ; ftp1 = new FTPClient ( ) ; ftp1 . addProtocolCommandListener ( listener ) ; ftp2 = new FTPClient ( ) ; ftp2 . addProtocolCommandListener ( listener ) ; try { int reply ; if ( port1 > 0 ) { ftp1 . connect ( server1 , port1 ) ; } else { ftp1 . connect ( server1 ) ; } System . out . println ( ""Connected to "" + server1 + ""."" ) ; reply = ftp1 . getReplyCode ( ) ; if ( ! FTPReply . isPositiveCompletion ( reply ) ) { ftp1 . disconnect ( ) ; System . err . println ( ""FTP server1 refused connection."" ) ; System . exit ( 1 ) ; } } catch ( IOException e ) { if ( ftp1 . isConnected ( ) ) { try { ftp1 . disconnect ( ) ; } catch ( IOException f ) { } } System . err . println ( ""Could not connect to server1."" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } try { int reply ; if ( port2 > 0 ) { ftp2 . connect ( server2 , port2 ) ; } else { ftp2 . connect ( server2 ) ; } System . out . println ( ""Connected to "" + server2 + ""."" ) ; reply = ftp2 . getReplyCode ( ) ; if ( ! FTPReply . isPositiveCompletion ( reply ) ) { ftp2 . disconnect ( ) ; System . err . println ( ""FTP server2 refused connection."" ) ; System . exit ( 1 ) ; } } catch ( IOException e ) { if ( ftp2 . isConnected ( ) ) { try { ftp2 . disconnect ( ) ; } catch ( IOException f ) { } } System . err . println ( ""Could not connect to server2."" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } __main : try { if ( ! ftp1 . login ( username1 , password1 ) ) { System . err . println ( ""Could not login to "" + server1 ) ; break __main ; } if ( ! ftp2 . login ( username2 , password2 ) ) { System . err . println ( ""Could not login to "" + server2 ) ; break __main ; } ftp2 . enterRemotePassiveMode ( ) ; ftp1 . enterRemoteActiveMode ( InetAddress . getByName ( ftp2 . getPassiveHost ( ) ) , ftp2 . getPassivePort ( ) ) ; if ( ftp1 . remoteRetrieve ( file1 ) && ftp2 . remoteStoreUnique ( file2 ) ) { ftp1 . completePendingCommand ( ) ; ftp2 . completePendingCommand ( ) ; } else { System . err . println ( ""Couldn't initiate transfer.  Check that filenames are valid."" ) ; break __main ; } } catch ( IOException e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } finally { try { if ( ftp1 . isConnected ( ) ) { ftp1 . logout ( ) ; ftp1 . disconnect ( ) ; } } catch ( IOException e ) { } try { if ( ftp2 . isConnected ( ) ) { ftp2 . logout ( ) ; ftp2 . disconnect ( ) ; } } catch ( IOException e ) { } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RecoveryStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . runtime = iprot . readI32 ( ) ; struct . setRuntimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . progress = iprot . readDouble ( ) ; struct . setProgressIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private void addTriplesToGraph ( BlankNodeOrIRI subject , BlankNodeManager bNodeMgr , JSONObject predicates , Graph mGraph ) { for ( Object predicate : predicates . keySet ( ) ) { JSONArray objects = ( JSONArray ) predicates . get ( predicate ) ; for ( Object object : objects ) { JSONObject values = ( JSONObject ) object ; String value = ( String ) values . get ( ""value"" ) ; if ( values . get ( ""type"" ) . equals ( ""literal"" ) ) { IRI dataType ; Object dataTypeValue = values . get ( ""datatype"" ) ; if ( dataTypeValue == null || dataTypeValue . toString ( ) . isEmpty ( ) ) { dataType = XSD_STRING ; } else { dataType = new IRI ( dataTypeValue . toString ( ) ) ; } Language language = null ; if ( values . containsKey ( ""lang"" ) && ! values . get ( ""lang"" ) . equals ( """" ) && values . get ( ""lang"" ) != null ) { language = new Language ( ( String ) values . get ( ""lang"" ) ) ; } mGraph . add ( new TripleImpl ( subject , new IRI ( ( String ) predicate ) , new LiteralImpl ( value . toString ( ) , dataType , language ) ) ) ; } else if ( values . get ( ""type"" ) . equals ( ""uri"" ) ) { mGraph . add ( new TripleImpl ( subject , new IRI ( ( String ) predicate ) , new IRI ( value ) ) ) ; } else if ( values . get ( ""type"" ) . equals ( ""bnode"" ) ) { BlankNodeOrIRI bNode = bNodeMgr . getBlankNode ( value ) ; mGraph . add ( new TripleImpl ( subject , new IRI ( ( String ) predicate ) , bNode ) ) ; } } } }",No
 private boolean seekable ( BeamRelNode relNode ) { if ( relNode instanceof BeamIOSourceRel ) { BeamIOSourceRel srcRel = ( BeamIOSourceRel ) relNode ; BeamSqlTable sourceTable = srcRel . getBeamSqlTable ( ) ; if ( sourceTable instanceof BeamSqlSeekableTable ) { return true ; } } return false ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private BlockRealMatrix createRandomMatrix ( Random r , int rows , int columns ) { BlockRealMatrix m = new BlockRealMatrix ( rows , columns ) ; for ( int i = 0 ; i < rows ; ++ i ) { for ( int j = 0 ; j < columns ; ++ j ) { m . setEntry ( i , j , 200 * r . nextDouble ( ) - 100 ) ; } } return m ; }",No
" public final void testgreaterThanEqualsDatum ( ) { Datum x ; Datum y ; Datum z ; x = DatumFactory . createInt4 ( 6 ) ; y = DatumFactory . createInt4 ( 3 ) ; z = x . greaterThanEqual ( y ) ; assertEquals ( z . type ( ) , Type . BOOLEAN ) ; assertEquals ( z . asBool ( ) , true ) ; z = y . greaterThanEqual ( x ) ; assertEquals ( z . type ( ) , Type . BOOLEAN ) ; assertEquals ( z . asBool ( ) , false ) ; x = DatumFactory . createInt4 ( 6 ) ; y = DatumFactory . createInt4 ( 6 ) ; z = x . greaterThanEqual ( y ) ; assertEquals ( z . type ( ) , Type . BOOLEAN ) ; assertEquals ( z . asBool ( ) , true ) ; z = y . greaterThanEqual ( x ) ; assertEquals ( z . type ( ) , Type . BOOLEAN ) ; assertEquals ( z . asBool ( ) , true ) ; }",Smelly
" protected final boolean accepts ( TKey key , TripleWritable tuple ) { Triple t = tuple . get ( ) ; return ( t . getSubject ( ) . isURI ( ) || t . getSubject ( ) . isBlank ( ) ) && t . getPredicate ( ) . isURI ( ) && ( t . getObject ( ) . isURI ( ) || t . getObject ( ) . isBlank ( ) || t . getObject ( ) . isLiteral ( ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , AddPartitionsRequest struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . dbName = iprot . readString ( ) ; struct . setDbNameIsSet ( true ) ; struct . tblName = iprot . readString ( ) ; struct . setTblNameIsSet ( true ) ; { org . apache . thrift . protocol . TList _list343 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . parts = new ArrayList < Partition > ( _list343 . size ) ; for ( int _i344 = 0 ; _i344 < _list343 . size ; ++ _i344 ) { Partition _elem345 ; _elem345 = new Partition ( ) ; _elem345 . read ( iprot ) ; struct . parts . add ( _elem345 ) ; } } struct . setPartsIsSet ( true ) ; struct . ifNotExists = iprot . readBool ( ) ; struct . setIfNotExistsIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . needResult = iprot . readBool ( ) ; struct . setNeedResultIsSet ( true ) ; } }",Smelly
" private static PortletMode getPortletMode ( RenderRequest portletReq , String portletMode ) { PortletMode mode = portletReq . getPortletMode ( ) ; if ( TextUtils . stringSet ( portletMode ) ) { mode = portletReq . getPortletMode ( ) ; if ( ""edit"" . equalsIgnoreCase ( portletMode ) ) { mode = PortletMode . EDIT ; } else if ( ""view"" . equalsIgnoreCase ( portletMode ) ) { mode = PortletMode . VIEW ; } else if ( ""help"" . equalsIgnoreCase ( portletMode ) ) { mode = PortletMode . HELP ; } } if ( mode == null ) { mode = PortletMode . VIEW ; } return mode ; }",No
 private int lookupFloat ( float var ) { ConstantPoolItem item ; for ( int i = 0 ; i < count ; i ++ ) { item = items [ i ] ; if ( item != null && item . tag == Constants . CONSTANT_Float && ( ( Constant_Float ) item ) . value == var ) { return i ; } } return - 1 ; },Smelly
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 1 , 1 , ""Some"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 2 , 0 ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 3 , 6 , ""Some"" , ""text"" , ""for"" , ""some"" , ""test"" , ""."" ) ; cas . release ( ) ; }",Smelly
" private String attemptsPostTableInit ( ) { return ""var asInitVals = new Array();\n"" + ""$('tfoot input').keyup( function () \n{"" + ""  attemptsDataTable.fnFilter( this.value, $('tfoot input').index(this) );\n"" + ""} );\n"" + ""$('tfoot input').each( function (i) {\n"" + ""  asInitVals[i] = this.value;\n"" + ""} );\n"" + ""$('tfoot input').focus( function () {\n"" + ""  if ( this.className == 'search_init' )\n"" + ""  {\n"" + ""    this.className = '';\n"" + ""    this.value = '';\n"" + ""  }\n"" + ""} );\n"" + ""$('tfoot input').blur( function (i) {\n"" + ""  if ( this.value == '' )\n"" + ""  {\n"" + ""    this.className = 'search_init';\n"" + ""    this.value = asInitVals[$('tfoot input').index(this)];\n"" + ""  }\n"" + ""} );\n"" ; }",Smelly
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { Message info = ( Message ) o ; info . beforeMarshall ( wireFormat ) ; super . looseMarshal ( wireFormat , o , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getProducerId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getDestination ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getTransactionId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getOriginalDestination ( ) , dataOut ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getMessageId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getOriginalTransactionId ( ) , dataOut ) ; looseMarshalString ( info . getGroupID ( ) , dataOut ) ; dataOut . writeInt ( info . getGroupSequence ( ) ) ; looseMarshalString ( info . getCorrelationId ( ) , dataOut ) ; dataOut . writeBoolean ( info . isPersistent ( ) ) ; looseMarshalLong ( wireFormat , info . getExpiration ( ) , dataOut ) ; dataOut . writeByte ( info . getPriority ( ) ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getReplyTo ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getTimestamp ( ) , dataOut ) ; looseMarshalString ( info . getType ( ) , dataOut ) ; looseMarshalByteSequence ( wireFormat , info . getContent ( ) , dataOut ) ; looseMarshalByteSequence ( wireFormat , info . getMarshalledProperties ( ) , dataOut ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getDataStructure ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getTargetConsumerId ( ) , dataOut ) ; dataOut . writeBoolean ( info . isCompressed ( ) ) ; dataOut . writeInt ( info . getRedeliveryCounter ( ) ) ; looseMarshalObjectArray ( wireFormat , info . getBrokerPath ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getArrival ( ) , dataOut ) ; looseMarshalString ( info . getUserID ( ) , dataOut ) ; dataOut . writeBoolean ( info . isRecievedByDFBridge ( ) ) ; dataOut . writeBoolean ( info . isDroppable ( ) ) ; looseMarshalObjectArray ( wireFormat , info . getCluster ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getBrokerInTime ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getBrokerOutTime ( ) , dataOut ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" void onExternalViewChange ( List < ExternalView > externalViewList , NotificationContext changeContext ) ;",No
" public int compare ( TreeNode o1 , TreeNode o2 ) { List < String > o1Names = null ; List < String > o2Names = null ; if ( ( o1 instanceof AttributeTypeWrapper ) && ( o2 instanceof AttributeTypeWrapper ) ) { AttributeType at1 = ( ( AttributeTypeWrapper ) o1 ) . getAttributeType ( ) ; AttributeType at2 = ( ( AttributeTypeWrapper ) o2 ) . getAttributeType ( ) ; o1Names = at1 . getNames ( ) ; o2Names = at2 . getNames ( ) ; } else if ( ( o1 instanceof ObjectClassWrapper ) && ( o2 instanceof ObjectClassWrapper ) ) { ObjectClass oc1 = ( ( ObjectClassWrapper ) o1 ) . getObjectClass ( ) ; ObjectClass oc2 = ( ( ObjectClassWrapper ) o2 ) . getObjectClass ( ) ; o1Names = oc1 . getNames ( ) ; o2Names = oc2 . getNames ( ) ; } else if ( ( o1 instanceof AttributeTypeWrapper ) && ( o2 instanceof ObjectClassWrapper ) ) { AttributeType at = ( ( AttributeTypeWrapper ) o1 ) . getAttributeType ( ) ; ObjectClass oc = ( ( ObjectClassWrapper ) o2 ) . getObjectClass ( ) ; o1Names = at . getNames ( ) ; o2Names = oc . getNames ( ) ; } else if ( ( o1 instanceof ObjectClassWrapper ) && ( o2 instanceof AttributeTypeWrapper ) ) { ObjectClass oc = ( ( ObjectClassWrapper ) o1 ) . getObjectClass ( ) ; AttributeType at = ( ( AttributeTypeWrapper ) o2 ) . getAttributeType ( ) ; o1Names = oc . getNames ( ) ; o2Names = at . getNames ( ) ; } if ( ( o1Names != null ) && ( o2Names != null ) ) { if ( ( o1Names . size ( ) > 0 ) && ( o2Names . size ( ) > 0 ) ) { return o1Names . get ( 0 ) . compareToIgnoreCase ( o2Names . get ( 0 ) ) ; } else if ( ( o1Names . size ( ) == 0 ) && ( o2Names . size ( ) > 0 ) ) { return """" . compareToIgnoreCase ( o2Names . get ( 0 ) ) ; } else if ( ( o1Names . size ( ) > 0 ) && ( o2Names . size ( ) == 0 ) ) { return o1Names . get ( 0 ) . compareToIgnoreCase ( """" ) ; } } return o1 . toString ( ) . compareToIgnoreCase ( o2 . toString ( ) ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void testNoop ( ) { },No
" public static void main ( String [ ] args ) throws Throwable { if ( args . length < 2 ) { usage ( ) ; return ; } Class stemClass = Class . forName ( ""org.tartarus.snowball.ext."" + args [ 0 ] + ""Stemmer"" ) ; SnowballProgram stemmer = ( SnowballProgram ) stemClass . newInstance ( ) ; Method stemMethod = stemClass . getMethod ( ""stem"" , new Class [ 0 ] ) ; Reader reader ; reader = new InputStreamReader ( new FileInputStream ( args [ 1 ] ) ) ; reader = new BufferedReader ( reader ) ; StringBuffer input = new StringBuffer ( ) ; OutputStream outstream ; if ( args . length > 2 ) { if ( args . length == 4 && args [ 2 ] . equals ( ""-o"" ) ) { outstream = new FileOutputStream ( args [ 3 ] ) ; } else { usage ( ) ; return ; } } else { outstream = System . out ; } Writer output = new OutputStreamWriter ( outstream ) ; output = new BufferedWriter ( output ) ; int repeat = 1 ; if ( args . length > 4 ) { repeat = Integer . parseInt ( args [ 4 ] ) ; } Object [ ] emptyArgs = new Object [ 0 ] ; int character ; while ( ( character = reader . read ( ) ) != - 1 ) { char ch = ( char ) character ; if ( Character . isWhitespace ( ( char ) ch ) ) { if ( input . length ( ) > 0 ) { stemmer . setCurrent ( input . toString ( ) ) ; for ( int i = repeat ; i != 0 ; i -- ) { stemMethod . invoke ( stemmer , emptyArgs ) ; } output . write ( stemmer . getCurrent ( ) ) ; output . write ( '\n' ) ; input . delete ( 0 , input . length ( ) ) ; } } else { input . append ( Character . toLowerCase ( ch ) ) ; } } output . flush ( ) ; }",No
" public static void debugLsr ( Configuration conf , Path p , HbckErrorReporter errors ) throws IOException { if ( ! LOG . isDebugEnabled ( ) || p == null ) { return ; } FileSystem fs = p . getFileSystem ( conf ) ; if ( ! fs . exists ( p ) ) { return ; } errors . print ( p . toString ( ) ) ; if ( fs . isFile ( p ) ) { return ; } if ( fs . getFileStatus ( p ) . isDirectory ( ) ) { FileStatus [ ] fss = fs . listStatus ( p ) ; for ( FileStatus status : fss ) { debugLsr ( conf , status . getPath ( ) , errors ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TableInfo struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . recs = iprot . readI64 ( ) ; struct . setRecsIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . recsInMemory = iprot . readI64 ( ) ; struct . setRecsInMemoryIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tablets = iprot . readI32 ( ) ; struct . setTabletsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . onlineTablets = iprot . readI32 ( ) ; struct . setOnlineTabletsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ingestRate = iprot . readDouble ( ) ; struct . setIngestRateIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . ingestByteRate = iprot . readDouble ( ) ; struct . setIngestByteRateIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . queryRate = iprot . readDouble ( ) ; struct . setQueryRateIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . queryByteRate = iprot . readDouble ( ) ; struct . setQueryByteRateIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . minors = new Compacting ( ) ; struct . minors . read ( iprot ) ; struct . setMinorsIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . majors = new Compacting ( ) ; struct . majors . read ( iprot ) ; struct . setMajorsIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . scans = new Compacting ( ) ; struct . scans . read ( iprot ) ; struct . setScansIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . scanRate = iprot . readDouble ( ) ; struct . setScanRateIsSet ( true ) ; } }",Smelly
 public Record apply ( Record input ) { return input ; },No
 void visit ( P_Seq pathSeq ) ;,No
" public void whenNoDomainObjectAnnotation ( ) { facetFactory . process ( new ProcessClassContext ( DomainObjectAnnotationFacetFactoryTest . Customer . class , null , mockMethodRemover , facetHolder ) ) ; final Facet facet = facetHolder . getFacet ( ViewModelFacet . class ) ; Assert . assertNull ( facet ) ; expectNoMethodsRemoved ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public BigDecimal getDecimal ( ) throws ValueFormatException , IllegalStateException , RepositoryException { throw new ValueFormatException ( ""conversion to Decimal failed: inconvertible types"" ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void initPartitioner ( ) { partitioner = new RandomPartitioner ( ) ; },No
 protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; KeepAliveInfo info = ( KeepAliveInfo ) object ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , ProcessModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . processId = iprot . readString ( ) ; struct . setProcessIdIsSet ( true ) ; struct . experimentId = iprot . readString ( ) ; struct . setExperimentIdIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 21 ) ; if ( incoming . get ( 0 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . lastUpdateTime = iprot . readI64 ( ) ; struct . setLastUpdateTimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . processStatus = new org . apache . airavata . model . status . ProcessStatus ( ) ; struct . processStatus . read ( iprot ) ; struct . setProcessStatusIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . processDetail = iprot . readString ( ) ; struct . setProcessDetailIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . applicationInterfaceId = iprot . readString ( ) ; struct . setApplicationInterfaceIdIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . applicationDeploymentId = iprot . readString ( ) ; struct . setApplicationDeploymentIdIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . computeResourceId = iprot . readString ( ) ; struct . setComputeResourceIdIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { { org . apache . thrift . protocol . TList _list20 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . processInputs = new ArrayList < org . apache . airavata . model . application . io . InputDataObjectType > ( _list20 . size ) ; org . apache . airavata . model . application . io . InputDataObjectType _elem21 ; for ( int _i22 = 0 ; _i22 < _list20 . size ; ++ _i22 ) { _elem21 = new org . apache . airavata . model . application . io . InputDataObjectType ( ) ; _elem21 . read ( iprot ) ; struct . processInputs . add ( _elem21 ) ; } } struct . setProcessInputsIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TList _list23 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . processOutputs = new ArrayList < org . apache . airavata . model . application . io . OutputDataObjectType > ( _list23 . size ) ; org . apache . airavata . model . application . io . OutputDataObjectType _elem24 ; for ( int _i25 = 0 ; _i25 < _list23 . size ; ++ _i25 ) { _elem24 = new org . apache . airavata . model . application . io . OutputDataObjectType ( ) ; _elem24 . read ( iprot ) ; struct . processOutputs . add ( _elem24 ) ; } } struct . setProcessOutputsIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . resourceSchedule = new org . apache . airavata . model . scheduling . ComputationalResourceSchedulingModel ( ) ; struct . resourceSchedule . read ( iprot ) ; struct . setResourceScheduleIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { { org . apache . thrift . protocol . TList _list26 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . tasks = new ArrayList < org . apache . airavata . model . task . TaskModel > ( _list26 . size ) ; org . apache . airavata . model . task . TaskModel _elem27 ; for ( int _i28 = 0 ; _i28 < _list26 . size ; ++ _i28 ) { _elem27 = new org . apache . airavata . model . task . TaskModel ( ) ; _elem27 . read ( iprot ) ; struct . tasks . add ( _elem27 ) ; } } struct . setTasksIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . taskDag = iprot . readString ( ) ; struct . setTaskDagIsSet ( true ) ; } if ( incoming . get ( 12 ) ) { struct . processError = new org . apache . airavata . model . commons . ErrorModel ( ) ; struct . processError . read ( iprot ) ; struct . setProcessErrorIsSet ( true ) ; } if ( incoming . get ( 13 ) ) { struct . gatewayExecutionId = iprot . readString ( ) ; struct . setGatewayExecutionIdIsSet ( true ) ; } if ( incoming . get ( 14 ) ) { struct . enableEmailNotification = iprot . readBool ( ) ; struct . setEnableEmailNotificationIsSet ( true ) ; } if ( incoming . get ( 15 ) ) { { org . apache . thrift . protocol . TList _list29 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . emailAddresses = new ArrayList < String > ( _list29 . size ) ; String _elem30 ; for ( int _i31 = 0 ; _i31 < _list29 . size ; ++ _i31 ) { _elem30 = iprot . readString ( ) ; struct . emailAddresses . add ( _elem30 ) ; } } struct . setEmailAddressesIsSet ( true ) ; } if ( incoming . get ( 16 ) ) { struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; } if ( incoming . get ( 17 ) ) { struct . userDn = iprot . readString ( ) ; struct . setUserDnIsSet ( true ) ; } if ( incoming . get ( 18 ) ) { struct . generateCert = iprot . readBool ( ) ; struct . setGenerateCertIsSet ( true ) ; } if ( incoming . get ( 19 ) ) { struct . experimentDataDir = iprot . readString ( ) ; struct . setExperimentDataDirIsSet ( true ) ; } if ( incoming . get ( 20 ) ) { struct . userName = iprot . readString ( ) ; struct . setUserNameIsSet ( true ) ; } }",Smelly
 public Instant getCurrentTimestamp ( ) throws NoSuchElementException { return boundedReader . getCurrentTimestamp ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 ODataResponse createDebugResponse ( DebugInformation debugInfo ) ;,No
" public final void setSignAddressingHeaders ( boolean signAddressingHeaders ) { this . signAddressingHeaders = signAddressingHeaders ; XPathExpression soap11Expression = new XPathExpression ( ""/soapenv:Envelope/soapenv:Header/wsa:ReplyTo"" , CoverageType . SIGNED ) ; XPathExpression soap11Expression2 = new XPathExpression ( ""/soapenv:Envelope/soapenv:Header/wsa:FaultTo"" , CoverageType . SIGNED ) ; XPathExpression soap12Expression = new XPathExpression ( ""/soapenv12:Envelope/soapenv12:Header/wsa:ReplyTo"" , CoverageType . SIGNED ) ; XPathExpression soap12Expression2 = new XPathExpression ( ""/soapenv12:Envelope/soapenv12:Header/wsa:FaultTo"" , CoverageType . SIGNED ) ; if ( signAddressingHeaders ) { if ( ! xPaths . contains ( soap11Expression ) ) { xPaths . add ( soap11Expression ) ; } if ( ! xPaths . contains ( soap11Expression2 ) ) { xPaths . add ( soap11Expression2 ) ; } if ( ! xPaths . contains ( soap12Expression ) ) { xPaths . add ( soap12Expression ) ; } if ( ! xPaths . contains ( soap12Expression2 ) ) { xPaths . add ( soap12Expression2 ) ; } } else { if ( xPaths . contains ( soap11Expression ) ) { xPaths . remove ( soap11Expression ) ; } if ( xPaths . contains ( soap11Expression2 ) ) { xPaths . remove ( soap11Expression2 ) ; } if ( xPaths . contains ( soap12Expression ) ) { xPaths . remove ( soap12Expression ) ; } if ( xPaths . contains ( soap12Expression2 ) ) { xPaths . remove ( soap12Expression2 ) ; } } }",No
 private boolean isLogoutRequiredBeforeLoggingBackIn ( ) { return ! expiringCredentialRefreshConfig . loginRefreshReloginAllowedBeforeLogout ( ) ; },Smelly
" public int compare ( Object o1 , Object o2 ) { String oid1 = """" ; String oid2 = """" ; if ( ( o1 instanceof AttributeTypeDifference ) && ( o2 instanceof AttributeTypeDifference ) ) { AttributeTypeDifference atd1 = ( AttributeTypeDifference ) o1 ; AttributeTypeDifference atd2 = ( AttributeTypeDifference ) o2 ; switch ( atd1 . getType ( ) ) { case ADDED : oid1 = ( ( SchemaObject ) atd1 . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid1 = ( ( SchemaObject ) atd1 . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid1 = ( ( SchemaObject ) atd1 . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid1 = ( ( SchemaObject ) atd1 . getDestination ( ) ) . getOid ( ) ; break ; } switch ( atd2 . getType ( ) ) { case ADDED : oid2 = ( ( SchemaObject ) atd2 . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid2 = ( ( SchemaObject ) atd2 . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid2 = ( ( SchemaObject ) atd2 . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid2 = ( ( SchemaObject ) atd2 . getDestination ( ) ) . getOid ( ) ; break ; } } else if ( ( o1 instanceof ObjectClassDifference ) && ( o2 instanceof ObjectClassDifference ) ) { ObjectClassDifference ocd1 = ( ObjectClassDifference ) o1 ; ObjectClassDifference ocd2 = ( ObjectClassDifference ) o2 ; switch ( ocd1 . getType ( ) ) { case ADDED : oid1 = ( ( SchemaObject ) ocd1 . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid1 = ( ( SchemaObject ) ocd1 . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid1 = ( ( SchemaObject ) ocd1 . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid1 = ( ( SchemaObject ) ocd1 . getDestination ( ) ) . getOid ( ) ; break ; } switch ( ocd2 . getType ( ) ) { case ADDED : oid2 = ( ( SchemaObject ) ocd2 . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid2 = ( ( SchemaObject ) ocd2 . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid2 = ( ( SchemaObject ) ocd2 . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid2 = ( ( SchemaObject ) ocd2 . getDestination ( ) ) . getOid ( ) ; break ; } } else if ( ( o1 instanceof AttributeTypeDifference ) && ( o2 instanceof ObjectClassDifference ) ) { AttributeTypeDifference atd = ( AttributeTypeDifference ) o1 ; ObjectClassDifference ocd = ( ObjectClassDifference ) o2 ; switch ( atd . getType ( ) ) { case ADDED : oid1 = ( ( SchemaObject ) atd . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid1 = ( ( SchemaObject ) atd . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid1 = ( ( SchemaObject ) atd . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid1 = ( ( SchemaObject ) atd . getDestination ( ) ) . getOid ( ) ; break ; } switch ( ocd . getType ( ) ) { case ADDED : oid2 = ( ( SchemaObject ) ocd . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid2 = ( ( SchemaObject ) ocd . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid2 = ( ( SchemaObject ) ocd . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid2 = ( ( SchemaObject ) ocd . getDestination ( ) ) . getOid ( ) ; break ; } } else if ( ( o1 instanceof ObjectClassDifference ) && ( o2 instanceof AttributeTypeDifference ) ) { ObjectClassDifference ocd = ( ObjectClassDifference ) o1 ; AttributeTypeDifference atd = ( AttributeTypeDifference ) o2 ; switch ( ocd . getType ( ) ) { case ADDED : oid1 = ( ( SchemaObject ) ocd . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid1 = ( ( SchemaObject ) ocd . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid1 = ( ( SchemaObject ) ocd . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid1 = ( ( SchemaObject ) ocd . getDestination ( ) ) . getOid ( ) ; break ; } switch ( atd . getType ( ) ) { case ADDED : oid2 = ( ( SchemaObject ) atd . getDestination ( ) ) . getOid ( ) ; break ; case MODIFIED : oid2 = ( ( SchemaObject ) atd . getDestination ( ) ) . getOid ( ) ; break ; case REMOVED : oid2 = ( ( SchemaObject ) atd . getSource ( ) ) . getOid ( ) ; break ; case IDENTICAL : oid2 = ( ( SchemaObject ) atd . getDestination ( ) ) . getOid ( ) ; break ; } } return oid1 . compareToIgnoreCase ( oid2 ) ; }",Smelly
" public String toString ( int options ) { String ret ; if ( this . type == CONCAT ) { if ( this . children . size ( ) == 2 ) { Token ch = this . getChild ( 0 ) ; Token ch2 = this . getChild ( 1 ) ; if ( ch2 . type == CLOSURE && ch2 . getChild ( 0 ) == ch ) { ret = ch . toString ( options ) + ""+"" ; } else if ( ch2 . type == NONGREEDYCLOSURE && ch2 . getChild ( 0 ) == ch ) { ret = ch . toString ( options ) + ""+?"" ; } else ret = ch . toString ( options ) + ch2 . toString ( options ) ; } else { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < this . children . size ( ) ; i ++ ) { sb . append ( ( ( Token ) this . children . elementAt ( i ) ) . toString ( options ) ) ; } ret = new String ( sb ) ; } return ret ; } if ( this . children . size ( ) == 2 && this . getChild ( 1 ) . type == EMPTY ) { ret = this . getChild ( 0 ) . toString ( options ) + ""?"" ; } else if ( this . children . size ( ) == 2 && this . getChild ( 0 ) . type == EMPTY ) { ret = this . getChild ( 1 ) . toString ( options ) + ""??"" ; } else { StringBuffer sb = new StringBuffer ( ) ; sb . append ( ( ( Token ) this . children . elementAt ( 0 ) ) . toString ( options ) ) ; for ( int i = 1 ; i < this . children . size ( ) ; i ++ ) { sb . append ( '|' ) ; sb . append ( ( ( Token ) this . children . elementAt ( i ) ) . toString ( options ) ) ; } ret = new String ( sb ) ; } return ret ; }",No
 protected boolean hasToBeRegistered ( final TaskExec execution ) { return true ; },No
" public void process ( Exchange exchange ) throws Exception { String bank = ( String ) exchange . getIn ( ) . getHeader ( Constants . PROPERTY_BANK ) ; Double rate = ( Double ) exchange . getIn ( ) . getHeader ( Constants . PROPERTY_RATE ) ; String ssn = ( String ) exchange . getIn ( ) . getHeader ( Constants . PROPERTY_SSN ) ; exchange . getOut ( ) . setBody ( ""Loan quotion for Client "" + ssn + ""."" + "" The lowest rate bank is "" + bank + "", the rate is "" + rate ) ; }",Smelly
" public JXPathBindingBase buildBinding ( Element bindingElm , JXPathBindingManager . Assistant assistant ) throws BindingException { try { CommonAttributes commonAtts = JXPathBindingBuilderBase . getCommonAttributes ( bindingElm ) ; String repeaterId = DomHelper . getAttribute ( bindingElm , ""id"" ) ; String parentPath = DomHelper . getAttribute ( bindingElm , ""parent-path"" ) ; String rowPath = DomHelper . getAttribute ( bindingElm , ""row-path"" ) ; String rowPathForInsert = DomHelper . getAttribute ( bindingElm , ""row-path-insert"" , rowPath ) ; String uniqueRowId = DomHelper . getAttribute ( bindingElm , ""unique-row-id"" , null ) ; String uniqueRowIdPath = DomHelper . getAttribute ( bindingElm , ""unique-path"" , null ) ; Convertor convertor = null ; Locale convertorLocale = Locale . US ; Element convertorEl = DomHelper . getChildElement ( bindingElm , Constants . WD_NS , ""convertor"" ) ; if ( convertorEl != null ) { String datatype = DomHelper . getAttribute ( convertorEl , ""datatype"" ) ; String localeStr = convertorEl . getAttribute ( ""datatype"" ) ; if ( ! localeStr . equals ( """" ) ) { convertorLocale = I18nUtils . parseLocale ( localeStr ) ; } convertor = assistant . getDatatypeManager ( ) . createConvertor ( datatype , convertorEl ) ; } Element childWrapElement = DomHelper . getChildElement ( bindingElm , BindingManager . NAMESPACE , ""on-bind"" ) ; if ( childWrapElement == null ) { throw new BindingException ( ""RepeaterBinding misses '<on-bind>' child definition. "" + DomHelper . getLocation ( bindingElm ) ) ; } JXPathBindingBase [ ] childBindings = assistant . makeChildBindings ( childWrapElement ) ; Element deleteWrapElement = DomHelper . getChildElement ( bindingElm , BindingManager . NAMESPACE , ""on-delete-row"" ) ; JXPathBindingBase [ ] deleteBindings = null ; if ( deleteWrapElement != null ) { deleteBindings = assistant . makeChildBindings ( deleteWrapElement ) ; } Element insertWrapElement = DomHelper . getChildElement ( bindingElm , BindingManager . NAMESPACE , ""on-insert-row"" ) ; JXPathBindingBase insertBinding = null ; if ( insertWrapElement != null ) { insertBinding = assistant . makeChildBindings ( insertWrapElement ) [ 0 ] ; } Element uniqueFieldWrapElement = DomHelper . getChildElement ( bindingElm , BindingManager . NAMESPACE , ""unique-row"" ) ; JXPathBindingBase [ ] uniqueFieldBinding = null ; if ( uniqueFieldWrapElement != null ) { uniqueFieldBinding = assistant . makeChildBindings ( uniqueFieldWrapElement ) ; } else if ( uniqueRowId == null || uniqueRowIdPath == null ) { throw new BindingException ( ""RepeaterBinding misses '<unique-row>' child definition. "" + DomHelper . getLocation ( bindingElm ) ) ; } else { if ( this . getLogger ( ) . isInfoEnabled ( ) ) { this . getLogger ( ) . info ( ""<wb:repeater>: The attributes 'unique-row-id' and "" + ""'unique-path' are deprecated. Use <unique-row> child element instead."" + "" Located at "" + DomHelper . getLocation ( bindingElm ) ) ; } } RepeaterJXPathBinding repeaterBinding = new RepeaterJXPathBinding ( commonAtts , repeaterId , parentPath , rowPath , rowPathForInsert , uniqueRowId , uniqueRowIdPath , convertor , convertorLocale , childBindings , insertBinding , deleteBindings , uniqueFieldBinding ) ; return repeaterBinding ; } catch ( BindingException e ) { throw e ; } catch ( Exception e ) { throw new BindingException ( ""Error building repeater binding defined at "" + DomHelper . getLocation ( bindingElm ) , e ) ; } }",Smelly
" private < T > void addRow ( ShellTable table , String label , SourceAnd < T > value , String descriptionText ) { Row row = table . addRow ( ) ; row . addContent ( label , value . val ( ) ) ; if ( source ) { row . addContent ( value . source ) ; } if ( description ) { row . addContent ( descriptionText ) ; } }",No
" private Object serviceInvoker ( String localName , ModelService modelService , Map < String , Object > context ) throws GenericServiceException { DispatchContext dctx = dispatcher . getLocalContext ( localName ) ; if ( modelService == null ) { Debug . logError ( ""ERROR: Null Model Service."" , module ) ; } if ( dctx == null ) { Debug . logError ( ""ERROR: Null DispatchContext."" , module ) ; } if ( context == null ) { Debug . logError ( ""ERROR: Null Service Context."" , module ) ; } Object result = null ; if ( modelService . location == null || modelService . invoke == null ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] is missing location and/or invoke values which are required for execution."" ) ; } ClassLoader cl = null ; if ( dctx == null ) { cl = this . getClass ( ) . getClassLoader ( ) ; } else { cl = dctx . getClassLoader ( ) ; } try { Class < ? > c = cl . loadClass ( this . getLocation ( modelService ) ) ; Method m = c . getMethod ( modelService . invoke , DispatchContext . class , Map . class ) ; if ( Modifier . isStatic ( m . getModifiers ( ) ) ) { result = m . invoke ( null , dctx , context ) ; } else { result = m . invoke ( c . newInstance ( ) , dctx , context ) ; } } catch ( ClassNotFoundException cnfe ) { throw new GenericServiceException ( ""Cannot find service ["" + modelService . name + ""] location class"" , cnfe ) ; } catch ( NoSuchMethodException nsme ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] specified Java method (invoke attribute) does not exist"" , nsme ) ; } catch ( SecurityException se ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] Access denied"" , se ) ; } catch ( IllegalAccessException iae ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] Method not accessible"" , iae ) ; } catch ( IllegalArgumentException iarge ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] Invalid parameter match"" , iarge ) ; } catch ( InvocationTargetException ite ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] target threw an unexpected exception"" , ite . getTargetException ( ) ) ; } catch ( NullPointerException npe ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] ran into an unexpected null object"" , npe ) ; } catch ( ExceptionInInitializerError eie ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] Initialization failed"" , eie ) ; } catch ( Throwable th ) { throw new GenericServiceException ( ""Service ["" + modelService . name + ""] Error or unknown exception"" , th ) ; } return result ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void setStatements ( Statements statements ) { statements . setBinaryDataType ( ""LONG BYTE"" ) ; statements . setStringIdDataType ( ""VARCHAR(250) ASCII"" ) ; statements . setContainerNameDataType ( ""VARCHAR(250) ASCII"" ) ; statements . setLongDataType ( ""INTEGER"" ) ; statements . setSequenceDataType ( ""INTEGER"" ) ; super . setStatements ( statements ) ; }",Smelly
" public void interpret ( String token , String value ) throws InterpretException { int dotPosition = token . indexOf ( DOT ) ; if ( dotPosition == - 1 ) { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } String providerRole = token . substring ( 0 , dotPosition ) ; if ( providerRole != null && providerRole . isEmpty ( ) ) { providerRole = null ; } String nextToken = token . substring ( dotPosition + 1 ) ; dotPosition = nextToken . indexOf ( DOT ) ; if ( dotPosition == - 1 ) { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } String providerName = nextToken . substring ( 0 , dotPosition ) ; if ( providerName != null && providerName . isEmpty ( ) ) { providerName = null ; } nextToken = nextToken . substring ( dotPosition + 1 ) ; Provider provider = topology . getProvider ( providerRole , providerName ) ; if ( provider == null ) { provider = new Provider ( ) ; provider . setName ( providerName ) ; provider . setRole ( providerRole ) ; topology . addProvider ( provider ) ; } if ( PROVIDER_ENABLED . equalsIgnoreCase ( nextToken ) ) { provider . setEnabled ( Boolean . valueOf ( value ) ) ; } else { dotPosition = nextToken . indexOf ( DOT ) ; if ( dotPosition != - 1 ) { String aggregator = nextToken . substring ( 0 , dotPosition ) ; nextToken = nextToken . substring ( dotPosition + 1 ) ; if ( AGGREGATOR_PARAM . equalsIgnoreCase ( aggregator ) ) { new ProviderParameterPropertyInterpreter ( provider ) . interpret ( nextToken , value ) ; } else { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } } else { throw new InterpretException ( gatewayResources . unsupportedPropertyTokenError ( token ) ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 Throwable failureCause ( ) ;,No
" public Thread newThread ( Runnable r ) { Thread t = new Thread ( group , r , namePrefix + threadNumber . getAndIncrement ( ) , 0 ) ; if ( t . isDaemon ( ) ) t . setDaemon ( false ) ; if ( t . getPriority ( ) != Thread . NORM_PRIORITY ) t . setPriority ( Thread . NORM_PRIORITY ) ; return t ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 MessageObserver getMessageObserver ( ) ;,No
" public void setSafeValue ( ObjectInspector oi , Object hiveFieldValue , ValueVector outputVV , int outputIndex ) { final Text value = ( ( HiveCharObjectInspector ) oi ) . getPrimitiveWritableObject ( hiveFieldValue ) . getStrippedValue ( ) ; final byte [ ] valueBytes = value . getBytes ( ) ; final int valueLen = value . getLength ( ) ; ( ( NullableVarCharVector ) outputVV ) . getMutator ( ) . setSafe ( outputIndex , valueBytes , 0 , valueLen ) ; }",No
 void cleanUp ( ) ;,No
" public void testThreadLocal ( ) { assertNull ( InterpreterContext . get ( ) ) ; InterpreterContext . set ( new InterpreterContext ( null , null , null , null , null , null , null , null , null , null , null , null ) ) ; assertNotNull ( InterpreterContext . get ( ) ) ; InterpreterContext . remove ( ) ; assertNull ( InterpreterContext . get ( ) ) ; }",Smelly
 List < SingleEventEmitter > nonFinalSEEs ( ) { return nonFinals ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Gateway struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . gatewayApprovalStatus = org . apache . airavata . model . workspace . GatewayApprovalStatus . findByValue ( iprot . readI32 ( ) ) ; struct . setGatewayApprovalStatusIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . gatewayName = iprot . readString ( ) ; struct . setGatewayNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . domain = iprot . readString ( ) ; struct . setDomainIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . emailAddress = iprot . readString ( ) ; struct . setEmailAddressIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . gatewayAcronym = iprot . readString ( ) ; struct . setGatewayAcronymIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . gatewayURL = iprot . readString ( ) ; struct . setGatewayURLIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . gatewayPublicAbstract = iprot . readString ( ) ; struct . setGatewayPublicAbstractIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . reviewProposalDescription = iprot . readString ( ) ; struct . setReviewProposalDescriptionIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . gatewayAdminFirstName = iprot . readString ( ) ; struct . setGatewayAdminFirstNameIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . gatewayAdminLastName = iprot . readString ( ) ; struct . setGatewayAdminLastNameIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . gatewayAdminEmail = iprot . readString ( ) ; struct . setGatewayAdminEmailIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . identityServerUserName = iprot . readString ( ) ; struct . setIdentityServerUserNameIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . identityServerPasswordToken = iprot . readString ( ) ; struct . setIdentityServerPasswordTokenIsSet ( true ) ; } }",Smelly
" public static URI create ( final ContextURL contextURL ) { StringBuilder result = new StringBuilder ( ) ; if ( contextURL . getServiceRoot ( ) != null ) { result . append ( contextURL . getServiceRoot ( ) ) ; } else if ( contextURL . getODataPath ( ) != null ) { String oDataPath = contextURL . getODataPath ( ) ; char [ ] chars = oDataPath . toCharArray ( ) ; for ( int i = 1 ; i < chars . length - 1 ; i ++ ) { if ( chars [ i ] == '/' && chars [ i - 1 ] != '/' ) { result . append ( ""../"" ) ; } } } result . append ( Constants . METADATA ) ; if ( contextURL . getEntitySetOrSingletonOrType ( ) != null ) { result . append ( '#' ) ; if ( contextURL . isCollection ( ) ) { result . append ( ""Collection("" ) . append ( Encoder . encode ( contextURL . getEntitySetOrSingletonOrType ( ) ) ) . append ( "")"" ) ; } else { result . append ( Encoder . encode ( contextURL . getEntitySetOrSingletonOrType ( ) ) ) ; } } if ( contextURL . getDerivedEntity ( ) != null ) { if ( contextURL . getEntitySetOrSingletonOrType ( ) == null ) { throw new IllegalArgumentException ( ""ContextURL: Derived Type without anything to derive from!"" ) ; } result . append ( '/' ) . append ( Encoder . encode ( contextURL . getDerivedEntity ( ) ) ) ; } if ( contextURL . getKeyPath ( ) != null ) { result . append ( '(' ) . append ( contextURL . getKeyPath ( ) ) . append ( ')' ) ; } if ( contextURL . getNavOrPropertyPath ( ) != null ) { result . append ( '/' ) . append ( contextURL . getNavOrPropertyPath ( ) ) ; } if ( contextURL . getSelectList ( ) != null ) { result . append ( '(' ) . append ( contextURL . getSelectList ( ) ) . append ( ')' ) ; } if ( contextURL . isReference ( ) ) { if ( contextURL . getEntitySetOrSingletonOrType ( ) != null ) { throw new IllegalArgumentException ( ""ContextURL: $ref with Entity Set"" ) ; } if ( contextURL . isCollection ( ) ) { result . append ( '#' ) . append ( ""Collection("" ) . append ( ContextURL . Suffix . REFERENCE . getRepresentation ( ) ) . append ( "")"" ) ; } else { result . append ( '#' ) . append ( ContextURL . Suffix . REFERENCE . getRepresentation ( ) ) ; } } else if ( contextURL . getSuffix ( ) != null ) { if ( contextURL . getEntitySetOrSingletonOrType ( ) == null ) { throw new IllegalArgumentException ( ""ContextURL: Suffix without preceding Entity Set!"" ) ; } result . append ( '/' ) . append ( contextURL . getSuffix ( ) . getRepresentation ( ) ) ; } return URI . create ( result . toString ( ) ) ; }",Smelly
" public void begin ( String namespace , String name , Attributes attributes ) throws Exception { ContextEnvironment envEntry = ( ContextEnvironment ) digester . peek ( ) ; envEntry . setOverride ( false ) ; if ( digester . getLogger ( ) . isDebugEnabled ( ) ) { digester . getLogger ( ) . debug ( envEntry . getClass ( ) . getName ( ) + "".setOverride(false)"" ) ; } }",Smelly
 public void endOfFileReached ( ) { reachedEndOfFile ++ ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , ActionStats struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 8 ) ; if ( incoming . get ( 0 ) ) { struct . status = iprot . readI32 ( ) ; struct . setStatusIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . elapsed = iprot . readDouble ( ) ; struct . setElapsedIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . num = iprot . readI32 ( ) ; struct . setNumIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . count = iprot . readI64 ( ) ; struct . setCountIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . sumDev = iprot . readDouble ( ) ; struct . setSumDevIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . fail = iprot . readI32 ( ) ; struct . setFailIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . queueTime = iprot . readDouble ( ) ; struct . setQueueTimeIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . queueSumDev = iprot . readDouble ( ) ; struct . setQueueSumDevIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public double expectedValue ( ) { return this . fourthMoment ; },No
 String getPathStr ( ) ;,No
 public int hashCode ( ) { int ret = 0 ; ret = ret * 31 + empId ; ret = ret * 31 + name . hashCode ( ) ; if ( dependents != null ) for ( Dependent1Xml d : dependents ) ret = ret * 31 + d . id . hashCode ( ) ; return ret ; },No
 public Type getDeclaringClass ( ) { return syntheticType ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public static void main ( final String [ ] args ) throws Exception { if ( args . length < 1 ) { System . err . println ( ""StreamsNamedRepartitionTest requires one argument (properties-file) but none provided: "" ) ; } final String propFileName = args [ 0 ] ; final Properties streamsProperties = Utils . loadProps ( propFileName ) ; System . out . println ( ""StreamsTest instance started NAMED_REPARTITION_TEST"" ) ; System . out . println ( ""props="" + streamsProperties ) ; final String inputTopic = ( String ) ( Objects . requireNonNull ( streamsProperties . remove ( ""input.topic"" ) ) ) ; final String aggregationTopic = ( String ) ( Objects . requireNonNull ( streamsProperties . remove ( ""aggregation.topic"" ) ) ) ; final boolean addOperators = Boolean . valueOf ( Objects . requireNonNull ( ( String ) streamsProperties . remove ( ""add.operations"" ) ) ) ; final Initializer < Integer > initializer = ( ) -> 0 ; final Aggregator < String , String , Integer > aggregator = ( k , v , agg ) -> agg + Integer . parseInt ( v ) ; final Function < String , String > keyFunction = s -> Integer . toString ( Integer . parseInt ( s ) % 9 ) ; final StreamsBuilder builder = new StreamsBuilder ( ) ; final KStream < String , String > sourceStream = builder . stream ( inputTopic , Consumed . with ( Serdes . String ( ) , Serdes . String ( ) ) ) ; sourceStream . peek ( ( k , v ) -> System . out . println ( String . format ( ""input data key=%s, value=%s"" , k , v ) ) ) ; final KStream < String , String > mappedStream = sourceStream . selectKey ( ( k , v ) -> keyFunction . apply ( v ) ) ; final KStream < String , String > maybeUpdatedStream ; if ( addOperators ) { maybeUpdatedStream = mappedStream . filter ( ( k , v ) -> true ) . mapValues ( v -> Integer . toString ( Integer . parseInt ( v ) + 1 ) ) ; } else { maybeUpdatedStream = mappedStream ; } maybeUpdatedStream . groupByKey ( Grouped . with ( ""grouped-stream"" , Serdes . String ( ) , Serdes . String ( ) ) ) . aggregate ( initializer , aggregator , Materialized . < String , Integer , KeyValueStore < Bytes , byte [ ] > > as ( ""count-store"" ) . withKeySerde ( Serdes . String ( ) ) . withValueSerde ( Serdes . Integer ( ) ) ) . toStream ( ) . peek ( ( k , v ) -> System . out . println ( String . format ( ""AGGREGATED key=%s value=%s"" , k , v ) ) ) . to ( aggregationTopic , Produced . with ( Serdes . String ( ) , Serdes . Integer ( ) ) ) ; final Properties config = new Properties ( ) ; config . setProperty ( StreamsConfig . APPLICATION_ID_CONFIG , ""StreamsNamedRepartitionTest"" ) ; config . setProperty ( StreamsConfig . CACHE_MAX_BYTES_BUFFERING_CONFIG , ""0"" ) ; config . setProperty ( StreamsConfig . DEFAULT_KEY_SERDE_CLASS_CONFIG , Serdes . String ( ) . getClass ( ) . getName ( ) ) ; config . setProperty ( StreamsConfig . DEFAULT_VALUE_SERDE_CLASS_CONFIG , Serdes . String ( ) . getClass ( ) . getName ( ) ) ; config . putAll ( streamsProperties ) ; final Topology topology = builder . build ( config ) ; final KafkaStreams streams = new KafkaStreams ( topology , config ) ; streams . setStateListener ( ( newState , oldState ) -> { if ( oldState == State . REBALANCING && newState == State . RUNNING ) { if ( addOperators ) { System . out . println ( ""UPDATED Topology"" ) ; } else { System . out . println ( ""REBALANCING -> RUNNING"" ) ; } System . out . flush ( ) ; } } ) ; streams . start ( ) ; Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ( ) -> { System . out . println ( ""closing Kafka Streams instance"" ) ; System . out . flush ( ) ; streams . close ( Duration . ofMillis ( 5000 ) ) ; System . out . println ( ""NAMED_REPARTITION_TEST Streams Stopped"" ) ; System . out . flush ( ) ; } ) ) ; }",Smelly
" public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof StoredByDesc ) ) return false ; StoredByDesc that = ( StoredByDesc ) o ; return xequals ( this . className , that . className ) && xequals ( this . properties , that . properties ) ; }",Smelly
 When when ( ) ;,No
 private static int getSnapshotFormat ( final SnapshotDescription desc ) { return desc . hasVersion ( ) ? desc . getVersion ( ) : SnapshotManifestV1 . DESCRIPTOR_VERSION ; },No
" public void postAnalyze ( HiveSemanticAnalyzerHookContext context , List < Task < ? extends Serializable > > rootTasks ) throws SemanticException { if ( rootTasks . size ( ) == 0 ) { return ; } CreateTableDesc desc = ( ( DDLTask ) rootTasks . get ( rootTasks . size ( ) - 1 ) ) . getWork ( ) . getCreateTblDesc ( ) ; if ( desc == null ) { return ; } Map < String , String > tblProps = desc . getTblProps ( ) ; if ( tblProps == null ) { tblProps = new HashMap < String , String > ( ) ; } String storageHandler = desc . getStorageHandler ( ) ; if ( StringUtils . isEmpty ( storageHandler ) ) { } else { try { HCatStorageHandler storageHandlerInst = HCatUtil . getStorageHandler ( context . getConf ( ) , desc . getStorageHandler ( ) , desc . getSerName ( ) , desc . getInputFormat ( ) , desc . getOutputFormat ( ) ) ; } catch ( IOException e ) { throw new SemanticException ( e ) ; } } if ( desc != null ) { try { Table table = context . getHive ( ) . newTable ( desc . getTableName ( ) ) ; if ( desc . getLocation ( ) != null ) { table . setDataLocation ( new Path ( desc . getLocation ( ) ) ) ; } if ( desc . getStorageHandler ( ) != null ) { table . setProperty ( org . apache . hadoop . hive . metastore . api . hive_metastoreConstants . META_TABLE_STORAGE , desc . getStorageHandler ( ) ) ; } for ( Map . Entry < String , String > prop : tblProps . entrySet ( ) ) { table . setProperty ( prop . getKey ( ) , prop . getValue ( ) ) ; } for ( Map . Entry < String , String > prop : desc . getSerdeProps ( ) . entrySet ( ) ) { table . setSerdeParam ( prop . getKey ( ) , prop . getValue ( ) ) ; } if ( HiveConf . getBoolVar ( context . getConf ( ) , HiveConf . ConfVars . HIVE_AUTHORIZATION_ENABLED ) ) { authorize ( table , Privilege . CREATE ) ; } } catch ( HiveException ex ) { throw new SemanticException ( ex ) ; } } desc . setTblProps ( tblProps ) ; context . getConf ( ) . set ( HCatConstants . HCAT_CREATE_TBL_NAME , tableName ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public MockCatalogReader init ( ) { super . init ( ) ; MockSchema salesSchema = new MockSchema ( ""SALES"" ) ; List < String > empModifiableViewNames = ImmutableList . of ( salesSchema . getCatalogName ( ) , salesSchema . getName ( ) , ""EMP_MODIFIABLEVIEW"" ) ; TableMacro empModifiableViewMacro = MockModifiableViewRelOptTable . viewMacro ( rootSchema , ""select EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, SLACKER from EMPDEFAULTS"" + "" where DEPTNO = 20"" , empModifiableViewNames . subList ( 0 , 2 ) , ImmutableList . of ( empModifiableViewNames . get ( 2 ) ) , true ) ; TranslatableTable empModifiableView = empModifiableViewMacro . apply ( ImmutableList . of ( ) ) ; MockModifiableViewRelOptTable mockEmpViewTable = MockModifiableViewRelOptTable . create ( ( MockModifiableViewRelOptTable . MockModifiableViewTable ) empModifiableView , this , empModifiableViewNames . get ( 0 ) , empModifiableViewNames . get ( 1 ) , empModifiableViewNames . get ( 2 ) , false , 20 , null ) ; registerTable ( mockEmpViewTable ) ; List < String > empModifiableViewNames2 = ImmutableList . of ( salesSchema . getCatalogName ( ) , salesSchema . getName ( ) , ""EMP_MODIFIABLEVIEW2"" ) ; TableMacro empModifiableViewMacro2 = MockModifiableViewRelOptTable . viewMacro ( rootSchema , ""select ENAME, EMPNO, JOB, DEPTNO, SLACKER, SAL, EXTRA, HIREDATE, MGR, COMM"" + "" from EMPDEFAULTS extend (EXTRA boolean)"" + "" where DEPTNO = 20"" , empModifiableViewNames2 . subList ( 0 , 2 ) , ImmutableList . of ( empModifiableViewNames . get ( 2 ) ) , true ) ; TranslatableTable empModifiableView2 = empModifiableViewMacro2 . apply ( ImmutableList . of ( ) ) ; MockModifiableViewRelOptTable mockEmpViewTable2 = MockModifiableViewRelOptTable . create ( ( MockModifiableViewRelOptTable . MockModifiableViewTable ) empModifiableView2 , this , empModifiableViewNames2 . get ( 0 ) , empModifiableViewNames2 . get ( 1 ) , empModifiableViewNames2 . get ( 2 ) , false , 20 , null ) ; registerTable ( mockEmpViewTable2 ) ; List < String > empModifiableViewNames3 = ImmutableList . of ( salesSchema . getCatalogName ( ) , salesSchema . getName ( ) , ""EMP_MODIFIABLEVIEW3"" ) ; TableMacro empModifiableViewMacro3 = MockModifiableViewRelOptTable . viewMacro ( rootSchema , ""select EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, SLACKER from EMPDEFAULTS"" + "" where DEPTNO = 20"" , empModifiableViewNames3 . subList ( 0 , 2 ) , ImmutableList . of ( empModifiableViewNames3 . get ( 2 ) ) , true ) ; TranslatableTable empModifiableView3 = empModifiableViewMacro3 . apply ( ImmutableList . of ( ) ) ; MockModifiableViewRelOptTable mockEmpViewTable3 = MockModifiableViewRelOptTable . create ( ( MockModifiableViewRelOptTable . MockModifiableViewTable ) empModifiableView3 , this , empModifiableViewNames3 . get ( 0 ) , empModifiableViewNames3 . get ( 1 ) , empModifiableViewNames3 . get ( 2 ) , false , 20 , null ) ; registerTable ( mockEmpViewTable3 ) ; MockSchema structTypeSchema = new MockSchema ( ""STRUCT"" ) ; registerSchema ( structTypeSchema ) ; final Fixture f = new Fixture ( typeFactory ) ; final List < CompoundNameColumn > columnsExtended = Arrays . asList ( new CompoundNameColumn ( """" , ""K0"" , f . varchar20TypeNull ) , new CompoundNameColumn ( """" , ""C1"" , f . varchar20TypeNull ) , new CompoundNameColumn ( ""F0"" , ""C0"" , f . intType ) , new CompoundNameColumn ( ""F1"" , ""C1"" , f . intTypeNull ) ) ; final List < CompoundNameColumn > extendedColumns = new ArrayList < CompoundNameColumn > ( columnsExtended ) ; extendedColumns . add ( new CompoundNameColumn ( ""F2"" , ""C2"" , f . varchar20Type ) ) ; final CompoundNameColumnResolver structExtendedTableResolver = new CompoundNameColumnResolver ( extendedColumns , ""F0"" ) ; final MockTable structExtendedTypeTable = MockTable . create ( this , structTypeSchema , ""T_EXTEND"" , false , 100 , structExtendedTableResolver ) ; for ( CompoundNameColumn column : columnsExtended ) { structExtendedTypeTable . addColumn ( column . getName ( ) , column . type ) ; } registerTable ( structExtendedTypeTable ) ; MockSchema virtualColumnsSchema = new MockSchema ( ""VIRTUALCOLUMNS"" ) ; registerSchema ( virtualColumnsSchema ) ; final MockTable virtualColumnsTable1 = MockTable . create ( this , virtualColumnsSchema , ""VC_T1"" , false , 100 , null , new VirtualColumnsExpressionFactory ( ) , false ) ; virtualColumnsTable1 . addColumn ( ""A"" , f . intTypeNull ) ; virtualColumnsTable1 . addColumn ( ""B"" , f . bigintType ) ; virtualColumnsTable1 . addColumn ( ""C"" , f . varchar10Type ) ; virtualColumnsTable1 . addColumn ( ""D"" , f . intTypeNull ) ; virtualColumnsTable1 . addColumn ( ""E"" , f . bigintType ) ; final MockTable virtualColumnsTable2 = MockTable . create ( this , virtualColumnsSchema , ""VC_T2"" , false , 100 , null , new VirtualColumnsExpressionFactory ( ) , false ) ; virtualColumnsTable2 . addColumn ( ""A"" , f . intTypeNull ) ; virtualColumnsTable2 . addColumn ( ""B"" , f . bigintType ) ; virtualColumnsTable2 . addColumn ( ""C"" , f . varchar10Type ) ; virtualColumnsTable2 . addColumn ( ""D"" , f . intTypeNull ) ; virtualColumnsTable2 . addColumn ( ""E"" , f . bigintType ) ; registerTable ( virtualColumnsTable1 ) ; registerTable ( virtualColumnsTable2 ) ; MockSchema complexTypeColumnsSchema = new MockSchema ( ""COMPLEXTYPES"" ) ; registerSchema ( complexTypeColumnsSchema ) ; final MockTable complexTypeColumnsTable = MockTable . create ( this , complexTypeColumnsSchema , ""CTC_T1"" , false , 100 ) ; complexTypeColumnsTable . addColumn ( ""A"" , f . recordType1 ) ; complexTypeColumnsTable . addColumn ( ""B"" , f . recordType2 ) ; complexTypeColumnsTable . addColumn ( ""C"" , f . recordType3 ) ; complexTypeColumnsTable . addColumn ( ""D"" , f . recordType4 ) ; complexTypeColumnsTable . addColumn ( ""E"" , f . recordType5 ) ; complexTypeColumnsTable . addColumn ( ""intArrayType"" , f . intArrayType ) ; complexTypeColumnsTable . addColumn ( ""varchar5ArrayType"" , f . varchar5ArrayType ) ; complexTypeColumnsTable . addColumn ( ""intArrayArrayType"" , f . intArrayArrayType ) ; complexTypeColumnsTable . addColumn ( ""varchar5ArrayArrayType"" , f . varchar5ArrayArrayType ) ; complexTypeColumnsTable . addColumn ( ""intMultisetType"" , f . intMultisetType ) ; complexTypeColumnsTable . addColumn ( ""varchar5MultisetType"" , f . varchar5MultisetType ) ; complexTypeColumnsTable . addColumn ( ""intMultisetArrayType"" , f . intMultisetArrayType ) ; complexTypeColumnsTable . addColumn ( ""varchar5MultisetArrayType"" , f . varchar5MultisetArrayType ) ; complexTypeColumnsTable . addColumn ( ""intArrayMultisetType"" , f . intArrayMultisetType ) ; complexTypeColumnsTable . addColumn ( ""rowArrayMultisetType"" , f . rowArrayMultisetType ) ; registerTable ( complexTypeColumnsTable ) ; return this ; }",Smelly
" public JXPathBindingBase buildBinding ( Element bindingElm , Assistant assistant ) throws BindingException { CommonAttributes commonAtts = JXPathBindingBuilderBase . getCommonAttributes ( bindingElm ) ; return new DeleteNodeJXPathBinding ( commonAtts ) ; }",No
" public ProtocolProxy < ProtocolMetaInfoPB > getProtocolMetaInfoProxy ( ConnectionId connId , Configuration conf , SocketFactory factory ) throws IOException { throw new UnsupportedOperationException ( ""This proxy is not supported"" ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private Map < String , CharSequence > findAndRenderChildWicketTags ( final MarkupStream markupStream , final ComponentTag openTag ) { Map < String , CharSequence > childTags = new HashMap < String , CharSequence > ( ) ; ComponentTag tag = markupStream . getPreviousTag ( ) ; if ( ! tag . isOpenClose ( ) ) { while ( markupStream . hasMore ( ) && ! markupStream . get ( ) . closes ( openTag ) ) { MarkupElement element = markupStream . get ( ) ; if ( ( element instanceof ComponentTag ) && ! markupStream . atCloseTag ( ) ) { ComponentTag currentTag = ( ComponentTag ) element ; String id = currentTag . getId ( ) ; final Response webResponse = getResponse ( ) ; try { final StringResponse response = new StringResponse ( ) ; getRequestCycle ( ) . setResponse ( response ) ; Component component = getParent ( ) . get ( id ) ; if ( component == null ) { component = ComponentResolvers . resolve ( getParent ( ) , markupStream , currentTag , null ) ; if ( component . getParent ( ) == null ) { component = null ; } } if ( component != null ) { component . render ( ) ; markupStream . skipComponent ( ) ; } else { markupStream . next ( ) ; } childTags . put ( id , response . getBuffer ( ) ) ; } finally { getRequestCycle ( ) . setResponse ( webResponse ) ; } } else { markupStream . next ( ) ; } } } return childTags ; }",Smelly
 public DefaultPluginVersionRequest setRepositorySession ( RepositorySystemSession session ) { this . session = session ; return this ; },No
" protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; ConnectionId info = ( ConnectionId ) object ; info . setValue ( ""Value:1"" ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
 protected boolean isValueType ( final ReferenceStrength type ) { return this . valueType == type ; },No
 void reset ( ) throws InterruptedIOException ;,No
" public static void setDefaultThreshold ( int i ) { if ( i == - 1 ) { String s = SystemPropertyAction . getProperty ( ""org.apache.cxf.io.CachedWriter.Threshold"" , ""-1"" ) ; i = Integer . parseInt ( s ) ; if ( i <= 0 ) { i = 64 * 1024 ; } } defaultThreshold = i ; }",No
" public void forceWrite ( boolean forceMetadata ) throws IOException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""Journal ForceWrite"" ) ; } long newForceWritePosition = bc . forceWrite ( forceMetadata ) ; if ( fRemoveFromPageCache ) { long newDropPos = newForceWritePosition - cacheDropLagBytes ; if ( lastDropPosition < newDropPos ) { NativeIO . bestEffortRemoveFromPageCache ( fd , lastDropPosition , newDropPos - lastDropPosition ) ; } this . lastDropPosition = newDropPos ; } }",No
 String getDescription ( ) ;,No
" public void isolation_01 ( ) { DatasetGraph dsg = create ( ) ; ThreadAction other = ThreadTxn . threadTxnRead ( dsg , ( ) -> Assert . assertTrue ( dsg . isEmpty ( ) ) ) ; dsg . begin ( WRITE ) ; dsg . add ( q1 ) ; dsg . commit ( ) ; dsg . end ( ) ; other . run ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public com . google . protobuf . ExtensionRegistry assignDescriptors ( com . google . protobuf . Descriptors . FileDescriptor root ) { descriptor = root ; internal_static_exec_shared_UserCredentials_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 0 ) ; internal_static_exec_shared_UserCredentials_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_UserCredentials_descriptor , new java . lang . String [ ] { ""UserName"" , } ) ; internal_static_exec_shared_QueryId_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 1 ) ; internal_static_exec_shared_QueryId_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryId_descriptor , new java . lang . String [ ] { ""Part1"" , ""Part2"" , } ) ; internal_static_exec_shared_DrillPBError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 2 ) ; internal_static_exec_shared_DrillPBError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_DrillPBError_descriptor , new java . lang . String [ ] { ""ErrorId"" , ""Endpoint"" , ""ErrorType"" , ""Message"" , ""Exception"" , ""ParsingError"" , } ) ; internal_static_exec_shared_ExceptionWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 3 ) ; internal_static_exec_shared_ExceptionWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ExceptionWrapper_descriptor , new java . lang . String [ ] { ""ExceptionClass"" , ""Message"" , ""StackTrace"" , ""Cause"" , } ) ; internal_static_exec_shared_StackTraceElementWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 4 ) ; internal_static_exec_shared_StackTraceElementWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StackTraceElementWrapper_descriptor , new java . lang . String [ ] { ""ClassName"" , ""FileName"" , ""LineNumber"" , ""MethodName"" , ""IsNativeMethod"" , } ) ; internal_static_exec_shared_ParsingError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 5 ) ; internal_static_exec_shared_ParsingError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ParsingError_descriptor , new java . lang . String [ ] { ""StartColumn"" , ""StartRow"" , ""EndColumn"" , ""EndRow"" , } ) ; internal_static_exec_shared_RecordBatchDef_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 6 ) ; internal_static_exec_shared_RecordBatchDef_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_RecordBatchDef_descriptor , new java . lang . String [ ] { ""RecordCount"" , ""Field"" , ""CarriesTwoByteSelectionVector"" , } ) ; internal_static_exec_shared_NamePart_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 7 ) ; internal_static_exec_shared_NamePart_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NamePart_descriptor , new java . lang . String [ ] { ""Type"" , ""Name"" , ""Child"" , } ) ; internal_static_exec_shared_SerializedField_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 8 ) ; internal_static_exec_shared_SerializedField_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SerializedField_descriptor , new java . lang . String [ ] { ""MajorType"" , ""NamePart"" , ""Child"" , ""ValueCount"" , ""VarByteLength"" , ""BufferLength"" , } ) ; internal_static_exec_shared_NodeStatus_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 9 ) ; internal_static_exec_shared_NodeStatus_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NodeStatus_descriptor , new java . lang . String [ ] { ""NodeId"" , ""MemoryFootprint"" , } ) ; internal_static_exec_shared_QueryResult_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 10 ) ; internal_static_exec_shared_QueryResult_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryResult_descriptor , new java . lang . String [ ] { ""QueryState"" , ""QueryId"" , ""Error"" , } ) ; internal_static_exec_shared_QueryData_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 11 ) ; internal_static_exec_shared_QueryData_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryData_descriptor , new java . lang . String [ ] { ""QueryId"" , ""RowCount"" , ""Def"" , } ) ; internal_static_exec_shared_QueryInfo_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 12 ) ; internal_static_exec_shared_QueryInfo_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryInfo_descriptor , new java . lang . String [ ] { ""Query"" , ""Start"" , ""State"" , ""User"" , ""Foreman"" , ""OptionsJson"" , } ) ; internal_static_exec_shared_QueryProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 13 ) ; internal_static_exec_shared_QueryProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryProfile_descriptor , new java . lang . String [ ] { ""Id"" , ""Type"" , ""Start"" , ""End"" , ""Query"" , ""Plan"" , ""Foreman"" , ""State"" , ""TotalFragments"" , ""FinishedFragments"" , ""FragmentProfile"" , ""User"" , ""Error"" , ""VerboseError"" , ""ErrorId"" , ""ErrorNode"" , ""OptionsJson"" , ""PlanEnd"" , ""QueueWaitEnd"" , } ) ; internal_static_exec_shared_MajorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 14 ) ; internal_static_exec_shared_MajorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MajorFragmentProfile_descriptor , new java . lang . String [ ] { ""MajorFragmentId"" , ""MinorFragmentProfile"" , } ) ; internal_static_exec_shared_MinorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 15 ) ; internal_static_exec_shared_MinorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MinorFragmentProfile_descriptor , new java . lang . String [ ] { ""State"" , ""Error"" , ""MinorFragmentId"" , ""OperatorProfile"" , ""StartTime"" , ""EndTime"" , ""MemoryUsed"" , ""MaxMemoryUsed"" , ""Endpoint"" , ""LastUpdate"" , ""LastProgress"" , } ) ; internal_static_exec_shared_OperatorProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 16 ) ; internal_static_exec_shared_OperatorProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_OperatorProfile_descriptor , new java . lang . String [ ] { ""InputProfile"" , ""OperatorId"" , ""OperatorType"" , ""SetupNanos"" , ""ProcessNanos"" , ""PeakLocalMemoryAllocated"" , ""Metric"" , ""WaitNanos"" , } ) ; internal_static_exec_shared_StreamProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 17 ) ; internal_static_exec_shared_StreamProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StreamProfile_descriptor , new java . lang . String [ ] { ""Records"" , ""Batches"" , ""Schemas"" , } ) ; internal_static_exec_shared_MetricValue_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 18 ) ; internal_static_exec_shared_MetricValue_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MetricValue_descriptor , new java . lang . String [ ] { ""MetricId"" , ""LongValue"" , ""DoubleValue"" , } ) ; internal_static_exec_shared_Registry_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 19 ) ; internal_static_exec_shared_Registry_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Registry_descriptor , new java . lang . String [ ] { ""Jar"" , } ) ; internal_static_exec_shared_Jar_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 20 ) ; internal_static_exec_shared_Jar_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Jar_descriptor , new java . lang . String [ ] { ""Name"" , ""FunctionSignature"" , } ) ; internal_static_exec_shared_SaslMessage_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 21 ) ; internal_static_exec_shared_SaslMessage_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SaslMessage_descriptor , new java . lang . String [ ] { ""Mechanism"" , ""Data"" , ""Status"" , } ) ; return null ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" private Field getFiled ( GenericRecord record , String fieldName ) { List < Field > fields = record . getFields ( ) ; return fields . stream ( ) . filter ( field -> fieldName . equals ( field . getName ( ) ) ) . findAny ( ) . orElse ( null ) ; }",No
" public void setStatements ( Statements statements ) { statements . setContainerNameDataType ( ""VARCHAR(150)"" ) ; statements . setStringIdDataType ( ""VARCHAR(150)"" ) ; statements . setLongDataType ( ""INT8"" ) ; statements . setSequenceDataType ( ""INT8"" ) ; statements . setBinaryDataType ( ""BYTE"" ) ; super . setStatements ( statements ) ; }",Smelly
" public String toString ( ) { return getPrincipals ( ) != null ? getPrincipals ( ) . toString ( ) : ""empty"" ; }",No
 List < VirSchema > findByProvision ( Provision provision ) ;,No
" public void testFilter ( ) throws Exception { TokenStream stream = new WhitespaceTokenizer ( new StringReader ( ""short toolong evenmuchlongertext a ab toolong foo"" ) ) ; LengthFilter filter = new LengthFilter ( stream , 2 , 6 ) ; final Token reusableToken = new Token ( ) ; assertEquals ( ""short"" , filter . next ( reusableToken ) . term ( ) ) ; assertEquals ( ""ab"" , filter . next ( reusableToken ) . term ( ) ) ; assertEquals ( ""foo"" , filter . next ( reusableToken ) . term ( ) ) ; assertNull ( filter . next ( reusableToken ) ) ; }",Smelly
 public void increment ( ) { value ++ ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",No
 public void sanityCheck ( ) throws Exception { },No
" public static void main ( final String [ ] args ) { final Properties props = new Properties ( ) ; props . put ( StreamsConfig . APPLICATION_ID_CONFIG , ""streams-pageview-typed"" ) ; props . put ( StreamsConfig . BOOTSTRAP_SERVERS_CONFIG , ""localhost:9092"" ) ; props . put ( StreamsConfig . DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG , JsonTimestampExtractor . class ) ; props . put ( StreamsConfig . DEFAULT_KEY_SERDE_CLASS_CONFIG , JSONSerde . class ) ; props . put ( StreamsConfig . DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS , JSONSerde . class ) ; props . put ( StreamsConfig . DEFAULT_VALUE_SERDE_CLASS_CONFIG , JSONSerde . class ) ; props . put ( StreamsConfig . DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS , JSONSerde . class ) ; props . put ( StreamsConfig . CACHE_MAX_BYTES_BUFFERING_CONFIG , 0 ) ; props . put ( StreamsConfig . COMMIT_INTERVAL_MS_CONFIG , 1000 ) ; props . put ( ConsumerConfig . AUTO_OFFSET_RESET_CONFIG , ""earliest"" ) ; final StreamsBuilder builder = new StreamsBuilder ( ) ; final KStream < String , PageView > views = builder . stream ( ""streams-pageview-input"" , Consumed . with ( Serdes . String ( ) , new JSONSerde < > ( ) ) ) ; final KTable < String , UserProfile > users = builder . table ( ""streams-userprofile-input"" , Consumed . with ( Serdes . String ( ) , new JSONSerde < > ( ) ) ) ; final KStream < WindowedPageViewByRegion , RegionCount > regionCount = views . leftJoin ( users , ( view , profile ) -> { final PageViewByRegion viewByRegion = new PageViewByRegion ( ) ; viewByRegion . user = view . user ; viewByRegion . page = view . page ; if ( profile != null ) { viewByRegion . region = profile . region ; } else { viewByRegion . region = ""UNKNOWN"" ; } return viewByRegion ; } ) . map ( ( user , viewRegion ) -> new KeyValue < > ( viewRegion . region , viewRegion ) ) . groupByKey ( Grouped . with ( Serdes . String ( ) , new JSONSerde < > ( ) ) ) . windowedBy ( TimeWindows . of ( Duration . ofDays ( 7 ) ) . advanceBy ( Duration . ofSeconds ( 1 ) ) ) . count ( ) . toStream ( ) . map ( ( key , value ) -> { final WindowedPageViewByRegion wViewByRegion = new WindowedPageViewByRegion ( ) ; wViewByRegion . windowStart = key . window ( ) . start ( ) ; wViewByRegion . region = key . key ( ) ; final RegionCount rCount = new RegionCount ( ) ; rCount . region = key . key ( ) ; rCount . count = value ; return new KeyValue < > ( wViewByRegion , rCount ) ; } ) ; regionCount . to ( ""streams-pageviewstats-typed-output"" ) ; final KafkaStreams streams = new KafkaStreams ( builder . build ( ) , props ) ; final CountDownLatch latch = new CountDownLatch ( 1 ) ; Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ""streams-pipe-shutdown-hook"" ) { @ Override public void run ( ) { streams . close ( ) ; latch . countDown ( ) ; } } ) ; try { streams . start ( ) ; latch . await ( ) ; } catch ( final Throwable e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } System . exit ( 0 ) ; }",No
 public Schema getSchema ( ) { return schema ; },Smelly
 public int addDouble ( double var ) { int index = lookupDouble ( var ) ; if ( index == - 1 ) { ensureCapacity ( ) ; items [ count ] = new Constant_Double ( var ) ; index = count ; count = count + 2 ; } return index ; },Smelly
" protected void internalRun ( ) throws Exception { Class < ? > clazz = loader . loadClass ( ""org.apache.drill.BaseTestQuery"" ) ; clazz . getMethod ( ""setupDefaultTestCluster"" ) . invoke ( null ) ; }",No
 void onFinish ( ) ;,No
" protected void setHostAddresses ( HostAddresses hostAddresses , KrbCredInfoContainer krbCredInfoContainer ) { krbCredInfoContainer . getKrbCredInfo ( ) . setClientAddresses ( hostAddresses ) ; krbCredInfoContainer . setGrammarEndAllowed ( true ) ; }",No
" public void onNext ( final TestEventB e ) { set . add ( e ) ; System . out . println ( ""TestEventHandlerB "" + e ) ; }",No
 void trim ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" String getName ( ) { return ""UTF-32LE"" ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public String toString ( ) { return left + "" "" + right + "" LT"" ; }",No
" public void localizeConfiguration ( JobConf jobConf ) throws IOException , InterruptedException { super . localizeConfiguration ( jobConf ) ; jobConf . setBoolean ( JobContext . TASK_ISMAP , true ) ; }",No
 protected void overrideFixtures ( final List < Class < ? extends FixtureScript > > fixtureScripts ) { fixtureScripts . add ( SimpleObject_persona . PersistAll . class ) ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public ZoneOffset parse ( final String val ) { return ZoneOffset . of ( val ) ; },No
" public void exec ( Map < String , Object > inMap , Map < String , Object > results , List < Object > messages , Locale locale , ClassLoader loader ) { }",No
" public void visit ( State state , Environment env , Properties props ) throws Exception { Connector conn = env . getInstance ( ) . getConnector ( WalkingSecurity . get ( state , env ) . getSysUserName ( ) , WalkingSecurity . get ( state , env ) . getSysToken ( ) ) ; String tableUserName = WalkingSecurity . get ( state , env ) . getTabUserName ( ) ; boolean exists = WalkingSecurity . get ( state , env ) . userExists ( tableUserName ) ; boolean hasPermission = WalkingSecurity . get ( state , env ) . canCreateUser ( WalkingSecurity . get ( state , env ) . getSysCredentials ( ) , tableUserName ) ; PasswordToken tabUserPass = new PasswordToken ( ""Super Sekret Table User Password"" ) ; try { conn . securityOperations ( ) . createLocalUser ( tableUserName , tabUserPass ) ; } catch ( AccumuloSecurityException ae ) { switch ( ae . getSecurityErrorCode ( ) ) { case PERMISSION_DENIED : if ( hasPermission ) throw new AccumuloException ( ""Got a security exception when I should have had permission."" , ae ) ; else { if ( ! exists ) { env . getConnector ( ) . securityOperations ( ) . createLocalUser ( tableUserName , tabUserPass ) ; WalkingSecurity . get ( state , env ) . createUser ( tableUserName , tabUserPass ) ; Thread . sleep ( 1000 ) ; } return ; } case USER_EXISTS : if ( ! exists ) throw new AccumuloException ( ""Got security exception when the user shouldn't have existed"" , ae ) ; else return ; default : throw new AccumuloException ( ""Got unexpected exception"" , ae ) ; } } WalkingSecurity . get ( state , env ) . createUser ( tableUserName , tabUserPass ) ; Thread . sleep ( 1000 ) ; if ( ! hasPermission ) throw new AccumuloException ( ""Didn't get Security Exception when we should have"" ) ; }",Smelly
 T decompressed ( ) ;,No
" public void whenInferFromGenerics ( ) { class Order { } class Customer { public java . util . Collection < Order > getOrders ( ) { return null ; } public void setOrders ( final java . util . Collection < Order > orders ) { } } final Class < ? > cls = Customer . class ; collectionMethod = findMethod ( Customer . class , ""getOrders"" ) ; final FacetFactory . ProcessMethodContext processMethodContext = new FacetFactory . ProcessMethodContext ( cls , null , null , collectionMethod , mockMethodRemover , facetedMethod ) ; facetFactory . processTypeOf ( processMethodContext ) ; final TypeOfFacet facet = facetedMethod . getFacet ( TypeOfFacet . class ) ; Assert . assertNotNull ( facet ) ; Assert . assertTrue ( facet instanceof TypeOfFacetInferredFromGenerics ) ; assertThat ( facet . value ( ) , classEqualTo ( Order . class ) ) ; }",No
" public Symbol generate ( Schema sc , Map < LitS , Symbol > seen ) { switch ( sc . getType ( ) ) { case NULL : case BOOLEAN : case INT : case LONG : case FLOAT : case DOUBLE : case STRING : case BYTES : case FIXED : case UNION : return super . generate ( sc , seen ) ; case ENUM : return Symbol . seq ( Symbol . enumLabelsAction ( sc . getEnumSymbols ( ) ) , Symbol . ENUM ) ; case ARRAY : return Symbol . seq ( Symbol . repeat ( Symbol . ARRAY_END , Symbol . ITEM_END , generate ( sc . getElementType ( ) , seen ) ) , Symbol . ARRAY_START ) ; case MAP : return Symbol . seq ( Symbol . repeat ( Symbol . MAP_END , Symbol . ITEM_END , generate ( sc . getValueType ( ) , seen ) , Symbol . MAP_KEY_MARKER , Symbol . STRING ) , Symbol . MAP_START ) ; case RECORD : { LitS wsc = new LitS ( sc ) ; Symbol rresult = seen . get ( wsc ) ; if ( rresult == null ) { Symbol [ ] production = new Symbol [ sc . getFields ( ) . size ( ) * 3 + 2 ] ; rresult = Symbol . seq ( production ) ; seen . put ( wsc , rresult ) ; int i = production . length ; int n = 0 ; production [ -- i ] = Symbol . RECORD_START ; for ( Field f : sc . getFields ( ) ) { production [ -- i ] = Symbol . fieldAdjustAction ( n , f . name ( ) , f . aliases ( ) ) ; production [ -- i ] = generate ( f . schema ( ) , seen ) ; production [ -- i ] = Symbol . FIELD_END ; n ++ ; } production [ -- i ] = Symbol . RECORD_END ; } return rresult ; } default : throw new RuntimeException ( ""Unexpected schema type"" ) ; } }",Smelly
 void onConsumerEvent ( ConsumerEvent event ) ;,No
" public void process ( ClusterEvent event ) throws Exception { long startTime = System . currentTimeMillis ( ) ; LOG . info ( ""START ReadClusterDataStage.process()"" ) ; HelixManager manager = event . getAttribute ( ""helixmanager"" ) ; if ( manager == null ) { throw new StageException ( ""HelixManager attribute value is null"" ) ; } HelixDataAccessor accessor = manager . getHelixDataAccessor ( ) ; ClusterDataCache cache = event . getAttribute ( ""ClusterDataCache"" ) ; if ( cache == null && _cache == null ) { cache = new ClusterDataCache ( ) ; } _cache = cache ; ClusterId clusterId = ClusterId . from ( manager . getClusterName ( ) ) ; ClusterAccessor clusterAccessor = new ClusterAccessor ( clusterId , accessor , _cache ) ; Cluster cluster = clusterAccessor . readCluster ( ) ; ClusterStatusMonitor clusterStatusMonitor = ( ClusterStatusMonitor ) event . getAttribute ( ""clusterStatusMonitor"" ) ; if ( clusterStatusMonitor != null ) { Set < String > instanceSet = Sets . newHashSet ( ) ; Set < String > liveInstanceSet = Sets . newHashSet ( ) ; Set < String > disabledInstanceSet = Sets . newHashSet ( ) ; Map < String , Set < String > > disabledPartitions = Maps . newHashMap ( ) ; Map < String , Set < String > > tags = Maps . newHashMap ( ) ; for ( Participant participant : cluster . getParticipantMap ( ) . values ( ) ) { instanceSet . add ( participant . getId ( ) . toString ( ) ) ; if ( participant . isAlive ( ) ) { liveInstanceSet . add ( participant . getId ( ) . toString ( ) ) ; } if ( ! participant . isEnabled ( ) ) { disabledInstanceSet . add ( participant . getId ( ) . toString ( ) ) ; } Set < String > partitionNames = Sets . newHashSet ( ) ; for ( PartitionId partitionId : participant . getDisabledPartitionIds ( ) ) { partitionNames . add ( partitionId . toString ( ) ) ; } disabledPartitions . put ( participant . getId ( ) . toString ( ) , partitionNames ) ; tags . put ( participant . getId ( ) . toString ( ) , participant . getTags ( ) ) ; } clusterStatusMonitor . setClusterInstanceStatus ( liveInstanceSet , instanceSet , disabledInstanceSet , disabledPartitions , tags ) ; } event . addAttribute ( ""Cluster"" , cluster ) ; event . addAttribute ( ""ClusterDataCache"" , _cache ) ; Map < ContextId , ControllerContext > persistedContexts = null ; if ( cluster != null ) { persistedContexts = cluster . getContextMap ( ) ; } else { persistedContexts = Maps . newHashMap ( ) ; } ControllerContextProvider contextProvider = new ControllerContextProvider ( persistedContexts ) ; event . addAttribute ( AttributeName . CONTEXT_PROVIDER . toString ( ) , contextProvider ) ; ClusterConfiguration clusterConfiguration = accessor . getProperty ( accessor . keyBuilder ( ) . clusterConfig ( ) ) ; if ( clusterConfiguration == null ) { clusterConfiguration = new ClusterConfiguration ( cluster . getId ( ) ) ; } event . addAttribute ( AttributeName . IDEAL_STATE_RULES . toString ( ) , clusterConfiguration . getIdealStateRules ( ) ) ; long endTime = System . currentTimeMillis ( ) ; LOG . info ( ""END ReadClusterDataStage.process(). took: "" + ( endTime - startTime ) + "" ms"" ) ; }",Smelly
" public static void main ( final String [ ] args ) throws Exception { System . exit ( ToolRunner . run ( new AggregatorsBenchmark ( ) , args ) ) ; }",Smelly
" public void testMetaInTransitionWhenMasterFailover ( ) throws Exception { final int NUM_MASTERS = 1 ; final int NUM_RS = 1 ; HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility ( ) ; TEST_UTIL . startMiniCluster ( NUM_MASTERS , NUM_RS ) ; try { MiniHBaseCluster cluster = TEST_UTIL . getHBaseCluster ( ) ; LOG . info ( ""Cluster started"" ) ; HMaster activeMaster = cluster . getMaster ( ) ; ServerName metaServerName = cluster . getServerHoldingMeta ( ) ; HRegionServer hrs = cluster . getRegionServer ( metaServerName ) ; LOG . info ( ""Aborting master"" ) ; activeMaster . abort ( ""test-kill"" ) ; cluster . waitForMasterToStop ( activeMaster . getServerName ( ) , 30000 ) ; LOG . info ( ""Master has aborted"" ) ; RegionState metaState = MetaTableLocator . getMetaRegionState ( hrs . getZooKeeper ( ) ) ; assertEquals ( ""hbase:meta should be online on RS"" , metaState . getServerName ( ) , metaServerName ) ; assertEquals ( ""hbase:meta should be online on RS"" , State . OPEN , metaState . getState ( ) ) ; LOG . info ( ""Starting up a new master"" ) ; activeMaster = cluster . startMaster ( ) . getMaster ( ) ; LOG . info ( ""Waiting for master to be ready"" ) ; cluster . waitForActiveAndReadyMaster ( ) ; LOG . info ( ""Master is ready"" ) ; metaState = MetaTableLocator . getMetaRegionState ( activeMaster . getZooKeeper ( ) ) ; assertEquals ( ""hbase:meta should be online on RS"" , metaState . getServerName ( ) , metaServerName ) ; assertEquals ( ""hbase:meta should be online on RS"" , State . OPEN , metaState . getState ( ) ) ; } finally { TEST_UTIL . shutdownMiniCluster ( ) ; } }",Smelly
 public boolean isDefault ( ) { return true ; },No
" protected Processor < Long > createUpgradeProcessor ( SocketWrapper < Long > socket , HttpUpgradeHandler httpUpgradeProcessor ) throws IOException { return new AprProcessor ( socket , httpUpgradeProcessor , ( AprEndpoint ) proto . endpoint , proto . getUpgradeAsyncWriteBufferSize ( ) ) ; }",No
 protected DataFormat createDataFormat ( RouteContext routeContext ) { return new org . apache . camel . impl . SerializationDataFormat ( ) ; },No
" public Component getTreeCellRendererComponent ( JTree tree , Object value , boolean sel , boolean expanded , boolean leaf , int row , boolean hasFocus ) { return super . getTreeCellRendererComponent ( tree , value , sel , expanded , leaf , row , hasFocus ) ; }",Smelly
" public static GenericHelper getHelper ( GenericHelperInfo helperInfo ) { GenericHelper helper = helperCache . get ( helperInfo . getHelperFullName ( ) ) ; if ( helper == null ) { synchronized ( GenericHelperFactory . class ) { helper = helperCache . get ( helperInfo . getHelperFullName ( ) ) ; if ( helper == null ) { try { Datasource datasourceInfo = EntityConfigUtil . getDatasource ( helperInfo . getHelperBaseName ( ) ) ; if ( datasourceInfo == null ) { throw new IllegalStateException ( ""Could not find datasource definition with name "" + helperInfo . getHelperBaseName ( ) ) ; } String helperClassName = datasourceInfo . getHelperClass ( ) ; Class < ? > helperClass = null ; if ( UtilValidate . isNotEmpty ( helperClassName ) ) { try { ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; helperClass = loader . loadClass ( helperClassName ) ; } catch ( ClassNotFoundException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } } Class < ? > [ ] paramTypes = new Class < ? > [ ] { GenericHelperInfo . class } ; Object [ ] params = new Object [ ] { helperInfo } ; java . lang . reflect . Constructor < ? > helperConstructor = null ; if ( helperClass != null ) { try { helperConstructor = helperClass . getConstructor ( paramTypes ) ; } catch ( NoSuchMethodException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } } try { helper = ( GenericHelper ) helperConstructor . newInstance ( params ) ; } catch ( IllegalAccessException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } catch ( InstantiationException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } catch ( java . lang . reflect . InvocationTargetException e ) { Debug . logWarning ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class \"""" + helperClassName + ""\"": "" + e . getMessage ( ) ) ; } if ( helper != null ) helperCache . put ( helperInfo . getHelperFullName ( ) , helper ) ; } catch ( SecurityException e ) { Debug . logError ( e , module ) ; throw new IllegalStateException ( ""Error loading GenericHelper class: "" + e . toString ( ) ) ; } } } } return helper ; }",Smelly
" public String toString ( ) { return ""BaseJoinProcessorNode{"" + ""joinThisProcessorParameters="" + joinThisProcessorParameters + "", joinOtherProcessorParameters="" + joinOtherProcessorParameters + "", joinMergeProcessorParameters="" + joinMergeProcessorParameters + "", valueJoiner="" + valueJoiner + "", thisJoinSideNodeName='"" + thisJoinSideNodeName + '\'' + "", otherJoinSideNodeName='"" + otherJoinSideNodeName + '\'' + ""} "" + super . toString ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void testCastToDateWithCase ( ) { PCollection < Row > input = pipeline . apply ( Create . of ( Row . withSchema ( INPUT_ROW_SCHEMA ) . addValues ( 1 ) . addValue ( ""20181018"" ) . build ( ) ) . withSchema ( INPUT_ROW_SCHEMA , SerializableFunctions . identity ( ) , SerializableFunctions . identity ( ) ) ) ; Schema resultType = Schema . builder ( ) . addInt32Field ( ""f_int"" ) . addDateTimeField ( ""f_date"" ) . build ( ) ; PCollection < Row > result = input . apply ( ""sqlQuery"" , SqlTransform . query ( ""SELECT f_int, \n"" + ""CASE WHEN CHAR_LENGTH(TRIM(f_string)) = 8 \n"" + ""    THEN CAST (\n"" + ""       SUBSTRING(TRIM(f_string) FROM 1 FOR 4) \n"" + ""        ||'-' \n"" + ""        ||SUBSTRING(TRIM(f_string) FROM 5 FOR 2) \n"" + ""        ||'-' \n"" + ""        ||SUBSTRING(TRIM(f_string) FROM 7 FOR 2) AS DATE)\n"" + ""    ELSE DATE '2001-01-01'\n"" + ""END \n"" + ""FROM PCOLLECTION"" ) ) ; PAssert . that ( result ) . containsInAnyOrder ( Row . withSchema ( resultType ) . addValues ( 1 , new DateTime ( 2018 , 10 , 18 , 0 , 0 ) ) . build ( ) ) ; pipeline . run ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , PrivilegeGrantInfo struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . privilege = iprot . readString ( ) ; struct . setPrivilegeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . createTime = iprot . readI32 ( ) ; struct . setCreateTimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . grantor = iprot . readString ( ) ; struct . setGrantorIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . grantorType = PrincipalType . findByValue ( iprot . readI32 ( ) ) ; struct . setGrantorTypeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . grantOption = iprot . readBool ( ) ; struct . setGrantOptionIsSet ( true ) ; } }",Smelly
" public void run ( ) { try { IThreadContext threadContext = ThreadContextFactory . make ( ) ; IJobManager jobManager = JobManagerFactory . make ( threadContext ) ; IRepositoryConnectionManager connectionManager = RepositoryConnectionManagerFactory . make ( threadContext ) ; while ( true ) { if ( Thread . currentThread ( ) . isInterrupted ( ) ) break ; try { long currentTime = System . currentTimeMillis ( ) ; if ( Logging . threads . isDebugEnabled ( ) ) Logging . threads . debug ( ""Job start thread - checking for jobs to start at "" + new Long ( currentTime ) . toString ( ) ) ; ArrayList unwaitJobs = new ArrayList ( ) ; jobManager . startJobs ( currentTime , unwaitJobs ) ; int k = 0 ; while ( k < unwaitJobs . size ( ) ) { Long jobID = ( Long ) unwaitJobs . get ( k ++ ) ; IJobDescription desc = jobManager . load ( jobID ) ; connectionManager . recordHistory ( desc . getConnectionName ( ) , null , connectionManager . ACTIVITY_JOBUNWAIT , null , desc . getID ( ) . toString ( ) + ""("" + desc . getDescription ( ) + "")"" , null , null , null ) ; } ArrayList waitJobs = new ArrayList ( ) ; jobManager . waitJobs ( currentTime , waitJobs ) ; k = 0 ; while ( k < waitJobs . size ( ) ) { Long jobID = ( Long ) waitJobs . get ( k ++ ) ; IJobDescription desc = jobManager . load ( jobID ) ; connectionManager . recordHistory ( desc . getConnectionName ( ) , null , connectionManager . ACTIVITY_JOBWAIT , null , desc . getID ( ) . toString ( ) + ""("" + desc . getDescription ( ) + "")"" , null , null , null ) ; } ManifoldCF . sleep ( 10000L ) ; } catch ( ManifoldCFException e ) { if ( e . getErrorCode ( ) == ManifoldCFException . INTERRUPTED ) break ; if ( e . getErrorCode ( ) == ManifoldCFException . DATABASE_CONNECTION_ERROR ) { Logging . threads . error ( ""Job start thread aborting and restarting due to database connection reset: "" + e . getMessage ( ) , e ) ; try { ManifoldCF . sleep ( 10000L ) ; } catch ( InterruptedException se ) { break ; } continue ; } Logging . threads . error ( ""Exception tossed: "" + e . getMessage ( ) , e ) ; if ( e . getErrorCode ( ) == ManifoldCFException . SETUP_ERROR ) { System . exit ( 1 ) ; } } catch ( InterruptedException e ) { break ; } catch ( OutOfMemoryError e ) { System . err . println ( ""agents process ran out of memory - shutting down"" ) ; e . printStackTrace ( System . err ) ; System . exit ( - 200 ) ; } catch ( Throwable e ) { Logging . threads . fatal ( ""Error tossed: "" + e . getMessage ( ) , e ) ; } } } catch ( Throwable e ) { System . err . println ( ""agents process could not start - shutting down"" ) ; Logging . threads . fatal ( ""JobStartThread initialization error tossed: "" + e . getMessage ( ) , e ) ; System . exit ( - 300 ) ; } }",Smelly
 public VertexManagerPluginDescriptor build ( ) { VertexManagerPluginDescriptor desc = VertexManagerPluginDescriptor . create ( ShuffleVertexManager . class . getName ( ) ) ; try { return desc . setUserPayload ( TezUtils . createUserPayloadFromConf ( this . conf ) ) ; } catch ( IOException e ) { throw new TezUncheckedException ( e ) ; } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TGetTableTypesResp struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . status = new TStatus ( ) ; struct . status . read ( iprot ) ; struct . setStatusIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . operationHandle = new TOperationHandle ( ) ; struct . operationHandle . read ( iprot ) ; struct . setOperationHandleIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ExperimentSummaryModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . experimentId = iprot . readString ( ) ; struct . setExperimentIdIsSet ( true ) ; struct . projectId = iprot . readString ( ) ; struct . setProjectIdIsSet ( true ) ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . userName = iprot . readString ( ) ; struct . setUserNameIsSet ( true ) ; struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . executionId = iprot . readString ( ) ; struct . setExecutionIdIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . resourceHostId = iprot . readString ( ) ; struct . setResourceHostIdIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . experimentStatus = iprot . readString ( ) ; struct . setExperimentStatusIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . statusUpdateTime = iprot . readI64 ( ) ; struct . setStatusUpdateTimeIsSet ( true ) ; } }",Smelly
 String removeExpressions ( String directory ) ;,No
" public void addRuleInstances ( Digester digester ) { digester . addObjectCreate ( prefix + ""Host"" , ""org.apache.catalina.core.StandardHost"" , ""className"" ) ; digester . addSetProperties ( prefix + ""Host"" ) ; digester . addRule ( prefix + ""Host"" , new CopyParentClassLoaderRule ( ) ) ; digester . addRule ( prefix + ""Host"" , new LifecycleListenerRule ( ""org.apache.catalina.startup.HostConfig"" , ""hostConfigClass"" ) ) ; digester . addSetNext ( prefix + ""Host"" , ""addChild"" , ""org.apache.catalina.Container"" ) ; digester . addCallMethod ( prefix + ""Host/Alias"" , ""addAlias"" , 0 ) ; digester . addObjectCreate ( prefix + ""Host/Cluster"" , null , ""className"" ) ; digester . addSetProperties ( prefix + ""Host/Cluster"" ) ; digester . addSetNext ( prefix + ""Host/Cluster"" , ""setCluster"" , ""org.apache.catalina.Cluster"" ) ; digester . addObjectCreate ( prefix + ""Host/Listener"" , null , ""className"" ) ; digester . addSetProperties ( prefix + ""Host/Listener"" ) ; digester . addSetNext ( prefix + ""Host/Listener"" , ""addLifecycleListener"" , ""org.apache.catalina.LifecycleListener"" ) ; digester . addRuleSet ( new RealmRuleSet ( prefix + ""Host/"" ) ) ; digester . addObjectCreate ( prefix + ""Host/Valve"" , null , ""className"" ) ; digester . addSetProperties ( prefix + ""Host/Valve"" ) ; digester . addSetNext ( prefix + ""Host/Valve"" , ""addValve"" , ""org.apache.catalina.Valve"" ) ; }",Smelly
" public boolean isValid ( final PlainAttrValue object , final ConstraintValidatorContext context ) { boolean isValid ; if ( object == null ) { isValid = true ; } else { int nonNullVales = 0 ; if ( object . getBooleanValue ( ) != null ) { nonNullVales ++ ; } if ( object . getDateValue ( ) != null ) { nonNullVales ++ ; } if ( object . getDoubleValue ( ) != null ) { nonNullVales ++ ; } if ( object . getLongValue ( ) != null ) { nonNullVales ++ ; } if ( object . getBinaryValue ( ) != null ) { nonNullVales ++ ; } if ( object . getStringValue ( ) != null ) { nonNullVales ++ ; } isValid = nonNullVales == 1 ; if ( ! isValid ) { LOG . error ( ""More than one non-null value for "" + object ) ; context . disableDefaultConstraintViolation ( ) ; context . buildConstraintViolationWithTemplate ( getTemplate ( EntityViolationType . MoreThanOneNonNull , ""More than one non-null value found"" ) ) . addPropertyNode ( object . getClass ( ) . getSimpleName ( ) . replaceAll ( ""\\n"" , "" "" ) ) . addConstraintViolation ( ) ; } else if ( object instanceof PlainAttrUniqueValue ) { PlainSchema uniqueValueSchema = ( ( PlainAttrUniqueValue ) object ) . getSchema ( ) ; PlainSchema attrSchema = object . getAttr ( ) . getSchema ( ) ; isValid = uniqueValueSchema . equals ( attrSchema ) ; if ( ! isValid ) { LOG . error ( ""Unique value schema for "" + object . getClass ( ) . getSimpleName ( ) + ""["" + object . getKey ( ) + ""]"" + "" is "" + uniqueValueSchema + "", while owning attribute schema is "" + attrSchema ) ; context . disableDefaultConstraintViolation ( ) ; context . buildConstraintViolationWithTemplate ( getTemplate ( EntityViolationType . InvalidPlainAttr , ""Unique value schema is "" + uniqueValueSchema + "", while owning attribute schema is "" + attrSchema ) ) . addPropertyNode ( ""schema"" ) . addConstraintViolation ( ) ; } } } return isValid ; }",Smelly
" protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; DataArrayResponse info = ( DataArrayResponse ) object ; { DataStructure value [ ] = new DataStructure [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { value [ i ] = createDataStructure ( ""Data:1"" ) ; } info . setData ( value ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public Item copy ( CompositeLayout parent ) { try { Item clone = ( Item ) this . clone ( ) ; if ( this . layout != null ) { clone . layout = this . layout . copy ( ) ; } clone . parentLayout = parent ; return clone ; } catch ( CloneNotSupportedException cnse ) { } return null ; },No
" public void testColumnKeyValueMapping ( ) throws Exception { KeyValueSet keyValueSet = new KeyValueSet ( ) ; keyValueSet . set ( HBaseStorageConstants . META_TABLE_KEY , ""test"" ) ; keyValueSet . set ( HBaseStorageConstants . META_COLUMNS_KEY , "":key,col2:key:,col2:value:#b,col3:"" ) ; Schema schema = new Schema ( ) ; schema . addColumn ( ""c1"" , Type . TEXT ) ; schema . addColumn ( ""c2"" , Type . TEXT ) ; schema . addColumn ( ""c3"" , Type . TEXT ) ; schema . addColumn ( ""c4"" , Type . TEXT ) ; TableMeta tableMeta = new TableMeta ( ""HBASE"" , keyValueSet ) ; ColumnMapping columnMapping = new ColumnMapping ( schema , tableMeta . getOptions ( ) ) ; List < String > cfNames = columnMapping . getColumnFamilyNames ( ) ; assertEquals ( 2 , cfNames . size ( ) ) ; assertEquals ( ""col2"" , cfNames . get ( 0 ) ) ; assertEquals ( ""col3"" , cfNames . get ( 1 ) ) ; for ( int i = 0 ; i < columnMapping . getIsBinaryColumns ( ) . length ; i ++ ) { if ( i == 2 ) { assertTrue ( columnMapping . getIsBinaryColumns ( ) [ i ] ) ; } else { assertFalse ( columnMapping . getIsBinaryColumns ( ) [ i ] ) ; } } for ( int i = 0 ; i < columnMapping . getIsRowKeyMappings ( ) . length ; i ++ ) { if ( i == 0 ) { assertTrue ( columnMapping . getIsRowKeyMappings ( ) [ i ] ) ; } else { assertFalse ( columnMapping . getIsRowKeyMappings ( ) [ i ] ) ; } } String [ ] expectedColumnNames = { null , null , null , null } ; for ( int i = 0 ; i < schema . size ( ) ; i ++ ) { String columnName = columnMapping . getMappingColumns ( ) [ i ] [ 1 ] == null ? null : new String ( columnMapping . getMappingColumns ( ) [ i ] [ 1 ] ) ; assertEquals ( expectedColumnNames [ i ] , columnName ) ; } for ( int i = 0 ; i < schema . size ( ) ; i ++ ) { if ( i == 1 ) { assertTrue ( columnMapping . getIsColumnKeys ( ) [ i ] ) ; } else { assertFalse ( columnMapping . getIsColumnKeys ( ) [ i ] ) ; } } for ( int i = 0 ; i < schema . size ( ) ; i ++ ) { if ( i == 2 ) { assertTrue ( columnMapping . getIsColumnValues ( ) [ i ] ) ; } else { assertFalse ( columnMapping . getIsColumnValues ( ) [ i ] ) ; } } }",Smelly
" public void testAll ( ) throws Exception { assertNull ( table . get ( Strings . getUUID ( 0L ) ) ) ; assertEquals ( 0 , table . count ( ) ) ; }",No
" public String getResourcePathForProject ( String project ) { return ResourceStore . BAD_QUERY_RESOURCE_ROOT + ""/"" + project + MetadataConstants . FILE_SURFIX ; }",No
" public void testDecodes ( ) { BytesLexicoder lexicoder = new BytesLexicoder ( ) ; assertDecodesB ( lexicoder , new byte [ 0 ] ) ; assertDecodesB ( lexicoder , ""accumulo"" . getBytes ( ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { String passivationId = ( String ) in . readObject ( ) ; if ( passivationId != null ) { this . ejbBean = ( BaseEjbBean < ? > ) webBeansContext . getBeanManagerImpl ( ) . getPassivationCapableBean ( passivationId ) ; } this . isDependent = in . readBoolean ( ) ; this . creationalContext = ( CreationalContext < ? > ) in . readObject ( ) ; this . dependentEJB = in . readObject ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 void removeHasValue ( RDFNode value ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , SSHCredential struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . username = iprot . readString ( ) ; struct . setUsernameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . passphrase = iprot . readString ( ) ; struct . setPassphraseIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . publicKey = iprot . readString ( ) ; struct . setPublicKeyIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . privateKey = iprot . readString ( ) ; struct . setPrivateKeyIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . persistedTime = iprot . readI64 ( ) ; struct . setPersistedTimeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . token = iprot . readString ( ) ; struct . setTokenIsSet ( true ) ; } }",Smelly
" public void testPNG ( ) throws Exception { Metadata metadata = new Metadata ( ) ; metadata . set ( Metadata . CONTENT_TYPE , ""image/png"" ) ; InputStream stream = getClass ( ) . getResourceAsStream ( ""/test-documents/testPNG.png"" ) ; parser . parse ( stream , new DefaultHandler ( ) , metadata , new ParseContext ( ) ) ; assertEquals ( ""75"" , metadata . get ( ""height"" ) ) ; assertEquals ( ""100"" , metadata . get ( ""width"" ) ) ; assertEquals ( ""0.35273367"" , metadata . get ( ""Dimension VerticalPixelSize"" ) ) ; assertEquals ( ""8 8 8"" , metadata . get ( ""Data BitsPerSample"" ) ) ; assertEquals ( ""Perceptual"" , metadata . get ( ""sRGB"" ) ) ; assertEquals ( ""true"" , metadata . get ( ""Compression Lossless"" ) ) ; assertEquals ( ""year=2008, month=5, day=6, hour=6, minute=18, second=47"" , metadata . get ( ""tIME"" ) ) ; assertEquals ( ""Normal"" , metadata . get ( ""Dimension ImageOrientation"" ) ) ; assertEquals ( ""1.0"" , metadata . get ( ""Dimension PixelAspectRatio"" ) ) ; assertEquals ( ""keyword=Comment, value=Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership."" , metadata . get ( ""tEXt tEXtEntry"" ) ) ; assertEquals ( ""deflate"" , metadata . get ( ""Compression CompressionTypeName"" ) ) ; assertEquals ( ""UnsignedIntegral"" , metadata . get ( ""Data SampleFormat"" ) ) ; assertEquals ( ""0.35273367"" , metadata . get ( ""Dimension HorizontalPixelSize"" ) ) ; assertEquals ( ""none"" , metadata . get ( ""Transparency Alpha"" ) ) ; assertEquals ( ""pixelsPerUnitXAxis=2835, pixelsPerUnitYAxis=2835, unitSpecifier=meter"" , metadata . get ( ""pHYs"" ) ) ; assertEquals ( ""3"" , metadata . get ( ""Chroma NumChannels"" ) ) ; assertEquals ( ""1"" , metadata . get ( ""Compression NumProgressiveScans"" ) ) ; assertEquals ( ""RGB"" , metadata . get ( ""Chroma ColorSpaceType"" ) ) ; assertEquals ( ""keyword=Comment, value=Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership., encoding=ISO-8859-1, compression=none"" , metadata . get ( ""Text TextEntry"" ) ) ; assertEquals ( ""PixelInterleaved"" , metadata . get ( ""Data PlanarConfiguration"" ) ) ; assertEquals ( ""width=100, height=75, bitDepth=8, colorType=RGB, compressionMethod=deflate, filterMethod=adaptive, interlaceMethod=none"" , metadata . get ( ""IHDR"" ) ) ; assertEquals ( ""true"" , metadata . get ( ""Chroma BlackIsZero"" ) ) ; assertEquals ( ""year=2008, month=5, day=6, hour=6, minute=18, second=47"" , metadata . get ( ""Document ImageModificationTime"" ) ) ; assertEquals ( ""image/png"" , metadata . get ( ""Content-Type"" ) ) ; assertEquals ( ""100"" , metadata . get ( Metadata . IMAGE_WIDTH ) ) ; assertEquals ( ""75"" , metadata . get ( Metadata . IMAGE_LENGTH ) ) ; assertEquals ( ""8 8 8"" , metadata . get ( Metadata . BITS_PER_SAMPLE ) ) ; }",Smelly
 public double expectedValue ( ) { return this . median ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public ValidationResult validate ( final String subject , final String input , final ValidationContext validationContext ) { try { Hex . decodeHex ( input . toCharArray ( ) ) ; return new ValidationResult . Builder ( ) . valid ( true ) . input ( input ) . subject ( subject ) . build ( ) ; } catch ( final Exception e ) { return new ValidationResult . Builder ( ) . valid ( false ) . explanation ( ""Not a valid Hex String"" ) . input ( input ) . subject ( subject ) . build ( ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public QName createQName ( Class < ? > typeClass ) { QName defName = super . createQName ( typeClass ) ; return new QName ( defName . getLocalPart ( ) ) ; },No
" public void testSearchUniqueMemberFilterWithUID ( ) throws Exception { LdapContext sysRoot = getSystemContext ( getService ( ) ) ; Attributes attrs = new BasicAttributes ( true ) ; Attribute oc = new BasicAttribute ( ""ObjectClass"" , ""top"" ) ; oc . add ( ""groupOfUniqueNames"" ) ; Attribute cn = new BasicAttribute ( ""cn"" , ""kevin Spacey"" ) ; Attribute dc = new BasicAttribute ( ""uniqueMember"" , ""cn=kevin spacey,dc=example,dc=org#'010101'B"" ) ; attrs . put ( oc ) ; attrs . put ( cn ) ; attrs . put ( dc ) ; String base = ""cn=kevin Spacey"" ; try { sysRoot . createSubcontext ( base , attrs ) ; } catch ( NamingException ne ) { fail ( ) ; } SearchControls controls = new SearchControls ( ) ; controls . setSearchScope ( SearchControls . SUBTREE_SCOPE ) ; controls . setDerefLinkFlag ( false ) ; controls . setReturningAttributes ( new String [ ] { ""*"" } ) ; sysRoot . addToEnvironment ( JndiPropertyConstants . JNDI_LDAP_DAP_DEREF_ALIASES , AliasDerefMode . NEVER_DEREF_ALIASES . getJndiValue ( ) ) ; HashMap < String , Attributes > map = new HashMap < String , Attributes > ( ) ; NamingEnumeration < SearchResult > list = sysRoot . search ( """" , ""(uniqueMember=cn= Kevin Spacey, dc=example, dc=org #'010101'B)"" , controls ) ; while ( list . hasMore ( ) ) { SearchResult result = list . next ( ) ; map . put ( Strings . toLowerCaseAscii ( result . getName ( ) ) , result . getAttributes ( ) ) ; } assertEquals ( ""Expected number of results returned was incorrect!"" , 1 , map . size ( ) ) ; attrs = map . get ( ""cn=kevin spacey,ou=system"" ) ; assertNotNull ( attrs . get ( ""objectClass"" ) ) ; assertNotNull ( attrs . get ( ""cn"" ) ) ; assertNotNull ( attrs . get ( ""uniqueMember"" ) ) ; }",No
" private String getLangCode ( ) { String code = LOG . getResourceBundle ( ) . getLocale ( ) . getLanguage ( ) ; if ( StringUtils . isEmpty ( code ) ) { return ""en"" ; } return code ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public static void updateWorkflowEngine ( GenericValue wepa , GenericValue userLogin , LocalDispatcher dispatcher ) { Delegator delegator = wepa . getDelegator ( ) ; GenericValue workEffort = null ; try { workEffort = delegator . findOne ( ""WorkEffort"" , false , ""workEffortId"" , wepa . get ( ""workEffortId"" ) ) ; } catch ( GenericEntityException e ) { Debug . logWarning ( e , module ) ; } if ( workEffort != null && ""ACTIVITY"" . equals ( workEffort . getString ( ""workEffortTypeId"" ) ) ) { String statusId = ( String ) wepa . get ( ""statusId"" ) ; Map < String , Object > context = UtilMisc . toMap ( ""workEffortId"" , wepa . get ( ""workEffortId"" ) , ""partyId"" , wepa . get ( ""partyId"" ) , ""roleTypeId"" , wepa . get ( ""roleTypeId"" ) , ""fromDate"" , wepa . get ( ""fromDate"" ) , ""userLogin"" , userLogin ) ; if ( ""CAL_ACCEPTED"" . equals ( statusId ) ) { try { Map < String , Object > results = dispatcher . runSync ( ""wfAcceptAssignment"" , context ) ; if ( results != null && results . get ( ModelService . ERROR_MESSAGE ) != null ) Debug . logWarning ( ( String ) results . get ( ModelService . ERROR_MESSAGE ) , module ) ; } catch ( GenericServiceException e ) { Debug . logWarning ( e , module ) ; } } else if ( ""CAL_COMPLETED"" . equals ( statusId ) ) { try { Map < String , Object > results = dispatcher . runSync ( ""wfCompleteAssignment"" , context ) ; if ( results != null && results . get ( ModelService . ERROR_MESSAGE ) != null ) Debug . logWarning ( ( String ) results . get ( ModelService . ERROR_MESSAGE ) , module ) ; } catch ( GenericServiceException e ) { Debug . logWarning ( e , module ) ; } } else if ( ""CAL_DECLINED"" . equals ( statusId ) ) { try { Map < String , Object > results = dispatcher . runSync ( ""wfDeclineAssignment"" , context ) ; if ( results != null && results . get ( ModelService . ERROR_MESSAGE ) != null ) Debug . logWarning ( ( String ) results . get ( ModelService . ERROR_MESSAGE ) , module ) ; } catch ( GenericServiceException e ) { Debug . logWarning ( e , module ) ; } } else { } } }",Smelly
" public void startElement ( final String uri , final String localName , final String qName , final Attributes atts ) throws SAXException { int newDepth = depth . incrementAndGet ( ) ; if ( newDepth > splitDepth . get ( ) ) { sb . append ( ""<"" ) ; sb . append ( qName ) ; int attCount = atts . getLength ( ) ; for ( int i = 0 ; i < attCount ; i ++ ) { String attName = atts . getQName ( i ) ; String attValue = atts . getValue ( i ) ; sb . append ( "" "" ) . append ( attName ) . append ( ""="" ) . append ( ""\"""" ) . append ( attValue ) . append ( ""\"""" ) ; } sb . append ( "">"" ) ; } }",No
" public void onMatch ( RelOptRuleCall call ) { final Sort sort = call . rel ( 0 ) ; final DruidQuery query = call . rel ( 1 ) ; if ( ! DruidQuery . isValidSignature ( query . signature ( ) + 'l' ) ) { return ; } if ( sort . offset != null && RexLiteral . intValue ( sort . offset ) != 0 ) { return ; } if ( query . getQueryType ( ) == QueryType . SCAN && ! RelOptUtil . isPureLimit ( sort ) ) { return ; } final RelNode newSort = sort . copy ( sort . getTraitSet ( ) , ImmutableList . of ( Util . last ( query . rels ) ) ) ; call . transformTo ( DruidQuery . extendQuery ( query , newSort ) ) ; }",Smelly
" public Object createRunnerForPTransform ( PipelineOptions pipelineOptions , BeamFnDataClient beamFnDataClient , BeamFnStateClient beamFnStateClient , String pTransformId , PTransform pTransform , Supplier < String > processBundleInstructionId , Map < String , PCollection > pCollections , Map < String , Coder > coders , Map < String , WindowingStrategy > windowingStrategies , ListMultimap < String , FnDataReceiver < WindowedValue < ? > > > pCollectionIdsToConsumers , Consumer < ThrowingRunnable > addStartFunction , Consumer < ThrowingRunnable > addFinishFunction , BundleSplitListener splitListener ) { String message = String . format ( ""No factory registered for %s, known factories %s"" , pTransform . getSpec ( ) . getUrn ( ) , knownUrns ) ; LOG . error ( message ) ; throw new IllegalStateException ( message ) ; }",No
 private int precision ( ) { return v . length ( ) < 9 ? 0 : ( v . length ( ) - 9 ) ; },No
" public Integer [ ] format ( long number , int one , int letterValue , String features , String language , String country ) { if ( ( one == 0x0E01 ) && ( letterValue == LETTER_VALUE_ALPHABETIC ) ) { return formatNumberAsSequence ( number , one , thaiAlphabeticMap . length , thaiAlphabeticMap ) ; } else { return null ; } }",Smelly
 public TypedStream openNoMapOrNull ( String filenameOrURI ) { return AdapterLib . convert ( streamManager . openNoMapOrNull ( filenameOrURI ) ) ; },No
" void addChild ( int index , ConfigurationNode child ) ;",No
" private int readDocType ( char [ ] buf , int off , int len ) throws IOException { if ( _docType == null ) return 0 ; int read = _docType . read ( buf , off , len ) ; if ( read < len ) _docType = null ; if ( read == - 1 ) read = 0 ; return read ; }",No
 final boolean hasValidMemberId ( ) { return generation != Generation . NO_GENERATION && generation . hasMemberId ( ) ; },Smelly
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { super . looseMarshal ( wireFormat , o , dataOut ) ; }",No
" public static String checkProtectedView ( HttpServletRequest request , HttpServletResponse response ) { HttpSession session = request . getSession ( ) ; String viewNameId = RequestHandler . getRequestUri ( request . getPathInfo ( ) ) ; GenericValue userLogin = ( GenericValue ) session . getAttribute ( ""userLogin"" ) ; Delegator delegator = ( Delegator ) request . getAttribute ( ""delegator"" ) ; String returnValue = ""success"" ; if ( userLogin != null ) { String userLoginId = userLogin . getString ( ""userLoginId"" ) ; try { List < GenericValue > protectedViews = delegator . findByAnd ( ""UserLoginAndProtectedView"" , UtilMisc . toMap ( ""userLoginId"" , userLoginId , ""viewNameId"" , viewNameId ) , null , true ) ; if ( UtilValidate . isNotEmpty ( protectedViews ) ) { Long now = System . currentTimeMillis ( ) ; List < GenericValue > tarpittedLoginViews = delegator . findByAnd ( ""TarpittedLoginView"" , UtilMisc . toMap ( ""userLoginId"" , userLoginId , ""viewNameId"" , viewNameId ) , null , true ) ; String viewNameUserLoginId = viewNameId + userLoginId ; if ( UtilValidate . isNotEmpty ( tarpittedLoginViews ) ) { GenericValue tarpittedLoginView = tarpittedLoginViews . get ( 0 ) ; Long tarpitReleaseDateTime = ( Long ) tarpittedLoginView . get ( ""tarpitReleaseDateTime"" ) ; if ( now < tarpitReleaseDateTime ) { String tarpittedMessage = UtilProperties . getMessage ( resourceWebapp , ""protectedviewevents.tarpitted_message"" , UtilHttp . getLocale ( request ) ) ; hitsByViewAccessed . put ( viewNameUserLoginId , new Long ( 0 ) ) ; return "":_protect_:"" + tarpittedMessage ; } } GenericValue protectedView = protectedViews . get ( 0 ) ; Long curMaxHits = hitsByViewAccessed . get ( viewNameUserLoginId ) ; if ( UtilValidate . isEmpty ( curMaxHits ) ) { hitsByViewAccessed . put ( viewNameUserLoginId , one ) ; Long maxHitsDuration = ( Long ) protectedView . get ( ""maxHitsDuration"" ) * 1000 ; durationByViewAccessed . put ( viewNameUserLoginId , now + maxHitsDuration ) ; } else { Long maxDuration = durationByViewAccessed . get ( viewNameUserLoginId ) ; Long newMaxHits = curMaxHits + one ; hitsByViewAccessed . put ( viewNameUserLoginId , newMaxHits ) ; if ( now < maxDuration ) { if ( newMaxHits > protectedView . getLong ( ""maxHits"" ) ) { String blockedMessage = UtilProperties . getMessage ( resourceWebapp , ""protectedviewevents.blocked_message"" , UtilHttp . getLocale ( request ) ) ; returnValue = "":_protect_:"" + blockedMessage ; Long tarpitDuration = ( Long ) protectedView . get ( ""tarpitDuration"" ) * 1000 ; GenericValue tarpittedLoginView = delegator . makeValue ( ""TarpittedLoginView"" ) ; tarpittedLoginView . set ( ""userLoginId"" , userLoginId ) ; tarpittedLoginView . set ( ""viewNameId"" , viewNameId ) ; tarpittedLoginView . set ( ""tarpitReleaseDateTime"" , now + tarpitDuration ) ; try { delegator . createOrStore ( tarpittedLoginView ) ; } catch ( GenericEntityException e ) { Debug . logError ( e , ""Could not save TarpittedLoginView:"" , module ) ; } } } else { hitsByViewAccessed . put ( viewNameUserLoginId , one ) ; Long maxHitsDuration = ( Long ) protectedView . get ( ""maxHitsDuration"" ) * 1000 ; durationByViewAccessed . put ( viewNameUserLoginId , now + maxHitsDuration ) ; } } } } catch ( GenericEntityException e ) { Map < String , String > messageMap = UtilMisc . toMap ( ""errMessage"" , e . getMessage ( ) ) ; String errMsg = UtilProperties . getMessage ( ""CommonUiLabels"" , ""CommonDatabaseProblem"" , messageMap , UtilHttp . getLocale ( request ) ) ; Debug . logError ( e , errMsg , module ) ; } } return returnValue ; }",Smelly
" public void validate ( String order ) { assertTrue ( order , posA > posB ) ; }",No
" public void testServerContextNameWithHostName ( ) { String [ ] masterServerNames = { ""master/node-xyz/10.19.250.253:16020"" , ""master/node-regionserver-xyz/10.19.250.253:16020"" , ""HMaster/node-xyz/10.19.250.253:16020"" , ""HMaster/node-regionserver-xyz/10.19.250.253:16020"" } ; String [ ] regionServerNames = { ""regionserver/node-xyz/10.19.250.253:16020"" , ""regionserver/node-master1-xyz/10.19.250.253:16020"" , ""HRegionserver/node-xyz/10.19.250.253:16020"" , ""HRegionserver/node-master1-xyz/10.19.250.253:16020"" } ; MetricsHBaseServerSource masterSource = null ; for ( String serverName : masterServerNames ) { masterSource = new MetricsHBaseServer ( serverName , new MetricsHBaseServerWrapperStub ( ) ) . getMetricsSource ( ) ; assertEquals ( ""master"" , masterSource . getMetricsContext ( ) ) ; assertEquals ( ""Master,sub=IPC"" , masterSource . getMetricsJmxContext ( ) ) ; assertEquals ( ""Master"" , masterSource . getMetricsName ( ) ) ; } MetricsHBaseServerSource rsSource = null ; for ( String serverName : regionServerNames ) { rsSource = new MetricsHBaseServer ( serverName , new MetricsHBaseServerWrapperStub ( ) ) . getMetricsSource ( ) ; assertEquals ( ""regionserver"" , rsSource . getMetricsContext ( ) ) ; assertEquals ( ""RegionServer,sub=IPC"" , rsSource . getMetricsJmxContext ( ) ) ; assertEquals ( ""RegionServer"" , rsSource . getMetricsName ( ) ) ; } }",Smelly
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . intField = in . readInt ( ) ; this . strField = ( String ) in . readObject ( ) ; this . hybridEntity1 = in . readObject ( ) ; }",No
" public void testMyAccountEdit ( ) throws Exception { clickLinkWithText ( ""Edit Details"" ) ; String email = getFieldValue ( ""user.email"" ) ; setFieldValue ( ""user.fullName"" , newFullName ) ; setFieldValue ( ""user.email"" , newEmail ) ; submit ( ) ; getSelenium ( ) . waitForPageToLoad ( maxWaitTimeInMs ) ; Assert . assertEquals ( ""Continuum - Group Summary"" , getTitle ( ) ) ; clickLinkWithText ( ""Edit Details"" ) ; assertFieldValue ( newFullName , ""user.fullName"" ) ; assertFieldValue ( newEmail , ""user.email"" ) ; setFieldValue ( ""user.fullName"" , getProperty ( ""ADMIN_USERNAME"" ) ) ; setFieldValue ( ""user.email"" , email ) ; submit ( ) ; clickLinkWithText ( ""Edit Details"" ) ; assertFieldValue ( getProperty ( ""ADMIN_USERNAME"" ) , ""user.fullName"" ) ; assertFieldValue ( email , ""user.email"" ) ; }",Smelly
" public void parse ( InputStream stream , ContentHandler ignore , Metadata metadata , ParseContext context ) throws IOException , SAXException , TikaException { if ( maxEmbeddedResources > - 1 && metadatas . size ( ) >= maxEmbeddedResources ) { hitMaxEmbeddedResources = true ; return ; } String objectName = getResourceName ( metadata ) ; String objectLocation = this . location + objectName ; metadata . add ( EMBEDDED_RESOURCE_PATH , objectLocation ) ; ContentHandler localHandler = contentHandlerFactory . getNewContentHandler ( ) ; Parser preContextParser = context . get ( Parser . class ) ; context . set ( Parser . class , new EmbeddedParserDecorator ( objectLocation ) ) ; long started = new Date ( ) . getTime ( ) ; try { super . parse ( stream , localHandler , metadata , context ) ; } catch ( SAXException e ) { boolean wlr = isWriteLimitReached ( e ) ; if ( wlr == true ) { metadata . add ( WRITE_LIMIT_REACHED , ""true"" ) ; } else { if ( catchEmbeddedExceptions ) { String trace = ExceptionUtils . getStackTrace ( e ) ; metadata . set ( EMBEDDED_EXCEPTION , trace ) ; } else { throw e ; } } } catch ( IOException | TikaException e ) { if ( catchEmbeddedExceptions ) { String trace = ExceptionUtils . getStackTrace ( e ) ; metadata . set ( EMBEDDED_EXCEPTION , trace ) ; } else { throw e ; } } finally { context . set ( Parser . class , preContextParser ) ; long elapsedMillis = new Date ( ) . getTime ( ) - started ; metadata . set ( PARSE_TIME_MILLIS , Long . toString ( elapsedMillis ) ) ; } if ( maxEmbeddedResources > - 1 && metadatas . size ( ) >= maxEmbeddedResources ) { hitMaxEmbeddedResources = true ; return ; } addContent ( localHandler , metadata ) ; metadatas . add ( deepCopy ( metadata ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RemoteInterpreterContext struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 9 ) ; if ( incoming . get ( 0 ) ) { struct . noteId = iprot . readString ( ) ; struct . setNoteIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . paragraphId = iprot . readString ( ) ; struct . setParagraphIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . replName = iprot . readString ( ) ; struct . setReplNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . paragraphTitle = iprot . readString ( ) ; struct . setParagraphTitleIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . paragraphText = iprot . readString ( ) ; struct . setParagraphTextIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . authenticationInfo = iprot . readString ( ) ; struct . setAuthenticationInfoIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . config = iprot . readString ( ) ; struct . setConfigIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . gui = iprot . readString ( ) ; struct . setGuiIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . runners = iprot . readString ( ) ; struct . setRunnersIsSet ( true ) ; } }",Smelly
" public com . google . protobuf . ExtensionRegistry assignDescriptors ( com . google . protobuf . Descriptors . FileDescriptor root ) { descriptor = root ; internal_static_exec_shared_UserCredentials_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 0 ) ; internal_static_exec_shared_UserCredentials_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_UserCredentials_descriptor , new java . lang . String [ ] { ""UserName"" , } ) ; internal_static_exec_shared_QueryId_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 1 ) ; internal_static_exec_shared_QueryId_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryId_descriptor , new java . lang . String [ ] { ""Part1"" , ""Part2"" , } ) ; internal_static_exec_shared_DrillPBError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 2 ) ; internal_static_exec_shared_DrillPBError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_DrillPBError_descriptor , new java . lang . String [ ] { ""ErrorId"" , ""Endpoint"" , ""ErrorType"" , ""Message"" , ""Exception"" , ""ParsingError"" , } ) ; internal_static_exec_shared_ExceptionWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 3 ) ; internal_static_exec_shared_ExceptionWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ExceptionWrapper_descriptor , new java . lang . String [ ] { ""ExceptionClass"" , ""Message"" , ""StackTrace"" , ""Cause"" , } ) ; internal_static_exec_shared_StackTraceElementWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 4 ) ; internal_static_exec_shared_StackTraceElementWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StackTraceElementWrapper_descriptor , new java . lang . String [ ] { ""ClassName"" , ""FileName"" , ""LineNumber"" , ""MethodName"" , ""IsNativeMethod"" , } ) ; internal_static_exec_shared_ParsingError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 5 ) ; internal_static_exec_shared_ParsingError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ParsingError_descriptor , new java . lang . String [ ] { ""StartColumn"" , ""StartRow"" , ""EndColumn"" , ""EndRow"" , } ) ; internal_static_exec_shared_RecordBatchDef_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 6 ) ; internal_static_exec_shared_RecordBatchDef_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_RecordBatchDef_descriptor , new java . lang . String [ ] { ""RecordCount"" , ""Field"" , ""CarriesTwoByteSelectionVector"" , } ) ; internal_static_exec_shared_NamePart_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 7 ) ; internal_static_exec_shared_NamePart_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NamePart_descriptor , new java . lang . String [ ] { ""Type"" , ""Name"" , ""Child"" , } ) ; internal_static_exec_shared_SerializedField_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 8 ) ; internal_static_exec_shared_SerializedField_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SerializedField_descriptor , new java . lang . String [ ] { ""MajorType"" , ""NamePart"" , ""Child"" , ""ValueCount"" , ""VarByteLength"" , ""BufferLength"" , } ) ; internal_static_exec_shared_NodeStatus_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 9 ) ; internal_static_exec_shared_NodeStatus_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NodeStatus_descriptor , new java . lang . String [ ] { ""NodeId"" , ""MemoryFootprint"" , } ) ; internal_static_exec_shared_QueryResult_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 10 ) ; internal_static_exec_shared_QueryResult_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryResult_descriptor , new java . lang . String [ ] { ""QueryState"" , ""QueryId"" , ""Error"" , } ) ; internal_static_exec_shared_QueryData_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 11 ) ; internal_static_exec_shared_QueryData_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryData_descriptor , new java . lang . String [ ] { ""QueryId"" , ""RowCount"" , ""Def"" , } ) ; internal_static_exec_shared_QueryInfo_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 12 ) ; internal_static_exec_shared_QueryInfo_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryInfo_descriptor , new java . lang . String [ ] { ""Query"" , ""Start"" , ""State"" , ""User"" , ""Foreman"" , ""OptionsJson"" , } ) ; internal_static_exec_shared_QueryProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 13 ) ; internal_static_exec_shared_QueryProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryProfile_descriptor , new java . lang . String [ ] { ""Id"" , ""Type"" , ""Start"" , ""End"" , ""Query"" , ""Plan"" , ""Foreman"" , ""State"" , ""TotalFragments"" , ""FinishedFragments"" , ""FragmentProfile"" , ""User"" , ""Error"" , ""VerboseError"" , ""ErrorId"" , ""ErrorNode"" , ""OptionsJson"" , ""PlanEnd"" , ""QueueWaitEnd"" , } ) ; internal_static_exec_shared_MajorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 14 ) ; internal_static_exec_shared_MajorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MajorFragmentProfile_descriptor , new java . lang . String [ ] { ""MajorFragmentId"" , ""MinorFragmentProfile"" , } ) ; internal_static_exec_shared_MinorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 15 ) ; internal_static_exec_shared_MinorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MinorFragmentProfile_descriptor , new java . lang . String [ ] { ""State"" , ""Error"" , ""MinorFragmentId"" , ""OperatorProfile"" , ""StartTime"" , ""EndTime"" , ""MemoryUsed"" , ""MaxMemoryUsed"" , ""Endpoint"" , ""LastUpdate"" , ""LastProgress"" , } ) ; internal_static_exec_shared_OperatorProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 16 ) ; internal_static_exec_shared_OperatorProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_OperatorProfile_descriptor , new java . lang . String [ ] { ""InputProfile"" , ""OperatorId"" , ""OperatorType"" , ""SetupNanos"" , ""ProcessNanos"" , ""PeakLocalMemoryAllocated"" , ""Metric"" , ""WaitNanos"" , } ) ; internal_static_exec_shared_StreamProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 17 ) ; internal_static_exec_shared_StreamProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StreamProfile_descriptor , new java . lang . String [ ] { ""Records"" , ""Batches"" , ""Schemas"" , } ) ; internal_static_exec_shared_MetricValue_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 18 ) ; internal_static_exec_shared_MetricValue_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MetricValue_descriptor , new java . lang . String [ ] { ""MetricId"" , ""LongValue"" , ""DoubleValue"" , } ) ; internal_static_exec_shared_Registry_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 19 ) ; internal_static_exec_shared_Registry_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Registry_descriptor , new java . lang . String [ ] { ""Jar"" , } ) ; internal_static_exec_shared_Jar_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 20 ) ; internal_static_exec_shared_Jar_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Jar_descriptor , new java . lang . String [ ] { ""Name"" , ""FunctionSignature"" , } ) ; internal_static_exec_shared_SaslMessage_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 21 ) ; internal_static_exec_shared_SaslMessage_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SaslMessage_descriptor , new java . lang . String [ ] { ""Mechanism"" , ""Data"" , ""Status"" , } ) ; return null ; }",No
 public long getBalancerBandwidthValue ( ) { return this . bandwidth ; },No
" boolean callHasExpired ( KafkaAdminClient . Call call ) { if ( ( ! call . isInternal ( ) ) && shouldInjectFailure ( ) ) { log . debug ( ""Injecting timeout for {}."" , call ) ; return true ; } else { boolean ret = super . callHasExpired ( call ) ; log . debug ( ""callHasExpired({}) = {}"" , call , ret ) ; return ret ; } }",No
 void setHomeAddress ( IAddress homeAddress ) ;,No
" private static VectorExpressionWriter genVectorExpressionWritable ( SettableStructObjectInspector objInspector , StructField fieldRef , VectorExpressionWriter baseWriter ) throws HiveException { return new VectorExpressionWriterSetter ( ) . init ( objInspector , fieldRef , baseWriter ) ; }",Smelly
" void assertPrivilege ( Privilege priv , String name , boolean isAggregate , boolean isAbstract ) { assertNotNull ( priv ) ; String privName = priv . getName ( ) ; assertEquals ( privName , privName , name ) ; assertEquals ( privName , isAggregate , priv . isAggregate ( ) ) ; assertEquals ( privName , isAbstract , priv . isAbstract ( ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . statusCode = TStatusCode . findByValue ( iprot . readI32 ( ) ) ; struct . setStatusCodeIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list139 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . infoMessages = new ArrayList < String > ( _list139 . size ) ; for ( int _i140 = 0 ; _i140 < _list139 . size ; ++ _i140 ) { String _elem141 ; _elem141 = iprot . readString ( ) ; struct . infoMessages . add ( _elem141 ) ; } } struct . setInfoMessagesIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sqlState = iprot . readString ( ) ; struct . setSqlStateIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . errorCode = iprot . readI32 ( ) ; struct . setErrorCodeIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . errorMessage = iprot . readString ( ) ; struct . setErrorMessageIsSet ( true ) ; } }",Smelly
 private Object readResolve ( ) { return INSTANCE ; },No
 protected Class < M > extractMessageValueClass ( ImmutableClassesGiraphConfiguration conf ) { return conf . getIncomingMessageValueClass ( ) ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" static String buildNavPath ( UriHelper helper , EdmEntityType rootType , LinkedList < UriResourceNavigation > navigations , boolean includeLastPredicates ) throws SerializerException { if ( navigations . isEmpty ( ) ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; boolean containsTarget = false ; EdmEntityType type = rootType ; for ( UriResourceNavigation nav : navigations ) { String name = nav . getProperty ( ) . getName ( ) ; EdmNavigationProperty property = type . getNavigationProperty ( name ) ; if ( property . containsTarget ( ) ) { containsTarget = true ; } type = nav . getProperty ( ) . getType ( ) ; } if ( containsTarget ) { for ( int i = 0 ; i < navigations . size ( ) ; i ++ ) { UriResourceNavigation nav = navigations . get ( i ) ; if ( i > 0 ) { sb . append ( ""/"" ) ; } sb . append ( nav . getProperty ( ) . getName ( ) ) ; boolean skipKeys = false ; if ( navigations . size ( ) == i + 1 && ! includeLastPredicates ) { skipKeys = true ; } if ( ! skipKeys && ! nav . getKeyPredicates ( ) . isEmpty ( ) ) { sb . append ( ""("" ) ; sb . append ( helper . buildContextURLKeyPredicate ( nav . getKeyPredicates ( ) ) ) ; sb . append ( "")"" ) ; } if ( nav . getTypeFilterOnCollection ( ) != null ) { sb . append ( ""/"" ) . append ( nav . getTypeFilterOnCollection ( ) . getFullQualifiedName ( ) . getFullQualifiedNameAsString ( ) ) ; } else if ( nav . getTypeFilterOnEntry ( ) != null ) { sb . append ( ""/"" ) . append ( nav . getTypeFilterOnEntry ( ) . getFullQualifiedName ( ) . getFullQualifiedNameAsString ( ) ) ; } } } return sb . toString ( ) ; }",Smelly
" public static < T > T get ( ByteBuf pBody , Parser < T > parser ) throws RpcException { try { ByteBufInputStream is = new ByteBufInputStream ( pBody ) ; return parser . parseFrom ( is ) ; } catch ( InvalidProtocolBufferException e ) { throw new RpcException ( String . format ( ""Failure while decoding message with parser of type. %s"" , parser . getClass ( ) . getCanonicalName ( ) ) , e ) ; } }",Smelly
" public static void main ( String [ ] args ) throws SocketException , IOException { if ( args . length != 2 && args . length != 3 && args . length != 5 ) { System . out . println ( ""Usage: MessageThreading <hostname> <groupname> [<article specifier> [<user> <password>]]"" ) ; return ; } String hostname = args [ 0 ] ; String newsgroup = args [ 1 ] ; String articleSpec = args . length >= 3 ? args [ 2 ] : null ; NNTPClient client = new NNTPClient ( ) ; client . addProtocolCommandListener ( new PrintCommandListener ( new PrintWriter ( System . out ) , true ) ) ; client . connect ( hostname ) ; if ( args . length == 5 ) { String user = args [ 3 ] ; String password = args [ 4 ] ; if ( ! client . authenticate ( user , password ) ) { System . out . println ( ""Authentication failed for user "" + user + ""!"" ) ; System . exit ( 1 ) ; } } NewsgroupInfo group = new NewsgroupInfo ( ) ; client . selectNewsgroup ( newsgroup , group ) ; BufferedReader br ; String line ; if ( articleSpec != null ) { br = ( BufferedReader ) client . retrieveArticleHeader ( articleSpec ) ; } else { long articleNum = group . getLastArticleLong ( ) ; br = client . retrieveArticleHeader ( articleNum ) ; } if ( br != null ) { while ( ( line = br . readLine ( ) ) != null ) { System . out . println ( line ) ; } br . close ( ) ; } if ( articleSpec != null ) { br = ( BufferedReader ) client . retrieveArticleBody ( articleSpec ) ; } else { long articleNum = group . getLastArticleLong ( ) ; br = client . retrieveArticleBody ( articleNum ) ; } if ( br != null ) { while ( ( line = br . readLine ( ) ) != null ) { System . out . println ( line ) ; } br . close ( ) ; } }",Smelly
 public int getSerializedSize ( ) { return super . getSerializedSize ( ) + 4 + data . length ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void tearDownAllModules ( ) { super . tearDownAllModules ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TAuthenticationTokenIdentifier struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . principal = iprot . readString ( ) ; struct . setPrincipalIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . keyId = iprot . readI32 ( ) ; struct . setKeyIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . issueDate = iprot . readI64 ( ) ; struct . setIssueDateIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . expirationDate = iprot . readI64 ( ) ; struct . setExpirationDateIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . instanceId = iprot . readString ( ) ; struct . setInstanceIdIsSet ( true ) ; } }",Smelly
" public void afterFinish ( CommittedBundle < T > input , TransformResult < T > result , Iterable < ? extends CommittedBundle < ? > > outputs ) { }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public String toString ( ) { return target . toString ( ) ; },No
 public String otherProperty ( ) { return null ; },No
 public SerDeStats getSerDeStats ( ) { return null ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" private String propertyAttributeDescription ( Attributes atts , AttributeLexer ap , int cnt ) { String propAttrs = """" ; int propAttrCount = atts . getLength ( ) - cnt ; int found = 0 ; if ( propAttrCount == 0 ) return null ; switch ( propAttrCount ) { case 0 : break ; case 1 : case 2 : case 3 : for ( int i = 0 ; i < atts . getLength ( ) ; i ++ ) if ( ! ap . done ( i ) ) { propAttrs += atts . getQName ( i ) ; found ++ ; switch ( propAttrCount - found ) { case 0 : break ; case 1 : propAttrs += "" and "" ; break ; default : propAttrs += "", "" ; } } break ; default : if ( propAttrCount < 0 ) throw new IllegalStateException ( ""Shouldn't happen."" ) ; for ( int i = 0 ; i < atts . getLength ( ) ; i ++ ) if ( ! ap . done ( i ) ) { found ++ ; switch ( found ) { case 1 : propAttrs += atts . getQName ( i ) + "", "" ; break ; case 2 : propAttrs += atts . getQName ( i ) + "", ..."" ; break ; default : } } } return ""property attributes ("" + propAttrs + "")"" ; }",No
" protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; NetworkBridgeFilter info = ( NetworkBridgeFilter ) object ; info . setNetworkTTL ( 1 ) ; info . setNetworkBrokerId ( createBrokerId ( ""NetworkBrokerId:1"" ) ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public static void main ( String [ ] args ) throws Exception { MemoryTransactionalSpout spout = new MemoryTransactionalSpout ( DATA , new Fields ( ""word"" ) , PARTITION_TAKE_PER_BATCH ) ; TransactionalTopologyBuilder builder = new TransactionalTopologyBuilder ( ""top-n-words"" , ""spout"" , spout , 2 ) ; builder . setBolt ( ""count"" , new KeyedCountUpdater ( ) , 5 ) . fieldsGrouping ( ""spout"" , new Fields ( ""word"" ) ) ; builder . setBolt ( ""bucketize"" , new Bucketize ( ) ) . noneGrouping ( ""count"" ) ; builder . setBolt ( ""buckets"" , new BucketCountUpdater ( ) , 5 ) . fieldsGrouping ( ""bucketize"" , new Fields ( ""bucket"" ) ) ; LocalCluster cluster = new LocalCluster ( ) ; Config config = new Config ( ) ; config . setDebug ( true ) ; config . setMaxSpoutPending ( 3 ) ; cluster . submitTopology ( ""top-n-topology"" , config , builder . buildTopology ( ) ) ; Thread . sleep ( 3000 ) ; cluster . shutdown ( ) ; }",No
" public void setToDependent ( ClientTooneDep toDependent ) { if ( objectContext != null ) { objectContext . prepareForAccess ( this , ""toDependent"" , true ) ; } this . toDependent . setValue ( toDependent ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void setDeny ( ClientDeleteRule deny ) { if ( objectContext != null ) { objectContext . prepareForAccess ( this , ""deny"" , true ) ; } this . deny . setValue ( deny ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" private Object repositoryKindInfo ( MavenRepositoryURL repoURL , boolean snapshots ) { if ( snapshots ) { if ( repoURL . isSnapshotsEnabled ( ) ) { String snapshotsUpdatePolicy = repoURL . getSnapshotsUpdatePolicy ( ) ; return String . format ( ""yes (%s)"" , snapshotsUpdatePolicy == null || """" . equals ( snapshotsUpdatePolicy . trim ( ) ) ? ""daily"" : snapshotsUpdatePolicy ) ; } } else { if ( repoURL . isReleasesEnabled ( ) ) { String releasesUpdatePolicy = repoURL . getReleasesUpdatePolicy ( ) ; return String . format ( ""yes (%s)"" , releasesUpdatePolicy == null || """" . equals ( releasesUpdatePolicy . trim ( ) ) ? ""daily"" : releasesUpdatePolicy ) ; } } return ""no"" ; }",Smelly
 public PublishedAction . PayloadFactory getPayloadFactory ( ) { return payloadFactory ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void process ( Exchange exchange ) throws Exception { assertNull ( exchange . getIn ( ) . getHeader ( ""testheader"" ) ) ; assertNull ( exchange . getIn ( ) . getHeader ( ""anotherheader"" ) ) ; assertEquals ( 10000 , exchange . getIn ( ) . getHeader ( ""org.apache.camel.jms"" ) ) ; assertNull ( exchange . getIn ( ) . getHeader ( ""org.apache.camel.test.jms"" ) ) ; latch . countDown ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , StringColumnStatsData struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . maxColLen = iprot . readI64 ( ) ; struct . setMaxColLenIsSet ( true ) ; struct . avgColLen = iprot . readDouble ( ) ; struct . setAvgColLenIsSet ( true ) ; struct . numNulls = iprot . readI64 ( ) ; struct . setNumNullsIsSet ( true ) ; struct . numDVs = iprot . readI64 ( ) ; struct . setNumDVsIsSet ( true ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TMutation struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . row = iprot . readBinary ( ) ; struct . setRowIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . data = iprot . readBinary ( ) ; struct . setDataIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list10 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . values = new ArrayList < ByteBuffer > ( _list10 . size ) ; for ( int _i11 = 0 ; _i11 < _list10 . size ; ++ _i11 ) { ByteBuffer _elem12 ; _elem12 = iprot . readBinary ( ) ; struct . values . add ( _elem12 ) ; } } struct . setValuesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . entries = iprot . readI32 ( ) ; struct . setEntriesIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list13 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . sources = new ArrayList < String > ( _list13 . size ) ; for ( int _i14 = 0 ; _i14 < _list13 . size ; ++ _i14 ) { String _elem15 ; _elem15 = iprot . readString ( ) ; struct . sources . add ( _elem15 ) ; } } struct . setSourcesIsSet ( true ) ; } }",Smelly
" public void testEncodedTypeDescriptor ( ) throws Exception { assertThat ( TEST_CODER . getEncodedTypeDescriptor ( ) , equalTo ( TypeDescriptor . of ( String . class ) ) ) ; }",No
 public String getConversionKey ( ) { return conversionKey ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void cancel ( ) { this . failureReason . compareAndSet ( null , ""Update was cancelled"" ) ; this . complete = true ; }",No
" public void appendTo ( Select sel , ExpContext ctx , BinaryOpExpState bstate , SQLBuffer buf , boolean val1Null , boolean val2Null ) { if ( val1Null && val2Null ) buf . append ( ""1 = 1"" ) ; else if ( val1Null || val2Null ) { Val val = ( val1Null ) ? getValue2 ( ) : getValue1 ( ) ; ExpState state = ( val1Null ) ? bstate . state2 : bstate . state1 ; if ( ! isDirectComparison ( ) ) { int len = val . length ( sel , ctx , state ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( i > 0 ) buf . append ( "" AND "" ) ; val . appendTo ( sel , ctx , state , buf , i ) ; buf . append ( "" IS "" ) . appendValue ( null ) ; } } else val . appendIsNull ( sel , ctx , state , buf ) ; } else { Val val1 = getValue1 ( ) ; Val val2 = getValue2 ( ) ; if ( val1 . length ( sel , ctx , bstate . state1 ) == 1 && val2 . length ( sel , ctx , bstate . state2 ) == 1 ) { ctx . store . getDBDictionary ( ) . comparison ( buf , ""="" , new FilterValueImpl ( sel , ctx , bstate . state1 , val1 ) , new FilterValueImpl ( sel , ctx , bstate . state2 , val2 ) ) ; } else { int len = java . lang . Math . min ( val1 . length ( sel , ctx , bstate . state1 ) , val2 . length ( sel , ctx , bstate . state2 ) ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( i > 0 ) buf . append ( "" AND "" ) ; val1 . appendTo ( sel , ctx , bstate . state1 , buf , i ) ; buf . append ( "" = "" ) ; val2 . appendTo ( sel , ctx , bstate . state2 , buf , i ) ; } } } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void startOfNode ( ) throws FOPException { super . startOfNode ( ) ; if ( parent . getNameId ( ) != Constants . FO_DECLARATIONS ) { invalidChildError ( getLocator ( ) , parent . getName ( ) , getNamespaceURI ( ) , getName ( ) , ""rule.childOfDeclarations"" ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public Coder < DestinationT > getDestinationCoder ( ) { return spec . getDestinationCoder ( ) ; },No
" public Map < String , Object > getContentMap ( ) throws JMSException { initializeReading ( ) ; return map ; }",No
" public void details ( ) { if ( input . parameterNumber ( ) == 0 ) { try { final Map < String , String > details = new LinkedMap < > ( ) ; final List < AbstractTaskTO > notificationTaskTOs = taskSyncopeOperations . list ( TaskType . NOTIFICATION . name ( ) ) ; final List < AbstractTaskTO > propagationTaskTOs = taskSyncopeOperations . list ( TaskType . PROPAGATION . name ( ) ) ; final List < AbstractTaskTO > pushTaskTOs = taskSyncopeOperations . list ( TaskType . PUSH . name ( ) ) ; final List < AbstractTaskTO > scheduledTaskTOs = taskSyncopeOperations . list ( TaskType . SCHEDULED . name ( ) ) ; final List < AbstractTaskTO > pullTaskTOs = taskSyncopeOperations . list ( TaskType . PULL . name ( ) ) ; final List < JobTO > jobTOs = taskSyncopeOperations . listJobs ( ) ; final int notificationTaskSize = notificationTaskTOs . size ( ) ; final int propagationTaskSize = propagationTaskTOs . size ( ) ; final int pushTaskSize = pushTaskTOs . size ( ) ; final int scheduledTaskSize = scheduledTaskTOs . size ( ) ; int scheduledNotExecuted = 0 ; final int pullTaskSize = pullTaskTOs . size ( ) ; final int jobsSize = jobTOs . size ( ) ; int notificationNotExecuted = 0 ; for ( final AbstractTaskTO notificationTaskTO : notificationTaskTOs ) { if ( ! ( ( NotificationTaskTO ) notificationTaskTO ) . isExecuted ( ) ) { notificationNotExecuted ++ ; } } int propagationNotExecuted = 0 ; for ( final AbstractTaskTO propagationTaskTO : propagationTaskTOs ) { if ( ( ( PropagationTaskTO ) propagationTaskTO ) . getExecutions ( ) == null || ( ( PropagationTaskTO ) propagationTaskTO ) . getExecutions ( ) . isEmpty ( ) ) { propagationNotExecuted ++ ; } } int pushNotExecuted = 0 ; for ( final AbstractTaskTO pushTaskTO : pushTaskTOs ) { if ( ( ( PushTaskTO ) pushTaskTO ) . getExecutions ( ) == null || ( ( PushTaskTO ) pushTaskTO ) . getExecutions ( ) . isEmpty ( ) ) { pushNotExecuted ++ ; } } for ( final AbstractTaskTO scheduledTaskTO : scheduledTaskTOs ) { if ( ( ( SchedTaskTO ) scheduledTaskTO ) . getExecutions ( ) == null || ( ( SchedTaskTO ) scheduledTaskTO ) . getExecutions ( ) . isEmpty ( ) ) { scheduledNotExecuted ++ ; } } int pullNotExecuted = 0 ; int pullFull = 0 ; for ( final AbstractTaskTO pullTaskTO : pullTaskTOs ) { if ( ( ( PullTaskTO ) pullTaskTO ) . getExecutions ( ) == null || ( ( PullTaskTO ) pullTaskTO ) . getExecutions ( ) . isEmpty ( ) ) { pullNotExecuted ++ ; } if ( ( ( PullTaskTO ) pullTaskTO ) . getPullMode ( ) == PullMode . FULL_RECONCILIATION ) { pullFull ++ ; } } details . put ( ""total number"" , String . valueOf ( notificationTaskSize + propagationTaskSize + pushTaskSize + scheduledTaskSize + pullTaskSize ) ) ; details . put ( ""notification tasks"" , String . valueOf ( notificationTaskSize ) ) ; details . put ( ""notification tasks not executed"" , String . valueOf ( notificationNotExecuted ) ) ; details . put ( ""propagation tasks"" , String . valueOf ( propagationTaskSize ) ) ; details . put ( ""propagation tasks not executed"" , String . valueOf ( propagationNotExecuted ) ) ; details . put ( ""push tasks"" , String . valueOf ( pushTaskSize ) ) ; details . put ( ""push tasks not executed"" , String . valueOf ( pushNotExecuted ) ) ; details . put ( ""scheduled tasks"" , String . valueOf ( scheduledTaskSize ) ) ; details . put ( ""scheduled tasks not executed"" , String . valueOf ( scheduledNotExecuted ) ) ; details . put ( ""pull tasks"" , String . valueOf ( pullTaskSize ) ) ; details . put ( ""pull tasks not executed"" , String . valueOf ( pullNotExecuted ) ) ; details . put ( ""pull tasks with full reconciliation"" , String . valueOf ( pullFull ) ) ; details . put ( ""jobs"" , String . valueOf ( jobsSize ) ) ; taskResultManager . printDetails ( details ) ; } catch ( final SyncopeClientException ex ) { LOG . error ( ""Error reading details about task"" , ex ) ; taskResultManager . genericError ( ex . getMessage ( ) ) ; } catch ( final IllegalArgumentException ex ) { LOG . error ( ""Error reading details about task"" , ex ) ; taskResultManager . typeNotValidError ( ""task"" , input . firstParameter ( ) , CommandUtils . fromEnumToArray ( TaskType . class ) ) ; } } else { taskResultManager . commandOptionError ( DETAILS_HELP_MESSAGE ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void addItem ( ConcreteEntity ce ) { if ( items == null ) items = new LinkedHashSet < ConcreteEntity > ( ) ; items . add ( ce ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public List < OperatorSummary > getOpDefn ( String target ) { List < OperatorSummary > ops = new ArrayList < > ( ) ; for ( OperatorSummary opDef : operations ) { if ( opDef . name . startsWith ( target ) ) { ops . add ( opDef ) ; } } return ops ; },No
" public Metrics add ( String namespace ) { publishMsgLatency . refresh ( ) ; long [ ] latencyBuckets = publishMsgLatency . getBuckets ( ) ; Map < String , String > dimensionMap = Maps . newHashMap ( ) ; dimensionMap . put ( ""namespace"" , namespace ) ; Metrics dMetrics = Metrics . create ( dimensionMap ) ; dMetrics . put ( ""ns_msg_publish_rate"" , numberOfMsgPublished ) ; dMetrics . put ( ""ns_byte_publish_rate"" , numberOfBytesPublished ) ; dMetrics . put ( ""ns_msg_failure_rate"" , numberOfPublishFailure ) ; dMetrics . put ( ""ns_msg_deliver_rate"" , numberOfMsgDelivered ) ; dMetrics . put ( ""ns_byte_deliver_rate"" , numberOfBytesDelivered ) ; dMetrics . put ( ""ns_msg_ack_rate"" , numberOfMsgsAcked ) ; for ( int i = 0 ; i < latencyBuckets . length ; i ++ ) { final String latencyBucket = i >= ENTRY_LATENCY_BUCKETS_USEC . length ? ENTRY_LATENCY_BUCKETS_USEC [ ENTRY_LATENCY_BUCKETS_USEC . length - 1 ] + ""_higher"" : Long . toString ( ENTRY_LATENCY_BUCKETS_USEC [ i ] ) ; dMetrics . put ( ""ns_msg_publish_latency_"" + latencyBucket , latencyBuckets [ i ] ) ; } return dMetrics ; }",Smelly
" protected RouteBuilder createRouteBuilder ( ) throws Exception { return new RouteBuilder ( ) { public void configure ( ) throws Exception { from ( ftpUrl ) . to ( ""mock:result"" ) ; } } ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" void allowingPublishingConfigurationToReturn ( final String value ) { context . checking ( new Expectations ( ) { { allowing ( mockConfiguration ) . getString ( ""isis.services.publish.actions"" ) ; will ( returnValue ( value ) ) ; } } ) ; }",No
" private void verifyOrderedMessageReceipt ( byte destinationType , int concurrentPairs , boolean transactional ) throws Exception { Vector < Thread > threads = new Vector < Thread > ( ) ; Vector < Receiver > receivers = new Vector < Receiver > ( ) ; for ( int i = 0 ; i < concurrentPairs ; ++ i ) { final javax . jms . Destination destination = ActiveMQDestination . createDestination ( ""test.dest."" + i , destinationType ) ; receivers . add ( new Receiver ( destination , transactional ) ) ; Thread thread = new Thread ( new Sender ( destination ) ) ; thread . start ( ) ; threads . add ( thread ) ; } final long expiry = System . currentTimeMillis ( ) + 1000 * 60 * 30 ; while ( ! threads . isEmpty ( ) && exceptions . isEmpty ( ) && System . currentTimeMillis ( ) < expiry ) { Thread sendThread = threads . firstElement ( ) ; sendThread . join ( 1000 * 10 ) ; if ( ! sendThread . isAlive ( ) ) { threads . remove ( sendThread ) ; } } LOG . info ( ""senders done..."" ) ; while ( ! receivers . isEmpty ( ) && System . currentTimeMillis ( ) < expiry ) { Receiver receiver = receivers . firstElement ( ) ; if ( receiver . getNextExpectedSeqNo ( ) >= numtoSend || ! exceptions . isEmpty ( ) ) { receiver . close ( ) ; receivers . remove ( receiver ) ; } } assertTrue ( ""No timeout waiting for senders/receivers to complete"" , System . currentTimeMillis ( ) < expiry ) ; if ( ! exceptions . isEmpty ( ) ) { exceptions . get ( 0 ) . printStackTrace ( ) ; } assertTrue ( ""No exceptions"" , exceptions . isEmpty ( ) ) ; }",No
 public void setChildren ( List < Dependent4 > children ) { this . children = children ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public int compare ( final CacheRecord o1 , final CacheRecord o2 ) { if ( o1 . equals ( o2 ) ) { return 0 ; } final int entryDateComparison = Long . compare ( o1 . getEntryDate ( ) , o2 . getEntryDate ( ) ) ; return ( entryDateComparison == 0 ? Long . compare ( o1 . getId ( ) , o2 . getId ( ) ) : entryDateComparison ) ; }",Smelly
" void execute ( Runnable command , long timeout , TimeUnit unit ) ;",No
" public void testPatternTransformer ( ) throws Exception { String src = ""resource://org/apache/cocoon/transformation/patterntest-lexicon1.xml"" ; Parameters parameters = new Parameters ( ) ; String input = ""resource://org/apache/cocoon/transformation/patterntest-input1.xml"" ; String result = ""resource://org/apache/cocoon/transformation/patterntest-result1.xml"" ; assertEqual ( load ( result ) , transform ( ""pattern"" , src , parameters , load ( input ) ) ) ; }",Smelly
" public void analyzeInternal ( ASTNode ast ) throws SemanticException { Tree tableTree = ast . getChild ( 0 ) ; Tree toTree = ast . getChild ( 1 ) ; String tmpPath = stripQuotes ( toTree . getText ( ) ) ; URI toURI = EximUtil . getValidatedURI ( conf , tmpPath ) ; tableSpec ts = new tableSpec ( db , conf , ( ASTNode ) tableTree , false , true ) ; EximUtil . validateTable ( ts . tableHandle ) ; try { FileSystem fs = FileSystem . get ( toURI , conf ) ; Path toPath = new Path ( toURI . getScheme ( ) , toURI . getAuthority ( ) , toURI . getPath ( ) ) ; try { FileStatus tgt = fs . getFileStatus ( toPath ) ; if ( ! tgt . isDir ( ) ) { throw new SemanticException ( ErrorMsg . INVALID_PATH . getMsg ( ast , ""Target is not a directory : "" + toURI ) ) ; } else { FileStatus [ ] files = fs . listStatus ( toPath ) ; if ( files != null && files . length != 0 ) { throw new SemanticException ( ErrorMsg . INVALID_PATH . getMsg ( ast , ""Target is not an empty directory : "" + toURI ) ) ; } } } catch ( FileNotFoundException e ) { } } catch ( IOException e ) { throw new SemanticException ( ErrorMsg . INVALID_PATH . getMsg ( ast ) , e ) ; } List < Partition > partitions = null ; try { partitions = null ; if ( ts . tableHandle . isPartitioned ( ) ) { partitions = ( ts . partitions != null ) ? ts . partitions : db . getPartitions ( ts . tableHandle ) ; } Path path = new Path ( ctx . getLocalTmpPath ( ) , ""_metadata"" ) ; EximUtil . createExportDump ( FileSystem . getLocal ( conf ) , path , ts . tableHandle , partitions ) ; Task < ? extends Serializable > rTask = TaskFactory . get ( new CopyWork ( path , new Path ( toURI ) , false ) , conf ) ; rootTasks . add ( rTask ) ; LOG . debug ( ""_metadata file written into "" + path . toString ( ) + "" and then copied to "" + toURI . toString ( ) ) ; } catch ( Exception e ) { throw new SemanticException ( ErrorMsg . GENERIC_ERROR . getMsg ( ""Exception while writing out the local file"" ) , e ) ; } Path parentPath = new Path ( toURI ) ; if ( ts . tableHandle . isPartitioned ( ) ) { for ( Partition partition : partitions ) { Path fromPath = partition . getDataLocation ( ) ; Path toPartPath = new Path ( parentPath , partition . getName ( ) ) ; Task < ? extends Serializable > rTask = TaskFactory . get ( new CopyWork ( fromPath , toPartPath , false ) , conf ) ; rootTasks . add ( rTask ) ; inputs . add ( new ReadEntity ( partition ) ) ; } } else { Path fromPath = ts . tableHandle . getDataLocation ( ) ; Path toDataPath = new Path ( parentPath , ""data"" ) ; Task < ? extends Serializable > rTask = TaskFactory . get ( new CopyWork ( fromPath , toDataPath , false ) , conf ) ; rootTasks . add ( rTask ) ; inputs . add ( new ReadEntity ( ts . tableHandle ) ) ; } outputs . add ( new WriteEntity ( parentPath , toURI . getScheme ( ) . equals ( ""hdfs"" ) ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , HiveClusterStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . taskTrackers = iprot . readI32 ( ) ; struct . setTaskTrackersIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . mapTasks = iprot . readI32 ( ) ; struct . setMapTasksIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . reduceTasks = iprot . readI32 ( ) ; struct . setReduceTasksIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . maxMapTasks = iprot . readI32 ( ) ; struct . setMaxMapTasksIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . maxReduceTasks = iprot . readI32 ( ) ; struct . setMaxReduceTasksIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . state = JobTrackerState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public WidgetDefinition buildWidgetDefinition ( Element element ) throws Exception { NewDefinition definition = new NewDefinition ( ) ; setCommonProperties ( element , definition ) ; return definition ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Message struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . event = iprot . readBinary ( ) ; struct . setEventIsSet ( true ) ; struct . messageId = iprot . readString ( ) ; struct . setMessageIdIsSet ( true ) ; struct . messageType = org . apache . airavata . model . messaging . event . MessageType . findByValue ( iprot . readI32 ( ) ) ; struct . setMessageTypeIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . updatedTime = iprot . readI64 ( ) ; struct . setUpdatedTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . messageLevel = org . apache . airavata . model . messaging . event . MessageLevel . findByValue ( iprot . readI32 ( ) ) ; struct . setMessageLevelIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void invoke ( Request request , Response response ) throws IOException , ServletException { process ( request . getRequest ( ) . getRemoteHost ( ) , request , response ) ; }",No
" void removeQueueRole ( String queue , String operation , String role ) ;",No
 T joining ( List < String > servers ) ;,No
" public void testShowDescriptionOnInterpreterCreate ( ) throws Exception { if ( ! endToEndTestEnabled ( ) ) { return ; } try { WebElement settingButton = driver . findElement ( By . xpath ( ""//button[@class='nav-btn dropdown-toggle ng-scope']"" ) ) ; settingButton . click ( ) ; WebElement interpreterLink = driver . findElement ( By . xpath ( ""//a[@href='#/interpreter']"" ) ) ; interpreterLink . click ( ) ; WebElement createButton = driver . findElement ( By . xpath ( ""//button[contains(., 'Create')]"" ) ) ; createButton . click ( ) ; Select select = new Select ( driver . findElement ( By . xpath ( ""//select[@ng-change='newInterpreterGroupChange()']"" ) ) ) ; select . selectByVisibleText ( ""spark"" ) ; collector . checkThat ( ""description of interpreter property is displayed"" , driver . findElement ( By . xpath ( ""//tr/td[contains(text(), 'spark.app.name')]/following-sibling::td[2]"" ) ) . getText ( ) , CoreMatchers . equalTo ( ""The name of spark application."" ) ) ; } catch ( Exception e ) { handleException ( ""Exception in InterpreterIT while testShowDescriptionOnInterpreterCreate "" , e ) ; } }",No
" public synchronized void write ( final byte [ ] b , final int off , final int len ) throws IOException { super . write ( b , off , len ) ; }",No
" public static Map < String , Object > storeQuote ( DispatchContext dctx , Map < String , ? extends Object > context ) { LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; GenericValue userLogin = ( GenericValue ) context . get ( ""userLogin"" ) ; String quoteTypeId = ( String ) context . get ( ""quoteTypeId"" ) ; String partyId = ( String ) context . get ( ""partyId"" ) ; Timestamp issueDate = ( Timestamp ) context . get ( ""issueDate"" ) ; String statusId = ( String ) context . get ( ""statusId"" ) ; String currencyUomId = ( String ) context . get ( ""currencyUomId"" ) ; String productStoreId = ( String ) context . get ( ""productStoreId"" ) ; String salesChannelEnumId = ( String ) context . get ( ""salesChannelEnumId"" ) ; Timestamp validFromDate = ( Timestamp ) context . get ( ""validFromDate"" ) ; Timestamp validThruDate = ( Timestamp ) context . get ( ""validThruDate"" ) ; String quoteName = ( String ) context . get ( ""quoteName"" ) ; String description = ( String ) context . get ( ""description"" ) ; List < GenericValue > quoteItems = UtilGenerics . checkList ( context . get ( ""quoteItems"" ) ) ; List < GenericValue > quoteAttributes = UtilGenerics . checkList ( context . get ( ""quoteAttributes"" ) ) ; List < GenericValue > quoteCoefficients = UtilGenerics . checkList ( context . get ( ""quoteCoefficients"" ) ) ; List < GenericValue > quoteRoles = UtilGenerics . checkList ( context . get ( ""quoteRoles"" ) ) ; List < GenericValue > quoteWorkEfforts = UtilGenerics . checkList ( context . get ( ""quoteWorkEfforts"" ) ) ; List < GenericValue > quoteAdjustments = UtilGenerics . checkList ( context . get ( ""quoteAdjustments"" ) ) ; Locale locale = ( Locale ) context . get ( ""locale"" ) ; Map < String , Object > result = FastMap . newInstance ( ) ; try { Map < String , Object > quoteIn = UtilMisc . toMap ( ""quoteTypeId"" , quoteTypeId , ""partyId"" , partyId , ""issueDate"" , issueDate , ""statusId"" , statusId , ""currencyUomId"" , currencyUomId ) ; quoteIn . put ( ""productStoreId"" , productStoreId ) ; quoteIn . put ( ""salesChannelEnumId"" , salesChannelEnumId ) ; quoteIn . put ( ""productStoreId"" , productStoreId ) ; quoteIn . put ( ""validFromDate"" , validFromDate ) ; quoteIn . put ( ""validThruDate"" , validThruDate ) ; quoteIn . put ( ""quoteName"" , quoteName ) ; quoteIn . put ( ""description"" , description ) ; if ( userLogin != null ) { quoteIn . put ( ""userLogin"" , userLogin ) ; } Map < String , Object > quoteOut = dispatcher . runSync ( ""createQuote"" , quoteIn ) ; if ( UtilValidate . isNotEmpty ( quoteOut ) && UtilValidate . isNotEmpty ( quoteOut . get ( ""quoteId"" ) ) ) { String quoteId = ( String ) quoteOut . get ( ""quoteId"" ) ; result . put ( ""quoteId"" , quoteId ) ; if ( UtilValidate . isNotEmpty ( quoteItems ) ) { for ( GenericValue quoteItem : quoteItems ) { quoteItem . set ( ""quoteId"" , quoteId ) ; Map < String , Object > quoteItemIn = quoteItem . getAllFields ( ) ; quoteItemIn . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createQuoteItem"" , quoteItemIn ) ; } } if ( UtilValidate . isNotEmpty ( quoteAttributes ) ) { for ( GenericValue quoteAttr : quoteAttributes ) { quoteAttr . set ( ""quoteId"" , quoteId ) ; Map < String , Object > quoteAttrIn = quoteAttr . getAllFields ( ) ; quoteAttrIn . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createQuoteAttribute"" , quoteAttrIn ) ; } } if ( UtilValidate . isNotEmpty ( quoteCoefficients ) ) { for ( GenericValue quoteCoefficient : quoteCoefficients ) { quoteCoefficient . set ( ""quoteId"" , quoteId ) ; Map < String , Object > quoteCoefficientIn = quoteCoefficient . getAllFields ( ) ; quoteCoefficientIn . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createQuoteCoefficient"" , quoteCoefficientIn ) ; } } if ( UtilValidate . isNotEmpty ( quoteRoles ) ) { for ( GenericValue quoteRole : quoteRoles ) { quoteRole . set ( ""quoteId"" , quoteId ) ; Map < String , Object > quoteRoleIn = quoteRole . getAllFields ( ) ; quoteRoleIn . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createQuoteRole"" , quoteRoleIn ) ; } } if ( UtilValidate . isNotEmpty ( quoteWorkEfforts ) ) { for ( GenericValue quoteWorkEffort : quoteWorkEfforts ) { quoteWorkEffort . set ( ""quoteId"" , quoteId ) ; Map < String , Object > quoteWorkEffortIn = quoteWorkEffort . getAllFields ( ) ; quoteWorkEffortIn . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createQuoteWorkEffort"" , quoteWorkEffortIn ) ; } } if ( UtilValidate . isNotEmpty ( quoteAdjustments ) ) { for ( GenericValue quoteAdjustment : quoteAdjustments ) { quoteAdjustment . set ( ""quoteId"" , quoteId ) ; Map < String , Object > quoteAdjustmentIn = quoteAdjustment . getAllFields ( ) ; quoteAdjustmentIn . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createQuoteAdjustment"" , quoteAdjustmentIn ) ; } } } else { return ServiceUtil . returnFailure ( UtilProperties . getMessage ( resource , ""OrderOrderQuoteCannotBeStored"" , locale ) ) ; } } catch ( GenericServiceException e ) { Debug . logError ( e , ""Problem storing Quote"" , module ) ; } return result ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , JobSubmissionInterface struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . jobSubmissionInterfaceId = iprot . readString ( ) ; struct . setJobSubmissionInterfaceIdIsSet ( true ) ; struct . jobSubmissionProtocol = org . apache . airavata . model . appcatalog . computeresource . JobSubmissionProtocol . findByValue ( iprot . readI32 ( ) ) ; struct . setJobSubmissionProtocolIsSet ( true ) ; struct . priorityOrder = iprot . readI32 ( ) ; struct . setPriorityOrderIsSet ( true ) ; }",Smelly
" public boolean validatePolicy ( AssertionInfoMap aim , Message message , List < WSSecurityEngineResult > results , List < WSSecurityEngineResult > signedResults , List < WSSecurityEngineResult > encryptedResults ) { Collection < AssertionInfo > ais = aim . get ( SP12Constants . ENDORSING_SUPPORTING_TOKENS ) ; if ( ais == null || ais . isEmpty ( ) ) { return true ; } setMessage ( message ) ; setResults ( results ) ; setSignedResults ( signedResults ) ; setEncryptedResults ( encryptedResults ) ; for ( AssertionInfo ai : ais ) { SupportingToken binding = ( SupportingToken ) ai . getAssertion ( ) ; if ( SPConstants . SupportTokenType . SUPPORTING_TOKEN_ENDORSING != binding . getTokenType ( ) ) { continue ; } ai . setAsserted ( true ) ; setSignedParts ( binding . getSignedParts ( ) ) ; setEncryptedParts ( binding . getEncryptedParts ( ) ) ; setSignedElements ( binding . getSignedElements ( ) ) ; setEncryptedElements ( binding . getEncryptedElements ( ) ) ; List < Token > tokens = binding . getTokens ( ) ; for ( Token token : tokens ) { if ( ! isTokenRequired ( token , message ) ) { continue ; } boolean derived = token . isDerivedKeys ( ) ; setDerived ( derived ) ; boolean processingFailed = false ; if ( token instanceof KerberosToken ) { if ( ! processKerberosTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof X509Token ) { if ( ! processX509Tokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KeyValueToken ) { if ( ! processKeyValueTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof UsernameToken ) { if ( ! processUsernameTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SecurityContextToken ) { if ( ! processSCTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SamlToken ) { if ( ! processSAMLTokens ( ) ) { processingFailed = true ; } } else if ( ! ( token instanceof IssuedToken ) ) { processingFailed = true ; } if ( processingFailed ) { ai . setNotAsserted ( ""The received token does not match the endorsing supporting token requirement"" ) ; return false ; } } } return true ; }",Smelly
" private static org . apache . hadoop . yarn . api . records . Token convertToProtoToken ( Token < ? > token ) { return org . apache . hadoop . yarn . api . records . Token . newInstance ( token . getIdentifier ( ) , token . getKind ( ) . toString ( ) , token . getPassword ( ) , token . getService ( ) . toString ( ) ) ; }",No
 public boolean matchesText ( ) { return then . matchesText ( ) ; },No
 public void setType ( String type ) { this . type = type ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private NodeManager getNodeManager ( final NodeAction nodeHeartBeatAction ) { return new NodeManager ( ) { @ Override protected NodeStatusUpdater createNodeStatusUpdater ( Context context , Dispatcher dispatcher , NodeHealthCheckerService healthChecker ) { MyNodeStatusUpdater myNodeStatusUpdater = new MyNodeStatusUpdater ( context , dispatcher , healthChecker , metrics ) ; MyResourceTracker2 myResourceTracker2 = new MyResourceTracker2 ( ) ; myResourceTracker2 . heartBeatNodeAction = nodeHeartBeatAction ; myNodeStatusUpdater . resourceTracker = myResourceTracker2 ; return myNodeStatusUpdater ; } } ; }",No
 public void close ( ) throws IOException { reader . close ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private void deinit ( URLFactory factory ) { if ( factory instanceof Disposable ) { ( ( Disposable ) factory ) . dispose ( ) ; } },No
 protected void providerFailed ( IOException error ) { failed . set ( true ) ; if ( firstFailureError == null ) { firstFailureError = error ; } },No
" private static void throwE ( JsonParser jp , String e ) throws JsonParseException { throw new JsonParseException ( e , jp . getCurrentLocation ( ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected void generateDocument ( RtfDocumentArea rda , RtfSection sect ) throws IOException { sect . newParagraph ( ) . newText ( ""First paragraph of the simple RTF test document."" ) ; final RtfParagraph para = sect . newParagraph ( ) ; para . newText ( ""Second paragraph of simple RTF test document.\n"" ) ; for ( int i = 0 ; i < 242 ; i ++ ) { para . newText ( ""This is string "" + i ) ; para . newLineBreak ( ) ; } }",Smelly
 public DerivativeStructure [ ] value ( DerivativeStructure [ ] variables ) { DerivativeStructure x01 = variables [ 0 ] ; DerivativeStructure x02 = variables [ 1 ] ; DerivativeStructure x03 = variables [ 2 ] ; DerivativeStructure x04 = variables [ 3 ] ; DerivativeStructure x05 = variables [ 4 ] ; DerivativeStructure x06 = variables [ 5 ] ; DerivativeStructure x07 = variables [ 6 ] ; DerivativeStructure x08 = variables [ 7 ] ; DerivativeStructure x09 = variables [ 8 ] ; DerivativeStructure x10 = variables [ 9 ] ; DerivativeStructure x11 = variables [ 10 ] ; DerivativeStructure [ ] f = new DerivativeStructure [ m ] ; for ( int i = 0 ; i < m ; ++ i ) { double temp = i / 10.0 ; DerivativeStructure tmp1 = x05 . multiply ( - temp ) . exp ( ) ; DerivativeStructure tmp2 = x06 . negate ( ) . multiply ( x09 . subtract ( temp ) . multiply ( x09 . subtract ( temp ) ) ) . exp ( ) ; DerivativeStructure tmp3 = x07 . negate ( ) . multiply ( x10 . subtract ( temp ) . multiply ( x10 . subtract ( temp ) ) ) . exp ( ) ; DerivativeStructure tmp4 = x08 . negate ( ) . multiply ( x11 . subtract ( temp ) . multiply ( x11 . subtract ( temp ) ) ) . exp ( ) ; f [ i ] = x01 . multiply ( tmp1 ) . add ( x02 . multiply ( tmp2 ) ) . add ( x03 . multiply ( tmp3 ) ) . add ( x04 . multiply ( tmp4 ) ) . negate ( ) . add ( y [ i ] ) ; } return f ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" private static VectorExpressionWriter genVectorExpressionWritable ( SettableStructObjectInspector objInspector , StructField fieldRef , VectorExpressionWriter baseWriter ) throws HiveException { return new VectorExpressionWriterSetter ( ) . init ( objInspector , fieldRef , baseWriter ) ; }",Smelly
" public static String getRootFormRelativeId ( Component component ) { String id = component . getId ( ) ; final PrependingStringBuffer inputName = new PrependingStringBuffer ( id . length ( ) ) ; Component c = component ; while ( true ) { inputName . prepend ( id ) ; c = c . getParent ( ) ; if ( c == null || ( c instanceof Form < ? > && ( ( Form < ? > ) c ) . isRootForm ( ) ) || c instanceof Page ) { break ; } inputName . prepend ( Component . PATH_SEPARATOR ) ; id = c . getId ( ) ; } if ( JavaScriptReservedNames . isNameReserved ( inputName . toString ( ) ) ) { inputName . prepend ( Component . PATH_SEPARATOR ) ; inputName . prepend ( Component . PATH_SEPARATOR ) ; inputName . prepend ( ""p"" ) ; } return inputName . toString ( ) ; }",Smelly
" private RexVisitorImpl < Void > rexVisitor ( final RelNode rel ) { return new RexVisitorImpl < Void > ( true ) { @ Override public Void visitFieldAccess ( RexFieldAccess fieldAccess ) { final RexNode ref = fieldAccess . getReferenceExpr ( ) ; if ( ref instanceof RexCorrelVariable ) { final RexCorrelVariable var = ( RexCorrelVariable ) ref ; if ( mapFieldAccessToCorVar . containsKey ( fieldAccess ) ) { mapRefRelToCorRef . put ( rel , mapFieldAccessToCorVar . get ( fieldAccess ) ) ; } else { final CorRef correlation = new CorRef ( var . id , fieldAccess . getField ( ) . getIndex ( ) , corrIdGenerator ++ ) ; mapFieldAccessToCorVar . put ( fieldAccess , correlation ) ; mapRefRelToCorRef . put ( rel , correlation ) ; } } return super . visitFieldAccess ( fieldAccess ) ; } @ Override public Void visitSubQuery ( RexSubQuery subQuery ) { subQuery . rel . accept ( CorelMapBuilder . this ) ; return super . visitSubQuery ( subQuery ) ; } } ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void setUp ( ) { super . setUp ( ) ; parser = new DefaultParser ( ) ; },No
" public void testReadPublicData ( ) throws Exception { pipeline . getOptions ( ) . as ( DirectOptions . class ) . setBlockOnRun ( false ) ; PCollection < String > messages = pipeline . apply ( PubsubIO . readStrings ( ) . fromTopic ( ""projects/pubsub-public-data/topics/taxirides-realtime"" ) ) ; messages . apply ( ""waitForAnyMessage"" , signal . signalSuccessWhen ( messages . getCoder ( ) , anyMessages -> true ) ) ; Supplier < Void > start = signal . waitForStart ( Duration . standardMinutes ( 5 ) ) ; pipeline . apply ( signal . signalStart ( ) ) ; PipelineResult job = pipeline . run ( ) ; start . get ( ) ; signal . waitForSuccess ( Duration . standardSeconds ( 30 ) ) ; try { job . cancel ( ) ; } catch ( UnsupportedOperationException exc ) { } }",Smelly
" private void readMethods ( ) throws IOException { prt ( ""#methods"" ) ; methods_count = in . readUnsignedShort ( ) ; if ( methods_count != 0 ) { methods = new Method [ methods_count ] ; for ( int i = 0 ; i < methods_count ; i ++ ) { methods [ i ] = readMethod ( in ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected void setEncryptedData ( EncryptedData encryptedData , TicketContainer ticketContainer ) { ticketContainer . getTicket ( ) . setEncPart ( encryptedData ) ; ticketContainer . setGrammarEndAllowed ( true ) ; }",No
" public void testMoveAndSetMixin ( ) throws RepositoryException { doMove ( moveNode . getPath ( ) , destinationPath ) ; moveNode . addMixin ( mixVersionable ) ; superuser . save ( ) ; Node n = ( Node ) testSession . getItem ( destinationPath ) ; assertTrue ( n . isNodeType ( mixVersionable ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public void checkError ( ) { if ( threadStatusObserver . getThrowable ( ) != null ) { if ( threadStatusObserver . getThrowable ( ) instanceof CarbonDataLoadingException ) { throw ( CarbonDataLoadingException ) threadStatusObserver . getThrowable ( ) ; } else { throw new CarbonDataLoadingException ( threadStatusObserver . getThrowable ( ) ) ; } } },Smelly
" public static void writeFlavorAndVerifier ( Verifier verifier , XDR xdr ) { if ( verifier instanceof VerifierNone ) { xdr . writeInt ( AuthFlavor . AUTH_NONE . getValue ( ) ) ; } else if ( verifier instanceof VerifierGSS ) { xdr . writeInt ( AuthFlavor . RPCSEC_GSS . getValue ( ) ) ; } else { throw new UnsupportedOperationException ( ""Cannot recognize the verifier"" ) ; } verifier . write ( xdr ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" private SecurityToken issueToken ( SoapMessage message , AssertionInfoMap aim , SecureConversationToken itok ) { STSClient client = STSUtils . getClient ( message , ""sct"" ) ; AddressingProperties maps = ( AddressingProperties ) message . get ( ""javax.xml.ws.addressing.context.outbound"" ) ; if ( maps == null ) { maps = ( AddressingProperties ) message . get ( ""javax.xml.ws.addressing.context"" ) ; } synchronized ( client ) { try { String s = SecureConversationTokenInterceptorProvider . setupClient ( client , message , aim , itok , false ) ; SecurityToken tok = null ; if ( maps != null ) { client . setAddressingNamespace ( maps . getNamespaceURI ( ) ) ; } tok = client . requestSecurityToken ( s ) ; String tokenType = tok . getTokenType ( ) ; tok . setTokenType ( tokenType ) ; if ( tokenType == null || """" . equals ( tokenType ) ) { tok . setTokenType ( WSConstants . WSC_SCT ) ; } return tok ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new Fault ( e ) ; } finally { client . setTrust ( ( Trust10 ) null ) ; client . setTrust ( ( Trust13 ) null ) ; client . setTemplate ( null ) ; client . setLocation ( null ) ; client . setAddressingNamespace ( null ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public Validator getValidator ( QName qName ) throws WSSecurityException { String key = null ; if ( WSSecurityEngine . SAML_TOKEN . equals ( qName ) ) { key = SecurityConstants . SAML1_TOKEN_VALIDATOR ; } else if ( WSSecurityEngine . SAML2_TOKEN . equals ( qName ) ) { key = SecurityConstants . SAML2_TOKEN_VALIDATOR ; } else if ( WSSecurityEngine . USERNAME_TOKEN . equals ( qName ) ) { key = SecurityConstants . USERNAME_TOKEN_VALIDATOR ; } else if ( WSSecurityEngine . SIGNATURE . equals ( qName ) ) { key = SecurityConstants . SIGNATURE_TOKEN_VALIDATOR ; } else if ( WSSecurityEngine . TIMESTAMP . equals ( qName ) ) { key = SecurityConstants . TIMESTAMP_TOKEN_VALIDATOR ; } else if ( WSSecurityEngine . BINARY_TOKEN . equals ( qName ) ) { key = SecurityConstants . BST_TOKEN_VALIDATOR ; } else if ( WSSecurityEngine . SECURITY_CONTEXT_TOKEN_05_02 . equals ( qName ) || WSSecurityEngine . SECURITY_CONTEXT_TOKEN_05_12 . equals ( qName ) ) { key = SecurityConstants . SCT_TOKEN_VALIDATOR ; } if ( key != null ) { Object o = ( ( SoapMessage ) this . getMsgContext ( ) ) . getContextualProperty ( key ) ; try { if ( o instanceof Validator ) { return ( Validator ) o ; } else if ( o instanceof Class ) { return ( Validator ) ( ( Class < ? > ) o ) . newInstance ( ) ; } else if ( o instanceof String ) { return ( Validator ) ClassLoaderUtils . loadClass ( o . toString ( ) , WSS4JInInterceptor . class ) . newInstance ( ) ; } } catch ( RuntimeException t ) { throw t ; } catch ( Throwable t ) { throw new WSSecurityException ( t . getMessage ( ) , t ) ; } } return super . getValidator ( qName ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public ClientConnection get ( ) throws ConfigurationException { DataChannel clientServerChannel = clientServerChannelProvider . get ( ) ; return new LocalConnection ( clientServerChannel , LocalConnection . HESSIAN_SERIALIZATION ) ; }",No
 Entry newEntry ( Dn dn ) throws LdapException ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 protected void injectNamespaces ( Element element ) { NodeList list = element . getChildNodes ( ) ; Namespaces namespaces = null ; int size = list . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Node child = list . item ( i ) ; if ( child instanceof Element ) { Element childElement = ( Element ) child ; Object object = binder . getJAXBNode ( child ) ; if ( object instanceof NamespaceAware ) { NamespaceAware namespaceAware = ( NamespaceAware ) object ; if ( namespaces == null ) { namespaces = new Namespaces ( element ) ; } namespaces . configure ( namespaceAware ) ; } injectNamespaces ( childElement ) ; } } },Smelly
" private BeamFnApi . Elements . Data dataWith ( String ... values ) throws Exception { BeamFnApi . Elements . Data . Builder builder = BeamFnApi . Elements . Data . newBuilder ( ) . setInstructionReference ( ""777L"" ) . setTarget ( BeamFnApi . Target . newBuilder ( ) . setPrimitiveTransformReference ( ""999L"" ) . setName ( ""Test"" ) ) ; ByteString . Output output = ByteString . newOutput ( ) ; for ( String value : values ) { CODER . encode ( valueInGlobalWindow ( value ) , output ) ; } builder . setData ( output . toByteString ( ) ) ; return builder . build ( ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 void setQuerySQLCache ( boolean flag ) ;,No
" public static byte [ ] fromHex ( String hex ) { checkArgument ( hex . length ( ) > 0 , ""length must be greater than 0"" ) ; checkArgument ( hex . length ( ) % 2 == 0 , ""length must be a multiple of 2"" ) ; hex = hex . toUpperCase ( ) ; byte [ ] b = new byte [ hex . length ( ) / 2 ] ; for ( int i = 0 ; i < b . length ; i ++ ) { b [ i ] = ( byte ) ( ( toBinaryFromHex ( ( byte ) hex . charAt ( 2 * i ) ) < < 4 ) + toBinaryFromHex ( ( byte ) hex . charAt ( ( 2 * i + 1 ) ) ) ) ; } return b ; }",No
" protected void load ( StructInstance instance , int colPos , Object val ) { instance . maps [ colPos ] = ( ImmutableMap ) val ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void setStatements ( Statements statements ) { String [ ] createStatements = new String [ ] { ""CREATE TABLE "" + statements . getFullMessageTableName ( ) + ""("" + ""ID "" + statements . getSequenceDataType ( ) + "" NOT NULL"" + "", CONTAINER "" + statements . getContainerNameDataType ( ) + "", MSGID_PROD "" + statements . getMsgIdDataType ( ) + "", MSGID_SEQ "" + statements . getSequenceDataType ( ) + "", EXPIRATION "" + statements . getLongDataType ( ) + "", MSG "" + ( statements . isUseExternalMessageReferences ( ) ? statements . getStringIdDataType ( ) : statements . getBinaryDataType ( ) ) + "", PRIMARY KEY ( ID ) )"" , ""CREATE INDEX "" + statements . getFullMessageTableName ( ) + ""_MIDX ON "" + statements . getFullMessageTableName ( ) + "" (MSGID_PROD,MSGID_SEQ)"" , ""CREATE INDEX "" + statements . getFullMessageTableName ( ) + ""_CIDX ON "" + statements . getFullMessageTableName ( ) + "" (CONTAINER)"" , ""CREATE INDEX "" + statements . getFullMessageTableName ( ) + ""_EIDX ON "" + statements . getFullMessageTableName ( ) + "" (EXPIRATION)"" , ""CREATE TABLE "" + statements . getFullAckTableName ( ) + ""("" + ""CONTAINER "" + statements . getContainerNameDataType ( ) + "" NOT NULL"" + "", SUB_DEST "" + statements . getContainerNameDataType ( ) + "", CLIENT_ID "" + statements . getStringIdDataType ( ) + "" NOT NULL"" + "", SUB_NAME "" + statements . getStringIdDataType ( ) + "" NOT NULL"" + "", SELECTOR "" + statements . getStringIdDataType ( ) + "", LAST_ACKED_ID "" + statements . getSequenceDataType ( ) + "", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))"" } ; statements . setCreateSchemaStatements ( createStatements ) ; statements . setLongDataType ( ""LONG"" ) ; statements . setSequenceDataType ( ""LONG"" ) ; super . setStatements ( statements ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected final boolean accepts ( TKey key , QuadWritable tuple ) { Quad q = tuple . get ( ) ; return ( q . getGraph ( ) . isURI ( ) || q . getGraph ( ) . isBlank ( ) ) && ( q . getSubject ( ) . isURI ( ) || q . getSubject ( ) . isBlank ( ) ) && q . getPredicate ( ) . isURI ( ) && ( q . getObject ( ) . isURI ( ) || q . getObject ( ) . isBlank ( ) || q . getObject ( ) . isLiteral ( ) ) ; }",Smelly
" protected DateTime parse ( String input ) throws AtlasBaseException { return new DateTime ( input , DateTimeZone . UTC ) ; }",No
 public void close ( ) { ctx . close ( ) ; },Smelly
" protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; Message info = ( Message ) object ; info . setProducerId ( createProducerId ( ""ProducerId:1"" ) ) ; info . setDestination ( createActiveMQDestination ( ""Destination:2"" ) ) ; info . setTransactionId ( createTransactionId ( ""TransactionId:3"" ) ) ; info . setOriginalDestination ( createActiveMQDestination ( ""OriginalDestination:4"" ) ) ; info . setMessageId ( createMessageId ( ""MessageId:5"" ) ) ; info . setOriginalTransactionId ( createTransactionId ( ""OriginalTransactionId:6"" ) ) ; info . setGroupID ( ""GroupID:7"" ) ; info . setGroupSequence ( 1 ) ; info . setCorrelationId ( ""CorrelationId:8"" ) ; info . setPersistent ( true ) ; info . setExpiration ( 1 ) ; info . setPriority ( ( byte ) 1 ) ; info . setReplyTo ( createActiveMQDestination ( ""ReplyTo:9"" ) ) ; info . setTimestamp ( 2 ) ; info . setType ( ""Type:10"" ) ; { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dataOut = new DataOutputStream ( baos ) ; MarshallingSupport . writeUTF8 ( dataOut , ""Content:11"" ) ; dataOut . close ( ) ; info . setContent ( baos . toByteSequence ( ) ) ; } { Map map = new HashMap ( ) ; map . put ( ""MarshalledProperties"" , 12 ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream os = new DataOutputStream ( baos ) ; MarshallingSupport . marshalPrimitiveMap ( map , os ) ; os . close ( ) ; info . setMarshalledProperties ( baos . toByteSequence ( ) ) ; } info . setDataStructure ( createDataStructure ( ""DataStructure:13"" ) ) ; info . setTargetConsumerId ( createConsumerId ( ""TargetConsumerId:14"" ) ) ; info . setCompressed ( false ) ; info . setRedeliveryCounter ( 2 ) ; { BrokerId value [ ] = new BrokerId [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { value [ i ] = createBrokerId ( ""BrokerPath:15"" ) ; } info . setBrokerPath ( value ) ; } info . setArrival ( 3 ) ; info . setUserID ( ""UserID:16"" ) ; info . setRecievedByDFBridge ( true ) ; }",Smelly
 private void fireEventQueue ( ) { final Deque < Event > deque = eventQueue . get ( ) ; for ( Event event = deque . pollFirst ( ) ; event != null ; event = deque . pollFirst ( ) ) { event . fireEvent ( listeners . iterator ( ) ) ; } },No
" private void buildBoundingBoxes ( ) { boundingBoxes = new Rectangle2D [ glyphs . length ] ; for ( int i = 0 ; i < glyphs . length ; i ++ ) { Rectangle bbox = fontMetrics . getBoundingBox ( glyphs [ i ] , fontSize ) ; boundingBoxes [ i ] = new Rectangle2D . Float ( bbox . x / 1000000f , - ( bbox . y + bbox . height ) / 1000000f , bbox . width / 1000000f , bbox . height / 1000000f ) ; } }",No
 GraphEventManager newEventManager ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void handleMessage ( Message message ) throws Fault { MessageContentsList outObjects = MessageContentsList . getContentsList ( message ) ; Exchange exchange = message . getExchange ( ) ; OperationInfo op = exchange . getBindingOperationInfo ( ) == null ? null : exchange . getBindingOperationInfo ( ) . getOperationInfo ( ) ; if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( ""op: "" + op ) ; if ( null != op ) { LOG . fine ( ""op.hasOutput(): "" + op . hasOutput ( ) ) ; if ( op . hasOutput ( ) ) { LOG . fine ( ""op.getOutput().size(): "" + op . getOutput ( ) . size ( ) ) ; } } } if ( op == null || ! op . hasOutput ( ) || op . getOutput ( ) . size ( ) == 0 ) { LOG . fine ( ""Returning."" ) ; return ; } if ( ! Boolean . TRUE . equals ( message . get ( Message . REQUESTOR_ROLE ) ) ) { List < MessagePartInfo > parts = op . getOutput ( ) . getMessageParts ( ) ; MessageContentsList inObjects = MessageContentsList . getContentsList ( exchange . getInMessage ( ) ) ; if ( inObjects != null ) { if ( ! ( inObjects == outObjects ) ) { for ( int x = 0 ; x < inObjects . size ( ) ; x ++ ) { Object o = inObjects . get ( x ) ; if ( o instanceof Holder ) { outObjects . set ( x + 1 , o ) ; } } } else { LOG . severe ( ""CANNOT_SET_HOLDER_OBJECTS"" ) ; throw new Fault ( new org . apache . cxf . common . i18n . Message ( ""CANNOT_SET_HOLDER_OBJECTS"" , LOG ) ) ; } } for ( MessagePartInfo part : parts ) { if ( part . getIndex ( ) > 0 && part . getTypeClass ( ) != null ) { Holder < ? > holder = ( Holder < ? > ) outObjects . get ( part ) ; outObjects . put ( part , holder . value ) ; } } } else { List < Object > holders = new ArrayList < Object > ( outObjects ) ; for ( int x = 0 ; x < outObjects . size ( ) ; x ++ ) { Object o = outObjects . get ( x ) ; if ( o instanceof Holder ) { outObjects . set ( x , ( ( Holder < ? > ) o ) . value ) ; } else { holders . set ( x , null ) ; } } message . put ( HolderInInterceptor . CLIENT_HOLDERS , holders ) ; } }",Smelly
" public void mergeAffectedComponents ( final Set < AffectedComponentEntity > affectedComponents , final Map < NodeIdentifier , Set < AffectedComponentEntity > > affectedComponentMap ) { final Map < String , Integer > activeThreadCounts = new HashMap < > ( ) ; final Map < String , String > states = new HashMap < > ( ) ; final Map < String , PermissionsDTO > canReads = new HashMap < > ( ) ; for ( final Map . Entry < NodeIdentifier , Set < AffectedComponentEntity > > nodeEntry : affectedComponentMap . entrySet ( ) ) { final Set < AffectedComponentEntity > nodeAffectedComponents = nodeEntry . getValue ( ) ; if ( nodeAffectedComponents != null ) { for ( final AffectedComponentEntity nodeAffectedComponentEntity : nodeAffectedComponents ) { final AffectedComponentDTO nodeAffectedComponent = nodeAffectedComponentEntity . getComponent ( ) ; if ( nodeAffectedComponentEntity . getPermissions ( ) . getCanRead ( ) ) { if ( nodeAffectedComponent . getActiveThreadCount ( ) != null && nodeAffectedComponent . getActiveThreadCount ( ) > 0 ) { final Integer current = activeThreadCounts . get ( nodeAffectedComponent . getId ( ) ) ; if ( current == null ) { activeThreadCounts . put ( nodeAffectedComponent . getId ( ) , nodeAffectedComponent . getActiveThreadCount ( ) ) ; } else { activeThreadCounts . put ( nodeAffectedComponent . getId ( ) , nodeAffectedComponent . getActiveThreadCount ( ) + current ) ; } } final String state = states . get ( nodeAffectedComponent . getId ( ) ) ; if ( state == null ) { if ( ControllerServiceState . DISABLING . name ( ) . equals ( nodeAffectedComponent . getState ( ) ) ) { states . put ( nodeAffectedComponent . getId ( ) , ControllerServiceState . DISABLING . name ( ) ) ; } else if ( ControllerServiceState . ENABLING . name ( ) . equals ( nodeAffectedComponent . getState ( ) ) ) { states . put ( nodeAffectedComponent . getId ( ) , ControllerServiceState . ENABLING . name ( ) ) ; } } } final PermissionsDTO mergedPermissions = canReads . get ( nodeAffectedComponentEntity . getId ( ) ) ; final PermissionsDTO permissions = nodeAffectedComponentEntity . getPermissions ( ) ; if ( permissions != null ) { if ( mergedPermissions == null ) { canReads . put ( nodeAffectedComponentEntity . getId ( ) , permissions ) ; } else { PermissionsDtoMerger . mergePermissions ( mergedPermissions , permissions ) ; } } } } } if ( affectedComponents != null ) { for ( final AffectedComponentEntity affectedComponent : affectedComponents ) { final PermissionsDTO permissions = canReads . get ( affectedComponent . getId ( ) ) ; if ( permissions != null && permissions . getCanRead ( ) != null && permissions . getCanRead ( ) ) { final Integer activeThreadCount = activeThreadCounts . get ( affectedComponent . getId ( ) ) ; if ( activeThreadCount != null ) { affectedComponent . getComponent ( ) . setActiveThreadCount ( activeThreadCount ) ; } final String state = states . get ( affectedComponent . getId ( ) ) ; if ( state != null ) { affectedComponent . getComponent ( ) . setState ( state ) ; } } else { affectedComponent . setPermissions ( permissions ) ; affectedComponent . setComponent ( null ) ; } } } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void setStringCollection ( Collection stringCollection ) { this . stringCollection = stringCollection ; },No
 public String getState ( ) { return super . getState ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 protected Locale getLocale ( ) { return Locale . FRENCH ; },No
 public int getLength ( ) { return gidStart - gidEnd ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 String getLabel ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 void trim ( ) ;,No
" public void saveSyncErrorInfo ( EntitySyncContext esc ) { if ( esc != null ) { List < Object > errorList = FastList . newInstance ( ) ; esc . saveSyncErrorInfo ( ""ESR_SERVICE_ERROR"" , errorList ) ; this . addErrorMessages ( errorList ) ; } }",No
 public void setUncheckedValue ( String uncheckedValue ) { this . uncheckedValue = uncheckedValue ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public static void main ( String [ ] args ) throws IOException , URISyntaxException { char [ ] chars = new char [ 1024 * 1024 ] ; Arrays . fill ( chars , 'f' ) ; System . err . println ( new String ( chars ) ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",No
" public void testUpDownSelectDisposeItselfFromComponentStack ( ) throws Exception { TextFieldTag t = new TextFieldTag ( ) ; t . setPageContext ( pageContext ) ; t . setName ( ""textFieldName"" ) ; UpDownSelectTag tag = new UpDownSelectTag ( ) ; tag . setId ( ""myId"" ) ; tag . setPageContext ( pageContext ) ; tag . setName ( ""updownselectName"" ) ; tag . setList ( ""{}"" ) ; try { t . doStartTag ( ) ; tag . doStartTag ( ) ; assertEquals ( tag . getComponent ( ) . getComponentStack ( ) . peek ( ) , tag . getComponent ( ) ) ; tag . doEndTag ( ) ; assertEquals ( t . getComponent ( ) . getComponentStack ( ) . peek ( ) , t . getComponent ( ) ) ; t . doEndTag ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( e . toString ( ) ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Database struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . locationUri = iprot . readString ( ) ; struct . setLocationUriIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map100 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . parameters = new HashMap < String , String > ( 2 * _map100 . size ) ; for ( int _i101 = 0 ; _i101 < _map100 . size ; ++ _i101 ) { String _key102 ; String _val103 ; _key102 = iprot . readString ( ) ; _val103 = iprot . readString ( ) ; struct . parameters . put ( _key102 , _val103 ) ; } } struct . setParametersIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . privileges = new PrincipalPrivilegeSet ( ) ; struct . privileges . read ( iprot ) ; struct . setPrivilegesIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . ownerName = iprot . readString ( ) ; struct . setOwnerNameIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . ownerType = PrincipalType . findByValue ( iprot . readI32 ( ) ) ; struct . setOwnerTypeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void addRuleInstances ( Digester digester ) { if ( create ) { digester . addObjectCreate ( prefix + ""Context"" , ""org.apache.catalina.core.StandardContext"" , ""className"" ) ; digester . addSetProperties ( prefix + ""Context"" ) ; } else { digester . addRule ( prefix + ""Context"" , new SetContextPropertiesRule ( ) ) ; } if ( create ) { digester . addRule ( prefix + ""Context"" , new LifecycleListenerRule ( ""org.apache.catalina.startup.ContextConfig"" , ""configClass"" ) ) ; digester . addSetNext ( prefix + ""Context"" , ""addChild"" , ""org.apache.catalina.Container"" ) ; } digester . addCallMethod ( prefix + ""Context/InstanceListener"" , ""addInstanceListener"" , 0 ) ; digester . addObjectCreate ( prefix + ""Context/Listener"" , null , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/Listener"" ) ; digester . addSetNext ( prefix + ""Context/Listener"" , ""addLifecycleListener"" , ""org.apache.catalina.LifecycleListener"" ) ; digester . addObjectCreate ( prefix + ""Context/Loader"" , ""org.apache.catalina.loader.WebappLoader"" , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/Loader"" ) ; digester . addSetNext ( prefix + ""Context/Loader"" , ""setLoader"" , ""org.apache.catalina.Loader"" ) ; digester . addObjectCreate ( prefix + ""Context/Manager"" , ""org.apache.catalina.session.StandardManager"" , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/Manager"" ) ; digester . addSetNext ( prefix + ""Context/Manager"" , ""setManager"" , ""org.apache.catalina.Manager"" ) ; digester . addObjectCreate ( prefix + ""Context/Manager/Store"" , null , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/Manager/Store"" ) ; digester . addSetNext ( prefix + ""Context/Manager/Store"" , ""setStore"" , ""org.apache.catalina.Store"" ) ; digester . addObjectCreate ( prefix + ""Context/Parameter"" , ""org.apache.catalina.deploy.ApplicationParameter"" ) ; digester . addSetProperties ( prefix + ""Context/Parameter"" ) ; digester . addSetNext ( prefix + ""Context/Parameter"" , ""addApplicationParameter"" , ""org.apache.catalina.deploy.ApplicationParameter"" ) ; digester . addRuleSet ( new RealmRuleSet ( prefix + ""Context/"" ) ) ; digester . addObjectCreate ( prefix + ""Context/Resources"" , ""org.apache.naming.resources.FileDirContext"" , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/Resources"" ) ; digester . addSetNext ( prefix + ""Context/Resources"" , ""setResources"" , ""javax.naming.directory.DirContext"" ) ; digester . addObjectCreate ( prefix + ""Context/ResourceLink"" , ""org.apache.catalina.deploy.ContextResourceLink"" ) ; digester . addSetProperties ( prefix + ""Context/ResourceLink"" ) ; digester . addRule ( prefix + ""Context/ResourceLink"" , new SetNextNamingRule ( ""addResourceLink"" , ""org.apache.catalina.deploy.ContextResourceLink"" ) ) ; digester . addObjectCreate ( prefix + ""Context/Valve"" , null , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/Valve"" ) ; digester . addSetNext ( prefix + ""Context/Valve"" , ""addValve"" , ""org.apache.catalina.Valve"" ) ; digester . addCallMethod ( prefix + ""Context/WatchedResource"" , ""addWatchedResource"" , 0 ) ; digester . addCallMethod ( prefix + ""Context/WrapperLifecycle"" , ""addWrapperLifecycle"" , 0 ) ; digester . addCallMethod ( prefix + ""Context/WrapperListener"" , ""addWrapperListener"" , 0 ) ; digester . addObjectCreate ( prefix + ""Context/JarScanner"" , ""org.apache.tomcat.util.scan.StandardJarScanner"" , ""className"" ) ; digester . addSetProperties ( prefix + ""Context/JarScanner"" ) ; digester . addSetNext ( prefix + ""Context/JarScanner"" , ""setJarScanner"" , ""org.apache.tomcat.JarScanner"" ) ; }",Smelly
" private void createMessage ( String paramName , Object value , XmlElement inputMsgElem ) throws ComponentRegistryException { XmlElement paramsElem = builder . newFragment ( this . requestNS , paramName ) ; if ( value instanceof String ) { paramsElem . addChild ( value ) ; } else if ( value instanceof Collection ) { Collection list = ( Collection ) value ; Iterator arrayValues = list . iterator ( ) ; while ( arrayValues . hasNext ( ) ) { XmlElement item = builder . newFragment ( ""value"" ) ; item . addChild ( arrayValues . next ( ) ) ; paramsElem . addChild ( item ) ; } } else if ( value instanceof ArrayList ) { Collection list = ( Collection ) value ; Iterator arrayValues = list . iterator ( ) ; while ( arrayValues . hasNext ( ) ) { XmlElement item = builder . newFragment ( ""value"" ) ; item . addChild ( arrayValues . next ( ) ) ; paramsElem . addChild ( item ) ; } } else if ( value instanceof String [ ] ) { String [ ] list = ( String [ ] ) value ; for ( int i = 0 ; i < list . length ; i ++ ) { XmlElement item = builder . newFragment ( ""value"" ) ; item . addChild ( list [ i ] ) ; paramsElem . addChild ( item ) ; } } else { throw new ComponentRegistryException ( ""Simple WS Client can not handle the value of type "" + value ) ; } inputMsgElem . addElement ( paramsElem ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 1 , 1 , ""To mark everything before a special annotation"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 2 , 2 , ""To mark everything before a special annotation"" , ""you need the BEFORE condition of Ruta"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 3 , 2 , ""To mark everything before a special annotation"" , ""you need the BEFORE condition of Ruta"" ) ; cas . release ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , StorageResourceDescription struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; struct . hostName = iprot . readString ( ) ; struct . setHostNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . storageResourceDescription = iprot . readString ( ) ; struct . setStorageResourceDescriptionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . enabled = iprot . readBool ( ) ; struct . setEnabledIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . dataMovementInterfaces = new ArrayList < org . apache . airavata . model . data . movement . DataMovementInterface > ( _list5 . size ) ; org . apache . airavata . model . data . movement . DataMovementInterface _elem6 ; for ( int _i7 = 0 ; _i7 < _list5 . size ; ++ _i7 ) { _elem6 = new org . apache . airavata . model . data . movement . DataMovementInterface ( ) ; _elem6 . read ( iprot ) ; struct . dataMovementInterfaces . add ( _elem6 ) ; } } struct . setDataMovementInterfacesIsSet ( true ) ; } }",Smelly
" public void substring ( SQLBuffer buf , FilterValue str , FilterValue start , FilterValue length ) { buf . append ( ""SUBSTR(CAST(("" ) ; str . appendTo ( buf ) ; buf . append ( "") AS VARCHAR("" ) . append ( Integer . toString ( varcharCastLength ) ) . append ( "")), "" ) ; if ( start . getValue ( ) instanceof Number ) { buf . append ( Long . toString ( toLong ( start ) ) ) ; } else { buf . append ( ""CAST(("" ) ; start . appendTo ( buf ) ; buf . append ( "") AS INTEGER)"" ) ; } if ( length != null ) { buf . append ( "", "" ) ; if ( length . getValue ( ) instanceof Number ) { buf . append ( Long . toString ( toLong ( length ) ) ) ; } else { buf . append ( ""CAST(("" ) ; length . appendTo ( buf ) ; buf . append ( "") AS INTEGER)"" ) ; } } buf . append ( "")"" ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected String getClassPath ( ) throws URISyntaxException { ClassLoader loader = getClass ( ) . getClassLoader ( ) ; StringBuffer classPath = new StringBuffer ( ) ; if ( loader instanceof URLClassLoader ) { for ( URL url : ( ( URLClassLoader ) loader ) . getURLs ( ) ) { File file ; file = new File ( url . toURI ( ) ) ; String filename = file . getAbsolutePath ( ) ; if ( filename . indexOf ( ""junit"" ) == - 1 ) { classPath . append ( filename ) ; classPath . append ( System . getProperty ( ""path.separator"" ) ) ; } } } return classPath . toString ( ) ; }",No
" protected void appendCollection ( StringBuilder res , String prefix , Collection < ? extends PatternParam > collection ) { if ( ! isBlank ( collection ) ) { for ( PatternParam item : collection ) { item . toString ( res , prefix ) ; } } }",No
" public String loginTemplate ( ) { return ""login"" ; }",No
 RelNode visit ( RelNode other ) ;,No
 public void setBooleanId ( boolean booleanId ) { this . booleanId = booleanId ; },No
" public com . google . protobuf . ExtensionRegistry assignDescriptors ( com . google . protobuf . Descriptors . FileDescriptor root ) { descriptor = root ; internal_static_exec_shared_UserCredentials_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 0 ) ; internal_static_exec_shared_UserCredentials_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_UserCredentials_descriptor , new java . lang . String [ ] { ""UserName"" , } ) ; internal_static_exec_shared_QueryId_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 1 ) ; internal_static_exec_shared_QueryId_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryId_descriptor , new java . lang . String [ ] { ""Part1"" , ""Part2"" , } ) ; internal_static_exec_shared_DrillPBError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 2 ) ; internal_static_exec_shared_DrillPBError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_DrillPBError_descriptor , new java . lang . String [ ] { ""ErrorId"" , ""Endpoint"" , ""ErrorType"" , ""Message"" , ""Exception"" , ""ParsingError"" , } ) ; internal_static_exec_shared_ExceptionWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 3 ) ; internal_static_exec_shared_ExceptionWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ExceptionWrapper_descriptor , new java . lang . String [ ] { ""ExceptionClass"" , ""Message"" , ""StackTrace"" , ""Cause"" , } ) ; internal_static_exec_shared_StackTraceElementWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 4 ) ; internal_static_exec_shared_StackTraceElementWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StackTraceElementWrapper_descriptor , new java . lang . String [ ] { ""ClassName"" , ""FileName"" , ""LineNumber"" , ""MethodName"" , ""IsNativeMethod"" , } ) ; internal_static_exec_shared_ParsingError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 5 ) ; internal_static_exec_shared_ParsingError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ParsingError_descriptor , new java . lang . String [ ] { ""StartColumn"" , ""StartRow"" , ""EndColumn"" , ""EndRow"" , } ) ; internal_static_exec_shared_RecordBatchDef_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 6 ) ; internal_static_exec_shared_RecordBatchDef_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_RecordBatchDef_descriptor , new java . lang . String [ ] { ""RecordCount"" , ""Field"" , ""CarriesTwoByteSelectionVector"" , } ) ; internal_static_exec_shared_NamePart_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 7 ) ; internal_static_exec_shared_NamePart_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NamePart_descriptor , new java . lang . String [ ] { ""Type"" , ""Name"" , ""Child"" , } ) ; internal_static_exec_shared_SerializedField_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 8 ) ; internal_static_exec_shared_SerializedField_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SerializedField_descriptor , new java . lang . String [ ] { ""MajorType"" , ""NamePart"" , ""Child"" , ""ValueCount"" , ""VarByteLength"" , ""BufferLength"" , } ) ; internal_static_exec_shared_NodeStatus_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 9 ) ; internal_static_exec_shared_NodeStatus_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NodeStatus_descriptor , new java . lang . String [ ] { ""NodeId"" , ""MemoryFootprint"" , } ) ; internal_static_exec_shared_QueryResult_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 10 ) ; internal_static_exec_shared_QueryResult_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryResult_descriptor , new java . lang . String [ ] { ""QueryState"" , ""QueryId"" , ""Error"" , } ) ; internal_static_exec_shared_QueryData_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 11 ) ; internal_static_exec_shared_QueryData_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryData_descriptor , new java . lang . String [ ] { ""QueryId"" , ""RowCount"" , ""Def"" , } ) ; internal_static_exec_shared_QueryInfo_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 12 ) ; internal_static_exec_shared_QueryInfo_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryInfo_descriptor , new java . lang . String [ ] { ""Query"" , ""Start"" , ""State"" , ""User"" , ""Foreman"" , ""OptionsJson"" , } ) ; internal_static_exec_shared_QueryProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 13 ) ; internal_static_exec_shared_QueryProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryProfile_descriptor , new java . lang . String [ ] { ""Id"" , ""Type"" , ""Start"" , ""End"" , ""Query"" , ""Plan"" , ""Foreman"" , ""State"" , ""TotalFragments"" , ""FinishedFragments"" , ""FragmentProfile"" , ""User"" , ""Error"" , ""VerboseError"" , ""ErrorId"" , ""ErrorNode"" , ""OptionsJson"" , ""PlanEnd"" , ""QueueWaitEnd"" , } ) ; internal_static_exec_shared_MajorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 14 ) ; internal_static_exec_shared_MajorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MajorFragmentProfile_descriptor , new java . lang . String [ ] { ""MajorFragmentId"" , ""MinorFragmentProfile"" , } ) ; internal_static_exec_shared_MinorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 15 ) ; internal_static_exec_shared_MinorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MinorFragmentProfile_descriptor , new java . lang . String [ ] { ""State"" , ""Error"" , ""MinorFragmentId"" , ""OperatorProfile"" , ""StartTime"" , ""EndTime"" , ""MemoryUsed"" , ""MaxMemoryUsed"" , ""Endpoint"" , ""LastUpdate"" , ""LastProgress"" , } ) ; internal_static_exec_shared_OperatorProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 16 ) ; internal_static_exec_shared_OperatorProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_OperatorProfile_descriptor , new java . lang . String [ ] { ""InputProfile"" , ""OperatorId"" , ""OperatorType"" , ""SetupNanos"" , ""ProcessNanos"" , ""PeakLocalMemoryAllocated"" , ""Metric"" , ""WaitNanos"" , } ) ; internal_static_exec_shared_StreamProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 17 ) ; internal_static_exec_shared_StreamProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StreamProfile_descriptor , new java . lang . String [ ] { ""Records"" , ""Batches"" , ""Schemas"" , } ) ; internal_static_exec_shared_MetricValue_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 18 ) ; internal_static_exec_shared_MetricValue_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MetricValue_descriptor , new java . lang . String [ ] { ""MetricId"" , ""LongValue"" , ""DoubleValue"" , } ) ; internal_static_exec_shared_Registry_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 19 ) ; internal_static_exec_shared_Registry_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Registry_descriptor , new java . lang . String [ ] { ""Jar"" , } ) ; internal_static_exec_shared_Jar_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 20 ) ; internal_static_exec_shared_Jar_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Jar_descriptor , new java . lang . String [ ] { ""Name"" , ""FunctionSignature"" , } ) ; internal_static_exec_shared_SaslMessage_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 21 ) ; internal_static_exec_shared_SaslMessage_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SaslMessage_descriptor , new java . lang . String [ ] { ""Mechanism"" , ""Data"" , ""Status"" , } ) ; return null ; }",No
 void afterBegin ( TransactionEvent event ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public boolean isCollationTrivial ( ) { final List < RelCollation > collations = rel . getTraitSet ( ) . getTraits ( RelCollationTraitDef . INSTANCE ) ; return collations != null && collations . size ( ) == 1 && collations . get ( 0 ) . equals ( collation ) ; },No
" public void testEqualsAndHashCode ( ) { Iterable < String > iterA = new LazyCachingIteratorToIterable < > ( Iterators . forArray ( ""A"" , ""B"" , ""C"" ) ) ; Iterable < String > iterB = new LazyCachingIteratorToIterable < > ( Iterators . forArray ( ""A"" , ""B"" , ""C"" ) ) ; Iterable < String > iterC = new LazyCachingIteratorToIterable < > ( Iterators . forArray ( ) ) ; Iterable < String > iterD = new LazyCachingIteratorToIterable < > ( Iterators . forArray ( ) ) ; assertEquals ( iterA , iterB ) ; assertEquals ( iterC , iterD ) ; assertNotEquals ( iterA , iterC ) ; assertEquals ( iterA . hashCode ( ) , iterB . hashCode ( ) ) ; assertEquals ( iterC . hashCode ( ) , iterD . hashCode ( ) ) ; }",No
" private void merge ( Scope scope , ScopeBase newScope , Generator gen ) { String x = """" ; String sep = """" ; for ( ScopeEntry e : scope . findScopes ( ) ) { SqlColumn oldCol = e . getColumn ( ) ; Var v = e . getVar ( ) ; String colName = gen . next ( ) ; SqlColumn newCol = new SqlColumn ( vTable , colName ) ; this . add ( new ColAlias ( oldCol , newCol ) ) ; newScope . setColumnForVar ( v , newCol ) ; x = String . format ( ""%s%s%s:(%s=>%s)"" , x , sep , v , oldCol , newCol ) ; sep = "" "" ; } if ( x . length ( ) > 0 ) addNote ( x ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ExperimentModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . experimentId = iprot . readString ( ) ; struct . setExperimentIdIsSet ( true ) ; struct . projectId = iprot . readString ( ) ; struct . setProjectIdIsSet ( true ) ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . experimentType = org . apache . airavata . model . experiment . ExperimentType . findByValue ( iprot . readI32 ( ) ) ; struct . setExperimentTypeIsSet ( true ) ; struct . userName = iprot . readString ( ) ; struct . setUserNameIsSet ( true ) ; struct . experimentName = iprot . readString ( ) ; struct . setExperimentNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 13 ) ; if ( incoming . get ( 0 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . executionId = iprot . readString ( ) ; struct . setExecutionIdIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . gatewayExecutionId = iprot . readString ( ) ; struct . setGatewayExecutionIdIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . gatewayInstanceId = iprot . readString ( ) ; struct . setGatewayInstanceIdIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . enableEmailNotification = iprot . readBool ( ) ; struct . setEnableEmailNotificationIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { { org . apache . thrift . protocol . TList _list25 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . emailAddresses = new ArrayList < String > ( _list25 . size ) ; String _elem26 ; for ( int _i27 = 0 ; _i27 < _list25 . size ; ++ _i27 ) { _elem26 = iprot . readString ( ) ; struct . emailAddresses . add ( _elem26 ) ; } } struct . setEmailAddressesIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . userConfigurationData = new UserConfigurationDataModel ( ) ; struct . userConfigurationData . read ( iprot ) ; struct . setUserConfigurationDataIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TList _list28 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . experimentInputs = new ArrayList < org . apache . airavata . model . application . io . InputDataObjectType > ( _list28 . size ) ; org . apache . airavata . model . application . io . InputDataObjectType _elem29 ; for ( int _i30 = 0 ; _i30 < _list28 . size ; ++ _i30 ) { _elem29 = new org . apache . airavata . model . application . io . InputDataObjectType ( ) ; _elem29 . read ( iprot ) ; struct . experimentInputs . add ( _elem29 ) ; } } struct . setExperimentInputsIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { { org . apache . thrift . protocol . TList _list31 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . experimentOutputs = new ArrayList < org . apache . airavata . model . application . io . OutputDataObjectType > ( _list31 . size ) ; org . apache . airavata . model . application . io . OutputDataObjectType _elem32 ; for ( int _i33 = 0 ; _i33 < _list31 . size ; ++ _i33 ) { _elem32 = new org . apache . airavata . model . application . io . OutputDataObjectType ( ) ; _elem32 . read ( iprot ) ; struct . experimentOutputs . add ( _elem32 ) ; } } struct . setExperimentOutputsIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . experimentStatus = new org . apache . airavata . model . status . ExperimentStatus ( ) ; struct . experimentStatus . read ( iprot ) ; struct . setExperimentStatusIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { { org . apache . thrift . protocol . TList _list34 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . errors = new ArrayList < org . apache . airavata . model . commons . ErrorModel > ( _list34 . size ) ; org . apache . airavata . model . commons . ErrorModel _elem35 ; for ( int _i36 = 0 ; _i36 < _list34 . size ; ++ _i36 ) { _elem35 = new org . apache . airavata . model . commons . ErrorModel ( ) ; _elem35 . read ( iprot ) ; struct . errors . add ( _elem35 ) ; } } struct . setErrorsIsSet ( true ) ; } if ( incoming . get ( 12 ) ) { { org . apache . thrift . protocol . TList _list37 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . processes = new ArrayList < org . apache . airavata . model . process . ProcessModel > ( _list37 . size ) ; org . apache . airavata . model . process . ProcessModel _elem38 ; for ( int _i39 = 0 ; _i39 < _list37 . size ; ++ _i39 ) { _elem38 = new org . apache . airavata . model . process . ProcessModel ( ) ; _elem38 . read ( iprot ) ; struct . processes . add ( _elem38 ) ; } } struct . setProcessesIsSet ( true ) ; } }",Smelly
 public String echoString ( String str ) { return str ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , LockRequest struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; { org . apache . thrift . protocol . TList _list407 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . component = new ArrayList < LockComponent > ( _list407 . size ) ; for ( int _i408 = 0 ; _i408 < _list407 . size ; ++ _i408 ) { LockComponent _elem409 ; _elem409 = new LockComponent ( ) ; _elem409 . read ( iprot ) ; struct . component . add ( _elem409 ) ; } } struct . setComponentIsSet ( true ) ; struct . user = iprot . readString ( ) ; struct . setUserIsSet ( true ) ; struct . hostname = iprot . readString ( ) ; struct . setHostnameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . txnid = iprot . readI64 ( ) ; struct . setTxnidIsSet ( true ) ; } }",Smelly
 public String getClassName ( ) { return ( this . resource . getClass ( ) . getName ( ) ) ; },No
" public void flush ( ) throws IOException { MoreObjects . firstNonNull ( reflectWriter , genericWriter ) . flush ( ) ; }",No
 int copyFrom ( InputStream in ) throws IOException ;,No
" public void annotate ( final JavaAnnotatable clz ) { WrapperBeanClass beanClass = null ; if ( clz instanceof WrapperBeanClass ) { beanClass = ( WrapperBeanClass ) clz ; } else { throw new RuntimeException ( ""WrapperBeanAnnotator expect JavaClass as input"" ) ; } JAnnotation xmlRootElement = new JAnnotation ( XmlRootElement . class ) ; xmlRootElement . addElement ( new JAnnotationElement ( ""name"" , beanClass . getElementName ( ) . getLocalPart ( ) ) ) ; xmlRootElement . addElement ( new JAnnotationElement ( ""namespace"" , beanClass . getElementName ( ) . getNamespaceURI ( ) ) ) ; JAnnotation xmlAccessorType = new JAnnotation ( XmlAccessorType . class ) ; xmlAccessorType . addElement ( new JAnnotationElement ( null , XmlAccessType . FIELD ) ) ; XmlType tp = null ; if ( sourceClass != null ) { tp = sourceClass . getAnnotation ( XmlType . class ) ; } JAnnotation xmlType = new JAnnotation ( XmlType . class ) ; if ( tp == null ) { xmlType . addElement ( new JAnnotationElement ( ""name"" , beanClass . getElementName ( ) . getLocalPart ( ) ) ) ; xmlType . addElement ( new JAnnotationElement ( ""namespace"" , beanClass . getElementName ( ) . getNamespaceURI ( ) ) ) ; } else { if ( ! ""##default"" . equals ( tp . name ( ) ) ) { xmlType . addElement ( new JAnnotationElement ( ""name"" , tp . name ( ) ) ) ; } if ( ! ""##default"" . equals ( tp . namespace ( ) ) ) { xmlType . addElement ( new JAnnotationElement ( ""namespace"" , tp . namespace ( ) ) ) ; } if ( ! StringUtils . isEmpty ( tp . factoryMethod ( ) ) ) { xmlType . addElement ( new JAnnotationElement ( ""factoryMethod"" , tp . factoryMethod ( ) ) ) ; } if ( tp . propOrder ( ) . length != 1 || ! StringUtils . isEmpty ( tp . propOrder ( ) [ 0 ] ) ) { xmlType . addElement ( new JAnnotationElement ( ""propOrder"" , tp . propOrder ( ) ) ) ; } } List < String > props = new ArrayList < String > ( ) ; for ( JavaField f : beanClass . getFields ( ) ) { props . add ( f . getParaName ( ) ) ; } if ( props . size ( ) > 1 ) { xmlType . addElement ( new JAnnotationElement ( ""propOrder"" , props ) ) ; } beanClass . addAnnotation ( xmlRootElement ) ; beanClass . addAnnotation ( xmlAccessorType ) ; beanClass . addAnnotation ( xmlType ) ; }",Smelly
" private Expression normalize ( SqlTypeName typeName , Expression e ) { switch ( typeName ) { case TIME : return Expressions . call ( BuiltInMethod . FLOOR_MOD . method , e , Expressions . constant ( DateTimeUtils . MILLIS_PER_DAY ) ) ; default : return e ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , DoubleColumnStatsData struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . lowValue = iprot . readDouble ( ) ; struct . setLowValueIsSet ( true ) ; struct . highValue = iprot . readDouble ( ) ; struct . setHighValueIsSet ( true ) ; struct . numNulls = iprot . readI64 ( ) ; struct . setNumNullsIsSet ( true ) ; struct . numDVs = iprot . readI64 ( ) ; struct . setNumDVsIsSet ( true ) ; }",Smelly
 public HostAndWeight [ ] getTopHostsWithWeights ( ) { NavigableSet < HostAndWeight > orderedHosts = new TreeSet < > ( new HostAndWeight . WeightComparator ( ) ) ; orderedHosts . addAll ( this . hostAndWeights . values ( ) ) ; return orderedHosts . descendingSet ( ) . toArray ( new HostAndWeight [ orderedHosts . size ( ) ] ) ; },Smelly
" public int next ( ) { int event = states [ state ] ; if ( event != 0 ) { state ++ ; } else if ( currentEventProducer != null && currentEventProducer . hasNext ( ) ) { event = currentEventProducer . next ( ) ; } else if ( iterator . hasNext ( ) ) { CorbaObjectHandler obj = iterator . next ( ) ; if ( ( obj instanceof CorbaSequenceHandler ) && ( CorbaHandlerUtils . isPrimitiveIDLTypeSequence ( obj ) ) && ( ! ( ( CorbaSequenceHandler ) obj ) . getElements ( ) . isEmpty ( ) ) && ( ! CorbaHandlerUtils . isOctets ( obj . getType ( ) ) ) ) { currentEventProducer = new CorbaPrimitiveSequenceEventProducer ( obj , serviceInfo , orb ) ; } else if ( obj . getSimpleName ( ) . equals ( obj . getIdlType ( ) . getLocalPart ( ) + ""_f"" ) ) { currentEventProducer = CorbaHandlerUtils . getTypeEventProducer ( obj , serviceInfo , orb ) ; } else { currentEventProducer = CorbaHandlerUtils . getTypeEventProducer ( obj , serviceInfo , orb ) ; } if ( currentEventProducer . hasNext ( ) ) { event = currentEventProducer . next ( ) ; } else { currentEventProducer = null ; return next ( ) ; } } else { event = states [ ++ state ] ; state ++ ; currentEventProducer = null ; } return event ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , UpdateErrors struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TMap _map75 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRUCT , org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . failedExtents = new HashMap < TKeyExtent , Long > ( 2 * _map75 . size ) ; for ( int _i76 = 0 ; _i76 < _map75 . size ; ++ _i76 ) { TKeyExtent _key77 ; long _val78 ; _key77 = new TKeyExtent ( ) ; _key77 . read ( iprot ) ; _val78 = iprot . readI64 ( ) ; struct . failedExtents . put ( _key77 , _val78 ) ; } } struct . setFailedExtentsIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list79 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . violationSummaries = new ArrayList < TConstraintViolationSummary > ( _list79 . size ) ; for ( int _i80 = 0 ; _i80 < _list79 . size ; ++ _i80 ) { TConstraintViolationSummary _elem81 ; _elem81 = new TConstraintViolationSummary ( ) ; _elem81 . read ( iprot ) ; struct . violationSummaries . add ( _elem81 ) ; } } struct . setViolationSummariesIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map82 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRUCT , org . apache . thrift . protocol . TType . I32 , iprot . readI32 ( ) ) ; struct . authorizationFailures = new HashMap < TKeyExtent , org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode > ( 2 * _map82 . size ) ; for ( int _i83 = 0 ; _i83 < _map82 . size ; ++ _i83 ) { TKeyExtent _key84 ; org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode _val85 ; _key84 = new TKeyExtent ( ) ; _key84 . read ( iprot ) ; _val85 = org . apache . accumulo . core . client . impl . thrift . SecurityErrorCode . findByValue ( iprot . readI32 ( ) ) ; struct . authorizationFailures . put ( _key84 , _val85 ) ; } } struct . setAuthorizationFailuresIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void replay ( Batch batch ) throws RepositoryException { batch . move ( srcNodeId , destParentNodeId , destName ) ; }",No
" public void testPrettyPrintTaskInfo ( ) { assertEquals ( ""Will start at 2019-01-08T07:05:59.85Z"" , CoordinatorClient . prettyPrintTaskInfo ( new TaskPending ( new NoOpTaskSpec ( 1546931159850L , 9000 ) ) , ZoneOffset . UTC ) ) ; assertEquals ( ""Started 2009-07-07T01:45:59.85Z; will stop after 9s"" , CoordinatorClient . prettyPrintTaskInfo ( new TaskRunning ( new NoOpTaskSpec ( 1146931159850L , 9000 ) , 1246931159850L , JsonNodeFactory . instance . objectNode ( ) ) , ZoneOffset . UTC ) ) ; assertEquals ( ""Started 2009-07-07T01:45:59.85Z"" , CoordinatorClient . prettyPrintTaskInfo ( new TaskStopping ( new NoOpTaskSpec ( 1146931159850L , 9000 ) , 1246931159850L , JsonNodeFactory . instance . objectNode ( ) ) , ZoneOffset . UTC ) ) ; assertEquals ( ""FINISHED at 2019-01-08T20:59:29.85Z after 10s"" , CoordinatorClient . prettyPrintTaskInfo ( new TaskDone ( new NoOpTaskSpec ( 0 , 1000 ) , 1546981159850L , 1546981169850L , """" , false , JsonNodeFactory . instance . objectNode ( ) ) , ZoneOffset . UTC ) ) ; assertEquals ( ""CANCELLED at 2019-01-08T20:59:29.85Z after 10s"" , CoordinatorClient . prettyPrintTaskInfo ( new TaskDone ( new NoOpTaskSpec ( 0 , 1000 ) , 1546981159850L , 1546981169850L , """" , true , JsonNodeFactory . instance . objectNode ( ) ) , ZoneOffset . UTC ) ) ; assertEquals ( ""FAILED at 2019-01-08T20:59:29.85Z after 10s"" , CoordinatorClient . prettyPrintTaskInfo ( new TaskDone ( new NoOpTaskSpec ( 0 , 1000 ) , 1546981159850L , 1546981169850L , ""foobar"" , true , JsonNodeFactory . instance . objectNode ( ) ) , ZoneOffset . UTC ) ) ; }",Smelly
" public static SecurityManager getSecurityManager ( ) throws UnavailableSecurityManagerException { SecurityManager securityManager = ThreadContext . getSecurityManager ( ) ; if ( securityManager == null ) { securityManager = SecurityUtils . securityManager ; } if ( securityManager == null ) { String msg = ""No SecurityManager accessible to the calling code, either bound to the "" + ThreadContext . class . getName ( ) + "" or as a vm static singleton.  This is an invalid application "" + ""configuration."" ; throw new UnavailableSecurityManagerException ( msg ) ; } return securityManager ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public ZipShort getHeaderId ( ) { return UPATH_ID ; },No
 public void setPrefetchTree ( PrefetchTreeNode prefetchTree ) { this . prefetchTree = prefetchTree ; },No
 public String getOption ( ) { return option ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TCMResult struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . cmid = iprot . readI64 ( ) ; struct . setCmidIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . status = TCMStatus . findByValue ( iprot . readI32 ( ) ) ; struct . setStatusIsSet ( true ) ; } }",No
" private AttributesImpl addIDAttribute ( Attributes attributes , String id ) { AttributesImpl atts = new AttributesImpl ( attributes ) ; atts . addAttribute ( InternalElementMapping . URI , InternalElementMapping . STRUCT_ID , InternalElementMapping . STANDARD_PREFIX + "":"" + InternalElementMapping . STRUCT_ID , XMLUtil . CDATA , id ) ; return atts ; }",No
" private static ColumnInfo [ ] makeColumns ( JenaResultSet results , ResultSetPeekable rset ) throws SQLException { List < String > vars = rset . getResultVars ( ) ; ColumnInfo [ ] columns = new ColumnInfo [ vars . size ( ) ] ; int level = JdbcCompatibility . normalizeLevel ( results . getJdbcCompatibilityLevel ( ) ) ; boolean columnsAsStrings = JdbcCompatibility . shouldTypeColumnsAsString ( level ) ; boolean columnsDetected = JdbcCompatibility . shouldDetectColumnTypes ( level ) ; Binding b = null ; if ( columnsDetected ) { if ( rset . hasNext ( ) ) { b = rset . peekBinding ( ) ; } else { columnsAsStrings = true ; columnsDetected = false ; } } for ( int i = 0 ; i < columns . length ; i ++ ) { if ( ! columnsAsStrings && ! columnsDetected ) { columns [ i ] = new SparqlColumnInfo ( vars . get ( i ) , Types . JAVA_OBJECT , columnNullable ) ; LOGGER . info ( ""Low JDBC compatibility, column "" + vars . get ( i ) + "" is being typed as Node"" ) ; } else if ( columnsAsStrings ) { columns [ i ] = new StringColumn ( vars . get ( i ) , columnNullable ) ; LOGGER . info ( ""Medium JDBC compatibility, column "" + vars . get ( i ) + "" is being typed as String"" ) ; } else if ( columnsDetected ) { columns [ i ] = JdbcCompatibility . detectColumnType ( vars . get ( i ) , b . get ( Var . alloc ( vars . get ( i ) ) ) , true ) ; LOGGER . info ( ""High compatibility, column "" + vars . get ( i ) + "" was detected as being of type "" + columns [ i ] . getClassName ( ) ) ; } else { throw new SQLFeatureNotSupportedException ( ""Unknown JDBC compatibility level was set"" ) ; } } return columns ; }",Smelly
 protected void removeTopic ( ActiveMQTopic topic ) throws Exception { String topicUri = getTopicUri ( topic ) ; camelContext . removeEndpoints ( topicUri ) ; },No
" void genSourceData ( ) { Random r = newRandom ( ) ; Schema uSchema = writeSchema . getField ( ""f"" ) . schema ( ) ; sourceData = new GenericRecord [ count ] ; for ( int i = 0 ; i < sourceData . length ; i ++ ) { GenericRecord rec = new GenericData . Record ( writeSchema ) ; int val = r . nextInt ( 1000000 ) ; Integer v = ( val < 750000 ? val : null ) ; rec . put ( ""f"" , v ) ; sourceData [ i ] = rec ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" static public void cancelDelegationToken ( String nnAddr , Token < DelegationTokenIdentifier > tok ) throws IOException { StringBuilder buf = new StringBuilder ( ) ; buf . append ( nnAddr ) ; buf . append ( CancelDelegationTokenServlet . PATH_SPEC ) ; buf . append ( ""?"" ) ; buf . append ( CancelDelegationTokenServlet . TOKEN ) ; buf . append ( ""="" ) ; buf . append ( tok . encodeToUrlString ( ) ) ; BufferedReader in = null ; HttpURLConnection connection = null ; try { URL url = new URL ( buf . toString ( ) ) ; connection = ( HttpURLConnection ) SecurityUtil . openSecureHttpConnection ( url ) ; if ( connection . getResponseCode ( ) != HttpURLConnection . HTTP_OK ) { throw new IOException ( ""Error cancelling token: "" + connection . getResponseMessage ( ) ) ; } } catch ( IOException ie ) { LOG . info ( ""error in cancel over HTTP"" , ie ) ; IOException e = getExceptionFromResponse ( connection ) ; IOUtils . cleanup ( LOG , in ) ; if ( e != null ) { LOG . info ( ""rethrowing exception from HTTP request: "" + e . getLocalizedMessage ( ) ) ; throw e ; } throw ie ; } }",No
" public String toString ( ) { String path = getDirectory ( ) != null ? getDirectory ( ) . getAbsolutePath ( ) : ""DIRECTORY_NOT_SET"" ; return ""PListStore:["" + path + ""]"" ; }",No
 public void writeMetrics ( MetricQueryResults metricQueryResults ) throws Exception { },No
 int getPriority ( ) { return 8 + ( getNeedsDynamicEval ( ) ? DYNAMIC_EVALUATION_PENALTY : 0 ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
 public boolean isBefore ( ) { return before ; },No
 E getBaseElement ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void onRemoval ( RemovalNotification < Integer , ProfileBuilder > notification ) { if ( notification . wasEvicted ( ) ) { ProfileBuilder expired = notification . getValue ( ) ; LOG . warn ( ""Expired profile NOT flushed before removal, some state lost; profile={}, entity={}"" , expired . getDefinition ( ) . getProfile ( ) , expired . getEntity ( ) ) ; } else { ProfileBuilder expired = notification . getValue ( ) ; LOG . debug ( ""Expired profile successfully flushed; profile={}, entity={}"" , expired . getDefinition ( ) . getProfile ( ) , expired . getEntity ( ) ) ; } }",Smelly
 Endpoint < E > createEndpoint ( String uri ) throws Exception ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public Serde < Double > getSerde ( String name , Config config ) { return new DoubleSerde ( ) ; }",No
 public boolean isValid ( ) { return true ; },No
" public void handleMessage ( SoapMessage message ) throws Fault { MessageContentsList list = ( MessageContentsList ) message . getContent ( List . class ) ; Object o = list . remove ( 0 ) ; SOAPMessage soapMessage = null ; if ( o instanceof SOAPMessage ) { soapMessage = ( SOAPMessage ) o ; if ( soapMessage . countAttachments ( ) > 0 ) { message . put ( ""write.attachments"" , Boolean . TRUE ) ; } } else { try { MessageFactory factory = saajOut . getFactory ( message ) ; soapMessage = factory . createMessage ( ) ; SOAPPart part = soapMessage . getSOAPPart ( ) ; if ( o instanceof Source ) { StaxUtils . copy ( ( Source ) o , new SAAJStreamWriter ( part ) ) ; } } catch ( SOAPException e ) { throw new SoapFault ( ""Error creating SOAPMessage"" , e , message . getVersion ( ) . getSender ( ) ) ; } catch ( XMLStreamException e ) { throw new SoapFault ( ""Error creating SOAPMessage"" , e , message . getVersion ( ) . getSender ( ) ) ; } } message . setContent ( SOAPMessage . class , soapMessage ) ; if ( ! message . containsKey ( SAAJOutInterceptor . ORIGINAL_XML_WRITER ) ) { XMLStreamWriter origWriter = message . getContent ( XMLStreamWriter . class ) ; message . put ( SAAJOutInterceptor . ORIGINAL_XML_WRITER , origWriter ) ; } W3CDOMStreamWriter writer = new OverlayW3CDOMStreamWriter ( soapMessage . getSOAPPart ( ) ) ; message . setContent ( XMLStreamWriter . class , writer ) ; message . setContent ( SOAPMessage . class , soapMessage ) ; BindingOperationInfo bop = message . getExchange ( ) . get ( BindingOperationInfo . class ) ; DocumentFragment frag = soapMessage . getSOAPPart ( ) . createDocumentFragment ( ) ; try { Node body = SAAJUtils . getBody ( soapMessage ) ; Node nd = body . getFirstChild ( ) ; while ( nd != null ) { body . removeChild ( nd ) ; frag . appendChild ( nd ) ; nd = SAAJUtils . getBody ( soapMessage ) . getFirstChild ( ) ; } int index = 0 ; boolean client = isRequestor ( message ) ; BindingMessageInfo bmsg = null ; if ( client ) { bmsg = bop . getInput ( ) ; } else if ( bop . getOutput ( ) != null ) { bmsg = bop . getOutput ( ) ; } if ( bmsg != null && bmsg . getMessageParts ( ) != null && bmsg . getMessageParts ( ) . size ( ) > 0 ) { index = bmsg . getMessageParts ( ) . get ( 0 ) . getIndex ( ) ; } list . set ( index , frag ) ; Object buffer = message . getContextualProperty ( AbstractOutDatabindingInterceptor . OUT_BUFFERING ) ; if ( buffer == null ) { message . put ( AbstractOutDatabindingInterceptor . OUT_BUFFERING , Boolean . FALSE ) ; } } catch ( Exception ex ) { throw new Fault ( ex ) ; } if ( bop != null && bop . isUnwrapped ( ) ) { bop = bop . getWrappedOperation ( ) ; message . getExchange ( ) . put ( BindingOperationInfo . class , bop ) ; } message . getInterceptorChain ( ) . add ( SAAJOutEndingInterceptor . INSTANCE ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public static void main ( String ... args ) { RDFConnection conn0 = RDFConnectionRemote . create ( ) . destination ( ""http://sparql.org/"" ) . queryEndpoint ( ""sparql"" ) . acceptHeaderSelectQuery ( ""application/sparql-results+json, application/sparql-results+xml;q=0.9"" ) . build ( ) ; Query query = QueryFactory . create ( ""SELECT * { BIND('Hello'as ?text) }"" ) ; try ( RDFConnection conn = conn0 ) { conn . queryResultSet ( query , ResultSetFormatter :: out ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Type struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . type1 = iprot . readString ( ) ; struct . setType1IsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . type2 = iprot . readString ( ) ; struct . setType2IsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . fields = new ArrayList < FieldSchema > ( _list5 . size ) ; for ( int _i6 = 0 ; _i6 < _list5 . size ; ++ _i6 ) { FieldSchema _elem7 ; _elem7 = new FieldSchema ( ) ; _elem7 . read ( iprot ) ; struct . fields . add ( _elem7 ) ; } } struct . setFieldsIsSet ( true ) ; } }",Smelly
" public void sessionFolderName ( ) { IStoreSettings storeSettings = new StoreSettings ( null ) ; java . io . File fileStoreFolder = storeSettings . getFileStoreFolder ( ) ; DiskDataStore store = new DiskDataStore ( ""sessionFolderName"" , fileStoreFolder , MAX_SIZE_PER_SESSION ) ; String sessionId = ""abcdefg"" ; java . io . File sessionFolder = store . getSessionFolder ( sessionId , true ) ; String absolutePath = sessionFolder . getAbsolutePath ( ) ; assertTrue ( absolutePath . contains ( ""sessionFolderName-filestore"" ) ) ; assertTrue ( absolutePath . contains ( ""7141"" ) ) ; assertTrue ( absolutePath . contains ( ""1279"" ) ) ; assertTrue ( absolutePath . contains ( ""abcdefg"" ) ) ; DiskDataStore . SessionEntry sessionEntry = new DiskDataStore . SessionEntry ( store , sessionId ) ; sessionEntry . unbind ( ) ; assertFalse ( sessionFolder . getParentFile ( ) . getParentFile ( ) . exists ( ) ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public Component getBean ( ValueStack stack , HttpServletRequest req , HttpServletResponse res ) { return new GenericUIBean ( stack , req , res ) ; }",No
 public void setParent ( OneManyEagerParent parent ) { this . parent = parent ; },No
" private void doCancel ( SoapMessage message , AssertionInfoMap aim , SecureConversationToken itok ) { Message m2 = message . getExchange ( ) . getOutMessage ( ) ; SecurityToken tok = ( SecurityToken ) m2 . getContextualProperty ( SecurityConstants . TOKEN ) ; if ( tok == null ) { String tokId = ( String ) m2 . getContextualProperty ( SecurityConstants . TOKEN_ID ) ; if ( tokId != null ) { tok = NegotiationUtils . getTokenStore ( m2 ) . getToken ( tokId ) ; } } STSClient client = STSUtils . getClient ( m2 , ""sct"" ) ; AddressingProperties maps = ( AddressingProperties ) message . get ( ""javax.xml.ws.addressing.context.inbound"" ) ; if ( maps == null ) { maps = ( AddressingProperties ) m2 . get ( ""javax.xml.ws.addressing.context"" ) ; } synchronized ( client ) { try { SecureConversationTokenInterceptorProvider . setupClient ( client , message , aim , itok , true ) ; if ( maps != null ) { client . setAddressingNamespace ( maps . getNamespaceURI ( ) ) ; } client . cancelSecurityToken ( tok ) ; NegotiationUtils . getTokenStore ( m2 ) . remove ( tok . getId ( ) ) ; m2 . setContextualProperty ( SecurityConstants . TOKEN , null ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new Fault ( e ) ; } finally { client . setTrust ( ( Trust10 ) null ) ; client . setTrust ( ( Trust13 ) null ) ; client . setTemplate ( null ) ; client . setLocation ( null ) ; client . setAddressingNamespace ( null ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" void publish ( Object event , Configuration conf ) ;",No
" public WidgetDefinition buildWidgetDefinition ( Element widgetElement ) throws Exception { throw new Exception ( ""The button widget has been renamed to action. Please update your form definition files. Found at "" + DomHelper . getLocation ( widgetElement ) ) ; }",No
" public String getMessage ( ) { return ""The directory item limit of "" + pathName + "" is exceeded: limit="" + quota + "" items="" + count ; }",No
" private static boolean unionEquiv ( Schema w , Schema r , Map < SeenPair , Boolean > seen ) { Schema . Type wt = w . getType ( ) ; if ( wt != r . getType ( ) ) return false ; if ( ( wt == Schema . Type . RECORD || wt == Schema . Type . FIXED || wt == Schema . Type . ENUM ) && ! ( w . getName ( ) == null || w . getName ( ) . equals ( r . getName ( ) ) ) ) return false ; switch ( w . getType ( ) ) { case NULL : case BOOLEAN : case INT : case LONG : case FLOAT : case DOUBLE : case STRING : case BYTES : return true ; case ARRAY : return unionEquiv ( w . getElementType ( ) , r . getElementType ( ) , seen ) ; case MAP : return unionEquiv ( w . getValueType ( ) , r . getValueType ( ) , seen ) ; case FIXED : return w . getFixedSize ( ) == r . getFixedSize ( ) ; case ENUM : { List < String > ws = w . getEnumSymbols ( ) ; List < String > rs = r . getEnumSymbols ( ) ; if ( ws . size ( ) != rs . size ( ) ) return false ; int i = 0 ; for ( i = 0 ; i < ws . size ( ) ; i ++ ) if ( ! ws . get ( i ) . equals ( rs . get ( i ) ) ) break ; return i == ws . size ( ) ; } case UNION : { List < Schema > wb = w . getTypes ( ) ; List < Schema > rb = r . getTypes ( ) ; if ( wb . size ( ) != rb . size ( ) ) return false ; int i = 0 ; for ( i = 0 ; i < wb . size ( ) ; i ++ ) if ( ! unionEquiv ( wb . get ( i ) , rb . get ( i ) , seen ) ) break ; return i == wb . size ( ) ; } case RECORD : { SeenPair wsc = new SeenPair ( w , r ) ; if ( ! seen . containsKey ( wsc ) ) { seen . put ( wsc , true ) ; List < Field > wb = w . getFields ( ) ; List < Field > rb = r . getFields ( ) ; if ( wb . size ( ) != rb . size ( ) ) seen . put ( wsc , false ) ; else { int i = 0 ; for ( i = 0 ; i < wb . size ( ) ; i ++ ) if ( ! unionEquiv ( wb . get ( i ) . schema ( ) , rb . get ( i ) . schema ( ) , seen ) ) break ; seen . put ( wsc , ( i == wb . size ( ) ) ) ; } } return seen . get ( wsc ) ; } default : throw new IllegalArgumentException ( ""Unknown schema type: "" + w . getType ( ) ) ; } }",Smelly
 public void contextualize ( Context context ) throws ContextException { this . context = context ; },No
 boolean isMethodSupported ( String methodName ) throws IOException ;,No
" protected void edit ( String prefix , Dictionary < String , Object > config , MavenRepositoryURL [ ] allRepos , MavenRepositoryURL [ ] pidRepos , MavenRepositoryURL [ ] settingsRepos ) throws Exception { Optional < MavenRepositoryURL > first = Arrays . stream ( allRepos ) . filter ( ( repo ) -> id . equals ( repo . getId ( ) ) ) . findFirst ( ) ; if ( ! first . isPresent ( ) ) { System . err . printf ( ""Can't find %s repository with ID \""%s\""\n"" , ( defaultRepository ? ""default"" : ""remote"" ) , id ) ; return ; } MavenRepositoryURL changedRepository = first . get ( ) ; changedRepository . setSnapshotsEnabled ( snapshots ) ; changedRepository . setReleasesEnabled ( ! noReleases ) ; if ( updatePolicy != null ) { SourceAnd < String > up = updatePolicy ( updatePolicy ) ; if ( ! up . valid ) { System . err . println ( ""Unknown value of update policy: \"""" + updatePolicy + ""\"""" ) ; return ; } changedRepository . setReleasesUpdatePolicy ( up . val ( ) ) ; changedRepository . setSnapshotsUpdatePolicy ( up . val ( ) ) ; } if ( checksumPolicy != null ) { SourceAnd < String > cp = checksumPolicy ( checksumPolicy ) ; if ( ! cp . valid ) { System . err . println ( ""Unknown value of checksum policy: \"""" + checksumPolicy + ""\"""" ) ; return ; } changedRepository . setReleasesChecksumPolicy ( cp . val ( ) ) ; changedRepository . setSnapshotsChecksumPolicy ( cp . val ( ) ) ; } if ( uri != null ) { SourceAnd < String > urlResolved = validateRepositoryURL ( uri , defaultRepository ) ; if ( ! urlResolved . valid ) { return ; } changedRepository . setURL ( new URL ( urlResolved . val ( ) ) ) ; } boolean hasUsername = username != null && ! """" . equals ( username . trim ( ) ) ; boolean hasPassword = password != null && ! """" . equals ( password . trim ( ) ) ; boolean hasCredentials = hasUsername && hasPassword ; if ( ( hasUsername && ! hasPassword ) || ( ! hasUsername && hasPassword ) ) { System . err . println ( ""Please specify both username and password"" ) ; return ; } if ( defaultRepository && hasCredentials ) { System . out . println ( ""User credentials won't be used for default repository"" ) ; } boolean credentialsUpdated = false ; if ( ! defaultRepository && hasCredentials ) { if ( ! updateCredentials ( force , id , username , password , prefix , config ) ) { return ; } credentialsUpdated = true ; } if ( ! defaultRepository && changedRepository . getFrom ( ) == MavenRepositoryURL . FROM . SETTINGS ) { for ( Profile profile : mavenSettings . getProfiles ( ) ) { Optional < Repository > repository = profile . getRepositories ( ) . stream ( ) . filter ( ( r ) -> id . equals ( r . getId ( ) ) ) . findFirst ( ) ; if ( repository . isPresent ( ) ) { Repository r = repository . get ( ) ; r . setUrl ( changedRepository . getURL ( ) . toString ( ) ) ; if ( ! changedRepository . isSnapshotsEnabled ( ) ) { r . setSnapshots ( new RepositoryPolicy ( ) ) ; r . getSnapshots ( ) . setEnabled ( false ) ; } else { RepositoryPolicy rp = r . getSnapshots ( ) == null ? new RepositoryPolicy ( ) : r . getSnapshots ( ) ; rp . setEnabled ( true ) ; if ( checksumPolicy != null ) { rp . setChecksumPolicy ( changedRepository . getSnapshotsChecksumPolicy ( ) ) ; } else if ( rp . getChecksumPolicy ( ) == null ) { rp . setChecksumPolicy ( ""warn"" ) ; } if ( updatePolicy != null ) { rp . setUpdatePolicy ( changedRepository . getSnapshotsUpdatePolicy ( ) ) ; } else if ( rp . getUpdatePolicy ( ) == null ) { rp . setUpdatePolicy ( ""daily"" ) ; } r . setSnapshots ( rp ) ; } if ( ! changedRepository . isReleasesEnabled ( ) ) { r . setReleases ( new RepositoryPolicy ( ) ) ; r . getReleases ( ) . setEnabled ( false ) ; } else { RepositoryPolicy rp = r . getReleases ( ) == null ? new RepositoryPolicy ( ) : r . getReleases ( ) ; rp . setEnabled ( true ) ; if ( checksumPolicy != null ) { rp . setChecksumPolicy ( changedRepository . getReleasesChecksumPolicy ( ) ) ; } else if ( rp . getChecksumPolicy ( ) == null ) { rp . setChecksumPolicy ( ""warn"" ) ; } if ( updatePolicy != null ) { rp . setUpdatePolicy ( changedRepository . getReleasesUpdatePolicy ( ) ) ; } else if ( rp . getUpdatePolicy ( ) == null ) { rp . setUpdatePolicy ( ""daily"" ) ; } r . setReleases ( rp ) ; } updateSettings ( prefix , config ) ; break ; } } } else if ( changedRepository . getFrom ( ) == MavenRepositoryURL . FROM . PID ) { List < MavenRepositoryURL > newRepos = new LinkedList < > ( ) ; for ( MavenRepositoryURL repo : pidRepos ) { MavenRepositoryURL _r = repo ; if ( id . equals ( repo . getId ( ) ) ) { _r = changedRepository ; } newRepos . add ( _r ) ; } updatePidRepositories ( prefix , config , defaultRepository , newRepos , settingsRepos . length > 0 ) ; if ( credentialsUpdated ) { updateSettings ( prefix , config ) ; } } Configuration cmConfig = cm . getConfiguration ( PID ) ; cmConfig . update ( config ) ; success = true ; }",Smelly
" public void testSeedGeneration ( ) { long masterSeed1 = 42 ; long masterSeed2 = 43 ; assertTrue ( ""Deterministic seeding"" , getSeed ( ""stream1"" , masterSeed1 ) == getSeed ( ""stream1"" , masterSeed1 ) ) ; assertTrue ( ""Deterministic seeding"" , getSeed ( ""stream2"" , masterSeed2 ) == getSeed ( ""stream2"" , masterSeed2 ) ) ; assertTrue ( ""Different streams"" , getSeed ( ""stream1"" , masterSeed1 ) != getSeed ( ""stream2"" , masterSeed1 ) ) ; assertTrue ( ""Different master seeds"" , getSeed ( ""stream1"" , masterSeed1 ) != getSeed ( ""stream1"" , masterSeed2 ) ) ; }",Smelly
 String getSameLabel ( ) ;,No
 protected boolean isTopic ( ) { return false ; },No
" public static void main ( String [ ] args ) { System . out . println ( ""Hello World!"" ) ; }",No
 public void setParallelism ( String parallelism ) { this . parallelism = parallelism ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public String getName ( ) { return containerName ; },No
" public void run ( Cassandra . Client client ) throws IOException { String format = ""%0"" + session . getTotalKeysLength ( ) + ""d"" ; int count = session . getColumnsPerKey ( ) ; SlicePredicate predicate = new SlicePredicate ( ) . setSlice_range ( new SliceRange ( ByteBuffer . wrap ( new byte [ ] { } ) , ByteBuffer . wrap ( new byte [ ] { } ) , false , count ) ) ; if ( session . getColumnFamilyType ( ) == ColumnFamilyType . Super ) { byte [ ] start = String . format ( format , index ) . getBytes ( ) ; List < KeySlice > slices = new ArrayList < KeySlice > ( ) ; KeyRange range = new KeyRange ( count ) . setStart_key ( start ) . setEnd_key ( ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; for ( int i = 0 ; i < session . getSuperColumns ( ) ; i ++ ) { String superColumnName = ""S"" + Integer . toString ( i ) ; ColumnParent parent = new ColumnParent ( ""Super1"" ) . setSuper_column ( ByteBuffer . wrap ( superColumnName . getBytes ( ) ) ) ; long startTime = System . currentTimeMillis ( ) ; boolean success = false ; String exceptionMessage = null ; for ( int t = 0 ; t < session . getRetryTimes ( ) ; t ++ ) { try { slices = client . get_range_slices ( parent , predicate , range , session . getConsistencyLevel ( ) ) ; success = ( slices . size ( ) != 0 ) ; } catch ( Exception e ) { exceptionMessage = getExceptionMessage ( e ) ; success = false ; } } if ( ! success ) { error ( String . format ( ""Operation [%d] retried %d times - error on calling get_range_slices for range offset %s %s%n"" , index , session . getRetryTimes ( ) , new String ( start ) , ( exceptionMessage == null ) ? """" : ""("" + exceptionMessage + "")"" ) ) ; } session . operations . getAndIncrement ( ) ; session . latency . getAndAdd ( System . currentTimeMillis ( ) - startTime ) ; } session . keys . getAndAdd ( slices . size ( ) ) ; } else { ColumnParent parent = new ColumnParent ( ""Standard1"" ) ; byte [ ] start = String . format ( format , index ) . getBytes ( ) ; List < KeySlice > slices = new ArrayList < KeySlice > ( ) ; KeyRange range = new KeyRange ( count ) . setStart_key ( start ) . setEnd_key ( ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; long startTime = System . currentTimeMillis ( ) ; boolean success = false ; String exceptionMessage = null ; for ( int t = 0 ; t < session . getRetryTimes ( ) ; t ++ ) { if ( success ) break ; try { slices = client . get_range_slices ( parent , predicate , range , session . getConsistencyLevel ( ) ) ; success = ( slices . size ( ) != 0 ) ; } catch ( Exception e ) { exceptionMessage = getExceptionMessage ( e ) ; success = false ; } } if ( ! success ) { error ( String . format ( ""Operation [%d] retried %d times - error on calling get_indexed_slices for range offset %s %s%n"" , index , session . getRetryTimes ( ) , new String ( start ) , ( exceptionMessage == null ) ? """" : ""("" + exceptionMessage + "")"" ) ) ; } session . operations . getAndIncrement ( ) ; session . keys . getAndAdd ( slices . size ( ) ) ; session . latency . getAndAdd ( System . currentTimeMillis ( ) - startTime ) ; } }",Smelly
" public void testTRIMChar ( ) { if ( ! accessStackAdapter . supportsTrimChar ( ) ) { return ; } Artist a1 = context . newObject ( Artist . class ) ; a1 . setArtistName ( ""XXXA"" ) ; Artist a2 = context . newObject ( Artist . class ) ; a2 . setArtistName ( ""AXXX"" ) ; context . commitChanges ( ) ; EJBQLQuery query = new EJBQLQuery ( ""SELECT a FROM Artist a WHERE TRIM('X' FROM a.artistName) = 'A'"" ) ; List < ? > objects = context . performQuery ( query ) ; assertEquals ( 2 , objects . size ( ) ) ; assertTrue ( objects . contains ( a1 ) ) ; assertTrue ( objects . contains ( a2 ) ) ; query = new EJBQLQuery ( ""SELECT a FROM Artist a WHERE TRIM(LEADING 'X' FROM a.artistName) = 'A'"" ) ; objects = context . performQuery ( query ) ; assertEquals ( 1 , objects . size ( ) ) ; assertTrue ( objects . contains ( a1 ) ) ; query = new EJBQLQuery ( ""SELECT a FROM Artist a WHERE TRIM(TRAILING 'X' FROM a.artistName) = 'A'"" ) ; objects = context . performQuery ( query ) ; assertEquals ( 1 , objects . size ( ) ) ; assertTrue ( objects . contains ( a2 ) ) ; query = new EJBQLQuery ( ""SELECT a FROM Artist a WHERE TRIM(BOTH 'X' FROM a.artistName) = 'A'"" ) ; objects = context . performQuery ( query ) ; assertEquals ( 2 , objects . size ( ) ) ; assertTrue ( objects . contains ( a1 ) ) ; assertTrue ( objects . contains ( a2 ) ) ; }",Smelly
" public void compute ( Vertex < LongWritable , LongWritable , DoubleWritable > vertex , Iterable < DoubleWritable > messages ) throws IOException { if ( getSuperstep ( ) == 0 ) { Iterable < Edge < LongWritable , DoubleWritable > > edges = vertex . getEdges ( ) ; for ( Edge < LongWritable , DoubleWritable > edge : edges ) { sendMessage ( edge . getTargetVertexId ( ) , new DoubleWritable ( 1.0 ) ) ; } } else { long sum = 0 ; for ( DoubleWritable message : messages ) { sum ++ ; } LongWritable vertexValue = vertex . getValue ( ) ; vertexValue . set ( sum ) ; vertex . setValue ( vertexValue ) ; vertex . voteToHalt ( ) ; } }",No
" CompletableFuture < LastConfirmedAndEntry > readLastAddConfirmedAndEntry ( long entryId , long timeOutInMillis , boolean parallel ) ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 G getBaseGraph ( ) ;,No
 public float getProgress ( ) throws IOException { return verticesRead * 100.0f / totalSplitVertices ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void close ( ) { ctx . close ( ) ; },Smelly
 private void dumpClassHeader ( ) throws IOException { out . writeInt ( clazz . magic ) ; out . writeShort ( clazz . minor_version ) ; out . writeShort ( clazz . major_version ) ; },Smelly
 void setMappingIdentifierURI ( String uri ) ;,No
" public void test ( ) { List < BeamSqlExpression > operands = new ArrayList < > ( ) ; assertEquals ( SqlTypeName . TIME , new BeamSqlCurrentTimeExpression ( operands ) . evaluate ( row , null , BeamSqlExpressionEnvironments . empty ( ) ) . getOutputType ( ) ) ; }",No
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . toDependent = in . readObject ( ) ; }",No
 public int hashCode ( ) { int result = namespace . hashCode ( ) ; result = 31 * result + address . hashCode ( ) ; return result ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
 public XMLStreamReader getXMLStreamReader ( ) { throw new UnsupportedOperationException ( ) ; },No
 String getString ( String attribute ) throws DfException ;,No
" public void onMatch ( RelOptRuleCall call ) { final Sort sort = call . rel ( 0 ) ; final DruidQuery query = call . rel ( 1 ) ; if ( ! DruidQuery . isValidSignature ( query . signature ( ) + 'l' ) ) { return ; } if ( sort . offset != null && RexLiteral . intValue ( sort . offset ) != 0 ) { return ; } if ( query . getQueryType ( ) == QueryType . SCAN && ! RelOptUtil . isPureLimit ( sort ) ) { return ; } final RelNode newSort = sort . copy ( sort . getTraitSet ( ) , ImmutableList . of ( Util . last ( query . rels ) ) ) ; call . transformTo ( DruidQuery . extendQuery ( query , newSort ) ) ; }",Smelly
" protected void validateForUpdate ( VXPolicyExportAudit vObj , XXPolicyExportAudit mObj ) { }",No
" public void purgeOnReturn ( ) { try { createPool ( ) . purgeOnReturn ( ) ; } catch ( SQLException x ) { log . error ( ""Unable to purge pool."" , x ) ; } }",No
 protected void doExecute ( ConcurrentTestCommandExecutor executor ) throws SQLException { Statement stmt = executor . getConnection ( ) . createStatement ( ) ; try { stmt . execute ( sql ) ; } finally { stmt . close ( ) ; } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public boolean dropVertex ( Vertex < I , V , E > vertex ) { return false ; }",No
 public InputStream getInputStream ( ) { return is ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void writeLevelGroup ( RtfElement element ) throws IOException { element . writeOneAttributeNS ( RtfListTable . LIST_START_AT , 1 ) ; element . attrib . set ( RtfListTable . LIST_NUMBER_TYPE , 0 ) ; element . writeGroupMark ( true ) ; element . writeOneAttributeNS ( RtfListTable . LIST_TEXT_FORM , ""\\'03\\\'00. ;"" ) ; element . writeGroupMark ( false ) ; element . writeGroupMark ( true ) ; element . writeOneAttributeNS ( RtfListTable . LIST_NUM_POSITION , ""\\'01;"" ) ; element . writeGroupMark ( false ) ; element . writeOneAttribute ( RtfListTable . LIST_FONT_TYPE , 0 ) ; }",Smelly
" protected boolean isAuthorized ( DavServletRequest request , String repositoryId ) throws DavException { return true ; }",No
" public boolean accept ( File dir , String name ) { return ( name . startsWith ( filename ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public String getRealPath ( String path ) { return null ; },No
 public void stop ( BundleContext bundleContext ) throws Exception { if ( serviceRegistration != null ) { serviceRegistration . unregister ( ) ; } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public final boolean lessThan ( Object a , Object b ) { TextFragment fragA = ( TextFragment ) a ; TextFragment fragB = ( TextFragment ) b ; if ( fragA . getScore ( ) == fragB . getScore ( ) ) return fragA . fragNum > fragB . fragNum ; else return fragA . getScore ( ) < fragB . getScore ( ) ; }",Smelly
" public void configure ( ResourceInfo resourceInfo , Configurable configurable ) { configurable . register ( new PreMatchDynamicContainerRequestFilter ( ) ) ; configurable . register ( new PostMatchDynamicContainerResponseFilter ( ) ) ; }",No
 R visit ( WhileStatement whileStatement ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , deletePWDCredential_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . csException = new org . apache . airavata . credential . store . exception . CredentialStoreException ( ) ; struct . csException . read ( iprot ) ; struct . setCsExceptionIsSet ( true ) ; } }",No
" public static String makeOutputConnectionKey ( String connectionName ) { return ""OUTPUTCONNECTION_"" + connectionName ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , BooleanColumnStatsData struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . numTrues = iprot . readI64 ( ) ; struct . setNumTruesIsSet ( true ) ; struct . numFalses = iprot . readI64 ( ) ; struct . setNumFalsesIsSet ( true ) ; struct . numNulls = iprot . readI64 ( ) ; struct . setNumNullsIsSet ( true ) ; }",Smelly
 Iterator findLoginParameters ( String documentIdentifier ) throws ManifoldCFException ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , PasswordCredential struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . portalUserName = iprot . readString ( ) ; struct . setPortalUserNameIsSet ( true ) ; struct . loginUserName = iprot . readString ( ) ; struct . setLoginUserNameIsSet ( true ) ; struct . password = iprot . readString ( ) ; struct . setPasswordIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . persistedTime = iprot . readI64 ( ) ; struct . setPersistedTimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . token = iprot . readString ( ) ; struct . setTokenIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public Enumeration < String > list ( ) throws IOException { if ( ! connected ) { connect ( ) ; } if ( ( resource == null ) && ( collection == null ) ) { throw new FileNotFoundException ( getURL ( ) == null ? ""null"" : getURL ( ) . toString ( ) ) ; } Vector < String > result = new Vector < String > ( ) ; if ( collection != null ) { try { NamingEnumeration < NameClassPair > enumeration = collection . list ( ""/"" ) ; while ( enumeration . hasMoreElements ( ) ) { NameClassPair ncp = enumeration . nextElement ( ) ; String s = ncp . getName ( ) ; result . addElement ( URL_ENCODER . encodeURL ( s , 0 , s . length ( ) ) . toString ( ) ) ; } } catch ( NamingException e ) { throw new FileNotFoundException ( getURL ( ) == null ? ""null"" : getURL ( ) . toString ( ) ) ; } } return result . elements ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" PhysicalExec createPlan ( TaskAttemptContext context , LogicalNode logicalPlan ) ;",No
 protected Stream < ValidationResult . ValidationError > onString ( final JsonString cast ) { return Stream . empty ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public EntityDefinition open ( Assembler a , Resource root , Mode mode ) { String prologue = ""PREFIX : <"" + NS + "">   PREFIX list: <http://jena.apache.org/ARQ/list#> "" ; Model model = root . getModel ( ) ; String qs1 = StrUtils . strjoinNL ( prologue , ""SELECT * {"" , ""  ?eMap  :entityField  ?entityField ;"" , ""         :map ?map ;"" , ""         :defaultField ?dftField ."" , ""  OPTIONAL {"" , ""    ?eMap :graphField ?graphField"" , ""  }"" , ""  OPTIONAL {"" , ""    ?eMap :langField ?langField"" , ""  }"" , ""  OPTIONAL {"" , ""    ?eMap :uidField ?uidField"" , ""  }"" , ""}"" ) ; ParameterizedSparqlString pss = new ParameterizedSparqlString ( qs1 ) ; pss . setIri ( ""eMap"" , root . getURI ( ) ) ; Query query1 = QueryFactory . create ( pss . toString ( ) ) ; QueryExecution qexec1 = QueryExecutionFactory . create ( query1 , model ) ; ResultSet rs1 = qexec1 . execSelect ( ) ; List < QuerySolution > results = ResultSetFormatter . toList ( rs1 ) ; if ( results . size ( ) == 0 ) { Log . warn ( this , ""Failed to find a valid EntityMap for : "" + root ) ; throw new TextIndexException ( ""Failed to find a valid EntityMap for : "" + root ) ; } if ( results . size ( ) != 1 ) { Log . warn ( this , ""Multiple matches for EntityMap for : "" + root ) ; throw new TextIndexException ( ""Multiple matches for EntityMap for : "" + root ) ; } QuerySolution qsol1 = results . get ( 0 ) ; String entityField = qsol1 . getLiteral ( ""entityField"" ) . getLexicalForm ( ) ; String graphField = qsol1 . contains ( ""graphField"" ) ? qsol1 . getLiteral ( ""graphField"" ) . getLexicalForm ( ) : null ; String langField = qsol1 . contains ( ""langField"" ) ? qsol1 . getLiteral ( ""langField"" ) . getLexicalForm ( ) : null ; String defaultField = qsol1 . contains ( ""dftField"" ) ? qsol1 . getLiteral ( ""dftField"" ) . getLexicalForm ( ) : null ; String uniqueIdField = qsol1 . contains ( ""uidField"" ) ? qsol1 . getLiteral ( ""uidField"" ) . getLexicalForm ( ) : null ; Multimap < String , Node > mapDefs = HashMultimap . create ( ) ; Map < String , Analyzer > analyzerDefs = new HashMap < > ( ) ; Map < String , Boolean > noIndexDefs = new HashMap < > ( ) ; Statement listStmt = root . getProperty ( TextVocab . pMap ) ; while ( listStmt != null ) { RDFNode n = listStmt . getObject ( ) ; if ( ! n . isResource ( ) ) { throw new TextIndexException ( ""Text list node is not a resource : "" + n ) ; } Resource listResource = n . asResource ( ) ; if ( listResource . equals ( RDF . nil ) ) { break ; } Statement listEntryStmt = listResource . getProperty ( RDF . first ) ; if ( listEntryStmt == null ) { throw new TextIndexException ( ""Text map list is not well formed.  No rdf:first property"" ) ; } n = listEntryStmt . getObject ( ) ; if ( ! n . isResource ( ) ) { throw new TextIndexException ( ""Text map list entry is not a resource : "" + n ) ; } Resource listEntry = n . asResource ( ) ; Statement fieldStatement = listEntry . getProperty ( TextVocab . pField ) ; if ( fieldStatement == null ) { throw new TextIndexException ( ""Text map entry has no field property"" ) ; } n = fieldStatement . getObject ( ) ; if ( ! n . isLiteral ( ) ) { throw new TextIndexException ( ""Text map entry field property has no literal value : "" + n ) ; } String field = n . asLiteral ( ) . getLexicalForm ( ) ; Statement predicateStatement = listEntry . getProperty ( TextVocab . pPredicate ) ; if ( predicateStatement == null ) { throw new TextIndexException ( ""Text map entry has no predicate property"" ) ; } n = predicateStatement . getObject ( ) ; if ( ! n . isURIResource ( ) ) { throw new TextIndexException ( ""Text map entry predicate property has non resource value : "" + n ) ; } mapDefs . put ( field , n . asNode ( ) ) ; Statement noIndexStatement = listEntry . getProperty ( TextVocab . pNoIndex ) ; if ( noIndexStatement != null ) { n = noIndexStatement . getObject ( ) ; if ( ! n . isLiteral ( ) ) { throw new TextIndexException ( ""Text map entry noIndex property must be a boolean : "" + n ) ; } boolean noInx = n . asLiteral ( ) . getBoolean ( ) ; noIndexDefs . put ( field , noInx ) ; } Statement analyzerStatement = listEntry . getProperty ( TextVocab . pAnalyzer ) ; if ( analyzerStatement != null ) { n = analyzerStatement . getObject ( ) ; if ( ! n . isResource ( ) ) { throw new TextIndexException ( ""Text map entry analyzer property is not a resource : "" + n ) ; } Resource analyzerResource = n . asResource ( ) ; Analyzer analyzer = ( Analyzer ) a . open ( analyzerResource ) ; analyzerDefs . put ( field , analyzer ) ; } listStmt = listResource . getProperty ( RDF . rest ) ; } if ( defaultField != null ) { Collection < Node > c = mapDefs . get ( defaultField ) ; if ( c . isEmpty ( ) ) throw new TextIndexException ( ""No definition of primary field '"" + defaultField + ""'"" ) ; } EntityDefinition docDef = new EntityDefinition ( entityField , defaultField ) ; docDef . setGraphField ( graphField ) ; docDef . setLangField ( langField ) ; docDef . setUidField ( uniqueIdField ) ; for ( String f : mapDefs . keys ( ) ) { for ( Node p : mapDefs . get ( f ) ) docDef . set ( f , p ) ; } for ( String f : noIndexDefs . keySet ( ) ) { docDef . setNoIndex ( f , noIndexDefs . get ( f ) ) ; } for ( String f : analyzerDefs . keySet ( ) ) { docDef . setAnalyzer ( f , analyzerDefs . get ( f ) ) ; } return docDef ; }",Smelly
" public void TestOverGuaranteeEviction ( ) { INimbus iNimbus = new TestUtilsForResourceAwareScheduler . INimbusTest ( ) ; Map < String , Number > resourceMap = new HashMap < String , Number > ( ) ; resourceMap . put ( Config . SUPERVISOR_CPU_CAPACITY , 100.0 ) ; resourceMap . put ( Config . SUPERVISOR_MEMORY_CAPACITY_MB , 1000.0 ) ; Map < String , SupervisorDetails > supMap = TestUtilsForResourceAwareScheduler . genSupervisors ( 4 , 4 , resourceMap ) ; Config config = new Config ( ) ; config . putAll ( Utils . readDefaultConfig ( ) ) ; config . put ( Config . RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY , org . apache . storm . scheduler . resource . strategies . eviction . DefaultEvictionStrategy . class . getName ( ) ) ; config . put ( Config . RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY , org . apache . storm . scheduler . resource . strategies . priority . DefaultSchedulingPriorityStrategy . class . getName ( ) ) ; config . put ( Config . TOPOLOGY_SCHEDULER_STRATEGY , org . apache . storm . scheduler . resource . strategies . scheduling . DefaultResourceAwareStrategy . class . getName ( ) ) ; config . put ( Config . TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT , 100.0 ) ; config . put ( Config . TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB , 500 ) ; config . put ( Config . TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB , 500 ) ; Map < String , Map < String , Number > > resourceUserPool = new HashMap < String , Map < String , Number > > ( ) ; resourceUserPool . put ( ""jerry"" , new HashMap < String , Number > ( ) ) ; resourceUserPool . get ( ""jerry"" ) . put ( ""cpu"" , 70.0 ) ; resourceUserPool . get ( ""jerry"" ) . put ( ""memory"" , 700.0 ) ; resourceUserPool . put ( ""bobby"" , new HashMap < String , Number > ( ) ) ; resourceUserPool . get ( ""bobby"" ) . put ( ""cpu"" , 100.0 ) ; resourceUserPool . get ( ""bobby"" ) . put ( ""memory"" , 1000.0 ) ; resourceUserPool . put ( ""derek"" , new HashMap < String , Number > ( ) ) ; resourceUserPool . get ( ""derek"" ) . put ( ""cpu"" , 25.0 ) ; resourceUserPool . get ( ""derek"" ) . put ( ""memory"" , 250.0 ) ; config . put ( Config . RESOURCE_AWARE_SCHEDULER_USER_POOLS , resourceUserPool ) ; Cluster cluster = new Cluster ( iNimbus , supMap , new HashMap < String , SchedulerAssignmentImpl > ( ) , config ) ; TopologyDetails topo1 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-1"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 20 , ""jerry"" ) ; TopologyDetails topo2 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-2"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 20 , ""jerry"" ) ; TopologyDetails topo3 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-3"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 10 , ""bobby"" ) ; TopologyDetails topo4 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-4"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 10 , ""bobby"" ) ; TopologyDetails topo5 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-5"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 29 , ""derek"" ) ; TopologyDetails topo6 = TestUtilsForResourceAwareScheduler . getTopology ( ""topo-6"" , config , 1 , 0 , 1 , 0 , currentTime - 2 , 10 , ""derek"" ) ; Map < String , TopologyDetails > topoMap = new HashMap < String , TopologyDetails > ( ) ; topoMap . put ( topo1 . getId ( ) , topo1 ) ; topoMap . put ( topo3 . getId ( ) , topo3 ) ; topoMap . put ( topo4 . getId ( ) , topo4 ) ; topoMap . put ( topo5 . getId ( ) , topo5 ) ; Topologies topologies = new Topologies ( topoMap ) ; ResourceAwareScheduler rs = new ResourceAwareScheduler ( ) ; rs . prepare ( config ) ; rs . schedule ( topologies , cluster ) ; for ( TopologyDetails topo : rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesInvalid ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesAttempted ( ) . size ( ) ) ; topoMap . put ( topo6 . getId ( ) , topo6 ) ; topologies = new Topologies ( topoMap ) ; rs . schedule ( topologies , cluster ) ; for ( TopologyDetails topo : rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 1 , rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 1 , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesInvalid ( ) . size ( ) ) ; Assert . assertEquals ( ""correct topology in attempted queue"" , ""topo-5"" , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . iterator ( ) . next ( ) . getName ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesInvalid ( ) . size ( ) ) ; topoMap . put ( topo2 . getId ( ) , topo2 ) ; topologies = new Topologies ( topoMap ) ; rs . schedule ( topologies , cluster ) ; for ( TopologyDetails topo : rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""jerry"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""jerry"" ) . getTopologiesInvalid ( ) . size ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 2 , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""derek"" ) . getTopologiesInvalid ( ) . size ( ) ) ; Assert . assertEquals ( ""correct topology in attempted queue"" , ""topo-6"" , rs . getUser ( ""derek"" ) . getTopologiesAttempted ( ) . iterator ( ) . next ( ) . getName ( ) ) ; for ( TopologyDetails topo : rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) ) { Assert . assertTrue ( ""Assert scheduling topology success"" , TestUtilsForResourceAwareScheduler . assertStatusSuccess ( cluster . getStatusMap ( ) . get ( topo . getId ( ) ) ) ) ; } Assert . assertEquals ( ""# of running topologies"" , 2 , rs . getUser ( ""bobby"" ) . getTopologiesRunning ( ) . size ( ) ) ; Assert . assertEquals ( ""# of pending topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesPending ( ) . size ( ) ) ; Assert . assertEquals ( ""# of attempted topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesAttempted ( ) . size ( ) ) ; Assert . assertEquals ( ""# of invalid topologies"" , 0 , rs . getUser ( ""bobby"" ) . getTopologiesInvalid ( ) . size ( ) ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . identity ( ) ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void testExplicitFileEntry ( ) throws Exception { final File [ ] tmp = createTempDirAndFile ( ) ; File archive = null ; ArArchiveOutputStream aos = null ; ArArchiveInputStream ais = null ; FileInputStream fis = null ; try { archive = File . createTempFile ( ""test."" , "".ar"" , tmp [ 0 ] ) ; archive . deleteOnExit ( ) ; aos = new ArArchiveOutputStream ( new FileOutputStream ( archive ) ) ; final ArArchiveEntry in = new ArArchiveEntry ( ""foo"" , tmp [ 1 ] . length ( ) , 0 , 0 , 0 , tmp [ 1 ] . lastModified ( ) / 1000 ) ; aos . putArchiveEntry ( in ) ; final byte [ ] b = new byte [ ( int ) tmp [ 1 ] . length ( ) ] ; fis = new FileInputStream ( tmp [ 1 ] ) ; while ( fis . read ( b ) > 0 ) { aos . write ( b ) ; } fis . close ( ) ; fis = null ; aos . closeArchiveEntry ( ) ; aos . close ( ) ; aos = null ; ais = new ArArchiveInputStream ( new FileInputStream ( archive ) ) ; final ArArchiveEntry out = ais . getNextArEntry ( ) ; ais . close ( ) ; ais = null ; assertNotNull ( out ) ; assertEquals ( ""foo"" , out . getName ( ) ) ; assertEquals ( tmp [ 1 ] . length ( ) , out . getSize ( ) ) ; assertEquals ( tmp [ 1 ] . lastModified ( ) / 1000 , out . getLastModifiedDate ( ) . getTime ( ) / 1000 ) ; assertFalse ( out . isDirectory ( ) ) ; } finally { if ( ais != null ) { ais . close ( ) ; } if ( aos != null ) { aos . close ( ) ; } tryHardToDelete ( archive ) ; if ( fis != null ) { fis . close ( ) ; } tryHardToDelete ( tmp [ 1 ] ) ; rmdir ( tmp [ 0 ] ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 void setPropertyValue ( Object prop ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public NodeValue exec ( NodeValue v ) { return XSDFuncOp . ceiling ( v ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void onComponentTagBody ( MarkupStream markupStream , ComponentTag openTag ) { String state = form . isEnabled ( ) ? ""enabled"" : ""disabled"" ; replaceComponentTagBody ( markupStream , openTag , ""form is "" + state ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void annotate ( final JavaAnnotatable field ) { JavaField jField = null ; if ( field instanceof JavaField ) { jField = ( JavaField ) field ; } else { throw new RuntimeException ( ""WrapperBeanFiledAnnotator expect JavaField as input"" ) ; } String rawName = jField . getRawName ( ) ; boolean hasEl = false ; for ( Annotation ann : jField . getJaxbAnnotaions ( ) ) { if ( ann instanceof XmlMimeType ) { JAnnotation mimeAnno = new JAnnotation ( XmlMimeType . class ) ; mimeAnno . addElement ( new JAnnotationElement ( ""value"" , ( ( XmlMimeType ) ann ) . value ( ) ) ) ; jField . addAnnotation ( mimeAnno ) ; } else if ( ann instanceof XmlJavaTypeAdapter ) { JAnnotation jaxbAnn = new JAnnotation ( XmlJavaTypeAdapter . class ) ; jaxbAnn . addElement ( new JAnnotationElement ( ""value"" , ( ( XmlJavaTypeAdapter ) ann ) . value ( ) ) ) ; jaxbAnn . addElement ( new JAnnotationElement ( ""type"" , ( ( XmlJavaTypeAdapter ) ann ) . type ( ) ) ) ; jField . addAnnotation ( jaxbAnn ) ; } else if ( ann instanceof XmlAttachmentRef ) { JAnnotation jaxbAnn = new JAnnotation ( XmlAttachmentRef . class ) ; jField . addAnnotation ( jaxbAnn ) ; } else if ( ann instanceof XmlList ) { JAnnotation jaxbAnn = new JAnnotation ( XmlList . class ) ; jField . addAnnotation ( jaxbAnn ) ; } else if ( ann instanceof XmlElement ) { hasEl = true ; XmlElement el = ( XmlElement ) ann ; JAnnotation xmlElementAnnotation = new JAnnotation ( XmlElement . class ) ; xmlElementAnnotation . addElement ( new JAnnotationElement ( ""name"" , el . name ( ) ) ) ; if ( ! StringUtils . isEmpty ( el . namespace ( ) ) ) { xmlElementAnnotation . addElement ( new JAnnotationElement ( ""namespace"" , el . namespace ( ) ) ) ; } if ( el . nillable ( ) ) { xmlElementAnnotation . addElement ( new JAnnotationElement ( ""nillable"" , el . nillable ( ) , true ) ) ; } if ( el . required ( ) ) { xmlElementAnnotation . addElement ( new JAnnotationElement ( ""required"" , el . required ( ) , true ) ) ; } if ( ! StringUtils . isEmpty ( el . defaultValue ( ) ) ) { xmlElementAnnotation . addElement ( new JAnnotationElement ( ""defaultValue"" , el . defaultValue ( ) ) ) ; } jField . addAnnotation ( xmlElementAnnotation ) ; } } if ( ! hasEl ) { JAnnotation xmlElementAnnotation = new JAnnotation ( XmlElement . class ) ; xmlElementAnnotation . addElement ( new JAnnotationElement ( ""name"" , rawName ) ) ; if ( ! StringUtils . isEmpty ( jField . getTargetNamespace ( ) ) ) { xmlElementAnnotation . addElement ( new JAnnotationElement ( ""namespace"" , jField . getTargetNamespace ( ) ) ) ; } jField . addAnnotation ( xmlElementAnnotation ) ; } }",Smelly
" public static RecordBatchDataWrapper outOfMemory ( ) { return new RecordBatchDataWrapper ( null , false , false , true ) ; }",Smelly
" private static int channelIO ( ReadableByteChannel readCh , WritableByteChannel writeCh , ByteBuffer buf ) throws IOException { int originalLimit = buf . limit ( ) ; int initialRemaining = buf . remaining ( ) ; int ret = 0 ; while ( buf . remaining ( ) > 0 ) { try { int ioSize = Math . min ( buf . remaining ( ) , NIO_BUFFER_LIMIT ) ; buf . limit ( buf . position ( ) + ioSize ) ; ret = ( readCh == null ) ? writeCh . write ( buf ) : readCh . read ( buf ) ; if ( ret < ioSize ) { break ; } } finally { buf . limit ( originalLimit ) ; } } int nBytes = initialRemaining - buf . remaining ( ) ; return ( nBytes > 0 ) ? nBytes : ret ; }",No
" public String getValue ( ) { return """" + value ; }",No
 public ForwardDesc clone ( ) { return new ForwardDesc ( ) ; },No
 public void visit ( ElementSubQuery el ) { checkMatching ( el ) ; if ( ! matching ) { el . getQuery ( ) . getQueryPattern ( ) . visit ( this ) ; } },No
 public void testDontRetryOnSuccess ( ) throws Exception { numberOfSuccessfulRuns ++ ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void setTopologies ( List < SimpleTopology > ts ) { this . topologies = ts ; },No
" public RecordReader < LongWritable , QuadWritable > createRecordReader ( InputSplit split , TaskAttemptContext context ) { return new TriXReader ( ) ; }",No
" public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException authException ) throws IOException , ServletException { String ajaxRequestHeader = request . getHeader ( ""X-Requested-With"" ) ; response . setHeader ( ""X-Frame-Options"" , ""DENY"" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""commence() X-Requested-With="" + ajaxRequestHeader ) ; } String requestURL = ( request . getRequestURL ( ) != null ) ? request . getRequestURL ( ) . toString ( ) : """" ; String servletPath = PropertiesUtil . getProperty ( ""ranger.servlet.mapping.url.pattern"" , ""service"" ) ; String reqServletPath = configUtil . getWebAppRootURL ( ) + ""/"" + servletPath ; if ( ""XMLHttpRequest"" . equals ( ajaxRequestHeader ) ) { try { VXResponse vXResponse = new VXResponse ( ) ; vXResponse . setStatusCode ( SC_AUTHENTICATION_TIMEOUT ) ; vXResponse . setMsgDesc ( ""Session Timeout"" ) ; response . setStatus ( SC_AUTHENTICATION_TIMEOUT ) ; response . getWriter ( ) . write ( jsonUtil . writeObjectAsString ( vXResponse ) ) ; } catch ( IOException e ) { logger . info ( ""Error while writing JSON in HttpServletResponse"" ) ; } return ; } else { try { VXResponse vXResponse = new VXResponse ( ) ; vXResponse . setStatusCode ( HttpServletResponse . SC_UNAUTHORIZED ) ; vXResponse . setMsgDesc ( ""Authentication Failed"" ) ; response . setStatus ( HttpServletResponse . SC_UNAUTHORIZED ) ; response . getWriter ( ) . write ( jsonUtil . writeObjectAsString ( vXResponse ) ) ; } catch ( IOException e ) { logger . info ( ""Error while writing JSON in HttpServletResponse"" ) ; } } if ( ajaxRequestHeader != null && ""XMLHttpRequest"" . equalsIgnoreCase ( ajaxRequestHeader ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""commence() AJAX request. Authentication required. Returning "" + ajaxReturnCode + "". URL="" + request . getRequestURI ( ) ) ; } response . sendError ( ajaxReturnCode , """" ) ; } else if ( ! ( requestURL . startsWith ( reqServletPath ) ) ) { if ( requestURL . contains ( RangerSSOAuthenticationFilter . LOCAL_LOGIN_URL ) ) { if ( request . getSession ( ) != null ) { request . getSession ( ) . setAttribute ( ""locallogin"" , ""true"" ) ; request . getServletContext ( ) . setAttribute ( request . getSession ( ) . getId ( ) , ""locallogin"" ) ; } } super . commence ( request , response , authException ) ; } }",Smelly
 public synchronized void setDropBehind ( Boolean dropBehind ) throws IOException { this . cachingStrategy . setDropBehind ( dropBehind ) ; closeCurrentBlockReader ( ) ; },No
" public void testServerAutoLoadable ( ) { ModuleProviderChecker . testProviderPresent ( ProjectCompatibilityModuleProvider . class , CayenneServerModuleProvider . class ) ; }",No
 RebalanceProtocol getProtocol ( ) { return protocol ; },Smelly
" public void setException ( IOException exception ) { if ( exception == null ) { throw new NullPointerException ( ""exception"" ) ; } setValue ( exception ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ComponentStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . state = org . apache . airavata . model . ComponentState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . reason = iprot . readString ( ) ; struct . setReasonIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . timeofStateChange = iprot . readI64 ( ) ; struct . setTimeofStateChangeIsSet ( true ) ; } }",Smelly
 void dispatcherDestroyed ( Dispatcher du ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public DerivativeStructure value ( final DerivativeStructure t ) { return t . tanh ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TKey struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . row = iprot . readBinary ( ) ; struct . setRowIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . colFamily = iprot . readBinary ( ) ; struct . setColFamilyIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . colQualifier = iprot . readBinary ( ) ; struct . setColQualifierIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . colVisibility = iprot . readBinary ( ) ; struct . setColVisibilityIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . timestamp = iprot . readI64 ( ) ; struct . setTimestampIsSet ( true ) ; } }",Smelly
" public void enforce ( final AccountRuleConf conf , final User user ) { if ( conf instanceof DefaultAccountRuleConf ) { this . conf = DefaultAccountRuleConf . class . cast ( conf ) ; } else { throw new IllegalArgumentException ( AccountRuleConf . class . getName ( ) + "" expected, got "" + conf . getClass ( ) . getName ( ) ) ; } for ( String schema : this . conf . getSchemasNotPermitted ( ) ) { PlainAttr < ? > attr = user . getPlainAttr ( schema ) ; if ( attr != null ) { List < String > values = attr . getValuesAsStrings ( ) ; if ( values != null && ! values . isEmpty ( ) ) { this . conf . getWordsNotPermitted ( ) . add ( values . get ( 0 ) ) ; } } } if ( user . getUsername ( ) == null ) { throw new AccountPolicyException ( ""Invalid account"" ) ; } if ( this . conf . getMinLength ( ) > 0 && this . conf . getMinLength ( ) > user . getUsername ( ) . length ( ) ) { throw new AccountPolicyException ( ""Username too short"" ) ; } if ( this . conf . getMaxLength ( ) > 0 && this . conf . getMaxLength ( ) < user . getUsername ( ) . length ( ) ) { throw new AccountPolicyException ( ""Username too long"" ) ; } for ( String word : this . conf . getWordsNotPermitted ( ) ) { if ( StringUtils . containsIgnoreCase ( user . getUsername ( ) , word ) ) { throw new AccountPolicyException ( ""Used word(s) not permitted"" ) ; } } if ( this . conf . isAllUpperCase ( ) && ! user . getUsername ( ) . equals ( user . getUsername ( ) . toUpperCase ( ) ) ) { throw new AccountPolicyException ( ""No lowercase characters permitted"" ) ; } if ( this . conf . isAllLowerCase ( ) && ! user . getUsername ( ) . equals ( user . getUsername ( ) . toLowerCase ( ) ) ) { throw new AccountPolicyException ( ""No uppercase characters permitted"" ) ; } Pattern pattern = ( this . conf . getPattern ( ) == null ) ? DEFAULT_PATTERN : Pattern . compile ( this . conf . getPattern ( ) ) ; if ( ! pattern . matcher ( user . getUsername ( ) ) . matches ( ) ) { throw new AccountPolicyException ( ""Username does not match pattern"" ) ; } for ( String prefix : this . conf . getPrefixesNotPermitted ( ) ) { if ( user . getUsername ( ) . startsWith ( prefix ) ) { throw new AccountPolicyException ( ""Prefix not permitted"" ) ; } } for ( String suffix : this . conf . getSuffixesNotPermitted ( ) ) { if ( user . getUsername ( ) . endsWith ( suffix ) ) { throw new AccountPolicyException ( ""Suffix not permitted"" ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , ExperimentStatistics struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . allExperimentCount = iprot . readI32 ( ) ; struct . setAllExperimentCountIsSet ( true ) ; struct . completedExperimentCount = iprot . readI32 ( ) ; struct . setCompletedExperimentCountIsSet ( true ) ; struct . failedExperimentCount = iprot . readI32 ( ) ; struct . setFailedExperimentCountIsSet ( true ) ; struct . createdExperimentCount = iprot . readI32 ( ) ; struct . setCreatedExperimentCountIsSet ( true ) ; struct . runningExperimentCount = iprot . readI32 ( ) ; struct . setRunningExperimentCountIsSet ( true ) ; { org . apache . thrift . protocol . TList _list70 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . allExperiments = new ArrayList < ExperimentSummaryModel > ( _list70 . size ) ; ExperimentSummaryModel _elem71 ; for ( int _i72 = 0 ; _i72 < _list70 . size ; ++ _i72 ) { _elem71 = new ExperimentSummaryModel ( ) ; _elem71 . read ( iprot ) ; struct . allExperiments . add ( _elem71 ) ; } } struct . setAllExperimentsIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . cancelledExperimentCount = iprot . readI32 ( ) ; struct . setCancelledExperimentCountIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list73 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . completedExperiments = new ArrayList < ExperimentSummaryModel > ( _list73 . size ) ; ExperimentSummaryModel _elem74 ; for ( int _i75 = 0 ; _i75 < _list73 . size ; ++ _i75 ) { _elem74 = new ExperimentSummaryModel ( ) ; _elem74 . read ( iprot ) ; struct . completedExperiments . add ( _elem74 ) ; } } struct . setCompletedExperimentsIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list76 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . failedExperiments = new ArrayList < ExperimentSummaryModel > ( _list76 . size ) ; ExperimentSummaryModel _elem77 ; for ( int _i78 = 0 ; _i78 < _list76 . size ; ++ _i78 ) { _elem77 = new ExperimentSummaryModel ( ) ; _elem77 . read ( iprot ) ; struct . failedExperiments . add ( _elem77 ) ; } } struct . setFailedExperimentsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list79 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . cancelledExperiments = new ArrayList < ExperimentSummaryModel > ( _list79 . size ) ; ExperimentSummaryModel _elem80 ; for ( int _i81 = 0 ; _i81 < _list79 . size ; ++ _i81 ) { _elem80 = new ExperimentSummaryModel ( ) ; _elem80 . read ( iprot ) ; struct . cancelledExperiments . add ( _elem80 ) ; } } struct . setCancelledExperimentsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list82 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . createdExperiments = new ArrayList < ExperimentSummaryModel > ( _list82 . size ) ; ExperimentSummaryModel _elem83 ; for ( int _i84 = 0 ; _i84 < _list82 . size ; ++ _i84 ) { _elem83 = new ExperimentSummaryModel ( ) ; _elem83 . read ( iprot ) ; struct . createdExperiments . add ( _elem83 ) ; } } struct . setCreatedExperimentsIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { { org . apache . thrift . protocol . TList _list85 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . runningExperiments = new ArrayList < ExperimentSummaryModel > ( _list85 . size ) ; ExperimentSummaryModel _elem86 ; for ( int _i87 = 0 ; _i87 < _list85 . size ; ++ _i87 ) { _elem86 = new ExperimentSummaryModel ( ) ; _elem86 . read ( iprot ) ; struct . runningExperiments . add ( _elem86 ) ; } } struct . setRunningExperimentsIsSet ( true ) ; } }",Smelly
" public final boolean invoke ( Environment env , InvokeContext context ) throws Exception { getLogger ( ) . warn ( ""Invoke on NullNode at "" + getLocation ( ) ) ; return false ; }",No
 void onChangedSubscriptions ( ChangedSubscriptionsEvent event ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void run ( ) { QuerySchedulingInfo query ; while ( ! isStopped && ! Thread . currentThread ( ) . isInterrupted ( ) ) { try { query = queryQueue . take ( ) ; } catch ( InterruptedException e ) { LOG . warn ( e . getMessage ( ) , e ) ; break ; } int maxAvailable = getResourceCalculator ( ) . computeAvailableContainers ( getMaximumResourceCapability ( ) , getQMMinimumResourceCapability ( ) ) ; if ( assignedQueryMasterMap . size ( ) >= Math . floor ( maxAvailable * MAXIMUM_RUNNING_QM_RATE ) ) { queryQueue . add ( query ) ; synchronized ( this ) { try { this . wait ( 1000 ) ; } catch ( InterruptedException e ) { if ( ! isStopped ) { LOG . fatal ( e . getMessage ( ) , e ) ; return ; } } } } else { QueryInfo queryInfo = getQueryInfo ( query . getQueryId ( ) ) ; List < AllocationResourceProto > allocation = reserve ( query . getQueryId ( ) , createQMResourceRequest ( queryInfo ) ) ; if ( allocation . size ( ) == 0 ) { queryQueue . add ( query ) ; LOG . info ( ""No Available Resources for QueryMaster :"" + queryInfo . getQueryId ( ) + "","" + queryInfo ) ; synchronized ( this ) { try { this . wait ( 100 ) ; } catch ( InterruptedException e ) { LOG . fatal ( e ) ; } } } else { try { boolean started = startQuery ( query . getQueryId ( ) , allocation . get ( 0 ) ) ; if ( ! started ) { queryQueue . put ( query ) ; } else { assignedQueryMasterMap . put ( query . getQueryId ( ) , allocation . get ( 0 ) . getWorkerId ( ) ) ; } } catch ( Throwable t ) { LOG . fatal ( ""Exception during query startup:"" , t ) ; masterContext . getQueryJobManager ( ) . stopQuery ( query . getQueryId ( ) ) ; } } } LOG . info ( ""Running Queries: "" + assignedQueryMasterMap . size ( ) ) ; } }",Smelly
" protected RouteBuilder createRouteBuilder ( ) { return new RouteBuilder ( ) { public void configure ( ) { TidyMarkupDataFormat dataFormat = new TidyMarkupDataFormat ( String . class ) ; from ( ""direct:start"" ) . unmarshal ( dataFormat ) . to ( ""mock:result"" ) ; } } ; }",No
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . choose ( values ( ""name"" ) ) . option ( ""marko"" , out ( ) ) . option ( none , in ( ) ) , __ . choose ( values ( ""name"" ) ) . option ( ""marko"" , in ( ) ) . option ( none , out ( ) ) , __ . choose ( values ( ""name"" ) ) . option ( ""josh"" , out ( ) ) . option ( none , in ( ) ) , __ . choose ( out ( ""knows"" ) . is ( P . gt ( 0 ) ) , out ( ""knows"" ) , out ( ""knows"" ) ) , __ . choose ( out ( ""knows"" ) . is ( P . gt ( 0 ) ) , out ( ""knows"" ) , out ( ""created"" ) ) , __ . choose ( out ( ""knows"" ) . is ( P . gt ( 0 ) ) , out ( ""knows"" ) ) ) ; }",Smelly
" public static void main ( final String [ ] args ) throws Exception { System . exit ( ToolRunner . run ( new AggregatorsBenchmark ( ) , args ) ) ; }",Smelly
" public void handleOutput ( List < GenericValue > results , Map < String , Object > context , FlexibleMapAccessor < Object > listAcsr ) { listAcsr . put ( context , results ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public static SubQueryExprProcessor getSubQueryExprProcessor ( ) { return new SubQueryExprProcessor ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , GcCycleStats struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . started = iprot . readI64 ( ) ; struct . setStartedIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . finished = iprot . readI64 ( ) ; struct . setFinishedIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . candidates = iprot . readI64 ( ) ; struct . setCandidatesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . inUse = iprot . readI64 ( ) ; struct . setInUseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . deleted = iprot . readI64 ( ) ; struct . setDeletedIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . errors = iprot . readI64 ( ) ; struct . setErrorsIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public static void main ( String [ ] args ) { if ( args . length > 0 ) { System . err . println ( ""Usage: SynchronizeAll"" ) ; System . exit ( 1 ) ; } try { SynchronizeAll synchronizeAll = new SynchronizeAll ( ) ; synchronizeAll . execute ( ) ; System . err . println ( ""Successfully synchronized all agents"" ) ; } catch ( ManifoldCFException e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } }",No
" public void testDisableSomeButtons ( ) throws Exception { List left = new ArrayList ( ) ; left . add ( ""Left2"" ) ; List right = new ArrayList ( ) ; right . add ( ""Right2"" ) ; List leftVal = new ArrayList ( ) ; leftVal . add ( ""Left1"" ) ; leftVal . add ( ""Left2"" ) ; leftVal . add ( ""Left3"" ) ; List rightVal = new ArrayList ( ) ; rightVal . add ( ""Right1"" ) ; rightVal . add ( ""Right2"" ) ; rightVal . add ( ""Right3"" ) ; TestAction testaction = ( TestAction ) action ; testaction . setCollection ( left ) ; testaction . setList2 ( right ) ; testaction . setCollection2 ( leftVal ) ; testaction . setList3 ( rightVal ) ; OptionTransferSelectTag tag = new OptionTransferSelectTag ( ) ; tag . setPageContext ( pageContext ) ; tag . setName ( ""collection"" ) ; tag . setId ( ""id"" ) ; tag . setList ( ""collection2"" ) ; tag . setSize ( ""20"" ) ; tag . setMultiple ( ""true"" ) ; tag . setEmptyOption ( ""true"" ) ; tag . setDoubleName ( ""list2"" ) ; tag . setDoubleList ( ""list3"" ) ; tag . setDoubleId ( ""doubleId"" ) ; tag . setDoubleSize ( ""20"" ) ; tag . setMultiple ( ""true"" ) ; tag . setDoubleEmptyOption ( ""true"" ) ; tag . setAllowAddAllToLeft ( ""false"" ) ; tag . setAllowAddAllToRight ( ""false"" ) ; tag . setAllowAddToLeft ( ""true"" ) ; tag . setAllowAddToRight ( ""true"" ) ; tag . setAllowSelectAll ( ""false"" ) ; tag . setAddAllToLeftLabel ( ""All Left"" ) ; tag . setAddAllToRightLabel ( ""All Right"" ) ; tag . setAddToLeftLabel ( ""Left"" ) ; tag . setAddToRightLabel ( ""Right"" ) ; tag . setSelectAllLabel ( ""Select All"" ) ; tag . setLeftTitle ( ""Title Left"" ) ; tag . setRightTitle ( ""Title Right"" ) ; tag . setButtonCssClass ( ""buttonCssClass"" ) ; tag . setButtonCssStyle ( ""buttonCssStyle"" ) ; tag . setHeaderKey ( ""Header Key"" ) ; tag . setHeaderValue ( ""Header Value"" ) ; tag . setDoubleHeaderKey ( ""Double Header Key"" ) ; tag . setDoubleHeaderValue ( ""Double Header Value"" ) ; tag . setAddToLeftOnclick ( ""alert('Moving Left')"" ) ; tag . setAddToRightOnclick ( ""alert('Moving Right')"" ) ; tag . doStartTag ( ) ; tag . doEndTag ( ) ; verify ( OptionTransferSelectTagTest . class . getResource ( ""optiontransferselect-7.txt"" ) ) ; }",Smelly
" public void eval ( ) { out . value = org . apache . drill . exec . expr . fn . impl . HashHelper . hash64 ( in . value , 0 ) ; }",No
" public void testGetWorkspaceName ( ) { if ( workspaceName == null ) { assertNotNull ( sessionInfo . getWorkspaceName ( ) ) ; } else { assertEquals ( workspaceName , sessionInfo . getWorkspaceName ( ) ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static long getStartTime ( ) { if ( startTime == 0 ) { synchronized ( PatternParser . class ) { try { startTime = ManagementFactory . getRuntimeMXBean ( ) . getStartTime ( ) ; } catch ( Throwable t ) { startTime = System . currentTimeMillis ( ) ; } } } return startTime ; },No
 RebalanceProtocol getProtocol ( ) { return protocol ; },Smelly
" public void testProxySettings ( ) throws Exception { Proxy proxy = new Proxy ( Proxy . Type . SOCKS , new InetSocketAddress ( PROXY_HOST , PROXY_PORT ) ) ; sc . setProxy ( proxy ) ; sc . connect ( DEST_HOST , DEST_PORT ) ; assertTrue ( sc . isConnected ( ) ) ; sc . disconnect ( ) ; }",Smelly
" protected ClientCsdlReturnType doDeserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { final ClientCsdlReturnType returnType = new ClientCsdlReturnType ( ) ; for ( ; jp . getCurrentToken ( ) != JsonToken . END_OBJECT ; jp . nextToken ( ) ) { final JsonToken token = jp . getCurrentToken ( ) ; if ( token == JsonToken . FIELD_NAME ) { if ( ""Type"" . equals ( jp . getCurrentName ( ) ) ) { String metadataTypeName = jp . nextTextValue ( ) ; if ( metadataTypeName . startsWith ( ""Collection("" ) ) { returnType . setType ( metadataTypeName . substring ( metadataTypeName . indexOf ( ""("" ) + 1 , metadataTypeName . length ( ) - 1 ) ) ; returnType . setCollection ( true ) ; } else { returnType . setType ( metadataTypeName ) ; returnType . setCollection ( false ) ; } } else if ( ""Nullable"" . equals ( jp . getCurrentName ( ) ) ) { returnType . setNullable ( BooleanUtils . toBoolean ( jp . nextTextValue ( ) ) ) ; } else if ( ""MaxLength"" . equals ( jp . getCurrentName ( ) ) ) { final String maxLenght = jp . nextTextValue ( ) ; returnType . setMaxLength ( maxLenght . equalsIgnoreCase ( ""max"" ) ? Integer . MAX_VALUE : Integer . valueOf ( maxLenght ) ) ; } else if ( ""Precision"" . equals ( jp . getCurrentName ( ) ) ) { returnType . setPrecision ( Integer . valueOf ( jp . nextTextValue ( ) ) ) ; } else if ( ""Scale"" . equals ( jp . getCurrentName ( ) ) ) { final String scale = jp . nextTextValue ( ) ; returnType . setScale ( scale . equalsIgnoreCase ( ""variable"" ) ? 0 : Integer . valueOf ( scale ) ) ; } else if ( ""SRID"" . equals ( jp . getCurrentName ( ) ) ) { final String srid = jp . nextTextValue ( ) ; if ( srid != null ) { returnType . setSrid ( SRID . valueOf ( srid ) ) ; } } } } return returnType ; }",Smelly
" public static Map < String , String > createSslProperties ( ) { final Map < String , String > map = new HashMap < > ( ) ; map . put ( StandardSSLContextService . KEYSTORE . getName ( ) , ""src/test/resources/keystore.jks"" ) ; map . put ( StandardSSLContextService . KEYSTORE_PASSWORD . getName ( ) , ""passwordpassword"" ) ; map . put ( StandardSSLContextService . KEYSTORE_TYPE . getName ( ) , ""JKS"" ) ; map . put ( StandardSSLContextService . TRUSTSTORE . getName ( ) , ""src/test/resources/truststore.jks"" ) ; map . put ( StandardSSLContextService . TRUSTSTORE_PASSWORD . getName ( ) , ""passwordpassword"" ) ; map . put ( StandardSSLContextService . TRUSTSTORE_TYPE . getName ( ) , ""JKS"" ) ; return map ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void testWriteRetryValidRequest ( ) throws Throwable { elasticsearchIOTestCommon . setPipeline ( pipeline ) ; elasticsearchIOTestCommon . testWriteRetryValidRequest ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void visit ( State state , Environment env , Properties props ) throws Exception { Connector conn = env . getConnector ( ) ; WalkingSecurity ws = new WalkingSecurity ( state , env ) ; String action = props . getProperty ( ""task"" , ""toggle"" ) ; String perm = props . getProperty ( ""perm"" , ""random"" ) ; String targetUser = WalkingSecurity . get ( state , env ) . getSysUserName ( ) ; SystemPermission sysPerm ; if ( perm . equals ( ""random"" ) ) { Random r = new Random ( ) ; int i = r . nextInt ( SystemPermission . values ( ) . length ) ; sysPerm = SystemPermission . values ( ) [ i ] ; } else sysPerm = SystemPermission . valueOf ( perm ) ; boolean hasPerm = ws . hasSystemPermission ( targetUser , sysPerm ) ; if ( ! ""take"" . equals ( action ) && ! ""give"" . equals ( action ) ) { if ( hasPerm != conn . securityOperations ( ) . hasSystemPermission ( targetUser , sysPerm ) ) throw new AccumuloException ( ""Test framework and accumulo are out of sync!"" ) ; if ( hasPerm ) action = ""take"" ; else action = ""give"" ; } if ( ""take"" . equals ( action ) ) { try { conn . securityOperations ( ) . revokeSystemPermission ( targetUser , sysPerm ) ; } catch ( AccumuloSecurityException ae ) { switch ( ae . getSecurityErrorCode ( ) ) { case GRANT_INVALID : if ( sysPerm . equals ( SystemPermission . GRANT ) ) return ; throw new AccumuloException ( ""Got GRANT_INVALID when not dealing with GRANT"" , ae ) ; case PERMISSION_DENIED : throw new AccumuloException ( ""Test user doesn't have root"" , ae ) ; case USER_DOESNT_EXIST : throw new AccumuloException ( ""System user doesn't exist and they SHOULD."" , ae ) ; default : throw new AccumuloException ( ""Got unexpected exception"" , ae ) ; } } ws . revokeSystemPermission ( targetUser , sysPerm ) ; } else if ( ""give"" . equals ( action ) ) { try { conn . securityOperations ( ) . grantSystemPermission ( targetUser , sysPerm ) ; } catch ( AccumuloSecurityException ae ) { switch ( ae . getSecurityErrorCode ( ) ) { case GRANT_INVALID : if ( sysPerm . equals ( SystemPermission . GRANT ) ) return ; throw new AccumuloException ( ""Got GRANT_INVALID when not dealing with GRANT"" , ae ) ; case PERMISSION_DENIED : throw new AccumuloException ( ""Test user doesn't have root"" , ae ) ; case USER_DOESNT_EXIST : throw new AccumuloException ( ""System user doesn't exist and they SHOULD."" , ae ) ; default : throw new AccumuloException ( ""Got unexpected exception"" , ae ) ; } } ws . grantSystemPermission ( targetUser , sysPerm ) ; } }",Smelly
 private List < Function > getFunctions ( Options opt ) { List < Function > functions = new ArrayList < > ( ) ; for ( Object o : opt . argObjects ( ) ) { if ( o instanceof Function ) { functions . add ( ( Function ) o ) ; } else { functions = null ; break ; } } return functions ; },No
" public void remove ( ) { if ( changes > initialChanges ) throw new ConcurrentModificationException ( ) ; Key moved = removeFrom ( index - 1 ) ; if ( moved != null ) movedKeys . add ( moved ) ; if ( size == 0 ) container . emptied ( ) ; if ( size < 0 ) throw new BrokenException ( ""BROKEN"" ) ; showkeys ( ) ; }",No
" public void completed ( TreeRequest request ) { try { blockUntilRunning ( ) ; } catch ( InterruptedException e ) { throw new AssertionError ( e ) ; } requests . remove ( request ) ; logger . info ( ""{} completed successfully: {} outstanding."" , request , requests . size ( ) ) ; if ( ! requests . isEmpty ( ) ) return ; logger . info ( ""Session "" + getName ( ) + "" completed successfully."" ) ; AntiEntropyService . this . sessions . remove ( getName ( ) ) ; completed . signalAll ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void testAddingGroup ( ) { try { List < User > users = userDao . get ( ""first"" , 0 , 10 , ""lastname"" , false , 1L ) ; log . debug ( ""[result]"" + users . size ( ) ) ; log . debug ( ""[records]"" + users ) ; } catch ( Exception err ) { log . error ( ""[testAddingGroup]"" , err ) ; } }",No
 public void handle ( CallableEvent event ) { try { event . call ( ) ; event . getCallback ( ) . onSuccess ( null ) ; } catch ( Exception e ) { event . getCallback ( ) . onFailure ( e ) ; } },No
" public void handleMessage ( SoapMessage message ) throws Fault { BindingOperationInfo bop = message . getExchange ( ) . getBindingOperationInfo ( ) ; if ( bop == null ) { return ; } if ( bop . isUnwrapped ( ) ) { bop = bop . getWrappedOperation ( ) ; } boolean client = isRequestor ( message ) ; BindingMessageInfo bmi = client ? bop . getOutput ( ) : bop . getInput ( ) ; if ( bmi == null ) { return ; } SoapBodyInfo sbi = bmi . getExtensor ( SoapBodyInfo . class ) ; if ( sbi == null || sbi . getAttachments ( ) == null || sbi . getAttachments ( ) . size ( ) == 0 ) { return ; } Set < Integer > foundAtts = new HashSet < Integer > ( ) ; MessageContentsList inObjects = MessageContentsList . getContentsList ( message ) ; for ( MessagePartInfo mpi : sbi . getAttachments ( ) ) { String partName = mpi . getConcreteName ( ) . getLocalPart ( ) ; String start = partName + ""="" ; boolean found = false ; if ( foundAtts . contains ( mpi . getIndex ( ) ) ) { continue ; } foundAtts . add ( mpi . getIndex ( ) ) ; for ( Attachment a : message . getAttachments ( ) ) { if ( a . getId ( ) . startsWith ( start ) ) { DataHandler dh = a . getDataHandler ( ) ; String ct = dh . getContentType ( ) ; Object o = null ; Class < ? > typeClass = mpi . getTypeClass ( ) ; if ( DataHandler . class . isAssignableFrom ( typeClass ) ) { o = dh ; } else if ( String . class . isAssignableFrom ( typeClass ) ) { try { o = dh . getContent ( ) ; } catch ( IOException e ) { throw new Fault ( e ) ; } } else if ( byte [ ] . class . isAssignableFrom ( typeClass ) ) { try { o = IOUtils . readBytesFromStream ( dh . getInputStream ( ) ) ; } catch ( IOException e ) { throw new Fault ( e ) ; } } else if ( ct . startsWith ( ""image/"" ) ) { try { o = ImageIO . read ( dh . getInputStream ( ) ) ; } catch ( IOException e ) { throw new Fault ( e ) ; } } else if ( ct . startsWith ( ""text/xml"" ) || ct . startsWith ( ""application/xml"" ) ) { try { o = new StreamSource ( dh . getInputStream ( ) ) ; } catch ( IOException e ) { throw new Fault ( e ) ; } } else { o = dh ; } inObjects . put ( mpi , o ) ; found = true ; break ; } } if ( ! found ) { inObjects . put ( mpi , null ) ; } } }",Smelly
" public Dynamic addFilter ( String filterName , String className ) { return null ; }",No
" public static Expression createConditionedAnnotationTypeExpression ( Token match , Token comp , Expression arg , List < RutaCondition > cs ) { int bounds [ ] = getBounds ( match ) ; int end = bounds [ 1 ] ; if ( cs != null && ! cs . isEmpty ( ) ) { end = cs . get ( cs . size ( ) - 1 ) . sourceEnd ( ) ; } else if ( arg != null ) { end = arg . sourceEnd ( ) ; } FeatureMatchExpression reference = new FeatureMatchExpression ( bounds [ 0 ] , end , match , comp , arg ) ; return new ConditionedAnnotationTypeExpression ( bounds [ 0 ] , end , reference , arg , cs ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public boolean isConcrete ( ) { return true ; },No
" public void testSetCoprocessor ( ) throws IOException { String propertyKey = ""propertyKey"" ; List < CoprocessorDescriptor > cps = new ArrayList < > ( ) ; for ( String className : Arrays . asList ( ""className0"" , ""className1"" , ""className2"" ) ) { String path = ""path"" ; int priority = Math . abs ( className . hashCode ( ) ) ; String propertyValue = ""propertyValue"" ; cps . add ( CoprocessorDescriptorBuilder . newBuilder ( className ) . setJarPath ( path ) . setPriority ( priority ) . setProperty ( propertyKey , propertyValue ) . build ( ) ) ; } TableDescriptor tableDescriptor = TableDescriptorBuilder . newBuilder ( TableName . valueOf ( name . getMethodName ( ) ) ) . setCoprocessors ( cps ) . build ( ) ; for ( CoprocessorDescriptor cp : cps ) { boolean match = false ; for ( CoprocessorDescriptor that : tableDescriptor . getCoprocessorDescriptors ( ) ) { if ( cp . getClassName ( ) . equals ( that . getClassName ( ) ) ) { assertEquals ( cp . getJarPath ( ) . get ( ) , that . getJarPath ( ) . get ( ) ) ; assertEquals ( cp . getPriority ( ) , that . getPriority ( ) ) ; assertEquals ( cp . getProperties ( ) . size ( ) , that . getProperties ( ) . size ( ) ) ; assertEquals ( cp . getProperties ( ) . get ( propertyKey ) , that . getProperties ( ) . get ( propertyKey ) ) ; match = true ; break ; } } if ( ! match ) { fail ( ""expect:"" + cp + "", actual:"" + tableDescriptor . getCoprocessorDescriptors ( ) ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TAuthenticationTokenIdentifier struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . principal = iprot . readString ( ) ; struct . setPrincipalIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . keyId = iprot . readI32 ( ) ; struct . setKeyIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . issueDate = iprot . readI64 ( ) ; struct . setIssueDateIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . expirationDate = iprot . readI64 ( ) ; struct . setExpirationDateIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . instanceId = iprot . readString ( ) ; struct . setInstanceIdIsSet ( true ) ; } }",Smelly
" public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { final int len = in . readInt ( ) ; final byte [ ] bytes = new byte [ len ] ; in . readFully ( bytes ) ; readFromStream ( new ByteArrayInputStream ( bytes ) ) ; }",No
" public void addRuleInstances ( Digester digester ) { String pattern = prefix ; for ( int i = 0 ; i < MAX_NESTED_REALM_LEVELS ; i ++ ) { if ( i > 0 ) { pattern += ""/"" ; } pattern += ""Realm"" ; digester . addObjectCreate ( pattern , null , ""className"" ) ; digester . addSetProperties ( pattern ) ; if ( i == 0 ) { digester . addSetNext ( pattern , ""setRealm"" , ""org.apache.catalina.Realm"" ) ; } else { digester . addSetNext ( pattern , ""addRealm"" , ""org.apache.catalina.Realm"" ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
 T build ( ) ;,No
" public void setStatements ( Statements statements ) { statements . setLockCreateStatement ( ""LOCK TABLE "" + statements . getFullLockTableName ( ) + "" IN EXCLUSIVE MODE"" ) ; statements . setLongDataType ( ""DECIMAL"" ) ; statements . setSequenceDataType ( ""DECIMAL"" ) ; super . setStatements ( statements ) ; }",Smelly
" public void setLastEventSent ( TezEvent lastEventSent ) { writeLock . lock ( ) ; try { if ( ! EnumSet . of ( TaskAttemptStateInternal . FAIL_IN_PROGRESS , TaskAttemptStateInternal . KILL_IN_PROGRESS , TaskAttemptStateInternal . FAILED , TaskAttemptStateInternal . KILLED , TaskAttemptStateInternal . SUCCEEDED ) . contains ( getInternalState ( ) ) ) { DataEventDependencyInfo info = new DataEventDependencyInfo ( lastEventSent . getEventReceivedTime ( ) , lastEventSent . getSourceInfo ( ) . getTaskAttemptID ( ) ) ; if ( appendNextDataEvent ) { appendNextDataEvent = false ; lastDataEvents . add ( info ) ; } else { lastDataEvents . set ( lastDataEvents . size ( ) - 1 , info ) ; } } } finally { writeLock . unlock ( ) ; } }",Smelly
 public boolean isPayloadAvailable ( ) { return ( ( TermPositions ) termDocs ) . isPayloadAvailable ( ) ; },Smelly
 public void setQueryStr ( String queryStr ) { this . queryStr = queryStr ; },No
 public InputStream getProtobufBodyAsIS ( ) { return new ByteBufInputStream ( pBody ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , ExperimentSummaryModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . experimentId = iprot . readString ( ) ; struct . setExperimentIdIsSet ( true ) ; struct . projectId = iprot . readString ( ) ; struct . setProjectIdIsSet ( true ) ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . userName = iprot . readString ( ) ; struct . setUserNameIsSet ( true ) ; struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . executionId = iprot . readString ( ) ; struct . setExecutionIdIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . resourceHostId = iprot . readString ( ) ; struct . setResourceHostIdIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . experimentStatus = iprot . readString ( ) ; struct . setExperimentStatusIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . statusUpdateTime = iprot . readI64 ( ) ; struct . setStatusUpdateTimeIsSet ( true ) ; } }",Smelly
 public List < StageResult > getStageResults ( ) { return stageResults ; },No
" public void whenClassAndFeatureNotFoundAndHasMembersOfType ( ) throws Exception { final ApplicationFeatureId classFeature = ApplicationFeatureId . newClass ( ""com.mycompany.Bar"" ) ; context . checking ( new Expectations ( ) { { oneOf ( mockApplicationFeatureRepository ) . findFeature ( classFeature ) ; will ( returnValue ( mockApplicationFeature ) ) ; allowing ( mockApplicationFeature ) . membersOf ( ApplicationMemberType . ACTION ) ; will ( returnValue ( new TreeSet < ApplicationFeatureId > ( ) { { add ( ApplicationFeatureId . newMember ( ""com.mycompany.Bar#foo"" ) ) ; } } ) ) ; } } ) ; assertThat ( ApplicationFeatureId . Predicates . isClassContaining ( ApplicationMemberType . ACTION , mockApplicationFeatureRepository ) . apply ( classFeature ) , is ( true ) ) ; }",Smelly
" public static FileProcessStrategy createFileProcessStrategy ( Map < String , Object > params ) { boolean isDelete = params . get ( ""delete"" ) != null ; boolean isLock = params . get ( ""lock"" ) != null ; String moveNamePrefix = ( String ) params . get ( ""moveNamePrefix"" ) ; String moveNamePostfix = ( String ) params . get ( ""moveNamePostfix"" ) ; String preMoveNamePrefix = ( String ) params . get ( ""preMoveNamePrefix"" ) ; String preMoveNamePostfix = ( String ) params . get ( ""preMoveNamePostfix"" ) ; Expression expression = ( Expression ) params . get ( ""expression"" ) ; Expression preMoveExpression = ( Expression ) params . get ( ""preMoveExpression"" ) ; boolean move = moveNamePrefix != null || moveNamePostfix != null ; boolean preMove = preMoveNamePrefix != null || preMoveNamePostfix != null ; if ( params . containsKey ( ""noop"" ) ) { return new NoOpFileProcessStrategy ( isLock ) ; } else if ( move || preMove ) { RenameFileProcessStrategy strategy = new RenameFileProcessStrategy ( isLock ) ; if ( move ) { strategy . setCommitRenamer ( new DefaultFileRenamer ( moveNamePrefix , moveNamePostfix ) ) ; } if ( preMove ) { strategy . setBeginRenamer ( new DefaultFileRenamer ( preMoveNamePrefix , preMoveNamePostfix ) ) ; } return strategy ; } else if ( expression != null || preMoveExpression != null ) { RenameFileProcessStrategy strategy = new RenameFileProcessStrategy ( isLock ) ; if ( expression != null ) { FileExpressionRenamer renamer = new FileExpressionRenamer ( ) ; renamer . setExpression ( expression ) ; strategy . setCommitRenamer ( renamer ) ; } if ( preMoveExpression != null ) { FileExpressionRenamer renamer = new FileExpressionRenamer ( ) ; renamer . setExpression ( preMoveExpression ) ; strategy . setBeginRenamer ( renamer ) ; } return strategy ; } else if ( isDelete ) { return new DeleteFileProcessStrategy ( isLock ) ; } else { return new RenameFileProcessStrategy ( isLock ) ; } }",Smelly
" public void setUp ( ) throws Exception { FileBlobStore store = new FileBlobStore ( ""target/temp"" ) ; store . setBlockSize ( 128 ) ; store . setBlockSizeMin ( 48 ) ; this . store = store ; }",No
 public byte getTag ( ) { return 15 ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void addBinary ( Binary binary ) { String str = binary . toStringUsingUTF8 ( ) ; parent . add ( str ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public String generateProcessorId ( Config config ) { return UUID . randomUUID ( ) . toString ( ) ; },No
" public void testExplainAllAttributesSemiJoinUnionCorrelate ( ) { CalciteAssert . that ( ) . with ( CalciteConnectionProperty . LEX , Lex . JAVA ) . with ( CalciteConnectionProperty . FORCE_DECORRELATE , false ) . withSchema ( ""s"" , new ReflectiveSchema ( new JdbcTest . HrSchema ( ) ) ) . query ( ""select deptno, name from depts where deptno in (\n"" + "" select e.deptno from emps e where exists (select 1 from depts d where d.deptno=e.deptno)\n"" + "" union select e.deptno from emps e where e.salary > 10000) "" ) . explainMatches ( ""including all attributes "" , CalciteAssert . checkResultContains ( ""EnumerableCorrelate"" ) ) ; }",No
 void setForce ( final boolean force ) ;,No
" private void assertCorrectness ( ClientMtTable2 table2 ) { ClientMtTable1 table1 = table2 . getTable1 ( ) ; assertEquals ( GLOBAL_ATTRIBUTE2 , table2 . getGlobalAttribute ( ) ) ; assertEquals ( GLOBAL_ATTRIBUTE1 , table1 . getGlobalAttribute ( ) ) ; assertEquals ( oldDate , table1 . getOldDateAttribute ( ) ) ; assertEquals ( localDate , table1 . getDateAttribute ( ) ) ; assertEquals ( localTime , table1 . getTimeAttribute ( ) ) ; assertEquals ( localDateTime , table1 . getTimestampAttribute ( ) ) ; }",Smelly
" public BaseStatusServlet statusServlet ( ) { return new BaseStatusServlet ( ""/cachez"" ) { @ Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { PrintWriter writer = response . getWriter ( ) ; writer . println ( ""<h1>Cache Information</h1>"" ) ; appendSummaryHtml ( writer ) ; } } ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void close ( ) throws SQLException { },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Operator struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . operatorId = iprot . readString ( ) ; struct . setOperatorIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . operatorType = OperatorType . findByValue ( iprot . readI32 ( ) ) ; struct . setOperatorTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map36 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . operatorAttributes = new HashMap < String , String > ( 2 * _map36 . size ) ; for ( int _i37 = 0 ; _i37 < _map36 . size ; ++ _i37 ) { String _key38 ; String _val39 ; _key38 = iprot . readString ( ) ; _val39 = iprot . readString ( ) ; struct . operatorAttributes . put ( _key38 , _val39 ) ; } } struct . setOperatorAttributesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map40 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . operatorCounters = new HashMap < String , Long > ( 2 * _map40 . size ) ; for ( int _i41 = 0 ; _i41 < _map40 . size ; ++ _i41 ) { String _key42 ; long _val43 ; _key42 = iprot . readString ( ) ; _val43 = iprot . readI64 ( ) ; struct . operatorCounters . put ( _key42 , _val43 ) ; } } struct . setOperatorCountersIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . done = iprot . readBool ( ) ; struct . setDoneIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . started = iprot . readBool ( ) ; struct . setStartedIsSet ( true ) ; } }",Smelly
 public static void main ( String [ ] args ) throws Exception { try { ResetHitCountsTask task = new ResetHitCountsTask ( ) ; task . init ( ) ; task . run ( ) ; System . exit ( 0 ) ; } catch ( WebloggerException ex ) { ex . printStackTrace ( ) ; System . exit ( - 1 ) ; } },No
" private UrlRewriteFilterContentDescriptor getRewriteFilterConfig ( String filterName , MimeType mimeType ) { UrlRewriteFilterContentDescriptor filterContentConfig = null ; UrlRewriteRulesDescriptor rewriteConfig = rewriter . getConfig ( ) ; if ( rewriteConfig != null ) { UrlRewriteFilterDescriptor filterConfig = rewriteConfig . getFilter ( filterName ) ; if ( filterConfig != null ) { filterContentConfig = filterConfig . getContent ( mimeType ) ; } } return filterContentConfig ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected void setEncryptionKey ( EncryptionKey encryptionKey , EncTicketPartContainer encTicketPartContainer ) { encTicketPartContainer . getEncTicketPart ( ) . setKey ( encryptionKey ) ; }",No
" static String buildNavPath ( UriHelper helper , EdmEntityType rootType , LinkedList < UriResourceNavigation > navigations , boolean includeLastPredicates ) throws SerializerException { if ( navigations . isEmpty ( ) ) { return null ; } StringBuilder sb = new StringBuilder ( ) ; boolean containsTarget = false ; EdmEntityType type = rootType ; for ( UriResourceNavigation nav : navigations ) { String name = nav . getProperty ( ) . getName ( ) ; EdmNavigationProperty property = type . getNavigationProperty ( name ) ; if ( property . containsTarget ( ) ) { containsTarget = true ; } type = nav . getProperty ( ) . getType ( ) ; } if ( containsTarget ) { for ( int i = 0 ; i < navigations . size ( ) ; i ++ ) { UriResourceNavigation nav = navigations . get ( i ) ; if ( i > 0 ) { sb . append ( ""/"" ) ; } sb . append ( nav . getProperty ( ) . getName ( ) ) ; boolean skipKeys = false ; if ( navigations . size ( ) == i + 1 && ! includeLastPredicates ) { skipKeys = true ; } if ( ! skipKeys && ! nav . getKeyPredicates ( ) . isEmpty ( ) ) { sb . append ( ""("" ) ; sb . append ( helper . buildContextURLKeyPredicate ( nav . getKeyPredicates ( ) ) ) ; sb . append ( "")"" ) ; } if ( nav . getTypeFilterOnCollection ( ) != null ) { sb . append ( ""/"" ) . append ( nav . getTypeFilterOnCollection ( ) . getFullQualifiedName ( ) . getFullQualifiedNameAsString ( ) ) ; } else if ( nav . getTypeFilterOnEntry ( ) != null ) { sb . append ( ""/"" ) . append ( nav . getTypeFilterOnEntry ( ) . getFullQualifiedName ( ) . getFullQualifiedNameAsString ( ) ) ; } } } return sb . toString ( ) ; }",Smelly
" public void onEviction ( Object key , CacheLine < V > value ) { ExecutionPool . removePulse ( value ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ColumnStatisticsDesc struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . isTblLevel = iprot . readBool ( ) ; struct . setIsTblLevelIsSet ( true ) ; struct . dbName = iprot . readString ( ) ; struct . setDbNameIsSet ( true ) ; struct . tableName = iprot . readString ( ) ; struct . setTableNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . partName = iprot . readString ( ) ; struct . setPartNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . lastAnalyzed = iprot . readI64 ( ) ; struct . setLastAnalyzedIsSet ( true ) ; } }",Smelly
" protected String toStringValues ( ) { return super . toStringValues ( ) + ""; where ="" + where . getFriendlyName ( ) ; }",No
" protected Token whole ( Token b , Token e ) { return tz . text . subSequence ( b . start - tz . text . start , e . start + e . length ( ) - tz . text . start ) ; }",No
" void add ( RangerAccessResource resource , CacheType cacheType ) ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ErrorModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . errorId = iprot . readString ( ) ; struct . setErrorIdIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . actualErrorMessage = iprot . readString ( ) ; struct . setActualErrorMessageIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . userFriendlyMessage = iprot . readString ( ) ; struct . setUserFriendlyMessageIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . transientOrPersistent = iprot . readBool ( ) ; struct . setTransientOrPersistentIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . rootCauseErrorIdList = new ArrayList < String > ( _list5 . size ) ; String _elem6 ; for ( int _i7 = 0 ; _i7 < _list5 . size ; ++ _i7 ) { _elem6 = iprot . readString ( ) ; struct . rootCauseErrorIdList . add ( _elem6 ) ; } } struct . setRootCauseErrorIdListIsSet ( true ) ; } }",Smelly
 public Collection < V > values ( ) { removeAllExpired ( now ( ) ) ; return super . values ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Table struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 13 ) ; if ( incoming . get ( 0 ) ) { struct . tableName = iprot . readString ( ) ; struct . setTableNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . dbName = iprot . readString ( ) ; struct . setDbNameIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . owner = iprot . readString ( ) ; struct . setOwnerIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . createTime = iprot . readI32 ( ) ; struct . setCreateTimeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . lastAccessTime = iprot . readI32 ( ) ; struct . setLastAccessTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . retention = iprot . readI32 ( ) ; struct . setRetentionIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . sd = new StorageDescriptor ( ) ; struct . sd . read ( iprot ) ; struct . setSdIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { { org . apache . thrift . protocol . TList _list201 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . partitionKeys = new ArrayList < FieldSchema > ( _list201 . size ) ; for ( int _i202 = 0 ; _i202 < _list201 . size ; ++ _i202 ) { FieldSchema _elem203 ; _elem203 = new FieldSchema ( ) ; _elem203 . read ( iprot ) ; struct . partitionKeys . add ( _elem203 ) ; } } struct . setPartitionKeysIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TMap _map204 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . parameters = new HashMap < String , String > ( 2 * _map204 . size ) ; for ( int _i205 = 0 ; _i205 < _map204 . size ; ++ _i205 ) { String _key206 ; String _val207 ; _key206 = iprot . readString ( ) ; _val207 = iprot . readString ( ) ; struct . parameters . put ( _key206 , _val207 ) ; } } struct . setParametersIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . viewOriginalText = iprot . readString ( ) ; struct . setViewOriginalTextIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . viewExpandedText = iprot . readString ( ) ; struct . setViewExpandedTextIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . tableType = iprot . readString ( ) ; struct . setTableTypeIsSet ( true ) ; } if ( incoming . get ( 12 ) ) { struct . privileges = new PrincipalPrivilegeSet ( ) ; struct . privileges . read ( iprot ) ; struct . setPrivilegesIsSet ( true ) ; } }",No
" public void testLoadValueVector ( ) throws Exception { final BufferAllocator allocator = RootAllocatorFactory . newRoot ( drillConfig ) ; final ValueVector fixedV = new IntVector ( MaterializedField . create ( ""ints"" , Types . required ( MinorType . INT ) ) , allocator ) ; final ValueVector varlenV = new VarCharVector ( MaterializedField . create ( ""chars"" , Types . required ( MinorType . VARCHAR ) ) , allocator ) ; final ValueVector nullableVarlenV = new NullableVarCharVector ( MaterializedField . create ( ""chars"" , Types . optional ( MinorType . VARCHAR ) ) , allocator ) ; final List < ValueVector > vectors = Lists . newArrayList ( fixedV , varlenV , nullableVarlenV ) ; for ( final ValueVector v : vectors ) { AllocationHelper . allocate ( v , 100 , 50 ) ; v . getMutator ( ) . generateTestData ( 100 ) ; } final WritableBatch writableBatch = WritableBatch . getBatchNoHV ( 100 , vectors , false ) ; final RecordBatchLoader batchLoader = new RecordBatchLoader ( allocator ) ; final ByteBuf [ ] byteBufs = writableBatch . getBuffers ( ) ; int bytes = 0 ; for ( int i = 0 ; i < byteBufs . length ; i ++ ) { bytes += byteBufs [ i ] . writerIndex ( ) ; } final DrillBuf byteBuf = allocator . buffer ( bytes ) ; int index = 0 ; for ( int i = 0 ; i < byteBufs . length ; i ++ ) { byteBufs [ i ] . readBytes ( byteBuf , index , byteBufs [ i ] . writerIndex ( ) ) ; index += byteBufs [ i ] . writerIndex ( ) ; } byteBuf . writerIndex ( bytes ) ; batchLoader . load ( writableBatch . getDef ( ) , byteBuf ) ; boolean firstColumn = true ; int recordCount = 0 ; for ( final VectorWrapper < ? > v : batchLoader ) { if ( firstColumn ) { firstColumn = false ; } else { System . out . print ( ""\t"" ) ; } System . out . print ( v . getField ( ) . getPath ( ) ) ; System . out . print ( ""["" ) ; System . out . print ( v . getField ( ) . getType ( ) . getMinorType ( ) ) ; System . out . print ( ""]"" ) ; } System . out . println ( ) ; for ( int r = 0 ; r < batchLoader . getRecordCount ( ) ; r ++ ) { boolean first = true ; recordCount ++ ; for ( final VectorWrapper < ? > v : batchLoader ) { if ( first ) { first = false ; } else { System . out . print ( ""\t"" ) ; } final ValueVector . Accessor accessor = v . getValueVector ( ) . getAccessor ( ) ; if ( v . getField ( ) . getType ( ) . getMinorType ( ) == TypeProtos . MinorType . VARCHAR ) { final Object obj = accessor . getObject ( r ) ; if ( obj != null ) { System . out . print ( accessor . getObject ( r ) ) ; } else { System . out . print ( ""NULL"" ) ; } } else { System . out . print ( accessor . getObject ( r ) ) ; } } if ( ! first ) { System . out . println ( ) ; } } assertEquals ( 100 , recordCount ) ; batchLoader . clear ( ) ; writableBatch . clear ( ) ; }",Smelly
" public void validate ( ) throws TException { if ( column_family == null ) { throw new TProtocolException ( ""Required field 'column_family' was not present! Struct: "" + toString ( ) ) ; } }",No
" public String toString ( ) { return ""ByteValueSemanticsProvider: "" + format ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 static boolean checkAndClose ( java . io . Closeable io ) { if ( io != null ) { try { io . close ( ) ; } catch ( IOException ioe ) { LOG . warn ( StringUtils . stringifyException ( ioe ) ) ; return false ; } } return true ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 protected DatasetGraphAccessor getDatasetUpdater ( ) { DatasetGraph dsg = TDBFactory . createDatasetGraph ( ) ; return DatasetAccessorFactory . make ( dsg ) ; },No
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . targets = in . readObject ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public static void main ( String [ ] args ) { if ( args . length != 2 && args . length != 1 && args . length != 0 ) { System . err . println ( ""Usage: ManifoldCFCombinedJettyRunner [<port> [<combined-war-path>]]"" ) ; System . exit ( 1 ) ; } if ( System . getProperty ( ManifoldCF . lcfConfigFileProperty ) == null ) System . setProperty ( ManifoldCF . lcfConfigFileProperty , ""./properties.xml"" ) ; try { ManifoldCF . initializeEnvironment ( ) ; IThreadContext tc = ThreadContextFactory . make ( ) ; File combinedWarPath = ManifoldCF . getFileProperty ( combinedWarPathProperty ) ; int jettyPort = ManifoldCF . getIntProperty ( jettyPortProperty , 8347 ) ; if ( args . length > 0 ) { try { jettyPort = Integer . parseInt ( args [ 0 ] ) ; } catch ( NumberFormatException e ) { throw new ManifoldCFException ( ""Illegal value for jetty port argument: "" + e . getMessage ( ) , e ) ; } } if ( args . length == 2 ) { combinedWarPath = new File ( args [ 1 ] ) ; } else { if ( combinedWarPath == null ) throw new ManifoldCFException ( ""The property '"" + combinedWarPathProperty + ""' must be set"" ) ; } System . err . println ( ""Starting jetty..."" ) ; ManifoldCFCombinedJettyRunner jetty = new ManifoldCFCombinedJettyRunner ( jettyPort , combinedWarPath . toString ( ) ) ; jetty . start ( ) ; System . err . println ( ""Jetty started."" ) ; while ( true ) { try { Thread . sleep ( 5000 ) ; continue ; } catch ( InterruptedException e ) { break ; } } } catch ( ManifoldCFException e ) { if ( Logging . root != null ) Logging . root . error ( ""Exception: "" + e . getMessage ( ) , e ) ; e . printStackTrace ( System . err ) ; System . exit ( 1 ) ; } }",No
" public void testAddJarDirectoryNotDirectory ( ) throws IOException { DistCache . addJarDirToDistributedCache ( testConf , testFilePaths [ 0 ] ) ; }",No
 public List getRoles ( ) { return deployment . getRoles ( ) ; },No
 public boolean includeStmt ( Statement s ) { return true ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 String getElementValue ( ) ;,No
" private void monitorActiveDirectory ( ) { final String activeDirectory = performanceTracker . getActiveDirectory ( ) ; final long startTime = performanceTracker . getActiveDirectoryStartTime ( ) ; if ( startTime <= 0 ) { return ; } final long activeMillis = System . currentTimeMillis ( ) - startTime ; if ( activeMillis > maxListingMillis ) { final String fullPath = activeDirectory . isEmpty ( ) ? ""the base directory"" : activeDirectory ; logger . warn ( ""This processor has currently spent {} milliseconds performing the listing of {}, which exceeds the configured threshold of {} milliseconds"" , new Object [ ] { activeMillis , fullPath , maxListingMillis } ) ; } }",No
" private static void reduce ( PathBlock x , VarAlloc varAlloc , Node startNode , Path path , Node endNode ) { if ( path instanceof P_Link ) { Node pred = ( ( P_Link ) path ) . getNode ( ) ; Triple t = new Triple ( startNode , pred , endNode ) ; x . add ( new TriplePath ( t ) ) ; return ; } if ( path instanceof P_Seq ) { P_Seq ps = ( P_Seq ) path ; Node v = varAlloc . allocVar ( ) ; reduce ( x , varAlloc , startNode , ps . getLeft ( ) , v ) ; reduce ( x , varAlloc , v , ps . getRight ( ) , endNode ) ; return ; } if ( path instanceof P_Inverse ) { reduce ( x , varAlloc , endNode , ( ( P_Inverse ) path ) . getSubPath ( ) , startNode ) ; return ; } if ( path instanceof P_FixedLength ) { P_FixedLength pFixed = ( P_FixedLength ) path ; long N = pFixed . getCount ( ) ; if ( N > 0 ) { Node stepStart = startNode ; for ( long i = 0 ; i < N - 1 ; i ++ ) { Node v = varAlloc . allocVar ( ) ; reduce ( x , varAlloc , stepStart , pFixed . getSubPath ( ) , v ) ; stepStart = v ; } reduce ( x , varAlloc , stepStart , pFixed . getSubPath ( ) , endNode ) ; return ; } } if ( path instanceof P_Mod ) { P_Mod pMod = ( P_Mod ) path ; if ( pMod . isFixedLength ( ) && pMod . getFixedLength ( ) > 0 ) { long N = pMod . getFixedLength ( ) ; if ( N > 0 ) { Node stepStart = startNode ; for ( long i = 0 ; i < N - 1 ; i ++ ) { Node v = varAlloc . allocVar ( ) ; reduce ( x , varAlloc , stepStart , pMod . getSubPath ( ) , v ) ; stepStart = v ; } reduce ( x , varAlloc , stepStart , pMod . getSubPath ( ) , endNode ) ; return ; } } if ( pMod . getMin ( ) > 0 ) { Path p1 = PathFactory . pathFixedLength ( pMod . getSubPath ( ) , pMod . getMin ( ) ) ; Path p2 ; if ( pMod . getMax ( ) < 0 ) p2 = PathFactory . pathZeroOrMoreN ( pMod . getSubPath ( ) ) ; else { long len2 = pMod . getMax ( ) - pMod . getMin ( ) ; if ( len2 < 0 ) len2 = 0 ; p2 = PathFactory . pathMod ( pMod . getSubPath ( ) , 0 , len2 ) ; } Node v = varAlloc . allocVar ( ) ; if ( ! startNode . isVariable ( ) || endNode . isVariable ( ) ) { reduce ( x , varAlloc , startNode , p1 , v ) ; reduce ( x , varAlloc , v , p2 , endNode ) ; } else { reduce ( x , varAlloc , v , p2 , endNode ) ; reduce ( x , varAlloc , startNode , p1 , v ) ; } return ; } } x . add ( new TriplePath ( startNode , path , endNode ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public List < String > validateRequest ( List < String > brokers , String method , String url , BundlesData bundle ) { List < String > redirectBrokers = brokers . stream ( ) . map ( broker -> { String redirectedBroker = null ; try { WebTarget webTarget = client . target ( url ) ; Invocation . Builder invocationBuilder = webTarget . request ( MediaType . APPLICATION_JSON ) ; if ( HttpMethod . PUT . equals ( method ) ) { invocationBuilder . put ( Entity . entity ( bundle , MediaType . APPLICATION_JSON ) ) ; fail ( ) ; } else if ( HttpMethod . GET . equals ( method ) ) { invocationBuilder . get ( ) ; fail ( ) ; } else if ( HttpMethod . POST . equals ( method ) ) { invocationBuilder . post ( Entity . entity ( bundle , MediaType . APPLICATION_JSON ) ) ; fail ( ) ; } else { fail ( ""Unsupported http method"" ) ; } } catch ( Exception e ) { if ( e . getCause ( ) instanceof UnknownHostException ) { redirectedBroker = e . getCause ( ) . getMessage ( ) . split ( "":"" ) [ 0 ] ; } else { fail ( ""Expected to receive UnknownHostException, but received : "" + e ) ; } } return redirectedBroker ; } ) . collect ( Collectors . toList ( ) ) ; return redirectBrokers ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void encodeRedirectAbsoluteUrl ( ) { final String url = ""http://localhost:8080/path"" ; ServletWebRequest webRequest = mock ( ServletWebRequest . class ) ; when ( webRequest . isAjax ( ) ) . thenReturn ( Boolean . FALSE ) ; Url baseUrl = Url . parse ( ""./baseUrl"" ) ; baseUrl . setProtocol ( ""http"" ) ; baseUrl . setHost ( ""someHost"" ) ; baseUrl . setPort ( 80 ) ; when ( webRequest . getClientUrl ( ) ) . thenReturn ( baseUrl ) ; UrlRenderer renderer = new UrlRenderer ( webRequest ) ; RequestCycle requestCycle = mock ( RequestCycle . class ) ; ThreadContext . setRequestCycle ( requestCycle ) ; when ( requestCycle . getUrlRenderer ( ) ) . thenReturn ( renderer ) ; HttpServletResponse httpServletResponse = mock ( HttpServletResponse . class ) ; when ( httpServletResponse . encodeRedirectURL ( Matchers . eq ( url ) ) ) . thenReturn ( url + "";foo"" ) ; ServletWebResponse webResponse = new ServletWebResponse ( webRequest , httpServletResponse ) ; assertEquals ( url + "";foo"" , webResponse . encodeRedirectURL ( url ) ) ; }",Smelly
" public Key getTopKey ( ) { Key k = getSource ( ) . getTopKey ( ) ; return new Key ( new Text ( k . getRow ( ) . toString ( ) . toLowerCase ( ) ) , k . getColumnFamily ( ) , k . getColumnQualifier ( ) , k . getColumnVisibility ( ) , k . getTimestamp ( ) ) ; }",Smelly
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 1 , 4 , "":"" , "":"" , "":"" , "":"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 2 , 3 , "","" , ""."" , ""."" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 3 , 3 , "","" , ""."" , ""."" ) ; cas . release ( ) ; }",Smelly
" public void testWriteLines_Writer_nullStream ( ) throws Exception { final Object [ ] data = new Object [ ] { ""hello"" , ""world"" } ; final List < Object > list = Arrays . asList ( data ) ; try { IOUtils . writeLines ( list , ""*"" , ( Writer ) null ) ; fail ( ) ; } catch ( final NullPointerException ignore ) { } }",No
" private Converter newConverter ( List < TProtocol > events , Type type , ThriftField field ) { switch ( field . getType ( ) . getType ( ) ) { case LIST : return new ListConverter ( events , type . asGroupType ( ) , field ) ; case SET : return new SetConverter ( events , type . asGroupType ( ) , field ) ; case MAP : return new MapConverter ( events , type . asGroupType ( ) , field ) ; case STRUCT : return new StructConverter ( events , type . asGroupType ( ) , field ) ; case STRING : return new FieldStringConverter ( events , field ) ; case ENUM : return new FieldEnumConverter ( events , field ) ; default : return new FieldPrimitiveConverter ( events , field ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public static DecimalTypeInfo deriveSumFieldTypeInfo ( int precision , int scale ) { int intPart = precision - scale ; intPart = Math . min ( intPart + 10 , HiveDecimal . MAX_PRECISION - scale ) ; return TypeInfoFactory . getDecimalTypeInfo ( intPart + scale , scale ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected void postOp ( ) throws Exception { if ( getOutputs ( ) == null ) { return ; } List < MROutput > mrOuts = Lists . newLinkedList ( ) ; for ( LogicalOutput output : getOutputs ( ) . values ( ) ) { if ( output instanceof MROutput ) { MROutput mrOutput = ( MROutput ) output ; mrOutput . flush ( ) ; if ( mrOutput . isCommitRequired ( ) ) { mrOuts . add ( ( MROutput ) output ) ; } } } if ( mrOuts . size ( ) > 0 ) { while ( ! getContext ( ) . canCommit ( ) ) { Thread . sleep ( 100 ) ; } boolean willAbort = false ; Exception savedEx = null ; for ( MROutput output : mrOuts ) { try { output . commit ( ) ; } catch ( IOException ioe ) { LOG . warn ( ""Error in committing output"" , ioe ) ; willAbort = true ; savedEx = ioe ; break ; } } if ( willAbort == true ) { for ( MROutput output : mrOuts ) { try { output . abort ( ) ; } catch ( IOException ioe ) { LOG . warn ( ""Error in aborting output"" , ioe ) ; } } throw savedEx ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , InputDataObjectType struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 11 ) ; if ( incoming . get ( 0 ) ) { struct . value = iprot . readString ( ) ; struct . setValueIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . type = org . apache . airavata . model . application . io . DataType . findByValue ( iprot . readI32 ( ) ) ; struct . setTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . applicationArgument = iprot . readString ( ) ; struct . setApplicationArgumentIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . standardInput = iprot . readBool ( ) ; struct . setStandardInputIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . userFriendlyDescription = iprot . readString ( ) ; struct . setUserFriendlyDescriptionIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . metaData = iprot . readString ( ) ; struct . setMetaDataIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . inputOrder = iprot . readI32 ( ) ; struct . setInputOrderIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . isRequired = iprot . readBool ( ) ; struct . setIsRequiredIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . requiredToAddedToCommandLine = iprot . readBool ( ) ; struct . setRequiredToAddedToCommandLineIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . dataStaged = iprot . readBool ( ) ; struct . setDataStagedIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public final boolean canAuthenticate ( final Class < ? extends AuthenticationRequest > authenticationRequestClass ) { return AuthenticationRequestPassword . class . isAssignableFrom ( authenticationRequestClass ) ; },No
 public abstract boolean isEOF ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ComputationalResourceSchedulingModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . resourceHostId = iprot . readString ( ) ; struct . setResourceHostIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . totalCPUCount = iprot . readI32 ( ) ; struct . setTotalCPUCountIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . nodeCount = iprot . readI32 ( ) ; struct . setNodeCountIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . numberOfThreads = iprot . readI32 ( ) ; struct . setNumberOfThreadsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . queueName = iprot . readString ( ) ; struct . setQueueNameIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . wallTimeLimit = iprot . readI32 ( ) ; struct . setWallTimeLimitIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . totalPhysicalMemory = iprot . readI32 ( ) ; struct . setTotalPhysicalMemoryIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . chessisNumber = iprot . readString ( ) ; struct . setChessisNumberIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . staticWorkingDir = iprot . readString ( ) ; struct . setStaticWorkingDirIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . overrideLoginUserName = iprot . readString ( ) ; struct . setOverrideLoginUserNameIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . overrideScratchLocation = iprot . readString ( ) ; struct . setOverrideScratchLocationIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . overrideAllocationProjectNumber = iprot . readString ( ) ; struct . setOverrideAllocationProjectNumberIsSet ( true ) ; } }",Smelly
" public void handle ( NodeEvent event ) { LOG . debug ( ""Processing "" + event . getWorkerId ( ) + "" of type "" + event . getType ( ) ) ; NodeState oldState = getState ( ) ; try { stateMachine . doTransition ( event . getType ( ) , event ) ; } catch ( InvalidStateTransitonException e ) { LOG . error ( ""Can't handle this event at current state"" + "", eventType:"" + event . getType ( ) . name ( ) + "", oldState:"" + oldState . name ( ) + "", nextState:"" + getState ( ) . name ( ) , e ) ; LOG . error ( ""Invalid event "" + event . getType ( ) + "" on NodeStatus  "" + getWorkerId ( ) ) ; } if ( oldState != getState ( ) ) { LOG . info ( getWorkerId ( ) + "" Node Transitioned from "" + oldState + "" to "" + getState ( ) ) ; } }",No
 public void processElement ( ProcessContext c ) { timeDistribution . update ( c . element ( ) . longValue ( ) ) ; },No
" public boolean grants ( Set < Principal > principals , String workspaceName ) throws RepositoryException { AccessControlProvider prov = getAccessControlProvider ( workspaceName ) ; return prov . canAccessRoot ( principals ) ; }",No
" public void configure ( ) throws Exception { from ( ""activemq:queue:in1"" ) . resequencer ( ) . body ( ) . batch ( ) . size ( 100 ) . timeout ( 10000L ) . to ( ""mock:result"" ) ; from ( ""activemq:queue:in2"" ) . resequencer ( ) . header ( ""num"" ) . stream ( ) . timeout ( 2000L ) . to ( ""mock:result"" ) ; }",Smelly
" public StructureTreeElement startReferencedNode ( String name , Attributes attributes , StructureTreeElement parent ) { return startNode ( name , attributes , parent ) ; }",No
" void onNoteNameChanged ( Note note , String oldName ) ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void testTextFileTable ( ) throws Exception { String urlsFile = tmpDir . copyResourceFileName ( ""urls.txt"" ) ; Pipeline pipeline = new MRPipeline ( TextFileTableIT . class , tmpDir . getDefaultConfiguration ( ) ) ; PTable < String , String > urls = pipeline . read ( new TextFileTableSource < String , String > ( urlsFile , tableOf ( strings ( ) , strings ( ) ) ) ) ; Set < Pair < String , Long > > cnts = ImmutableSet . copyOf ( urls . keys ( ) . count ( ) . materialize ( ) ) ; assertEquals ( ImmutableSet . of ( Pair . of ( ""www.A.com"" , 4L ) , Pair . of ( ""www.B.com"" , 2L ) , Pair . of ( ""www.C.com"" , 1L ) , Pair . of ( ""www.D.com"" , 1L ) , Pair . of ( ""www.E.com"" , 1L ) , Pair . of ( ""www.F.com"" , 2L ) ) , cnts ) ; }",Smelly
" private static String shorten ( String name ) { return TestUtil . getJavaMajorVersion ( ) > 8 ? name . substring ( 0 , 3 ) : name ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private SecurityContext createSecurityContext ( final Principal p ) { return new SecurityContext ( ) { public Principal getUserPrincipal ( ) { return p ; } public boolean isUserInRole ( String role ) { return false ; } } ; },Smelly
" public void testHostURLNormalizer ( ) throws Exception { Configuration conf = NutchConfiguration . create ( ) ; String hostsFile = SAMPLES + SEPARATOR + ""hosts.txt"" ; HostURLNormalizer normalizer = new HostURLNormalizer ( hostsFile ) ; normalizer . setConf ( conf ) ; Assert . assertEquals ( ""http://www.example.org/page.html"" , normalizer . normalize ( ""http://example.org/page.html"" , URLNormalizers . SCOPE_DEFAULT ) ) ; Assert . assertEquals ( ""http://example.net/path/to/something.html"" , normalizer . normalize ( ""http://www.example.net/path/to/something.html"" , URLNormalizers . SCOPE_DEFAULT ) ) ; Assert . assertEquals ( ""http://example.com/?does=it&still=work"" , normalizer . normalize ( ""http://example.com/?does=it&still=work"" , URLNormalizers . SCOPE_DEFAULT ) ) ; Assert . assertEquals ( ""http://example.com/buh"" , normalizer . normalize ( ""http://http.www.example.com/buh"" , URLNormalizers . SCOPE_DEFAULT ) ) ; Assert . assertEquals ( ""http://example.com/blaat"" , normalizer . normalize ( ""http://whatever.example.com/blaat"" , URLNormalizers . SCOPE_DEFAULT ) ) ; }",Smelly
" public void testSendQueryParams ( ) throws Exception { HttpResponse resp = new BasicHttpResponse ( new BasicStatusLine ( HttpVersion . HTTP_1_1 , 200 , ""OK"" ) ) ; BasicHttpEntity entity = new BasicHttpEntity ( ) ; entity . setContent ( new ByteArrayInputStream ( ""test payload"" . getBytes ( ) ) ) ; resp . setEntity ( entity ) ; Mockito . doReturn ( resp ) . when ( mockSdkClient ) . execute ( any ( HttpUriRequest . class ) , any ( HttpContext . class ) ) ; runner . setProperty ( ""dynamicHeader"" , ""yes!"" ) ; runner . setProperty ( InvokeAWSGatewayApi . PROP_QUERY_PARAMS , ""apples=oranges&dogs=cats"" ) ; runner . setProperty ( InvokeAWSGatewayApi . PROP_ATTRIBUTES_TO_SEND , ""F.*"" ) ; final Map < String , String > attributes = new HashMap < > ( ) ; attributes . put ( CoreAttributes . MIME_TYPE . key ( ) , ""application/plain-text"" ) ; attributes . put ( ""Foo"" , ""Bar"" ) ; runner . enqueue ( ""Hello"" . getBytes ( ""UTF-8"" ) , attributes ) ; runner . assertValid ( ) ; runner . run ( 1 ) ; Mockito . verify ( mockSdkClient , times ( 1 ) ) . execute ( argThat ( new RequestMatcher < HttpUriRequest > ( x -> { return x . getMethod ( ) . equals ( ""GET"" ) && x . getFirstHeader ( ""x-api-key"" ) . getValue ( ) . equals ( ""abcd"" ) && x . getFirstHeader ( ""Authorization"" ) . getValue ( ) . startsWith ( ""AWS4"" ) && x . getFirstHeader ( ""dynamicHeader"" ) . getValue ( ) . equals ( ""yes!"" ) && x . getFirstHeader ( ""Foo"" ) . getValue ( ) . equals ( ""Bar"" ) && x . getURI ( ) . toString ( ) . equals ( ""https://foobar.execute-api.us-east-1.amazonaws.com/TEST?dogs=cats&apples=oranges"" ) ; } ) ) , any ( HttpContext . class ) ) ; runner . assertTransferCount ( InvokeAWSGatewayApi . REL_SUCCESS_REQ , 1 ) ; runner . assertTransferCount ( InvokeAWSGatewayApi . REL_RESPONSE , 1 ) ; runner . assertTransferCount ( InvokeAWSGatewayApi . REL_RETRY , 0 ) ; runner . assertTransferCount ( InvokeAWSGatewayApi . REL_NO_RETRY , 0 ) ; runner . assertTransferCount ( InvokeAWSGatewayApi . REL_FAILURE , 0 ) ; final List < MockFlowFile > flowFiles = runner . getFlowFilesForRelationship ( InvokeAWSGatewayApi . REL_RESPONSE ) ; final MockFlowFile ff0 = flowFiles . get ( 0 ) ; ff0 . assertAttributeEquals ( InvokeAWSGatewayApi . STATUS_CODE , ""200"" ) ; ff0 . assertContentEquals ( ""test payload"" ) ; ff0 . assertAttributeExists ( InvokeAWSGatewayApi . TRANSACTION_ID ) ; ff0 . assertAttributeEquals ( InvokeAWSGatewayApi . RESOURCE_NAME_ATTR , ""/TEST"" ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public String getDiagnostics ( ) { return this . diagnostics ; },No
 public void setExecutionNodeRestricted ( Boolean executionNodeRestricted ) { this . executionNodeRestricted = executionNodeRestricted ; },No
" protected void handle ( Message msg ) { if ( MessageUtils . isRequestor ( msg ) ) { LOG . fine ( ""Is a requestor."" ) ; return ; } Exchange exchange = msg . getExchange ( ) ; assert null != exchange ; BindingOperationInfo boi = exchange . get ( BindingOperationInfo . class ) ; if ( null == boi ) { LOG . fine ( ""No binding operation info."" ) ; return ; } Endpoint e = exchange . get ( Endpoint . class ) ; if ( null == e ) { LOG . fine ( ""No endpoint."" ) ; return ; } EndpointInfo ei = e . getEndpointInfo ( ) ; Bus bus = exchange . get ( Bus . class ) ; PolicyEngine pe = bus . getExtension ( PolicyEngine . class ) ; if ( null == pe ) { return ; } Destination destination = exchange . getDestination ( ) ; Exception ex = exchange . get ( Exception . class ) ; List < Interceptor < ? extends Message > > faultInterceptors = new ArrayList < Interceptor < ? extends Message > > ( ) ; Collection < Assertion > assertions = new ArrayList < Assertion > ( ) ; Policy p = ( Policy ) msg . getContextualProperty ( PolicyConstants . POLICY_OVERRIDE ) ; if ( p != null ) { EndpointPolicyImpl endpi = new EndpointPolicyImpl ( p ) ; EffectivePolicyImpl effectivePolicy = new EffectivePolicyImpl ( ) ; effectivePolicy . initialise ( endpi , ( PolicyEngineImpl ) pe , false , true ) ; PolicyUtils . logPolicy ( LOG , Level . FINEST , ""Using effective policy: "" , effectivePolicy . getPolicy ( ) ) ; faultInterceptors . addAll ( effectivePolicy . getInterceptors ( ) ) ; assertions . addAll ( effectivePolicy . getChosenAlternative ( ) ) ; } else { BindingFaultInfo bfi = getBindingFaultInfo ( msg , ex , boi ) ; if ( bfi == null && msg . get ( FaultMode . class ) != FaultMode . UNCHECKED_APPLICATION_FAULT && msg . get ( FaultMode . class ) != FaultMode . CHECKED_APPLICATION_FAULT ) { return ; } EffectivePolicy effectivePolicy = pe . getEffectiveServerFaultPolicy ( ei , boi , bfi , destination ) ; if ( effectivePolicy != null ) { faultInterceptors . addAll ( effectivePolicy . getInterceptors ( ) ) ; assertions . addAll ( effectivePolicy . getChosenAlternative ( ) ) ; } } for ( Interceptor < ? extends Message > oi : faultInterceptors ) { msg . getInterceptorChain ( ) . add ( oi ) ; LOG . log ( Level . FINE , ""Added interceptor of type {0}"" , oi . getClass ( ) . getSimpleName ( ) ) ; } if ( null != assertions && ! assertions . isEmpty ( ) ) { msg . put ( AssertionInfoMap . class , new AssertionInfoMap ( assertions ) ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public void setType ( DifferenceType type ) { this . type = type ; },No
 public void pruneUntil ( long snapshot ) { Iterator < SnapshottedItem < T > > iterator = queue . iterator ( ) ; while ( iterator . hasNext ( ) ) { if ( iterator . next ( ) . snapshot <= snapshot ) { iterator . remove ( ) ; } else { break ; } } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testEquals ( ) { RegionInfo hri = RegionInfoBuilder . newBuilder ( TableName . valueOf ( name . getMethodName ( ) ) ) . build ( ) ; RegionPlan plan = new RegionPlan ( hri , SRC , DEST ) ; assertEquals ( plan . hashCode ( ) , new RegionPlan ( hri , SRC , DEST ) . hashCode ( ) ) ; assertEquals ( plan , new RegionPlan ( hri , SRC , DEST ) ) ; RegionInfo other = RegionInfoBuilder . newBuilder ( TableName . valueOf ( name . getMethodName ( ) + ""other"" ) ) . build ( ) ; assertNotEquals ( plan . hashCode ( ) , new RegionPlan ( other , SRC , DEST ) . hashCode ( ) ) ; assertNotEquals ( plan , new RegionPlan ( other , SRC , DEST ) ) ; }",Smelly
" public static Map < String , Object > getCommissionForProduct ( DispatchContext ctx , Map < String , Object > context ) { Delegator delegator = ctx . getDelegator ( ) ; Locale locale = ( Locale ) context . get ( ""locale"" ) ; String errMsg = null ; List < Map < String , Object > > commissions = FastList . newInstance ( ) ; try { BigDecimal amount = ( ( BigDecimal ) context . get ( ""amount"" ) ) ; BigDecimal quantity = ( BigDecimal ) context . get ( ""quantity"" ) ; quantity = quantity == null ? BigDecimal . ONE : quantity ; boolean negative = amount . signum ( ) < 0 ; amount = amount . abs ( ) ; quantity = quantity . abs ( ) ; String productId = ( String ) context . get ( ""productId"" ) ; String invoiceItemTypeId = ( String ) context . get ( ""invoiceItemTypeId"" ) ; String invoiceItemSeqId = ( String ) context . get ( ""invoiceItemSeqId"" ) ; String invoiceId = ( String ) context . get ( ""invoiceId"" ) ; List < GenericValue > agreementItems = delegator . findByAnd ( ""AgreementItemAndProductAppl"" , UtilMisc . toMap ( ""productId"" , productId , ""agreementItemTypeId"" , ""AGREEMENT_COMMISSION"" ) , null , true ) ; if ( agreementItems . size ( ) == 0 ) { List < GenericValue > productAssocs = delegator . findByAnd ( ""ProductAssoc"" , UtilMisc . toMap ( ""productIdTo"" , productId , ""productAssocTypeId"" , ""PRODUCT_VARIANT"" ) , null , true ) ; productAssocs = EntityUtil . filterByDate ( productAssocs ) ; if ( productAssocs . size ( ) > 0 ) { GenericEntity productAssoc = EntityUtil . getFirst ( productAssocs ) ; agreementItems = delegator . findByAnd ( ""AgreementItemAndProductAppl"" , UtilMisc . toMap ( ""productId"" , productAssoc . getString ( ""productId"" ) , ""agreementItemTypeId"" , ""AGREEMENT_COMMISSION"" ) , null , true ) ; } } agreementItems = EntityUtil . filterByDate ( agreementItems ) ; for ( GenericValue agreementItem : agreementItems ) { List < GenericValue > terms = delegator . findByAnd ( ""AgreementTerm"" , UtilMisc . toMap ( ""agreementId"" , agreementItem . getString ( ""agreementId"" ) , ""agreementItemSeqId"" , agreementItem . getString ( ""agreementItemSeqId"" ) , ""invoiceItemTypeId"" , invoiceItemTypeId ) , null , true ) ; if ( terms . size ( ) > 0 ) { BigDecimal commission = ZERO ; BigDecimal min = new BigDecimal ( ""-1e12"" ) ; BigDecimal max = new BigDecimal ( ""1e12"" ) ; long days = - 1 ; for ( GenericValue term : terms ) { String termTypeId = term . getString ( ""termTypeId"" ) ; BigDecimal termValue = term . getBigDecimal ( ""termValue"" ) ; if ( termValue != null ) { if ( termTypeId . equals ( ""FIN_COMM_FIXED"" ) ) { commission = commission . add ( termValue ) ; } else if ( termTypeId . equals ( ""FIN_COMM_VARIABLE"" ) ) { commission = commission . add ( termValue . multiply ( amount ) . divide ( new BigDecimal ( ""100"" ) , 12 , rounding ) ) ; } else if ( termTypeId . equals ( ""FIN_COMM_MIN"" ) ) { min = termValue ; } else if ( termTypeId . equals ( ""FIN_COMM_MAX"" ) ) { max = termValue ; } } Long termDays = term . getLong ( ""termDays"" ) ; if ( termDays != null ) { if ( days > 0 ) { days = Math . min ( days , termDays . longValue ( ) ) ; } else { days = termDays . longValue ( ) ; } } } if ( commission . compareTo ( min ) < 0 ) commission = min ; if ( commission . compareTo ( max ) > 0 ) commission = max ; commission = negative ? commission . negate ( ) : commission ; commission = commission . setScale ( decimals , rounding ) ; Map < String , Object > partyCommissionResult = UtilMisc . toMap ( ""partyIdFrom"" , agreementItem . getString ( ""partyIdFrom"" ) , ""partyIdTo"" , agreementItem . getString ( ""partyIdTo"" ) , ""invoiceItemSeqId"" , invoiceItemSeqId , ""invoiceId"" , invoiceId , ""commission"" , commission , ""quantity"" , quantity , ""currencyUomId"" , agreementItem . getString ( ""currencyUomId"" ) , ""productId"" , productId ) ; if ( days >= 0 ) { partyCommissionResult . put ( ""days"" , Long . valueOf ( days ) ) ; } if ( ! commissions . contains ( partyCommissionResult ) ) { commissions . add ( partyCommissionResult ) ; } } } } catch ( GenericEntityException e ) { Debug . logWarning ( e , module ) ; Map < String , String > messageMap = UtilMisc . toMap ( ""errMessage"" , e . getMessage ( ) ) ; errMsg = UtilProperties . getMessage ( ""CommonUiLabels"" , ""CommonDatabaseProblem"" , messageMap , locale ) ; return ServiceUtil . returnError ( errMsg ) ; } return UtilMisc . toMap ( ""commissions"" , commissions , ModelService . RESPONSE_MESSAGE , ModelService . RESPOND_SUCCESS ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public void clear ( ) { super . clear ( ) ; dataReader . clear ( ) ; },No
" public void testServerAutoLoadable ( ) { ModuleProviderChecker . testProviderPresent ( VelocityServerModuleProvider . class , CayenneServerModuleProvider . class ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
" public Property make ( PropertyList pList , String value , FObj fo ) throws PropertyException { if ( ""inherit"" . equals ( value ) ) { return super . make ( pList , value , fo ) ; } else { String pValue = checkValueKeywords ( value ) ; Property newProp = checkEnumValues ( pValue ) ; int enumValue = ( newProp != null ) ? newProp . getEnum ( ) : - 1 ; if ( enumValue == Constants . EN_BOLDER || enumValue == Constants . EN_LIGHTER ) { Property parentProp = pList . getInherited ( Constants . PR_FONT_WEIGHT ) ; if ( enumValue == Constants . EN_BOLDER ) { enumValue = parentProp . getEnum ( ) ; switch ( enumValue ) { case Constants . EN_100 : newProp = EnumProperty . getInstance ( Constants . EN_200 , ""200"" ) ; break ; case Constants . EN_200 : newProp = EnumProperty . getInstance ( Constants . EN_300 , ""300"" ) ; break ; case Constants . EN_300 : newProp = EnumProperty . getInstance ( Constants . EN_400 , ""400"" ) ; break ; case Constants . EN_400 : newProp = EnumProperty . getInstance ( Constants . EN_500 , ""500"" ) ; break ; case Constants . EN_500 : newProp = EnumProperty . getInstance ( Constants . EN_600 , ""600"" ) ; break ; case Constants . EN_600 : newProp = EnumProperty . getInstance ( Constants . EN_700 , ""700"" ) ; break ; case Constants . EN_700 : newProp = EnumProperty . getInstance ( Constants . EN_800 , ""800"" ) ; break ; case Constants . EN_800 : case Constants . EN_900 : newProp = EnumProperty . getInstance ( Constants . EN_900 , ""900"" ) ; break ; default : } } else { enumValue = parentProp . getEnum ( ) ; switch ( enumValue ) { case Constants . EN_100 : case Constants . EN_200 : newProp = EnumProperty . getInstance ( Constants . EN_100 , ""100"" ) ; break ; case Constants . EN_300 : newProp = EnumProperty . getInstance ( Constants . EN_200 , ""200"" ) ; break ; case Constants . EN_400 : newProp = EnumProperty . getInstance ( Constants . EN_300 , ""300"" ) ; break ; case Constants . EN_500 : newProp = EnumProperty . getInstance ( Constants . EN_400 , ""400"" ) ; break ; case Constants . EN_600 : newProp = EnumProperty . getInstance ( Constants . EN_500 , ""500"" ) ; break ; case Constants . EN_700 : newProp = EnumProperty . getInstance ( Constants . EN_600 , ""600"" ) ; break ; case Constants . EN_800 : newProp = EnumProperty . getInstance ( Constants . EN_700 , ""700"" ) ; break ; case Constants . EN_900 : newProp = EnumProperty . getInstance ( Constants . EN_800 , ""800"" ) ; break ; default : } } } else if ( enumValue == - 1 ) { newProp = PropertyParser . parse ( value , new PropertyInfo ( this , pList ) ) ; } if ( newProp != null ) { newProp = convertProperty ( newProp , pList , fo ) ; } return newProp ; } }",Smelly
 public int getCode ( ) { return code ; },No
" public void describeMismatchSafely ( PipelineResult pResult , Description description ) { equalTo ( expectedWordCounts ) . describeMismatch ( actualCounts , description ) ; }",No
 public String getDiagnosticInfo ( ) { return diagnostics ; },No
 ValueState < T > readLater ( ) ;,No
" protected Text convertVertexToLine ( Vertex < I , V , E > vertex ) throws IOException { StringBuilder str = new StringBuilder ( ) ; if ( reverseOutput ) { str . append ( vertex . getValue ( ) . toString ( ) ) ; str . append ( delimiter ) ; str . append ( vertex . getId ( ) . toString ( ) ) ; } else { str . append ( vertex . getId ( ) . toString ( ) ) ; str . append ( delimiter ) ; str . append ( vertex . getValue ( ) . toString ( ) ) ; } return new Text ( str . toString ( ) ) ; }",Smelly
 public void setInRecordWriterClass ( Class < ? extends RecordWriter > inRecordWriterClass ) { this . inRecordWriterClass = inRecordWriterClass ; },No
" public static < T > Query < T > of ( RelNode rel ) { return new Query < > ( null , null , rel ) ; }",No
" void testNewScheme ( ) { NamespaceName ns = NamespaceName . get ( ""my-tenant/my-namespace"" ) ; assertEquals ( ns . getTenant ( ) , ""my-tenant"" ) ; assertEquals ( ns . getLocalName ( ) , ""my-namespace"" ) ; assertEquals ( ns . isGlobal ( ) , true ) ; assertEquals ( ns . getCluster ( ) , null ) ; assertEquals ( ns . getPersistentTopicName ( ""my-topic"" ) , ""persistent://my-tenant/my-namespace/my-topic"" ) ; }",Smelly
" public void testDifferentTypes ( ) { final AtomicInteger i = new AtomicInteger ( 0 ) ; final MergingEventHandler < Boolean , Double > dut = new MergingEventHandler < > ( new EventHandler < Pair < Boolean , Double > > ( ) { @ Override public void onNext ( final Pair < Boolean , Double > value ) { i . incrementAndGet ( ) ; } } ) ; dut . getLeft ( ) . onNext ( true ) ; dut . getRight ( ) . onNext ( 104.0 ) ; Assert . assertEquals ( 1 , i . get ( ) ) ; }",No
" public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { boolean admin = false ; WeblogRequest weblogRequest = null ; try { weblogRequest = new WeblogRequest ( request ) ; User user = weblogRequest . getUser ( ) ; if ( user == null ) { response . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; return ; } else if ( user . hasGlobalPermission ( ""admin"" ) ) { admin = true ; } } catch ( Exception e ) { response . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; return ; } String startsWith = request . getParameter ( ""startsWith"" ) ; Boolean enabledOnly = null ; int offset = 0 ; int length = MAX_LENGTH ; if ( ""true"" . equals ( request . getParameter ( ""enabled"" ) ) ) { enabledOnly = Boolean . TRUE ; } if ( ""false"" . equals ( request . getParameter ( ""enabled"" ) ) ) { enabledOnly = Boolean . FALSE ; } try { offset = Integer . parseInt ( request . getParameter ( ""offset"" ) ) ; } catch ( Exception ignored ) { } try { length = Integer . parseInt ( request . getParameter ( ""length"" ) ) ; } catch ( Exception ignored ) { } Weblogger roller = WebloggerFactory . getWeblogger ( ) ; try { UserManager umgr = roller . getUserManager ( ) ; List < User > users = umgr . getUsersStartingWith ( startsWith , enabledOnly , offset , length ) ; for ( User user : users ) { response . getWriter ( ) . print ( user . getUserName ( ) ) ; if ( admin ) { response . getWriter ( ) . print ( "","" ) ; response . getWriter ( ) . println ( user . getEmailAddress ( ) ) ; } else { response . getWriter ( ) . print ( "","" ) ; response . getWriter ( ) . println ( user . getScreenName ( ) ) ; } } response . flushBuffer ( ) ; } catch ( WebloggerException e ) { throw new ServletException ( e . getMessage ( ) ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Stage struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { struct . stageId = iprot . readString ( ) ; struct . setStageIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . stageType = StageType . findByValue ( iprot . readI32 ( ) ) ; struct . setStageTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map89 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . stageAttributes = new HashMap < String , String > ( 2 * _map89 . size ) ; for ( int _i90 = 0 ; _i90 < _map89 . size ; ++ _i90 ) { String _key91 ; String _val92 ; _key91 = iprot . readString ( ) ; _val92 = iprot . readString ( ) ; struct . stageAttributes . put ( _key91 , _val92 ) ; } } struct . setStageAttributesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map93 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . stageCounters = new HashMap < String , Long > ( 2 * _map93 . size ) ; for ( int _i94 = 0 ; _i94 < _map93 . size ; ++ _i94 ) { String _key95 ; long _val96 ; _key95 = iprot . readString ( ) ; _val96 = iprot . readI64 ( ) ; struct . stageCounters . put ( _key95 , _val96 ) ; } } struct . setStageCountersIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list97 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . taskList = new ArrayList < Task > ( _list97 . size ) ; for ( int _i98 = 0 ; _i98 < _list97 . size ; ++ _i98 ) { Task _elem99 ; _elem99 = new Task ( ) ; _elem99 . read ( iprot ) ; struct . taskList . add ( _elem99 ) ; } } struct . setTaskListIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . done = iprot . readBool ( ) ; struct . setDoneIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . started = iprot . readBool ( ) ; struct . setStartedIsSet ( true ) ; } }",No
" public List < SearchQueryToken > tokenize ( final String searchQuery ) throws SearchTokenizerException { char [ ] chars = searchQuery . trim ( ) . toCharArray ( ) ; State state = new SearchExpressionState ( ) ; List < SearchQueryToken > states = new ArrayList < SearchQueryToken > ( ) ; for ( char aChar : chars ) { State next = state . nextChar ( aChar ) ; if ( state . isFinished ( ) ) { states . add ( state ) ; } state = next ; } if ( state . close ( ) . isFinished ( ) ) { states . add ( state ) ; } else { throw new SearchTokenizerException ( ""Last parsed state '"" + state . toString ( ) + ""' is not finished."" , SearchTokenizerException . MessageKeys . NOT_FINISHED_QUERY , state . getTokenName ( ) ) ; } return states ; }",Smelly
 public String getDiagnostics ( ) { return diagnostics ; },No
" public void compute ( Vertex < IntWritable , FloatWritable , NullWritable > vertex , Iterable < FloatWritable > messages ) throws IOException { if ( getSuperstep ( ) >= 1 ) { float sum = 0 ; for ( FloatWritable message : messages ) { sum += message . get ( ) ; } vertex . getValue ( ) . set ( ( 0.15f / getTotalNumVertices ( ) ) + 0.85f * sum ) ; } if ( getSuperstep ( ) < getConf ( ) . getInt ( SUPERSTEP_COUNT , 0 ) ) { sendMessageToAllEdges ( vertex , new FloatWritable ( vertex . getValue ( ) . get ( ) / vertex . getNumEdges ( ) ) ) ; } else { vertex . voteToHalt ( ) ; } }",Smelly
" public void handleMessage ( Message message ) { if ( isGET ( message ) && message . getContent ( List . class ) != null ) { LOG . fine ( ""BareInInterceptor skipped in HTTP GET method"" ) ; return ; } DepthXMLStreamReader xmlReader = getXMLStreamReader ( message ) ; Exchange exchange = message . getExchange ( ) ; DataReader < XMLStreamReader > dr = getDataReader ( message ) ; MessageContentsList parameters = new MessageContentsList ( ) ; Endpoint ep = exchange . get ( Endpoint . class ) ; BindingOperationInfo bop = exchange . get ( BindingOperationInfo . class ) ; ServiceInfo si = ep . getEndpointInfo ( ) . getService ( ) ; BindingMessageInfo msgInfo = null ; boolean client = isRequestor ( message ) ; Collection < OperationInfo > ops = null ; if ( bop == null ) { ops = new ArrayList < OperationInfo > ( ) ; ops . addAll ( si . getInterface ( ) . getOperations ( ) ) ; if ( xmlReader . getEventType ( ) == XMLStreamReader . END_ELEMENT && ! client ) { for ( OperationInfo op : ops ) { MessageInfo bmsg = op . getInput ( ) ; if ( bmsg . getMessageParts ( ) . size ( ) == 0 ) { BindingOperationInfo boi = ep . getEndpointInfo ( ) . getBinding ( ) . getOperation ( op ) ; exchange . put ( BindingOperationInfo . class , boi ) ; exchange . put ( OperationInfo . class , op ) ; exchange . setOneWay ( op . isOneWay ( ) ) ; } } } } else { getMessageInfo ( message , bop ) ; if ( client ) { msgInfo = bop . getOutput ( ) ; } else { msgInfo = bop . getInput ( ) ; } } int paramNum = 0 ; while ( StaxUtils . toNextElement ( xmlReader ) ) { QName elName = xmlReader . getName ( ) ; Object o = null ; MessagePartInfo p ; if ( msgInfo != null && msgInfo . getMessageParts ( ) != null ) { assert msgInfo . getMessageParts ( ) . size ( ) > paramNum ; p = msgInfo . getMessageParts ( ) . get ( paramNum ) ; } else { p = findMessagePart ( exchange , ops , elName , client , paramNum , message ) ; } if ( p == null ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( ""NO_PART_FOUND"" , LOG , elName ) , Fault . FAULT_CODE_CLIENT ) ; } try { o = dr . read ( p , xmlReader ) ; } catch ( Fault fault ) { if ( ! isRequestor ( message ) ) { fault . setFaultCode ( Fault . FAULT_CODE_CLIENT ) ; } throw fault ; } if ( o != null ) { parameters . put ( p , o ) ; } paramNum ++ ; } if ( parameters . size ( ) > 0 ) { message . setContent ( List . class , parameters ) ; } }",Smelly
" public int compare ( PostgresDateTimeConstant o1 , PostgresDateTimeConstant o2 ) { int result = o2 . getName ( ) . length ( ) - o1 . getName ( ) . length ( ) ; if ( result == 0 ) { return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; } return result ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public Object accept ( QOMTreeVisitor visitor , Object data ) throws Exception { return visitor . visit ( this , data ) ; }",No
 public boolean isPerElement ( ) { return false ; },No
 public HttpResponse getReponse ( ) { return response ; },No
" public void doTag ( TagPluginContext ctxt ) { boolean hasValue = false , hasVar = false , hasScope = false , hasTarget = false ; String strScope ; int iScope ; hasValue = ctxt . isAttributeSpecified ( ""value"" ) ; hasVar = ctxt . isAttributeSpecified ( ""var"" ) ; hasScope = ctxt . isAttributeSpecified ( ""scope"" ) ; hasTarget = ctxt . isAttributeSpecified ( ""target"" ) ; String resultName = ctxt . getTemporaryVariableName ( ) ; String targetName = ctxt . getTemporaryVariableName ( ) ; String propertyName = ctxt . getTemporaryVariableName ( ) ; ctxt . generateJavaSource ( ""Object "" + resultName + "" = null;"" ) ; if ( hasValue ) { ctxt . generateJavaSource ( resultName + "" = "" ) ; ctxt . generateAttribute ( ""value"" ) ; ctxt . generateJavaSource ( "";"" ) ; } else { ctxt . dontUseTagPlugin ( ) ; return ; } if ( hasScope ) { strScope = ctxt . getConstantAttribute ( ""scope"" ) ; } else { strScope = ""page"" ; } iScope = Util . getScope ( strScope ) ; if ( hasVar ) { String jspCtxt = null ; if ( ctxt . isTagFile ( ) ) { jspCtxt = ""this.getJspContext()"" ; } else { jspCtxt = ""_jspx_page_context"" ; } String strVar = ctxt . getConstantAttribute ( ""var"" ) ; ctxt . generateJavaSource ( ""if(null != "" + resultName + ""){"" ) ; ctxt . generateJavaSource ( ""    "" + jspCtxt + "".setAttribute(\"""" + strVar + ""\"","" + resultName + "","" + iScope + "");"" ) ; ctxt . generateJavaSource ( ""} else {"" ) ; if ( hasScope ) { ctxt . generateJavaSource ( ""    "" + jspCtxt + "".removeAttribute(\"""" + strVar + ""\"","" + iScope + "");"" ) ; } else { ctxt . generateJavaSource ( ""    "" + jspCtxt + "".removeAttribute(\"""" + strVar + ""\"");"" ) ; } ctxt . generateJavaSource ( ""}"" ) ; } else if ( hasTarget ) { String pdName = ctxt . getTemporaryVariableName ( ) ; String successFlagName = ctxt . getTemporaryVariableName ( ) ; String index = ctxt . getTemporaryVariableName ( ) ; String methodName = ctxt . getTemporaryVariableName ( ) ; ctxt . generateJavaSource ( ""String "" + propertyName + "" = null;"" ) ; ctxt . generateJavaSource ( ""if("" ) ; ctxt . generateAttribute ( ""property"" ) ; ctxt . generateJavaSource ( "" != null){"" ) ; ctxt . generateJavaSource ( ""    "" + propertyName + "" = ("" ) ; ctxt . generateAttribute ( ""property"" ) ; ctxt . generateJavaSource ( "").toString();"" ) ; ctxt . generateJavaSource ( ""}"" ) ; ctxt . generateJavaSource ( ""Object "" + targetName + "" = "" ) ; ctxt . generateAttribute ( ""target"" ) ; ctxt . generateJavaSource ( "";"" ) ; ctxt . generateJavaSource ( ""if("" + targetName + "" != null){"" ) ; ctxt . generateJavaSource ( ""    if("" + targetName + "" instanceof java.util.Map){"" ) ; ctxt . generateJavaSource ( ""        if(null != "" + resultName + ""){"" ) ; ctxt . generateJavaSource ( ""            ((java.util.Map) "" + targetName + "").put("" + propertyName + "","" + resultName + "");"" ) ; ctxt . generateJavaSource ( ""        }else{"" ) ; ctxt . generateJavaSource ( ""            ((java.util.Map) "" + targetName + "").remove("" + propertyName + "");"" ) ; ctxt . generateJavaSource ( ""        }"" ) ; ctxt . generateJavaSource ( ""    }else{"" ) ; ctxt . generateJavaSource ( ""        try{"" ) ; ctxt . generateJavaSource ( ""            java.beans.PropertyDescriptor "" + pdName + ""[] = java.beans.Introspector.getBeanInfo("" + targetName + "".getClass()).getPropertyDescriptors();"" ) ; ctxt . generateJavaSource ( ""            boolean "" + successFlagName + "" = false;"" ) ; ctxt . generateJavaSource ( ""            for(int "" + index + ""=0;"" + index + ""<"" + pdName + "".length;"" + index + ""++){"" ) ; ctxt . generateJavaSource ( ""                if("" + pdName + ""["" + index + ""].getName().equals("" + propertyName + "")){"" ) ; ctxt . generateJavaSource ( ""                    java.lang.reflect.Method "" + methodName + "" = "" + pdName + ""["" + index + ""].getWriteMethod();"" ) ; ctxt . generateJavaSource ( ""                    if(null == "" + methodName + ""){"" ) ; ctxt . generateJavaSource ( ""                        throw new JspException(\""No setter method in &lt;set&gt; for property \""+"" + propertyName + "");"" ) ; ctxt . generateJavaSource ( ""                    }"" ) ; ctxt . generateJavaSource ( ""                    if("" + resultName + "" != null){"" ) ; ctxt . generateJavaSource ( ""                        "" + methodName + "".invoke("" + targetName + "", new Object[]{org.apache.el.lang.ELSupport.coerceToType("" + resultName + "", "" + methodName + "".getParameterTypes()[0])});"" ) ; ctxt . generateJavaSource ( ""                    }else{"" ) ; ctxt . generateJavaSource ( ""                        "" + methodName + "".invoke("" + targetName + "", new Object[]{null});"" ) ; ctxt . generateJavaSource ( ""                    }"" ) ; ctxt . generateJavaSource ( ""                    "" + successFlagName + "" = true;"" ) ; ctxt . generateJavaSource ( ""                }"" ) ; ctxt . generateJavaSource ( ""            }"" ) ; ctxt . generateJavaSource ( ""            if(!"" + successFlagName + ""){"" ) ; ctxt . generateJavaSource ( ""                throw new JspException(\""Invalid property in &lt;set&gt;:\""+"" + propertyName + "");"" ) ; ctxt . generateJavaSource ( ""            }"" ) ; ctxt . generateJavaSource ( ""        }"" ) ; ctxt . generateJavaSource ( ""        catch (IllegalAccessException ex) {"" ) ; ctxt . generateJavaSource ( ""            throw new JspException(ex);"" ) ; ctxt . generateJavaSource ( ""        } catch (java.beans.IntrospectionException ex) {"" ) ; ctxt . generateJavaSource ( ""            throw new JspException(ex);"" ) ; ctxt . generateJavaSource ( ""        } catch (java.lang.reflect.InvocationTargetException ex) {"" ) ; ctxt . generateJavaSource ( ""            if (ex.getCause() instanceof ThreadDeath) {"" ) ; ctxt . generateJavaSource ( ""                throw (ThreadDeath) ex.getCause();"" ) ; ctxt . generateJavaSource ( ""            }"" ) ; ctxt . generateJavaSource ( ""            if (ex.getCause() instanceof VirtualMachineError) {"" ) ; ctxt . generateJavaSource ( ""                throw (VirtualMachineError) ex.getCause();"" ) ; ctxt . generateJavaSource ( ""            }"" ) ; ctxt . generateJavaSource ( ""            throw new JspException(ex);"" ) ; ctxt . generateJavaSource ( ""        }"" ) ; ctxt . generateJavaSource ( ""    }"" ) ; ctxt . generateJavaSource ( ""}else{"" ) ; ctxt . generateJavaSource ( ""    throw new JspException();"" ) ; ctxt . generateJavaSource ( ""}"" ) ; } }",Smelly
" protected void processMessage ( Message message , Session session ) { if ( message instanceof MimeMessage ) { MimeMessageWrapper wrapper = new MimeMessageWrapper ( session , ( MimeMessage ) message ) ; try { ServiceMcaUtil . evalRules ( dispatcher , wrapper , userLogin ) ; } catch ( GenericServiceException e ) { Debug . logError ( e , ""Problem processing message"" , module ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void run ( ) { StorageService . Verb verb = message . getVerb ( ) ; switch ( verb ) { case BINARY : case MUTATION : case READ : case RANGE_SLICE : case READ_REPAIR : case REQUEST_RESPONSE : if ( System . currentTimeMillis ( ) > constructionTime + DatabaseDescriptor . getRpcTimeout ( ) ) { MessagingService . instance ( ) . incrementDroppedMessages ( verb ) ; return ; } break ; case UNUSED_1 : case UNUSED_2 : case UNUSED_3 : return ; default : break ; } IVerbHandler verbHandler = MessagingService . instance ( ) . getVerbHandler ( verb ) ; assert verbHandler != null : ""unknown verb "" + verb ; verbHandler . doVerb ( message , id ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public Properties extractKafkaConfigToProperties ( ) { Properties prop = new Properties ( ) ; prop . putAll ( this . properties ) ; return prop ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , finishFateOperation_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . sec = new org . apache . accumulo . core . client . impl . thrift . ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } }",Smelly
" public void writeField ( Object pojo , int outboundIndex ) throws IllegalArgumentException , IllegalAccessException { Timestamp o = ( Timestamp ) field . get ( pojo ) ; if ( o != null ) { vector . getMutator ( ) . setSafe ( outboundIndex , o . getTime ( ) ) ; } }",No
" public void testInvalidIdAttribute ( ) throws Exception { final AliasService aliasService = EasyMock . createNiceMock ( AliasService . class ) ; EasyMock . expect ( aliasService . getPasswordFromAliasForCluster ( CLUSTER_NAME , KnoxSessionStore . PAC4J_PASSWORD , true ) ) . andReturn ( PAC4J_PASSWORD . toCharArray ( ) ) . anyTimes ( ) ; EasyMock . expect ( aliasService . getPasswordFromAliasForCluster ( CLUSTER_NAME , KnoxSessionStore . PAC4J_PASSWORD ) ) . andReturn ( PAC4J_PASSWORD . toCharArray ( ) ) . anyTimes ( ) ; EasyMock . replay ( aliasService ) ; final DefaultCryptoService cryptoService = new DefaultCryptoService ( ) ; cryptoService . setAliasService ( aliasService ) ; final GatewayServices services = EasyMock . createNiceMock ( GatewayServices . class ) ; EasyMock . expect ( services . getService ( ServiceType . CRYPTO_SERVICE ) ) . andReturn ( cryptoService ) ; EasyMock . expect ( services . getService ( ServiceType . ALIAS_SERVICE ) ) . andReturn ( aliasService ) ; EasyMock . replay ( services ) ; final ServletContext context = EasyMock . createNiceMock ( ServletContext . class ) ; EasyMock . expect ( context . getAttribute ( GatewayServices . GATEWAY_SERVICES_ATTRIBUTE ) ) . andReturn ( services ) ; EasyMock . expect ( context . getAttribute ( GatewayServices . GATEWAY_CLUSTER_ATTRIBUTE ) ) . andReturn ( CLUSTER_NAME ) ; EasyMock . replay ( context ) ; final FilterConfig config = EasyMock . createNiceMock ( FilterConfig . class ) ; EasyMock . expect ( config . getServletContext ( ) ) . andReturn ( context ) ; EasyMock . expect ( config . getInitParameter ( Pac4jDispatcherFilter . PAC4J_CALLBACK_URL ) ) . andReturn ( PAC4J_CALLBACK_URL ) ; EasyMock . expect ( config . getInitParameter ( ""clientName"" ) ) . andReturn ( Pac4jDispatcherFilter . TEST_BASIC_AUTH ) ; EasyMock . expect ( config . getInitParameter ( Pac4jIdentityAdapter . PAC4J_ID_ATTRIBUTE ) ) . andReturn ( ""larry"" ) ; EasyMock . replay ( config ) ; final Pac4jDispatcherFilter dispatcher = new Pac4jDispatcherFilter ( ) ; dispatcher . init ( config ) ; final Pac4jIdentityAdapter adapter = new Pac4jIdentityAdapter ( ) ; adapter . init ( config ) ; Pac4jIdentityAdapter . setAuditor ( EasyMock . createNiceMock ( Auditor . class ) ) ; final AuditService auditService = EasyMock . createNiceMock ( AuditService . class ) ; EasyMock . expect ( auditService . getContext ( ) ) . andReturn ( EasyMock . createNiceMock ( AuditContext . class ) ) ; EasyMock . replay ( auditService ) ; Pac4jIdentityAdapter . setAuditService ( auditService ) ; MockHttpServletRequest request = new MockHttpServletRequest ( ) ; request . setRequestURL ( KNOXSSO_SERVICE_URL + ""?"" + ORIGINAL_URL + ""="" + HADOOP_SERVICE_URL ) ; request . setCookies ( new Cookie [ 0 ] ) ; request . setServerName ( LOCALHOST ) ; MockHttpServletResponse response = new MockHttpServletResponse ( ) ; FilterChain filterChain = EasyMock . createNiceMock ( FilterChain . class ) ; dispatcher . doFilter ( request , response , filterChain ) ; assertEquals ( 302 , response . getStatus ( ) ) ; assertEquals ( PAC4J_CALLBACK_URL + ""?"" + Pac4jDispatcherFilter . PAC4J_CALLBACK_PARAMETER + ""=true&"" + Pac4jConstants . DEFAULT_CLIENT_NAME_PARAMETER + ""="" + CLIENT_CLASS , response . getHeaders ( ) . get ( ""Location"" ) ) ; List < Cookie > cookies = response . getCookies ( ) ; assertEquals ( 1 , cookies . size ( ) ) ; final Cookie requestedUrlCookie = cookies . get ( 0 ) ; assertEquals ( KnoxSessionStore . PAC4J_SESSION_PREFIX + Pac4jConstants . REQUESTED_URL , requestedUrlCookie . getName ( ) ) ; request = new MockHttpServletRequest ( ) ; request . setCookies ( new Cookie [ ] { requestedUrlCookie } ) ; request . setRequestURL ( PAC4J_CALLBACK_URL + ""?"" + Pac4jDispatcherFilter . PAC4J_CALLBACK_PARAMETER + ""=true&"" + Pac4jConstants . DEFAULT_CLIENT_NAME_PARAMETER + ""="" + Pac4jConstants . DEFAULT_CLIENT_NAME_PARAMETER + ""="" + CLIENT_CLASS ) ; request . addParameter ( Pac4jDispatcherFilter . PAC4J_CALLBACK_PARAMETER , ""true"" ) ; request . addParameter ( Pac4jConstants . DEFAULT_CLIENT_NAME_PARAMETER , CLIENT_CLASS ) ; request . addHeader ( ""Authorization"" , ""Basic amxlbGV1OmpsZWxldQ=="" ) ; request . setServerName ( LOCALHOST ) ; response = new MockHttpServletResponse ( ) ; filterChain = EasyMock . createNiceMock ( FilterChain . class ) ; dispatcher . doFilter ( request , response , filterChain ) ; assertEquals ( 302 , response . getStatus ( ) ) ; assertEquals ( KNOXSSO_SERVICE_URL + ""?"" + ORIGINAL_URL + ""="" + HADOOP_SERVICE_URL , response . getHeaders ( ) . get ( ""Location"" ) ) ; cookies = response . getCookies ( ) ; Map < String , String > mapCookies = new HashMap < > ( ) ; assertEquals ( 2 , cookies . size ( ) ) ; for ( final Cookie cookie : cookies ) { mapCookies . put ( cookie . getName ( ) , cookie . getValue ( ) ) ; } assertNotNull ( mapCookies . get ( KnoxSessionStore . PAC4J_SESSION_PREFIX + Pac4jConstants . USER_PROFILES ) ) ; assertNull ( mapCookies . get ( KnoxSessionStore . PAC4J_SESSION_PREFIX + Pac4jConstants . REQUESTED_URL ) ) ; request = new MockHttpServletRequest ( ) ; request . setCookies ( cookies . toArray ( new Cookie [ 0 ] ) ) ; request . setRequestURL ( KNOXSSO_SERVICE_URL + ""?"" + ORIGINAL_URL + ""="" + HADOOP_SERVICE_URL ) ; request . setServerName ( LOCALHOST ) ; response = new MockHttpServletResponse ( ) ; filterChain = EasyMock . createNiceMock ( FilterChain . class ) ; dispatcher . doFilter ( request , response , filterChain ) ; assertEquals ( 0 , response . getStatus ( ) ) ; adapter . doFilter ( request , response , filterChain ) ; cookies = response . getCookies ( ) ; assertEquals ( 1 , cookies . size ( ) ) ; final Cookie userProfileCookie = cookies . get ( 0 ) ; assertEquals ( KnoxSessionStore . PAC4J_SESSION_PREFIX + Pac4jConstants . USER_PROFILES , userProfileCookie . getName ( ) ) ; assertNull ( userProfileCookie . getValue ( ) ) ; assertEquals ( USERNAME , adapter . getTestIdentifier ( ) ) ; }",Smelly
" public void initialize ( ) throws InstantiationException , IllegalAccessException { registerAggregator ( SMC_AGG , DoubleOverwriteAggregator . class ) ; }",Smelly
 public static Test suite ( ) { return new Jcr2SpiTestSuite ( ) ; },No
 public AddressingProperties createCompatibleResponseProperties ( ) { return new AddressingPropertiesImpl ( getNamespaceURI ( ) ) ; },No
 public void setDhKeysReused ( boolean isDhKeysReused ) { this . isDhKeysReused = isDhKeysReused ; },No
" private void updateScheduledTaskStatus ( ResourceId resourceId , ExternalView ev , HelixManager manager , SchedulerTaskConfig schedulerTaskConfig ) { HelixDataAccessor accessor = manager . getHelixDataAccessor ( ) ; Builder keyBuilder = accessor . keyBuilder ( ) ; ZNRecord finishedTasks = new ZNRecord ( ev . getResourceName ( ) ) ; Map < String , String > emptyMap = new HashMap < String , String > ( ) ; List < String > emptyList = new LinkedList < String > ( ) ; Map < String , Integer > controllerMsgIdCountMap = new HashMap < String , Integer > ( ) ; Map < String , Map < String , String > > controllerMsgUpdates = new HashMap < String , Map < String , String > > ( ) ; for ( String taskPartitionName : ev . getPartitionSet ( ) ) { for ( String taskState : ev . getStateMap ( taskPartitionName ) . values ( ) ) { if ( taskState . equalsIgnoreCase ( HelixDefinedState . ERROR . toString ( ) ) || taskState . equalsIgnoreCase ( ""COMPLETED"" ) ) { LOG . info ( taskPartitionName + "" finished as "" + taskState ) ; finishedTasks . setListField ( taskPartitionName , emptyList ) ; finishedTasks . setMapField ( taskPartitionName , emptyMap ) ; Message innerMessage = schedulerTaskConfig . getInnerMessage ( PartitionId . from ( taskPartitionName ) ) ; if ( innerMessage != null ) { String controllerMsgId = innerMessage . getControllerMessageId ( ) ; if ( controllerMsgId != null ) { LOG . info ( taskPartitionName + "" finished with controllerMsg "" + controllerMsgId ) ; if ( ! controllerMsgUpdates . containsKey ( controllerMsgId ) ) { controllerMsgUpdates . put ( controllerMsgId , new HashMap < String , String > ( ) ) ; } controllerMsgUpdates . get ( controllerMsgId ) . put ( taskPartitionName , taskState ) ; } } } } } for ( PartitionId taskId : schedulerTaskConfig . getPartitionSet ( ) ) { Message innerMessage = schedulerTaskConfig . getInnerMessage ( taskId ) ; String controllerMsgId = innerMessage . getControllerMessageId ( ) ; if ( controllerMsgId != null ) { Integer curCnt = controllerMsgIdCountMap . get ( controllerMsgId ) ; if ( curCnt == null ) { curCnt = 0 ; } controllerMsgIdCountMap . put ( controllerMsgId , curCnt + 1 ) ; } } if ( controllerMsgUpdates . size ( ) > 0 ) { for ( String controllerMsgId : controllerMsgUpdates . keySet ( ) ) { PropertyKey controllerStatusUpdateKey = keyBuilder . controllerTaskStatus ( MessageType . SCHEDULER_MSG . toString ( ) , controllerMsgId ) ; StatusUpdate controllerStatusUpdate = accessor . getProperty ( controllerStatusUpdateKey ) ; for ( String taskPartitionName : controllerMsgUpdates . get ( controllerMsgId ) . keySet ( ) ) { Message innerMessage = schedulerTaskConfig . getInnerMessage ( PartitionId . from ( taskPartitionName ) ) ; Map < String , String > result = new HashMap < String , String > ( ) ; result . put ( ""Result"" , controllerMsgUpdates . get ( controllerMsgId ) . get ( taskPartitionName ) ) ; controllerStatusUpdate . getRecord ( ) . setMapField ( ""MessageResult "" + innerMessage . getTgtName ( ) + "" "" + taskPartitionName + "" "" + innerMessage . getMessageId ( ) , result ) ; } if ( controllerMsgUpdates . get ( controllerMsgId ) . size ( ) == controllerMsgIdCountMap . get ( controllerMsgId ) . intValue ( ) ) { int finishedTasksNum = 0 ; int completedTasksNum = 0 ; for ( String key : controllerStatusUpdate . getRecord ( ) . getMapFields ( ) . keySet ( ) ) { if ( key . startsWith ( ""MessageResult "" ) ) { finishedTasksNum ++ ; } if ( controllerStatusUpdate . getRecord ( ) . getMapField ( key ) . get ( ""Result"" ) != null ) { if ( controllerStatusUpdate . getRecord ( ) . getMapField ( key ) . get ( ""Result"" ) . equalsIgnoreCase ( ""COMPLETED"" ) ) { completedTasksNum ++ ; } } } Map < String , String > summary = new TreeMap < String , String > ( ) ; summary . put ( ""TotalMessages:"" , """" + finishedTasksNum ) ; summary . put ( ""CompletedMessages"" , """" + completedTasksNum ) ; controllerStatusUpdate . getRecord ( ) . setMapField ( ""Summary"" , summary ) ; } accessor . updateProperty ( controllerStatusUpdateKey , controllerStatusUpdate ) ; } } if ( finishedTasks . getListFields ( ) . size ( ) > 0 ) { ZNRecordDelta znDelta = new ZNRecordDelta ( finishedTasks , MergeOperation . SUBTRACT ) ; List < ZNRecordDelta > deltaList = new LinkedList < ZNRecordDelta > ( ) ; deltaList . add ( znDelta ) ; IdealState delta = new IdealState ( resourceId ) ; delta . setDeltaList ( deltaList ) ; keyBuilder = accessor . keyBuilder ( ) ; accessor . updateProperty ( keyBuilder . idealStates ( resourceId . stringify ( ) ) , delta ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testAccessors ( ) { final NumberIsTooLargeException e = new NumberIsTooLargeException ( 1 , 0 , true ) ; Assert . assertEquals ( 1 , e . getArgument ( ) ) ; Assert . assertEquals ( 0 , e . getMax ( ) ) ; Assert . assertTrue ( e . getBoundIsAllowed ( ) ) ; }",No
 Path getTablePath ( ) ;,No
 public void close ( ) { },No
" public void doTransition ( Message message , NotificationContext context ) throws InterruptedException { Thread . sleep ( _delay ) ; }",No
" public void test ( ) { ContainsBooleanFunction f = new ContainsBooleanFunction ( new SimpleStringExpression ( ""abc"" ) , new SimpleStringExpression ( ""def"" ) ) ; BooleanOperationsExtension extension = new BooleanOperationsExtension ( ) ; String verbalize = extension . verbalize ( f , new RutaVerbalizer ( ) ) ; Assert . assertEquals ( ""contains(\""abc\"",\""def\"")"" , verbalize ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public Object terminate ( AggregationBuffer agg ) throws HiveException { SumLongAgg myagg = ( SumLongAgg ) agg ; if ( myagg . empty ) { return null ; } result . set ( myagg . sum ) ; return result ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public String toString ( ) { return ""email = "" + email + "", phoneCountry = "" + phoneCountry + "", phoneZone = "" + phoneZone + "", phoneNumber = "" + phoneNumber + "", ipAddress = "" + ipAddress + "", contacts = "" + contacts . toString ( ) ; }",No
 protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; FlushCommand info = ( FlushCommand ) object ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected NodeWritable [ ] split ( QuadWritable tuple ) { Quad q = tuple . get ( ) ; return new NodeWritable [ ] { new NodeWritable ( q . getGraph ( ) ) , new NodeWritable ( q . getSubject ( ) ) , new NodeWritable ( q . getPredicate ( ) ) , new NodeWritable ( q . getObject ( ) ) } ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" List < Boolean > getBooleanList ( MatchContext context , RutaStream stream ) ;",No
 public RMNode getRemovedRMNode ( ) { return rmNode ; },No
 protected void unregisterFromContainerListener ( ) { this . containerHeartbeatHandler . unregister ( this . containerId ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , HiveClusterStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . taskTrackers = iprot . readI32 ( ) ; struct . setTaskTrackersIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . mapTasks = iprot . readI32 ( ) ; struct . setMapTasksIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . reduceTasks = iprot . readI32 ( ) ; struct . setReduceTasksIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . maxMapTasks = iprot . readI32 ( ) ; struct . setMaxMapTasksIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . maxReduceTasks = iprot . readI32 ( ) ; struct . setMaxReduceTasksIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . state = JobTrackerState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; } }",Smelly
 public TaskAttemptStatus getReportedTaskAttemptStatus ( ) { return reportedTaskAttemptStatus ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Key struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . row = iprot . readBinary ( ) ; struct . setRowIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . colFamily = iprot . readBinary ( ) ; struct . setColFamilyIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . colQualifier = iprot . readBinary ( ) ; struct . setColQualifierIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . colVisibility = iprot . readBinary ( ) ; struct . setColVisibilityIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . timestamp = iprot . readI64 ( ) ; struct . setTimestampIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TKeyExtent struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . table = iprot . readBinary ( ) ; struct . setTableIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . endRow = iprot . readBinary ( ) ; struct . setEndRowIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . prevEndRow = iprot . readBinary ( ) ; struct . setPrevEndRowIsSet ( true ) ; } }",Smelly
" private void doRun ( ) { if ( socket . getSocket ( ) == null ) { return ; } SocketState state = handler . process ( socket , status ) ; if ( state == Handler . SocketState . CLOSED ) { closeSocket ( socket . getSocket ( ) . longValue ( ) ) ; socket . socket = null ; } else if ( state == Handler . SocketState . LONG ) { socket . access ( ) ; if ( socket . async ) { waitingRequests . add ( socket ) ; } } else if ( state == Handler . SocketState . ASYNC_END ) { socket . access ( ) ; SocketProcessor proc = new SocketProcessor ( socket , SocketStatus . OPEN_READ ) ; getExecutor ( ) . execute ( proc ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public String toString ( ) { return def . name + "":"" + def . type ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void run ( ) { try { long startMillis = System . currentTimeMillis ( ) ; long initializeMillis = 0 ; long endMillis = 0 ; bspServiceMaster . setup ( ) ; SuperstepState superstepState = SuperstepState . INITIAL ; if ( bspServiceMaster . becomeMaster ( ) ) { bspServiceMaster . checkWorkers ( ) ; initializeMillis = System . currentTimeMillis ( ) ; GiraphTimers . getInstance ( ) . getInitializeMs ( ) . increment ( initializeMillis - startMillis ) ; if ( bspServiceMaster . getRestartedSuperstep ( ) != BspService . UNSET_SUPERSTEP || ( bspServiceMaster . createMappingInputSplits ( ) != - 1 && bspServiceMaster . createVertexInputSplits ( ) != - 1 && bspServiceMaster . createEdgeInputSplits ( ) != - 1 ) ) { long setupMillis = System . currentTimeMillis ( ) - initializeMillis ; GiraphTimers . getInstance ( ) . getSetupMs ( ) . increment ( setupMillis ) ; setupSecs = setupMillis / 1000.0d ; while ( ! superstepState . isExecutionComplete ( ) ) { long startSuperstepMillis = System . currentTimeMillis ( ) ; long cachedSuperstep = bspServiceMaster . getSuperstep ( ) ; GiraphMetrics . get ( ) . resetSuperstepMetrics ( cachedSuperstep ) ; Class < ? extends Computation > computationClass = bspServiceMaster . getMasterCompute ( ) . getComputation ( ) ; superstepState = bspServiceMaster . coordinateSuperstep ( ) ; long superstepMillis = System . currentTimeMillis ( ) - startSuperstepMillis ; superstepSecsMap . put ( cachedSuperstep , superstepMillis / 1000.0d ) ; if ( LOG . isInfoEnabled ( ) ) { LOG . info ( ""masterThread: Coordination of superstep "" + cachedSuperstep + "" took "" + superstepMillis / 1000.0d + "" seconds ended with state "" + superstepState + "" and is now on superstep "" + bspServiceMaster . getSuperstep ( ) ) ; } if ( superstepCounterOn ) { String computationName = ( computationClass == null ) ? null : computationClass . getSimpleName ( ) ; GiraphTimers . getInstance ( ) . getSuperstepMs ( cachedSuperstep , computationName ) . increment ( superstepMillis ) ; } bspServiceMaster . postSuperstep ( ) ; if ( superstepState == SuperstepState . WORKER_FAILURE ) { bspServiceMaster . restartFromCheckpoint ( bspServiceMaster . getLastGoodCheckpoint ( ) ) ; } endMillis = System . currentTimeMillis ( ) ; } bspServiceMaster . setJobState ( ApplicationState . FINISHED , - 1 , - 1 ) ; } } bspServiceMaster . cleanup ( superstepState ) ; if ( ! superstepSecsMap . isEmpty ( ) ) { GiraphTimers . getInstance ( ) . getShutdownMs ( ) . increment ( System . currentTimeMillis ( ) - endMillis ) ; if ( LOG . isInfoEnabled ( ) ) { LOG . info ( ""setup: Took "" + setupSecs + "" seconds."" ) ; } for ( Entry < Long , Double > entry : superstepSecsMap . entrySet ( ) ) { if ( LOG . isInfoEnabled ( ) ) { if ( entry . getKey ( ) . longValue ( ) == BspService . INPUT_SUPERSTEP ) { LOG . info ( ""input superstep: Took "" + entry . getValue ( ) + "" seconds."" ) ; } else { LOG . info ( ""superstep "" + entry . getKey ( ) + "": Took "" + entry . getValue ( ) + "" seconds."" ) ; } } context . progress ( ) ; } if ( LOG . isInfoEnabled ( ) ) { LOG . info ( ""shutdown: Took "" + ( System . currentTimeMillis ( ) - endMillis ) / 1000.0d + "" seconds."" ) ; LOG . info ( ""total: Took "" + ( ( System . currentTimeMillis ( ) - initializeMillis ) / 1000.0d ) + "" seconds."" ) ; } GiraphTimers . getInstance ( ) . getTotalMs ( ) . increment ( System . currentTimeMillis ( ) - initializeMillis ) ; } bspServiceMaster . postApplication ( ) ; } catch ( Exception e ) { LOG . error ( ""masterThread: Master algorithm failed with "" + e . getClass ( ) . getSimpleName ( ) , e ) ; bspServiceMaster . failureCleanup ( e ) ; throw new IllegalStateException ( e ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public String getEmbedded10 ( ) { return embedded10 ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , StoragePreference struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . loginUserName = iprot . readString ( ) ; struct . setLoginUserNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . fileSystemRootLocation = iprot . readString ( ) ; struct . setFileSystemRootLocationIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . resourceSpecificCredentialStoreToken = iprot . readString ( ) ; struct . setResourceSpecificCredentialStoreTokenIsSet ( true ) ; } }",Smelly
" private static void deleteElasticDataDirectory ( ) { try { FileUtils . deleteDirectory ( new File ( elasticTempFolder . getRoot ( ) . getPath ( ) ) ) ; } catch ( IOException e ) { throw new RuntimeException ( ""Could not delete elastic data directory: "" + e . getMessage ( ) , e ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected DataFileReader < T > createAvroFileReader ( SeekableInput input , DatumReader < T > datumReader ) throws IOException { return new DataFileReader < > ( input , datumReader ) ; }",No
" public void setAttribute ( Attribute attribute ) throws AttributeNotFoundException , MBeanException , ReflectionException { if ( attribute == null ) throw new RuntimeOperationsException ( new IllegalArgumentException ( ""Attribute is null"" ) , ""Attribute is null"" ) ; String name = attribute . getName ( ) ; Object value = attribute . getValue ( ) ; if ( name == null ) throw new RuntimeOperationsException ( new IllegalArgumentException ( ""Attribute name is null"" ) , ""Attribute name is null"" ) ; ContextResource cr = null ; try { cr = ( ContextResource ) getManagedResource ( ) ; } catch ( InstanceNotFoundException e ) { throw new MBeanException ( e ) ; } catch ( InvalidTargetObjectTypeException e ) { throw new MBeanException ( e ) ; } if ( ""auth"" . equals ( name ) ) { cr . setAuth ( ( String ) value ) ; } else if ( ""description"" . equals ( name ) ) { cr . setDescription ( ( String ) value ) ; } else if ( ""name"" . equals ( name ) ) { cr . setName ( ( String ) value ) ; } else if ( ""scope"" . equals ( name ) ) { cr . setScope ( ( String ) value ) ; } else if ( ""type"" . equals ( name ) ) { cr . setType ( ( String ) value ) ; } else { cr . setProperty ( name , """" + value ) ; } NamingResources nr = cr . getNamingResources ( ) ; nr . removeResource ( cr . getName ( ) ) ; nr . addResource ( cr ) ; }",Smelly
" public EntityCondition createCondition ( ModelFieldTypeReader modelFieldTypeReader , List < String > entityAliasStack ) { if ( this . conditionList . size ( ) == 0 ) { return null ; } if ( this . conditionList . size ( ) == 1 ) { ViewCondition condition = this . conditionList . get ( 0 ) ; return condition . createCondition ( modelFieldTypeReader , entityAliasStack ) ; } List < EntityCondition > entityConditionList = new LinkedList < EntityCondition > ( ) ; for ( ViewCondition curCondition : conditionList ) { EntityCondition econd = curCondition . createCondition ( modelFieldTypeReader , entityAliasStack ) ; if ( econd != null ) { entityConditionList . add ( econd ) ; } } return EntityCondition . makeCondition ( entityConditionList , this . operator ) ; }",Smelly
" public void testScroogeBinaryDecoding ( ) throws Exception { StringAndBinary expected = new StringAndBinary . Immutable ( ""test"" , ByteBuffer . wrap ( new byte [ ] { - 123 , 20 , 33 } ) ) ; File temp = tempDir . newFile ( UUID . randomUUID ( ) . toString ( ) ) ; temp . deleteOnExit ( ) ; temp . delete ( ) ; Path path = new Path ( temp . getPath ( ) ) ; ParquetWriter < StringAndBinary > writer = new ParquetWriter < StringAndBinary > ( path , new Configuration ( ) , new ScroogeWriteSupport < StringAndBinary > ( StringAndBinary . class ) ) ; writer . write ( expected ) ; writer . close ( ) ; Configuration conf = new Configuration ( ) ; conf . set ( ""parquet.thrift.converter.class"" , ScroogeRecordConverter . class . getName ( ) ) ; ParquetReader < StringAndBinary > reader = ParquetReader . < StringAndBinary > builder ( new ScroogeReadSupport ( ) , path ) . withConf ( conf ) . build ( ) ; StringAndBinary record = reader . read ( ) ; reader . close ( ) ; Assert . assertEquals ( ""String should match after serialization round trip"" , ""test"" , record . s ( ) ) ; Assert . assertEquals ( ""ByteBuffer should match after serialization round trip"" , ByteBuffer . wrap ( new byte [ ] { - 123 , 20 , 33 } ) , record . b ( ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
 protected V getValue ( ) { return value ; },No
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . simplePath ( ) , __ . simplePath ( ) . from ( ""a"" ) . to ( ""b"" ) , __ . simplePath ( ) . from ( ""a"" ) , __ . simplePath ( ) . to ( ""b"" ) , __ . simplePath ( ) . from ( ""a"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . simplePath ( ) . from ( ""a"" ) . to ( ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . simplePath ( ) . by ( ""name"" ) . by ( ""age"" ) , __ . cyclicPath ( ) . from ( ""a"" ) , __ . cyclicPath ( ) . to ( ""b"" ) , __ . cyclicPath ( ) . from ( ""a"" ) . to ( ""b"" ) , __ . cyclicPath ( ) , __ . cyclicPath ( ) . from ( ""a"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . cyclicPath ( ) . from ( ""a"" ) . to ( ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . cyclicPath ( ) . by ( ""name"" ) . by ( ""age"" ) ) ; }",Smelly
" public void onMatch ( RelOptRuleCall call ) { final Aggregate topAgg = call . rel ( 0 ) ; final Aggregate bottomAgg = call . rel ( 1 ) ; if ( topAgg . getGroupCount ( ) > bottomAgg . getGroupCount ( ) ) { return ; } final ImmutableBitSet bottomGroupSet = bottomAgg . getGroupSet ( ) ; final Map < Integer , Integer > map = new HashMap < > ( ) ; bottomGroupSet . forEach ( v -> map . put ( map . size ( ) , v ) ) ; for ( int k : topAgg . getGroupSet ( ) ) { if ( ! map . containsKey ( k ) ) { return ; } } final ImmutableBitSet topGroupSet = topAgg . getGroupSet ( ) . permute ( map ) ; if ( ! bottomGroupSet . contains ( topGroupSet ) ) { return ; } boolean hasEmptyGroup = topAgg . getGroupSets ( ) . stream ( ) . anyMatch ( n -> n . isEmpty ( ) ) ; final List < AggregateCall > finalCalls = new ArrayList < > ( ) ; for ( AggregateCall topCall : topAgg . getAggCallList ( ) ) { if ( ! isAggregateSupported ( topCall ) || topCall . getArgList ( ) . size ( ) == 0 ) { return ; } int bottomIndex = topCall . getArgList ( ) . get ( 0 ) - bottomGroupSet . cardinality ( ) ; if ( bottomIndex >= bottomAgg . getAggCallList ( ) . size ( ) || bottomIndex < 0 ) { return ; } AggregateCall bottomCall = bottomAgg . getAggCallList ( ) . get ( bottomIndex ) ; if ( ! isAggregateSupported ( bottomCall ) || ( bottomCall . getAggregation ( ) == SqlStdOperatorTable . COUNT && hasEmptyGroup ) ) { return ; } SqlSplittableAggFunction splitter = Objects . requireNonNull ( bottomCall . getAggregation ( ) . unwrap ( SqlSplittableAggFunction . class ) ) ; AggregateCall finalCall = splitter . merge ( topCall , bottomCall ) ; if ( finalCall == null ) { return ; } finalCalls . add ( finalCall ) ; } ImmutableList < ImmutableBitSet > newGroupingSets = null ; if ( topAgg . getGroupType ( ) != Group . SIMPLE ) { newGroupingSets = ImmutableBitSet . ORDERING . immutableSortedCopy ( ImmutableBitSet . permute ( topAgg . getGroupSets ( ) , map ) ) ; } final Aggregate finalAgg = topAgg . copy ( topAgg . getTraitSet ( ) , bottomAgg . getInput ( ) , topGroupSet , newGroupingSets , finalCalls ) ; call . transformTo ( finalAgg ) ; }",Smelly
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . name = ( String ) in . readObject ( ) ; this . ft4Array = in . readObject ( ) ; this . toFT1 = in . readObject ( ) ; this . toFT2 = in . readObject ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public BamProcessorSupport getProcessor ( ) { return processor ; },No
" public RangerServiceResource buildResource ( final IReferenceableInstance entity ) throws Exception { String qualifiedName = getEntityAttribute ( entity , ENTITY_ATTRIBUTE_QUALIFIED_NAME , String . class ) ; if ( StringUtils . isEmpty ( qualifiedName ) ) { throw new Exception ( ""attribute '"" + ENTITY_ATTRIBUTE_QUALIFIED_NAME + ""' not found in entity"" ) ; } String resourceStr = getResourceNameFromQualifiedName ( qualifiedName ) ; if ( StringUtils . isEmpty ( resourceStr ) ) { throwExceptionWithMessage ( ""resource not found in attribute '"" + ENTITY_ATTRIBUTE_QUALIFIED_NAME + ""': "" + qualifiedName ) ; } String clusterName = getClusterNameFromQualifiedName ( qualifiedName ) ; if ( StringUtils . isEmpty ( clusterName ) ) { throwExceptionWithMessage ( ""cluster-name not found in attribute '"" + ENTITY_ATTRIBUTE_QUALIFIED_NAME + ""': "" + qualifiedName ) ; } String entityType = entity . getTypeName ( ) ; String entityGuid = entity . getId ( ) != null ? entity . getId ( ) . _getId ( ) : null ; String serviceName = getRangerServiceName ( clusterName ) ; Map < String , RangerPolicyResource > elements = new HashMap < String , RangerPolicyResource > ( ) ; if ( StringUtils . equals ( entityType , ENTITY_TYPE_HBASE_TABLE ) ) { String tblName = resourceStr ; if ( StringUtils . isNotEmpty ( tblName ) ) { elements . put ( RANGER_TYPE_HBASE_TABLE , new RangerPolicyResource ( tblName ) ) ; } } else if ( StringUtils . equals ( entityType , ENTITY_TYPE_HBASE_COLUMN_FAMILY ) ) { String [ ] resources = resourceStr . split ( QUALIFIED_NAME_DELIMITER ) ; String tblName = null ; String familyName = null ; if ( resources . length == 2 ) { tblName = resources [ 0 ] ; familyName = resources [ 1 ] ; } else if ( resources . length > 2 ) { StringBuffer tblNameBuf = new StringBuffer ( resources [ 0 ] ) ; for ( int i = 1 ; i < resources . length - 1 ; i ++ ) { tblNameBuf . append ( QUALIFIED_NAME_DELIMITER_CHAR ) . append ( resources [ i ] ) ; } tblName = tblNameBuf . toString ( ) ; familyName = resources [ resources . length - 1 ] ; } if ( StringUtils . isNotEmpty ( tblName ) && StringUtils . isNotEmpty ( familyName ) ) { elements . put ( RANGER_TYPE_HBASE_TABLE , new RangerPolicyResource ( tblName ) ) ; elements . put ( RANGER_TYPE_HBASE_COLUMN_FAMILY , new RangerPolicyResource ( familyName ) ) ; } } else if ( StringUtils . equals ( entityType , ENTITY_TYPE_HBASE_COLUMN ) ) { String [ ] resources = resourceStr . split ( QUALIFIED_NAME_DELIMITER ) ; String tblName = null ; String familyName = null ; String colName = null ; if ( resources . length == 3 ) { tblName = resources [ 0 ] ; familyName = resources [ 1 ] ; colName = resources [ 2 ] ; } else if ( resources . length > 3 ) { StringBuffer tblNameBuf = new StringBuffer ( resources [ 0 ] ) ; for ( int i = 1 ; i < resources . length - 2 ; i ++ ) { tblNameBuf . append ( QUALIFIED_NAME_DELIMITER_CHAR ) . append ( resources [ i ] ) ; } tblName = tblNameBuf . toString ( ) ; familyName = resources [ resources . length - 2 ] ; colName = resources [ resources . length - 1 ] ; } if ( StringUtils . isNotEmpty ( tblName ) && StringUtils . isNotEmpty ( familyName ) && StringUtils . isNotEmpty ( colName ) ) { elements . put ( RANGER_TYPE_HBASE_TABLE , new RangerPolicyResource ( tblName ) ) ; elements . put ( RANGER_TYPE_HBASE_COLUMN_FAMILY , new RangerPolicyResource ( familyName ) ) ; elements . put ( RANGER_TYPE_HBASE_COLUMN , new RangerPolicyResource ( colName ) ) ; } } else { throwExceptionWithMessage ( ""unrecognized entity-type: "" + entityType ) ; } if ( elements . isEmpty ( ) ) { throwExceptionWithMessage ( ""invalid qualifiedName for entity-type '"" + entityType + ""': "" + qualifiedName ) ; } RangerServiceResource ret = new RangerServiceResource ( entityGuid , serviceName , elements ) ; return ret ; }",Smelly
 public abstract String getSpecificationVersion ( ) ;,No
" private void setUserGroups ( String user , String [ ] groups ) { userToGroupsMapping . put ( user , Arrays . asList ( groups ) ) ; }",No
" public static void main ( final String [ ] args ) throws Exception { int res = ToolRunner . run ( new PerformanceEvaluation ( HBaseConfiguration . create ( ) ) , args ) ; System . exit ( res ) ; }",No
 public void poke ( ) { context . checking ( new Expectations ( ) { { one ( collaborator ) . doOtherStuff ( ) ; } } ) ; new CollaboratingUsingConstructorInjection ( collaborator ) . collaborateWithCollaborator ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void eval ( ) { out . value = org . apache . drill . exec . expr . fn . impl . HashHelper . hash64 ( in . value , 0 ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public Iterator < T > iterator ( ) { return new RepresentativeByteStructIterator < T > ( dataInputFactory . create ( ) ) { @ Override protected T createWritable ( ) { return RepresentativeByteStructIterable . this . createWritable ( ) ; } } ; },No
" public OrderPizzaResponseType orderPizza ( OrderPizzaType body , CallerIDHeaderType callerID ) { OrderPizzaResponseType resp = new OrderPizzaResponseType ( ) ; if ( body . getToppings ( ) . getTopping ( ) . get ( 0 ) . contains ( ""NoHeader"" ) ) { resp . setMinutesUntilReady ( 100 ) ; } else { resp . setMinutesUntilReady ( 100 + Integer . parseInt ( callerID . getPhoneNumber ( ) ) ) ; } return resp ; }",No
 protected List < PackagePart > getMainDocumentParts ( ) { return new ArrayList < PackagePart > ( ) ; },No
 void delete ( String key ) ;,No
" public void testGetWritableObject ( ) throws Exception { assertNull ( MySQLCDCUtils . getWritableObject ( null , null ) ) ; assertNull ( MySQLCDCUtils . getWritableObject ( Types . INTEGER , null ) ) ; assertEquals ( ( byte ) 1 , MySQLCDCUtils . getWritableObject ( Types . INTEGER , ( byte ) 1 ) ) ; assertEquals ( ""Hello"" , MySQLCDCUtils . getWritableObject ( Types . VARCHAR , ""Hello"" . getBytes ( ) ) ) ; }",Smelly
" public void testStringFunctions ( ) throws Exception { ExpressionChecker checker = new ExpressionChecker ( ) . addExpr ( ""c_integer = 1 AND c_bigint = 1"" , true ) . addExpr ( ""c_integer = 1 OR c_bigint = 2"" , true ) . addExpr ( ""NOT c_bigint = 2"" , true ) . addExpr ( ""(NOT c_bigint = 2) AND (c_integer = 1 OR c_bigint = 3)"" , true ) . addExpr ( ""c_integer = 2 AND c_bigint = 1"" , false ) . addExpr ( ""c_integer = 2 OR c_bigint = 2"" , false ) . addExpr ( ""NOT c_bigint = 1"" , false ) . addExpr ( ""(NOT c_bigint = 2) AND (c_integer = 2 OR c_bigint = 3)"" , false ) ; checker . buildRunAndCheck ( ) ; }",Smelly
 Map getExtraParameters ( ) ;,No
" private double brent ( double lo , double hi , double fLo , double fHi ) { double a = lo ; double fa = fLo ; double b = hi ; double fb = fHi ; double c = a ; double fc = fa ; double d = b - a ; double e = d ; final double t = getAbsoluteAccuracy ( ) ; final double eps = getRelativeAccuracy ( ) ; while ( true ) { if ( FastMath . abs ( fc ) < FastMath . abs ( fb ) ) { a = b ; b = c ; c = a ; fa = fb ; fb = fc ; fc = fa ; } final double tol = 2 * eps * FastMath . abs ( b ) + t ; final double m = 0.5 * ( c - b ) ; if ( FastMath . abs ( m ) <= tol || Precision . equals ( fb , 0 ) ) { return b ; } if ( FastMath . abs ( e ) < tol || FastMath . abs ( fa ) <= FastMath . abs ( fb ) ) { d = m ; e = d ; } else { double s = fb / fa ; double p ; double q ; if ( a == c ) { p = 2 * m * s ; q = 1 - s ; } else { q = fa / fc ; final double r = fb / fc ; p = s * ( 2 * m * q * ( q - r ) - ( b - a ) * ( r - 1 ) ) ; q = ( q - 1 ) * ( r - 1 ) * ( s - 1 ) ; } if ( p > 0 ) { q = - q ; } else { p = - p ; } s = e ; e = d ; if ( p >= 1.5 * m * q - FastMath . abs ( tol * q ) || p >= FastMath . abs ( 0.5 * s * q ) ) { d = m ; e = d ; } else { d = p / q ; } } a = b ; fa = fb ; if ( FastMath . abs ( d ) > tol ) { b += d ; } else if ( m > 0 ) { b += tol ; } else { b -= tol ; } fb = computeObjectiveValue ( b ) ; if ( ( fb > 0 && fc > 0 ) || ( fb <= 0 && fc <= 0 ) ) { c = a ; fc = fa ; d = b - a ; e = d ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void runAction ( Map < String , Object > context ) { ModelForm parentModel = modelForm . getParentModelForm ( ) ; switch ( kind ) { case ACTIONS : parentModel . runFormActions ( context ) ; break ; case ROW_ACTIONS : ModelFormAction . runSubActions ( parentModel . rowActions , context ) ; break ; } }",Smelly
" public void eval ( ) { final int len = in . end - in . start ; out . start = 0 ; out . end = len ; out . buffer = buffer = buffer . reallocIfNeeded ( len ) ; int charLen ; int index = out . end ; int innerIndex ; for ( int id = in . start ; id < in . end ; id += charLen ) { innerIndex = charLen = org . apache . drill . exec . expr . fn . impl . StringFunctionUtil . utf8CharLen ( in . buffer , id ) ; while ( innerIndex > 0 ) { out . buffer . setByte ( index - innerIndex , in . buffer . getByte ( id + ( charLen - innerIndex ) ) ) ; innerIndex -- ; } index -= charLen ; } }",No
 protected ActionPreparator getPreparator ( ) throws Exception { return new DefaultActionPreparator ( ) ; },No
" public void testEnumXmlType ( ) { ClassMapping mapping = getMapping ( Authority . class ) ; FieldMapping fm = mapping . getFieldMapping ( ""authorityName"" ) ; Column [ ] cols = fm . getColumns ( ) ; assertFalse ( cols [ 0 ] . isXML ( ) ) ; }",No
" public ValueReference getValueReference ( ELContext context ) { EvaluationContext ctx = new EvaluationContext ( context , this . fnMapper , this . varMapper ) ; return this . getNode ( ) . getValueReference ( ctx ) ; }",No
" public String getRealmFromToken ( AssertionWrapper assertion ) { if ( ""A-Issuer"" . equals ( assertion . getIssuerString ( ) ) ) { return ""A"" ; } else if ( ""B-Issuer"" . equals ( assertion . getIssuerString ( ) ) ) { return ""B"" ; } return null ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void setValueAt ( Object value , int rowIndex , int columnIndex ) { Object item = list . get ( rowIndex ) ; listContext . put ( ITEM_VAR , item ) ; columns [ columnIndex ] . setValue ( getContext ( ) , listContext , value ) ; }",No
" private static PCollection < ? > unionSideInputs ( List < PCollectionView < ? > > sideInputs , TranslationContext context ) { checkArgument ( sideInputs . size ( ) > 1 , ""requires multiple side inputs"" ) ; List < PCollection < Object > > sourceCollections = new ArrayList < > ( ) ; Map < PCollection < ? > , Integer > unionTags = new HashMap < > ( ) ; PCollection < Object > firstSideInput = context . getViewInput ( sideInputs . get ( 0 ) ) ; for ( int i = 0 ; i < sideInputs . size ( ) ; i ++ ) { PCollectionView < ? > sideInput = sideInputs . get ( i ) ; PCollection < ? > sideInputCollection = context . getViewInput ( sideInput ) ; if ( ! sideInputCollection . getWindowingStrategy ( ) . equals ( firstSideInput . getWindowingStrategy ( ) ) ) { LOG . warn ( ""Side inputs union with different windowing strategies {} {}"" , firstSideInput . getWindowingStrategy ( ) , sideInputCollection . getWindowingStrategy ( ) ) ; } if ( ! sideInputCollection . getCoder ( ) . equals ( firstSideInput . getCoder ( ) ) ) { String msg = context . getFullName ( ) + "": Multiple side inputs with different coders."" ; throw new UnsupportedOperationException ( msg ) ; } sourceCollections . add ( context . getViewInput ( sideInput ) ) ; unionTags . put ( sideInputCollection , i ) ; } PCollection < Object > resultCollection = PCollection . createPrimitiveOutputInternal ( firstSideInput . getPipeline ( ) , firstSideInput . getWindowingStrategy ( ) , firstSideInput . isBounded ( ) , firstSideInput . getCoder ( ) ) ; FlattenPCollectionTranslator . flattenCollections ( sourceCollections , unionTags , resultCollection , context ) ; return resultCollection ; }",Smelly
" protected ClientCsdlEntityContainer doDeserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { final ClientCsdlEntityContainer entityContainer = new ClientCsdlEntityContainer ( ) ; for ( ; jp . getCurrentToken ( ) != JsonToken . END_OBJECT ; jp . nextToken ( ) ) { final JsonToken token = jp . getCurrentToken ( ) ; if ( token == JsonToken . FIELD_NAME ) { if ( ""Name"" . equals ( jp . getCurrentName ( ) ) ) { entityContainer . setName ( jp . nextTextValue ( ) ) ; } else if ( ""Extends"" . equals ( jp . getCurrentName ( ) ) ) { entityContainer . setExtendsContainer ( jp . nextTextValue ( ) ) ; } else if ( ""EntitySet"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; entityContainer . getEntitySets ( ) . add ( jp . readValueAs ( ClientCsdlEntitySet . class ) ) ; } else if ( ""Singleton"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; entityContainer . getSingletons ( ) . add ( jp . readValueAs ( ClientCsdlSingleton . class ) ) ; } else if ( ""ActionImport"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; entityContainer . getActionImports ( ) . add ( jp . readValueAs ( ClientCsdlActionImport . class ) ) ; } else if ( ""FunctionImport"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; entityContainer . getFunctionImports ( ) . add ( jp . readValueAs ( ClientCsdlFunctionImport . class ) ) ; } else if ( ""Annotation"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; entityContainer . getAnnotations ( ) . add ( jp . readValueAs ( ClientCsdlAnnotation . class ) ) ; } } } return entityContainer ; }",Smelly
 String sayHi ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public static String makeProductUrl ( Delegator delegator , ProductContentWrapper wrapper , List < String > trail , String contextPath , String previousCategoryId , String productCategoryId , String productId ) { String url = """" ; StringWrapper alternativeUrl = wrapper . get ( ""ALTERNATIVE_URL"" ) ; if ( UtilValidate . isNotEmpty ( alternativeUrl ) && UtilValidate . isNotEmpty ( alternativeUrl . toString ( ) ) ) { StringBuilder urlBuilder = new StringBuilder ( ) ; urlBuilder . append ( contextPath ) ; if ( urlBuilder . charAt ( urlBuilder . length ( ) - 1 ) != '/' ) { urlBuilder . append ( ""/"" ) ; } url = UrlServletHelper . invalidCharacter ( alternativeUrl . toString ( ) ) ; urlBuilder . append ( url ) ; if ( UtilValidate . isNotEmpty ( productId ) ) { urlBuilder . append ( ""-"" ) ; urlBuilder . append ( productId ) ; urlBuilder . append ( ""-p"" ) ; } url = urlBuilder . toString ( ) ; } else { if ( UtilValidate . isEmpty ( trail ) ) { trail = FastList . newInstance ( ) ; } url = CatalogUrlServlet . makeCatalogUrl ( contextPath , trail , productId , productCategoryId , previousCategoryId ) ; } return url ; }",Smelly
" protected ByteBuffer newKey ( ) { return ByteBuffer . wrap ( String . format ( ""test.key.%d"" , System . currentTimeMillis ( ) ) . getBytes ( ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected void doExecute ( final String executionId ) { User user = engine . getRuntimeService ( ) . getVariable ( executionId , ActivitiUserWorkflowAdapter . USER , User . class ) ; UserPatch userPatch = engine . getRuntimeService ( ) . getVariable ( executionId , ActivitiUserWorkflowAdapter . USER_PATCH , UserPatch . class ) ; PropagationByResource propByRes = dataBinder . update ( user , userPatch ) ; engine . getRuntimeService ( ) . setVariable ( executionId , ActivitiUserWorkflowAdapter . USER , user ) ; engine . getRuntimeService ( ) . setVariable ( executionId , ActivitiUserWorkflowAdapter . USER_PATCH , userPatch ) ; engine . getRuntimeService ( ) . setVariable ( executionId , ActivitiUserWorkflowAdapter . PROP_BY_RESOURCE , propByRes ) ; }",No
" public abstract void write ( OutputStream out , DatasetGraph dataset , PrefixMap prefixMap , String baseURI , Context context ) ;",No
" public String toString ( ) { return ""WideSaleSchema"" ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public boolean equals ( Object obj ) { if ( obj instanceof ServiceEcaCondition ) { ServiceEcaCondition other = ( ServiceEcaCondition ) obj ; if ( ! UtilValidate . areEqual ( this . conditionService , other . conditionService ) ) return false ; if ( ! UtilValidate . areEqual ( this . lhsValueName , other . lhsValueName ) ) return false ; if ( ! UtilValidate . areEqual ( this . rhsValueName , other . rhsValueName ) ) return false ; if ( ! UtilValidate . areEqual ( this . lhsMapName , other . lhsMapName ) ) return false ; if ( ! UtilValidate . areEqual ( this . rhsMapName , other . rhsMapName ) ) return false ; if ( ! UtilValidate . areEqual ( this . operator , other . operator ) ) return false ; if ( ! UtilValidate . areEqual ( this . compareType , other . compareType ) ) return false ; if ( ! UtilValidate . areEqual ( this . format , other . format ) ) return false ; if ( this . isConstant != other . isConstant ) return false ; if ( this . isService != other . isService ) return false ; return true ; } else { return false ; } }",Smelly
" void handleSyncRequest ( LdapSession session , SearchRequest req ) throws LdapException ;",No
" public void testUnsupportedKind ( ) throws Exception { String [ ] names = { ""sum_counter"" } ; String [ ] kinds = { ""sum_int"" } ; long [ ] deltas = { 122 } ; thrown . expect ( IllegalArgumentException . class ) ; thrown . expectMessage ( ""sum_int"" ) ; counters . importCounters ( names , kinds , deltas ) ; }",No
" public static void main ( String [ ] args ) throws Exception { Configuration conf = new Configuration ( ) ; CompressionCodecFactory factory = new CompressionCodecFactory ( conf ) ; boolean encode = false ; for ( int i = 0 ; i < args . length ; ++ i ) { if ( ""-in"" . equals ( args [ i ] ) ) { encode = true ; } else if ( ""-out"" . equals ( args [ i ] ) ) { encode = false ; } else { CompressionCodec codec = factory . getCodec ( new Path ( args [ i ] ) ) ; if ( codec == null ) { System . out . println ( ""Codec for "" + args [ i ] + "" not found."" ) ; } else { if ( encode ) { CompressionOutputStream out = null ; java . io . InputStream in = null ; try { out = codec . createOutputStream ( new java . io . FileOutputStream ( args [ i ] ) ) ; byte [ ] buffer = new byte [ 100 ] ; String inFilename = removeSuffix ( args [ i ] , codec . getDefaultExtension ( ) ) ; in = new java . io . FileInputStream ( inFilename ) ; int len = in . read ( buffer ) ; while ( len > 0 ) { out . write ( buffer , 0 , len ) ; len = in . read ( buffer ) ; } } finally { if ( out != null ) { out . close ( ) ; } if ( in != null ) { in . close ( ) ; } } } else { CompressionInputStream in = null ; try { in = codec . createInputStream ( new java . io . FileInputStream ( args [ i ] ) ) ; byte [ ] buffer = new byte [ 100 ] ; int len = in . read ( buffer ) ; while ( len > 0 ) { System . out . write ( buffer , 0 , len ) ; len = in . read ( buffer ) ; } } finally { if ( in != null ) { in . close ( ) ; } } } } } } }",No
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { super . looseMarshal ( wireFormat , o , dataOut ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void put ( int field$ , java . lang . Object value$ ) { switch ( field$ ) { case 0 : id = ( java . lang . Integer ) value$ ; break ; case 1 : name = ( java . lang . CharSequence ) value$ ; break ; default : throw new org . apache . avro . AvroRuntimeException ( ""Bad index"" ) ; } }",No
 public final void unregister ( ) { if ( null == bus ) { return ; } if ( this instanceof DestinationFactory ) { DestinationFactoryManager dfm = bus . getExtension ( DestinationFactoryManager . class ) ; if ( null != dfm && getTransportIds ( ) != null ) { for ( String ns : getTransportIds ( ) ) { try { if ( dfm . getDestinationFactory ( ns ) == this ) { dfm . deregisterDestinationFactory ( ns ) ; } } catch ( BusException e ) { } } } } if ( this instanceof ConduitInitiator ) { ConduitInitiatorManager cim = bus . getExtension ( ConduitInitiatorManager . class ) ; if ( cim != null && getTransportIds ( ) != null ) { for ( String ns : getTransportIds ( ) ) { try { if ( cim . getConduitInitiator ( ns ) == this ) { cim . deregisterConduitInitiator ( ns ) ; } } catch ( BusException e ) { } } } } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void handleMessage ( SoapMessage message ) throws Fault { XMLStreamWriter writer = message . getContent ( XMLStreamWriter . class ) ; Fault f = ( Fault ) message . getContent ( Exception . class ) ; SoapFault fault = SoapFault . createFault ( f , message . getVersion ( ) ) ; try { Map < String , String > namespaces = fault . getNamespaces ( ) ; for ( Map . Entry < String , String > e : namespaces . entrySet ( ) ) { writer . writeNamespace ( e . getKey ( ) , e . getValue ( ) ) ; } String ns = message . getVersion ( ) . getNamespace ( ) ; String defaultPrefix = writer . getPrefix ( ns ) ; if ( defaultPrefix == null ) { defaultPrefix = StaxUtils . getUniquePrefix ( writer , ns , false ) ; writer . writeStartElement ( defaultPrefix , ""Fault"" , ns ) ; writer . writeNamespace ( defaultPrefix , ns ) ; } else { writer . writeStartElement ( defaultPrefix , ""Fault"" , ns ) ; } writer . writeStartElement ( ""faultcode"" ) ; String codeString = fault . getCodeString ( getFaultCodePrefix ( writer , fault . getFaultCode ( ) ) , defaultPrefix ) ; writer . writeCharacters ( codeString ) ; writer . writeEndElement ( ) ; writer . writeStartElement ( ""faultstring"" ) ; if ( fault . getMessage ( ) != null ) { if ( message . get ( ""forced.faultstring"" ) != null ) { writer . writeCharacters ( ( String ) message . get ( ""forced.faultstring"" ) ) ; } else { writer . writeCharacters ( fault . getMessage ( ) ) ; } } else { writer . writeCharacters ( ""Fault occurred while processing."" ) ; } writer . writeEndElement ( ) ; prepareStackTrace ( message , fault ) ; if ( fault . getRole ( ) != null ) { writer . writeStartElement ( ""faultactor"" ) ; writer . writeCharacters ( fault . getRole ( ) ) ; writer . writeEndElement ( ) ; } if ( fault . hasDetails ( ) ) { Element detail = fault . getDetail ( ) ; writer . writeStartElement ( ""detail"" ) ; Node node = detail . getFirstChild ( ) ; while ( node != null ) { StaxUtils . writeNode ( node , writer , true ) ; node = node . getNextSibling ( ) ; } writer . writeEndElement ( ) ; } writer . writeEndElement ( ) ; } catch ( Exception xe ) { LOG . log ( Level . WARNING , ""XML_WRITE_EXC"" , xe ) ; throw f ; } }",Smelly
" public static void main ( String [ ] args ) throws Exception { Configuration conf = HBaseConfiguration . create ( ) ; IntegrationTestingUtility . setUseDistributedCluster ( conf ) ; int status = ToolRunner . run ( conf , new IntegrationTestBulkLoad ( ) , args ) ; System . exit ( status ) ; }",Smelly
" public void setup ( ) { if ( scriptEngine == null ) { scriptingComponentHelper . setup ( 1 , getLogger ( ) ) ; scriptEngine = scriptingComponentHelper . engineQ . poll ( ) ; } if ( scriptEngine == null ) { throw new ProcessException ( ""No script engine available!"" ) ; } if ( scriptNeedsReload . get ( ) || recordFactory . get ( ) == null ) { if ( ScriptingComponentHelper . isFile ( scriptingComponentHelper . getScriptPath ( ) ) ) { reloadScriptFile ( scriptingComponentHelper . getScriptPath ( ) ) ; } else { reloadScriptBody ( scriptingComponentHelper . getScriptBody ( ) ) ; } scriptNeedsReload . set ( false ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public boolean equals ( Object obj ) { return obj instanceof ToCounterMark ; },No
" public void setJdbcObject ( PreparedStatement st , String val , int pos , int type , int precision ) throws Exception { if ( val != null && type == Types . CHAR ) { st . setString ( pos , val ) ; } else { super . setJdbcObject ( st , val , pos , type , precision ) ; } }",No
" public void pathRestrictions ( ) throws Exception { FilterImpl f = new FilterImpl ( null , null ) ; assertEquals ( ""/"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . NO_RESTRICTION , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; f . restrictPath ( ""/test2"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertEquals ( ""/test"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . ALL_CHILDREN , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . DIRECT_CHILDREN , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test/x/y"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test/x/y"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/y"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . PARENT ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . EXACT ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . EXACT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/y"" , Filter . PathRestriction . EXACT ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . PARENT ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . PARENT ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . EXACT ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . EXACT ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . EXACT , f . getPathRestriction ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . EXACT ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . PARENT ) ; f . restrictPath ( ""/"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/y"" , Filter . PathRestriction . EXACT ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; assertEquals ( ""/test"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . DIRECT_CHILDREN , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertEquals ( ""/test"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . DIRECT_CHILDREN , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertEquals ( ""/test"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . DIRECT_CHILDREN , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test/x/y"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test2"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . EXACT ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . EXACT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . PARENT ) ; f . restrictPath ( ""/test/y"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; f = new FilterImpl ( null , null ) ; f . restrictPath ( ""/test/x/y"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test/x/y"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . ALL_CHILDREN ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . DIRECT_CHILDREN ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test/x"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test/x"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test"" , Filter . PathRestriction . PARENT ) ; assertEquals ( ""/test"" , f . getPath ( ) ) ; assertEquals ( Filter . PathRestriction . PARENT , f . getPathRestriction ( ) ) ; f . restrictPath ( ""/test2"" , Filter . PathRestriction . EXACT ) ; assertTrue ( f . isAlwaysFalse ( ) ) ; }",Smelly
" public int compare ( final AttrTO left , final AttrTO right ) { if ( left == null || StringUtils . isEmpty ( left . getSchema ( ) ) ) { return - 1 ; } if ( right == null || StringUtils . isEmpty ( right . getSchema ( ) ) ) { return 1 ; } else { return left . getSchema ( ) . compareTo ( right . getSchema ( ) ) ; } }",Smelly
 public void setRule ( final String rule ) { this . rule = rule ; },No
 ExtendedIterator < Restriction > listReferringRestrictions ( ) ;,No
" public void onAuthenticationFailure ( HttpServletRequest request , HttpServletResponse response , AuthenticationException exception ) throws IOException , ServletException { String ajaxRequestHeader = request . getHeader ( ""X-Requested-With"" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""commence() X-Requested-With="" + ajaxRequestHeader ) ; } response . setContentType ( ""application/json;charset=UTF-8"" ) ; response . setHeader ( ""Cache-Control"" , ""no-cache"" ) ; response . setHeader ( ""X-Frame-Options"" , ""DENY"" ) ; String jsonResp = """" ; try { String msg = exception . getMessage ( ) ; VXResponse vXResponse = new VXResponse ( ) ; if ( msg != null && ! msg . isEmpty ( ) ) { if ( CLIUtil . getMessage ( ""AbstractUserDetailsAuthenticationProvider.badCredentials"" , request ) . equalsIgnoreCase ( msg ) ) { vXResponse . setStatusCode ( HttpServletResponse . SC_UNAUTHORIZED ) ; vXResponse . setMsgDesc ( ""The username or password you entered is incorrect..."" ) ; logger . info ( ""Error Message : "" + msg ) ; } else if ( msg . contains ( ""Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!"" ) ) { vXResponse . setStatusCode ( HttpServletResponse . SC_UNAUTHORIZED ) ; vXResponse . setMsgDesc ( ""Unable to connect to DB..."" ) ; } else if ( msg . contains ( ""Communications link failure"" ) ) { vXResponse . setStatusCode ( HttpServletResponse . SC_UNAUTHORIZED ) ; vXResponse . setMsgDesc ( ""Unable to connect to DB..."" ) ; } else if ( CLIUtil . getMessage ( ""AbstractUserDetailsAuthenticationProvider.disabled"" , request ) . equalsIgnoreCase ( msg ) ) { vXResponse . setStatusCode ( HttpServletResponse . SC_UNAUTHORIZED ) ; vXResponse . setMsgDesc ( ""The username or password you entered is disable..."" ) ; } } jsonResp = jsonUtil . writeObjectAsString ( vXResponse ) ; response . getWriter ( ) . write ( jsonResp ) ; response . setStatus ( HttpServletResponse . SC_UNAUTHORIZED ) ; } catch ( IOException e ) { logger . info ( ""Error while writing JSON in HttpServletResponse"" ) ; } if ( ajaxRequestHeader != null && ""XMLHttpRequest"" . equalsIgnoreCase ( ajaxRequestHeader ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( ""Sending login failed response : "" + jsonResp ) ; } } }",Smelly
 public void onClick ( AjaxRequestTarget target ) { target . add ( image ) ; },No
 protected void onPurge ( ) { if ( parent . isValueType ( ReferenceStrength . HARD ) ) { consumer . accept ( getValue ( ) ) ; } },No
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . name = ( String ) in . readObject ( ) ; this . toM1E1 = in . readObject ( ) ; this . toM2E1 = in . readObject ( ) ; }",No
" public void updateState ( CassandraState state , List < TridentTuple > list , TridentCollector collector ) { state . updateState ( list , collector ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testToString ( ) { String datum = ""my string"" ; AvroWrapper < CharSequence > wrapper = new AvroWrapper < > ( datum ) ; assertEquals ( datum , wrapper . toString ( ) ) ; }",No
 public String getVersion ( ) { return this . version ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void testClientRetryWithFailover ( final AtMostOnceOp op ) throws Exception { final Map < String , Object > results = new HashMap < String , Object > ( ) ; op . prepare ( ) ; DummyRetryInvocationHandler . block . set ( true ) ; new Thread ( ) { @ Override public void run ( ) { try { op . invoke ( ) ; Object result = op . getResult ( ) ; LOG . info ( ""Operation "" + op . name + "" finished"" ) ; synchronized ( TestRetryCacheWithHA . this ) { results . put ( op . name , result == null ? ""SUCCESS"" : result ) ; TestRetryCacheWithHA . this . notifyAll ( ) ; } } catch ( Exception e ) { LOG . info ( ""Got Exception while calling "" + op . name , e ) ; } finally { IOUtils . cleanup ( null , op . client ) ; } } } . start ( ) ; assertTrue ( ""After waiting the operation "" + op . name + "" still has not taken effect on NN yet"" , op . checkNamenodeBeforeReturn ( ) ) ; cluster . transitionToStandby ( 0 ) ; cluster . transitionToActive ( 1 ) ; LOG . info ( ""Setting block to false"" ) ; DummyRetryInvocationHandler . block . set ( false ) ; synchronized ( this ) { while ( ! results . containsKey ( op . name ) ) { this . wait ( ) ; } LOG . info ( ""Got the result of "" + op . name + "": "" + results . get ( op . name ) ) ; } }",No
 public static NewQueryGroupbySchemaProc getNewQueryGroupbySchemaProc ( ) { return new NewQueryGroupbySchemaProc ( ) ; },Smelly
 public Image getImage ( Object element ) { if ( element instanceof AttributeType ) { return Activator . getDefault ( ) . getImage ( PluginConstants . IMG_ATTRIBUTE_TYPE ) ; } else if ( element instanceof ObjectClass ) { return Activator . getDefault ( ) . getImage ( PluginConstants . IMG_OBJECT_CLASS ) ; } return null ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void startOfNode ( ) throws FOPException { super . startOfNode ( ) ; if ( parent . getNameId ( ) != Constants . FO_DECLARATIONS ) { invalidChildError ( getLocator ( ) , parent . getName ( ) , getNamespaceURI ( ) , getName ( ) , ""rule.childOfDeclarations"" ) ; } }",Smelly
 public void updateMetricFromRPC ( Object value ) { setValue ( value ) ; },No
 void setBundleContext ( BundleContext bundleContext ) ;,No
 protected boolean visitNode ( EJBQLExpressionVisitor visitor ) { return visitor . visitMemberOf ( this ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public static ColumnPrunerMapJoinProc getMapJoinProc ( ) { return new ColumnPrunerMapJoinProc ( ) ; },Smelly
" public abstract ComposableRecordReader < K , V > createRecordReader ( InputSplit split , TaskAttemptContext context ) throws IOException , InterruptedException ;",No
 public byte getTag ( ) { return 35 ; },No
" protected Socket createSocket ( ) throws IOException { return new Socket ( ""127.0.0.1"" , this . nioPort ) ; }",No
" public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( ""id: "" ) ; sb . append ( id ) ; sb . append ( "" value: "" ) ; sb . append ( value ) ; sb . append ( "" edges: "" ) ; for ( String element : edges ) { sb . append ( element + "" "" ) ; } return sb . toString ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public long getNRulesFired ( ) { return engine . getNRulesFired ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ResourceJobManager struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . resourceJobManagerId = iprot . readString ( ) ; struct . setResourceJobManagerIdIsSet ( true ) ; struct . resourceJobManagerType = org . apache . airavata . model . appcatalog . computeresource . ResourceJobManagerType . findByValue ( iprot . readI32 ( ) ) ; struct . setResourceJobManagerTypeIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . pushMonitoringEndpoint = iprot . readString ( ) ; struct . setPushMonitoringEndpointIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . jobManagerBinPath = iprot . readString ( ) ; struct . setJobManagerBinPathIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TMap _map12 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . I32 , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . jobManagerCommands = new HashMap < JobManagerCommand , String > ( 2 * _map12 . size ) ; JobManagerCommand _key13 ; String _val14 ; for ( int _i15 = 0 ; _i15 < _map12 . size ; ++ _i15 ) { _key13 = org . apache . airavata . model . appcatalog . computeresource . JobManagerCommand . findByValue ( iprot . readI32 ( ) ) ; _val14 = iprot . readString ( ) ; struct . jobManagerCommands . put ( _key13 , _val14 ) ; } } struct . setJobManagerCommandsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map16 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . I32 , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . parallelismPrefix = new HashMap < org . apache . airavata . model . parallelism . ApplicationParallelismType , String > ( 2 * _map16 . size ) ; org . apache . airavata . model . parallelism . ApplicationParallelismType _key17 ; String _val18 ; for ( int _i19 = 0 ; _i19 < _map16 . size ; ++ _i19 ) { _key17 = org . apache . airavata . model . parallelism . ApplicationParallelismType . findByValue ( iprot . readI32 ( ) ) ; _val18 = iprot . readString ( ) ; struct . parallelismPrefix . put ( _key17 , _val18 ) ; } } struct . setParallelismPrefixIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" Double cumulativeMemoryWithinPhaseSplit ( RelNode r , RelMetadataQuery mq ) ;",No
" public com . google . protobuf . ExtensionRegistry assignDescriptors ( com . google . protobuf . Descriptors . FileDescriptor root ) { descriptor = root ; internal_static_org_apache_hadoop_hive_ql_io_orc_IntegerStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 0 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_IntegerStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_IntegerStatistics_descriptor , new java . lang . String [ ] { ""Minimum"" , ""Maximum"" , ""Sum"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_DoubleStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 1 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_DoubleStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_DoubleStatistics_descriptor , new java . lang . String [ ] { ""Minimum"" , ""Maximum"" , ""Sum"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StringStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 2 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StringStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_StringStatistics_descriptor , new java . lang . String [ ] { ""Minimum"" , ""Maximum"" , ""Sum"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_BucketStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 3 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_BucketStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_BucketStatistics_descriptor , new java . lang . String [ ] { ""Count"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_DecimalStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 4 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_DecimalStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_DecimalStatistics_descriptor , new java . lang . String [ ] { ""Minimum"" , ""Maximum"" , ""Sum"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_DateStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 5 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_DateStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_DateStatistics_descriptor , new java . lang . String [ ] { ""Minimum"" , ""Maximum"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_BinaryStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 6 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_BinaryStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_BinaryStatistics_descriptor , new java . lang . String [ ] { ""Sum"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_ColumnStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 7 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_ColumnStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_ColumnStatistics_descriptor , new java . lang . String [ ] { ""NumberOfValues"" , ""IntStatistics"" , ""DoubleStatistics"" , ""StringStatistics"" , ""BucketStatistics"" , ""DecimalStatistics"" , ""DateStatistics"" , ""BinaryStatistics"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_RowIndexEntry_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 8 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_RowIndexEntry_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_RowIndexEntry_descriptor , new java . lang . String [ ] { ""Positions"" , ""Statistics"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_RowIndex_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 9 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_RowIndex_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_RowIndex_descriptor , new java . lang . String [ ] { ""Entry"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Stream_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 10 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Stream_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_Stream_descriptor , new java . lang . String [ ] { ""Kind"" , ""Column"" , ""Length"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_ColumnEncoding_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 11 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_ColumnEncoding_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_ColumnEncoding_descriptor , new java . lang . String [ ] { ""Kind"" , ""DictionarySize"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StripeFooter_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 12 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StripeFooter_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_StripeFooter_descriptor , new java . lang . String [ ] { ""Streams"" , ""Columns"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Type_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 13 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Type_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_Type_descriptor , new java . lang . String [ ] { ""Kind"" , ""Subtypes"" , ""FieldNames"" , ""MaximumLength"" , ""Precision"" , ""Scale"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StripeInformation_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 14 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StripeInformation_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_StripeInformation_descriptor , new java . lang . String [ ] { ""Offset"" , ""IndexLength"" , ""DataLength"" , ""FooterLength"" , ""NumberOfRows"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_UserMetadataItem_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 15 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_UserMetadataItem_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_UserMetadataItem_descriptor , new java . lang . String [ ] { ""Name"" , ""Value"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StripeStatistics_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 16 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_StripeStatistics_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_StripeStatistics_descriptor , new java . lang . String [ ] { ""ColStats"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Metadata_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 17 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Metadata_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_Metadata_descriptor , new java . lang . String [ ] { ""StripeStats"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Footer_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 18 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_Footer_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_Footer_descriptor , new java . lang . String [ ] { ""HeaderLength"" , ""ContentLength"" , ""Stripes"" , ""Types"" , ""Metadata"" , ""NumberOfRows"" , ""Statistics"" , ""RowIndexStride"" , } ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_PostScript_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 19 ) ; internal_static_org_apache_hadoop_hive_ql_io_orc_PostScript_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_org_apache_hadoop_hive_ql_io_orc_PostScript_descriptor , new java . lang . String [ ] { ""FooterLength"" , ""Compression"" , ""CompressionBlockSize"" , ""Version"" , ""MetadataLength"" , ""Magic"" , } ) ; return null ; }",No
 public AuthorizationRequest build ( ) { return new AuthorizationRequest ( this ) ; },No
" protected void setOctetString ( byte [ ] data , ETypeInfo2EntryContainer eTypeInfo2EntryContainer ) { eTypeInfo2EntryContainer . getETypeInfo2Entry ( ) . setS2kparams ( data ) ; eTypeInfo2EntryContainer . setGrammarEndAllowed ( true ) ; }",No
 public AppManifest build ( ) { return new AppManifestAbstract . Default ( this ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TGetDelegationTokenReq struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . sessionHandle = new TSessionHandle ( ) ; struct . sessionHandle . read ( iprot ) ; struct . setSessionHandleIsSet ( true ) ; struct . owner = iprot . readString ( ) ; struct . setOwnerIsSet ( true ) ; struct . renewer = iprot . readString ( ) ; struct . setRenewerIsSet ( true ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . name = ( String ) in . readObject ( ) ; this . type = ( String ) in . readObject ( ) ; }",No
" public void testSchemaGeneration ( ) { JDBCConfiguration conf = new JDBCConfigurationImpl ( ) ; DBDictionary dict = conf . getDBDictionaryInstance ( ) ; MappingRepository repos = conf . getMappingRepositoryInstance ( ) ; repos . setStrategyInstaller ( new RefreshStrategyInstaller ( repos ) ) ; ClassMapping mapping = repos . getMapping ( Column . class , null , true ) ; Class cls ; if ( dict . getPreferredType ( JavaSQLTypes . CLOB ) == JavaSQLTypes . CLOB ) { if ( dict . maxEmbeddedClobSize > 0 ) { cls = mapping . getFieldMapping ( ""toClob"" ) . getStrategy ( ) . getClass ( ) ; assertTrue ( cls . getName ( ) , MaxEmbeddedClobFieldStrategy . class . isAssignableFrom ( cls ) ) ; } else { cls = mapping . getFieldMapping ( ""toClob"" ) . getHandler ( ) . getClass ( ) ; assertTrue ( cls . getName ( ) , ClobValueHandler . class . isAssignableFrom ( cls ) ) ; } } else assertTrue ( mapping . getFieldMapping ( ""toClob"" ) . getStrategy ( ) instanceof StringFieldStrategy ) ; cls = mapping . getFieldMapping ( ""toBlob"" ) . getHandler ( ) . getClass ( ) ; assertTrue ( cls . getName ( ) , BlobValueHandler . class . isAssignableFrom ( cls ) ) ; SchemaGroup schema = repos . getSchemaGroup ( ) ; Table table = schema . getSchemas ( ) [ 0 ] . getTables ( ) [ 0 ] ; Column [ ] cols = table . getColumns ( ) ; for ( int i = 0 ; i < cols . length ; i ++ ) { if ( cols [ i ] . getName ( ) . equalsIgnoreCase ( ""id"" ) || cols [ i ] . getName ( ) . equalsIgnoreCase ( ""versn"" ) || cols [ i ] . getName ( ) . equalsIgnoreCase ( ""typ"" ) ) continue ; if ( ""longToInt"" . equalsIgnoreCase ( cols [ i ] . getName ( ) ) ) assertEquals ( dict . getPreferredType ( JavaSQLTypes . INT ) , cols [ i ] . getType ( ) ) ; else if ( ""longToSQL"" . equalsIgnoreCase ( cols [ i ] . getName ( ) ) ) assertEquals ( ""varchar"" , cols [ i ] . getTypeName ( ) ) ; else if ( ""toClob"" . equalsIgnoreCase ( cols [ i ] . getName ( ) ) ) assertEquals ( dict . getPreferredType ( JavaSQLTypes . CLOB ) , cols [ i ] . getType ( ) ) ; else if ( ""toBlob"" . equalsIgnoreCase ( cols [ i ] . getName ( ) ) ) assertEquals ( dict . getPreferredType ( JavaSQLTypes . BLOB ) , cols [ i ] . getType ( ) ) ; else fail ( ""Unknown column:"" + cols [ i ] . getName ( ) ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , GCStatus struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . last = new GcCycleStats ( ) ; struct . last . read ( iprot ) ; struct . setLastIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . lastLog = new GcCycleStats ( ) ; struct . lastLog . read ( iprot ) ; struct . setLastLogIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . current = new GcCycleStats ( ) ; struct . current . read ( iprot ) ; struct . setCurrentIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . currentLog = new GcCycleStats ( ) ; struct . currentLog . read ( iprot ) ; struct . setCurrentLogIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void generateSaxFragment ( ContentHandler contentHandler , Locale locale , Convertor . FormatCache formatCache ) throws SAXException { AttributesImpl itemAttrs = new AttributesImpl ( ) ; String stringValue ; if ( this . value == null ) { stringValue = """" ; } else { stringValue = datatype . getConvertor ( ) . convertToString ( value , locale , formatCache ) ; } itemAttrs . addCDATAAttribute ( ""value"" , stringValue ) ; contentHandler . startElement ( Constants . INSTANCE_NS , ITEM_EL , Constants . INSTANCE_PREFIX_COLON + ITEM_EL , itemAttrs ) ; contentHandler . startElement ( Constants . INSTANCE_NS , LABEL_EL , Constants . INSTANCE_PREFIX_COLON + LABEL_EL , XMLUtils . EMPTY_ATTRIBUTES ) ; if ( label == null ) { contentHandler . characters ( stringValue . toCharArray ( ) , 0 , stringValue . length ( ) ) ; } else { contentHandler . characters ( label . toCharArray ( ) , 0 , label . length ( ) ) ; } contentHandler . endElement ( Constants . INSTANCE_NS , LABEL_EL , Constants . INSTANCE_PREFIX_COLON + LABEL_EL ) ; contentHandler . endElement ( Constants . INSTANCE_NS , ITEM_EL , Constants . INSTANCE_PREFIX_COLON + ITEM_EL ) ; }",No
 public String toString ( ) { return getDescriptor ( ) ; },No
 protected boolean isConcrete ( final Node n ) { return n != null && n . isConcrete ( ) ; },No
 public Response toResponse ( AccessDeniedException exception ) { return Response . status ( Response . Status . FORBIDDEN ) . build ( ) ; },No
" protected boolean accepts ( Object key , TripleWritable tuple ) { Triple t = tuple . get ( ) ; if ( ! t . isConcrete ( ) ) return false ; return ( t . getSubject ( ) . isURI ( ) || t . getSubject ( ) . isLiteral ( ) ) && ( t . getPredicate ( ) . isURI ( ) || t . getPredicate ( ) . isLiteral ( ) ) && ( t . getObject ( ) . isURI ( ) || t . getObject ( ) . isLiteral ( ) ) ; }",Smelly
" protected NodeTable createEmptyNodeTable ( ) { StoreParams params = StoreParamsBuilder . create ( ) . nodeId2NodeCacheSize ( 10 ) . node2NodeIdCacheSize ( 10 ) . nodeMissCacheSize ( 10 ) . build ( ) ; return BuildTestLib . makeNodeTable ( Location . mem ( ) , ""test"" , params ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , Index struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 10 ) ; if ( incoming . get ( 0 ) ) { struct . indexName = iprot . readString ( ) ; struct . setIndexNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . indexHandlerClass = iprot . readString ( ) ; struct . setIndexHandlerClassIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . dbName = iprot . readString ( ) ; struct . setDbNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . origTableName = iprot . readString ( ) ; struct . setOrigTableNameIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . createTime = iprot . readI32 ( ) ; struct . setCreateTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . lastAccessTime = iprot . readI32 ( ) ; struct . setLastAccessTimeIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . indexTableName = iprot . readString ( ) ; struct . setIndexTableNameIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . sd = new StorageDescriptor ( ) ; struct . sd . read ( iprot ) ; struct . setSdIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TMap _map232 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . parameters = new HashMap < String , String > ( 2 * _map232 . size ) ; for ( int _i233 = 0 ; _i233 < _map232 . size ; ++ _i233 ) { String _key234 ; String _val235 ; _key234 = iprot . readString ( ) ; _val235 = iprot . readString ( ) ; struct . parameters . put ( _key234 , _val235 ) ; } } struct . setParametersIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . deferredRebuild = iprot . readBool ( ) ; struct . setDeferredRebuildIsSet ( true ) ; } }",Smelly
 String getName ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TStringColumn struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; { org . apache . thrift . protocol . TList _list107 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . values = new ArrayList < String > ( _list107 . size ) ; for ( int _i108 = 0 ; _i108 < _list107 . size ; ++ _i108 ) { String _elem109 ; _elem109 = iprot . readString ( ) ; struct . values . add ( _elem109 ) ; } } struct . setValuesIsSet ( true ) ; struct . nulls = iprot . readBinary ( ) ; struct . setNullsIsSet ( true ) ; }",No
 long getNonce ( ) { return this . nonce ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TaskStatusChangeRequestEvent struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . state = org . apache . airavata . model . status . TaskState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; struct . taskIdentity = new TaskIdentifier ( ) ; struct . taskIdentity . read ( iprot ) ; struct . setTaskIdentityIsSet ( true ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public static Map < String , Object > createSubContent ( int index , String line , String rootContent , Map < String , ? extends Object > context , DispatchContext dctx ) { Delegator delegator = dctx . getDelegator ( ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; GenericValue userLogin = ( GenericValue ) context . get ( ""userLogin"" ) ; String subContents = null , check = "","" , oldChar = ""\"""" , newChar = """" , contentNameInprogress = """" , contentName = """" , contentId = null ; GenericValue Entity = null ; String errMsg = """" , sucMsg = """" ; subContents = line . substring ( index + 1 , line . length ( ) ) ; subContents = subContents . replace ( oldChar , newChar ) ; int size = subContents . length ( ) ; try { for ( index = 0 ; index < size ; index ++ ) { boolean contentNameMatch = false ; if ( subContents . charAt ( index ) == check . charAt ( 0 ) ) { contentName = contentName + contentNameInprogress ; if ( contentName . length ( ) > 100 ) { contentName = contentName . substring ( 0 , 100 ) ; } List < GenericValue > contents = delegator . findByAnd ( ""Content"" , UtilMisc . toMap ( ""contentName"" , contentName ) , UtilMisc . toList ( ""-contentId"" ) , false ) ; if ( contents != null ) { Iterator < GenericValue > contentCheck = contents . iterator ( ) ; while ( contentCheck . hasNext ( ) && contentNameMatch == false ) { GenericValue contentch = contentCheck . next ( ) ; if ( contentch != null ) { List < GenericValue > contentAssocsChecks = delegator . findByAnd ( ""ContentAssoc"" , UtilMisc . toMap ( ""contentId"" , contentch . get ( ""contentId"" ) , ""contentIdTo"" , rootContent ) , null , false ) ; if ( contentAssocsChecks . size ( ) > 0 ) { contentNameMatch = true ; } } } } contentId = null ; if ( contentNameMatch == false ) { Map < String , Object > data = FastMap . newInstance ( ) ; data . put ( ""userLogin"" , userLogin ) ; String dataResourceId = dispatcher . runSync ( ""createDataResource"" , data ) . get ( ""dataResourceId"" ) . toString ( ) ; contentId = delegator . getNextSeqId ( ""Content"" ) ; Entity = null ; Entity = delegator . makeValue ( ""Content"" ) ; Entity . set ( ""contentId"" , contentId ) ; Entity . set ( ""contentName"" , contentName ) ; Entity . set ( ""contentTypeId"" , ""DOCUMENT"" ) ; Entity . set ( ""dataResourceId"" , dataResourceId ) ; Entity . set ( ""createdByUserLogin"" , userLogin . get ( ""userLoginId"" ) ) ; Entity . set ( ""lastModifiedByUserLogin"" , userLogin . get ( ""userLoginId"" ) ) ; Entity . set ( ""createdDate"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""lastUpdatedStamp"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""lastUpdatedTxStamp"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""createdStamp"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""createdTxStamp"" , UtilDateTime . nowTimestamp ( ) ) ; delegator . create ( Entity ) ; Map < String , Object > contentAssoc = FastMap . newInstance ( ) ; contentAssoc . put ( ""contentId"" , contentId ) ; contentAssoc . put ( ""contentAssocTypeId"" , ""SUB_CONTENT"" ) ; contentAssoc . put ( ""contentIdTo"" , rootContent ) ; contentAssoc . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createContentAssoc"" , contentAssoc ) ; } contentName = """" ; contentNameInprogress = """" ; } if ( ( subContents . charAt ( index ) ) != check . charAt ( 0 ) ) { contentNameInprogress = contentNameInprogress . concat ( Character . toString ( subContents . charAt ( index ) ) ) ; if ( contentNameInprogress . length ( ) > 99 ) { contentName = contentName + contentNameInprogress ; contentNameInprogress = """" ; } } if ( index == size - 1 ) { contentNameMatch = false ; List < GenericValue > contents = delegator . findByAnd ( ""Content"" , UtilMisc . toMap ( ""contentName"" , contentName ) , null , false ) ; if ( contents != null ) { Iterator < GenericValue > contentCheck = contents . iterator ( ) ; while ( contentCheck . hasNext ( ) && contentNameMatch == false ) { GenericValue contentch = contentCheck . next ( ) ; if ( contentch != null ) { List < GenericValue > contentAssocsChecks = delegator . findByAnd ( ""ContentAssoc"" , UtilMisc . toMap ( ""contentId"" , contentch . get ( ""contentId"" ) , ""contentIdTo"" , rootContent ) , null , false ) ; if ( contentAssocsChecks . size ( ) > 0 ) { contentNameMatch = true ; } } } } contentId = null ; if ( contentNameMatch == false ) { Map < String , Object > data = FastMap . newInstance ( ) ; data . put ( ""userLogin"" , userLogin ) ; String dataResourceId = dispatcher . runSync ( ""createDataResource"" , data ) . get ( ""dataResourceId"" ) . toString ( ) ; contentId = delegator . getNextSeqId ( ""Content"" ) ; Entity = null ; Entity = delegator . makeValue ( ""Content"" ) ; Entity . set ( ""contentId"" , contentId ) ; Entity . set ( ""contentName"" , contentName ) ; Entity . set ( ""contentTypeId"" , ""DOCUMENT"" ) ; Entity . set ( ""dataResourceId"" , dataResourceId ) ; Entity . set ( ""createdByUserLogin"" , userLogin . get ( ""userLoginId"" ) ) ; Entity . set ( ""lastModifiedByUserLogin"" , userLogin . get ( ""userLoginId"" ) ) ; Entity . set ( ""createdDate"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""lastUpdatedStamp"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""lastUpdatedTxStamp"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""createdStamp"" , UtilDateTime . nowTimestamp ( ) ) ; Entity . set ( ""createdTxStamp"" , UtilDateTime . nowTimestamp ( ) ) ; delegator . create ( Entity ) ; Map < String , Object > contentAssoc = FastMap . newInstance ( ) ; contentAssoc . put ( ""contentId"" , contentId ) ; contentAssoc . put ( ""contentAssocTypeId"" , ""SUB_CONTENT"" ) ; contentAssoc . put ( ""contentIdTo"" , rootContent ) ; contentAssoc . put ( ""userLogin"" , userLogin ) ; dispatcher . runSync ( ""createContentAssoc"" , contentAssoc ) ; } } } return ServiceUtil . returnSuccess ( sucMsg ) ; } catch ( GenericEntityException e ) { errMsg = ""GenericEntityException "" + UtilMisc . toMap ( ""errMessage"" , e . toString ( ) ) ; Debug . logError ( e , errMsg , module ) ; e . printStackTrace ( ) ; return ServiceUtil . returnError ( errMsg ) ; } catch ( GenericServiceException e ) { errMsg = ""GenericServiceException"" + UtilMisc . toMap ( ""errMessage"" , e . toString ( ) ) ; Debug . logError ( e , errMsg , module ) ; e . printStackTrace ( ) ; return ServiceUtil . returnError ( errMsg ) ; } }",Smelly
" private String convertToNewNumFormat ( int numberFormat ) { switch ( numberFormat ) { case - 1 : return ""none"" ; case 0 : return ""decimal"" ; case 1 : return ""upperRoman"" ; case 2 : return ""lowerRoman"" ; case 3 : return ""upperLetter"" ; case 4 : return ""lowerLetter"" ; case 5 : return ""ordinal"" ; case 22 : return ""decimalZero"" ; case 23 : return ""bullet"" ; case 47 : return ""none"" ; default : return ""decimal"" ; } }",No
 public int hashCode ( ) { return StateTimerDropElementsFn . class . hashCode ( ) ; },Smelly
 public JmsDestination transform ( String destination ) throws JMSException { return new JmsQueue ( destination ) ; },No
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { Message info = ( Message ) o ; info . beforeMarshall ( wireFormat ) ; super . looseMarshal ( wireFormat , o , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getProducerId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getDestination ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getTransactionId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getOriginalDestination ( ) , dataOut ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getMessageId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getOriginalTransactionId ( ) , dataOut ) ; looseMarshalString ( info . getGroupID ( ) , dataOut ) ; dataOut . writeInt ( info . getGroupSequence ( ) ) ; looseMarshalString ( info . getCorrelationId ( ) , dataOut ) ; dataOut . writeBoolean ( info . isPersistent ( ) ) ; looseMarshalLong ( wireFormat , info . getExpiration ( ) , dataOut ) ; dataOut . writeByte ( info . getPriority ( ) ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getReplyTo ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getTimestamp ( ) , dataOut ) ; looseMarshalString ( info . getType ( ) , dataOut ) ; looseMarshalByteSequence ( wireFormat , info . getContent ( ) , dataOut ) ; looseMarshalByteSequence ( wireFormat , info . getMarshalledProperties ( ) , dataOut ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getDataStructure ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getTargetConsumerId ( ) , dataOut ) ; dataOut . writeBoolean ( info . isCompressed ( ) ) ; dataOut . writeInt ( info . getRedeliveryCounter ( ) ) ; looseMarshalObjectArray ( wireFormat , info . getBrokerPath ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getArrival ( ) , dataOut ) ; looseMarshalString ( info . getUserID ( ) , dataOut ) ; dataOut . writeBoolean ( info . isRecievedByDFBridge ( ) ) ; dataOut . writeBoolean ( info . isDroppable ( ) ) ; looseMarshalObjectArray ( wireFormat , info . getCluster ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getBrokerInTime ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getBrokerOutTime ( ) , dataOut ) ; }",Smelly
 int doAfterBody ( ) throws SAXException ;,No
" private void writeUTF8 ( Object object ) throws IOException { byte [ ] bval ; int valSize ; if ( object instanceof BytesWritable ) { BytesWritable val = ( BytesWritable ) object ; bval = val . getBytes ( ) ; valSize = val . getLength ( ) ; } else if ( object instanceof Text ) { Text val = ( Text ) object ; bval = val . getBytes ( ) ; valSize = val . getLength ( ) ; } else { String sval = object . toString ( ) ; bval = sval . getBytes ( ""UTF-8"" ) ; valSize = bval . length ; } clientOut . write ( bval , 0 , valSize ) ; }",No
" public String toString ( ) { return this . getClass ( ) . getName ( ) + "" id="" + this . getId ( ) + "" failed: "" + this . getMessage ( ) ; }",No
" void testRun6 ( ) throws Exception { zkClient . failAfter ( 0 , Code . OK ) ; sessionWatcher . run ( ) ; assertFalse ( sessionWatcher . isShutdownStarted ( ) ) ; assertEquals ( sessionWatcher . getKeeperState ( ) , KeeperState . SyncConnected ) ; assertEquals ( shutdownService . getExitCode ( ) , 0 ) ; }",No
" protected void ensureMemory ( int requestSize ) { if ( totalLength + requestSize > capacity ) { int newSize = Math . max ( 2 * capacity , totalLength + requestSize ) ; MemoryBlock newBlock = UnsafeMemoryManager . allocateMemoryWithRetry ( taskId , newSize ) ; CarbonUnsafe . getUnsafe ( ) . copyMemory ( baseAddress , baseOffset , newBlock . getBaseObject ( ) , newBlock . getBaseOffset ( ) , capacity ) ; UnsafeMemoryManager . INSTANCE . freeMemory ( taskId , memoryBlock ) ; memoryBlock = newBlock ; baseAddress = newBlock . getBaseObject ( ) ; baseOffset = newBlock . getBaseOffset ( ) ; capacity = newSize ; } }",Smelly
" void removeMessages ( Identifier sid , Collection < Long > messageNrs , boolean outbound ) ;",No
" public void compute ( Vertex < LongWritable , DoubleWritable , DoubleWritable > vertex , Iterable < DoubleWritable > messages ) throws IOException { if ( getSuperstep ( ) == 0 ) { double outEdgeSum = 0 ; for ( Edge < LongWritable , DoubleWritable > edge : vertex . getEdges ( ) ) { outEdgeSum += edge . getValue ( ) . get ( ) ; } for ( MutableEdge < LongWritable , DoubleWritable > edge : vertex . getMutableEdges ( ) ) { edge . setValue ( new DoubleWritable ( edge . getValue ( ) . get ( ) / outEdgeSum ) ) ; } } else { double messageSum = 0 ; for ( DoubleWritable message : messages ) { messageSum += message . get ( ) ; } vertex . getValue ( ) . set ( ( 0.15f / getTotalNumVertices ( ) ) + 0.85f * messageSum ) ; } if ( getSuperstep ( ) < getConf ( ) . getInt ( SUPERSTEP_COUNT , 0 ) ) { for ( Edge < LongWritable , DoubleWritable > edge : vertex . getEdges ( ) ) { sendMessage ( edge . getTargetVertexId ( ) , new DoubleWritable ( vertex . getValue ( ) . get ( ) * edge . getValue ( ) . get ( ) ) ) ; } } else { vertex . voteToHalt ( ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , GcCycleStats struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . started = iprot . readI64 ( ) ; struct . setStartedIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . finished = iprot . readI64 ( ) ; struct . setFinishedIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . candidates = iprot . readI64 ( ) ; struct . setCandidatesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . inUse = iprot . readI64 ( ) ; struct . setInUseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . deleted = iprot . readI64 ( ) ; struct . setDeletedIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . errors = iprot . readI64 ( ) ; struct . setErrorsIsSet ( true ) ; } }",Smelly
" protected NodeWritable [ ] split ( QuadWritable tuple ) { Quad q = tuple . get ( ) ; return new NodeWritable [ ] { new NodeWritable ( q . getGraph ( ) ) , new NodeWritable ( q . getSubject ( ) ) , new NodeWritable ( q . getPredicate ( ) ) , new NodeWritable ( q . getObject ( ) ) } ; }",Smelly
" public final MaxentModel train ( SequenceStream events ) throws IOException { if ( ! isValid ( ) ) { throw new IllegalArgumentException ( ""trainParams are not valid!"" ) ; } MaxentModel model = doTrain ( events ) ; addToReport ( AbstractTrainer . TRAINER_TYPE_PARAM , EventModelSequenceTrainer . SEQUENCE_VALUE ) ; return model ; }",No
" public static Op compile ( Store store , Op op , Binding binding , Context context , SDBRequest request ) { if ( binding != null && ! binding . isEmpty ( ) ) op = Substitute . substitute ( op , binding ) ; if ( StoreUtils . isHSQL ( store ) ) { request . LeftJoinTranslation = false ; request . DistinctTranslation = true ; request . LimitOffsetTranslation = false ; } if ( StoreUtils . isH2 ( store ) ) { request . LeftJoinTranslation = false ; request . DistinctTranslation = true ; request . LimitOffsetTranslation = false ; } if ( StoreUtils . isDerby ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = false ; request . DistinctTranslation = false ; } if ( StoreUtils . isPostgreSQL ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = true ; request . DistinctTranslation = true ; } if ( StoreUtils . isMySQL ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = true ; request . DistinctTranslation = true ; } if ( StoreUtils . isSQLServer ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = false ; request . DistinctTranslation = false ; } if ( StoreUtils . isOracle ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = false ; request . DistinctTranslation = false ; } if ( StoreUtils . isDB2 ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = false ; request . DistinctTranslation = false ; } if ( StoreUtils . isSAP ( store ) ) { request . LeftJoinTranslation = true ; request . LimitOffsetTranslation = true ; request . DistinctTranslation = true ; } if ( context . isTrue ( SDB . optimizeOrderClause ) ) { request . OrderTranslation = true ; } else { request . OrderTranslation = false ; } QueryCompiler queryCompiler = store . getQueryCompilerFactory ( ) . createQueryCompiler ( request ) ; Op op2 = queryCompiler . compile ( op ) ; return op2 ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RemoteInterpreterResult struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . code = iprot . readString ( ) ; struct . setCodeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . msg = new ArrayList < RemoteInterpreterResultMessage > ( _list5 . size ) ; RemoteInterpreterResultMessage _elem6 ; for ( int _i7 = 0 ; _i7 < _list5 . size ; ++ _i7 ) { _elem6 = new RemoteInterpreterResultMessage ( ) ; _elem6 . read ( iprot ) ; struct . msg . add ( _elem6 ) ; } } struct . setMsgIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . config = iprot . readString ( ) ; struct . setConfigIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . gui = iprot . readString ( ) ; struct . setGuiIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private void doRollbackSentMessagesThenConsumeTestImpl ( boolean topic ) throws Exception { connection = createAmqpConnection ( ) ; connection . start ( ) ; Session session = connection . createSession ( true , Session . SESSION_TRANSACTED ) ; Destination dest = null ; if ( topic ) { dest = session . createTopic ( getTestName ( ) ) ; } else { dest = session . createQueue ( getTestName ( ) ) ; } MessageProducer producer = session . createProducer ( dest ) ; MessageConsumer consumer = session . createConsumer ( dest ) ; int messageCount = 3 ; TextMessage msg = null ; for ( int i = 1 ; i <= messageCount ; i ++ ) { String msgText = ""Message "" + i ; msg = session . createTextMessage ( msgText ) ; producer . send ( msg ) ; LOG . info ( msgText + "" sent"" ) ; } session . rollback ( ) ; msg = ( TextMessage ) consumer . receive ( 200 ) ; if ( msg != null ) { fail ( ""Received unexpected message"" ) ; } for ( int i = 1 ; i <= messageCount ; i ++ ) { String msgText = ""Message "" + i ; msg = session . createTextMessage ( msgText ) ; producer . send ( msg ) ; LOG . info ( msgText + "" sent again"" ) ; } session . commit ( ) ; for ( int i = 1 ; i <= messageCount ; i ++ ) { msg = ( TextMessage ) consumer . receive ( 3000 ) ; if ( msg == null ) { fail ( ""receive() returned null, message "" + i + "" was not received"" ) ; } else if ( ! msg . getText ( ) . equals ( ""Message "" + i ) ) { fail ( ""Received '"" + msg . getText ( ) + ""' but expected 'Message "" + i + ""'"" ) ; } else { LOG . info ( ""Received: "" + msg . getText ( ) ) ; } } session . commit ( ) ; }",No
 public boolean equals ( Object o ) { Employee e = ( Employee ) o ; PhoneNumber p = e . getPhoneNumber ( ) ; if ( p . getPhNumber ( ) != phoneNumber . getPhNumber ( ) ) return false ; return true ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 protected void tearDown ( ) throws Exception { for ( int i = 0 ; i < WORKER_COUNT ; i ++ ) { workers [ i ] . stop ( ) ; } new ServiceStopper ( ) . stop ( bs ) ; },No
 public abstract void setRegionBroker ( RegionBroker regionBroker ) ;,No
" public String toString ( ) { return ""RestfulResponse [httpStatusCode="" + httpStatusCode + ""]"" ; }",No
 public String getFilter ( ) { return getValue ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , FieldSchema struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . type = iprot . readString ( ) ; struct . setTypeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . comment = iprot . readString ( ) ; struct . setCommentIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Adjacency struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . node = iprot . readString ( ) ; struct . setNodeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list5 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . children = new ArrayList < String > ( _list5 . size ) ; for ( int _i6 = 0 ; _i6 < _list5 . size ; ++ _i6 ) { String _elem7 ; _elem7 = iprot . readString ( ) ; struct . children . add ( _elem7 ) ; } } struct . setChildrenIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . adjacencyType = AdjacencyType . findByValue ( iprot . readI32 ( ) ) ; struct . setAdjacencyTypeIsSet ( true ) ; } }",Smelly
" private void addFileToZip ( ZipArchiveOutputStream tOut , Path f , String base ) throws IOException { if ( Files . isDirectory ( f ) ) { String entryName = base + f . getFileName ( ) . toString ( ) + ""/"" ; ZipArchiveEntry zipEntry = new ZipArchiveEntry ( entryName ) ; tOut . putArchiveEntry ( zipEntry ) ; tOut . closeArchiveEntry ( ) ; try ( DirectoryStream < Path > children = Files . newDirectoryStream ( f ) ) { for ( Path child : children ) { addFileToZip ( tOut , child , entryName ) ; } } } else if ( useSymLinks && Files . isSymbolicLink ( f ) ) { String entryName = base + f . getFileName ( ) . toString ( ) ; ZipArchiveEntry zipEntry = new ZipArchiveEntry ( entryName ) ; zipEntry . setUnixMode ( UnixStat . LINK_FLAG | UnixStat . DEFAULT_FILE_PERM ) ; tOut . putArchiveEntry ( zipEntry ) ; tOut . write ( Files . readSymbolicLink ( f ) . toString ( ) . getBytes ( ) ) ; tOut . closeArchiveEntry ( ) ; } else { String entryName = base + f . getFileName ( ) . toString ( ) ; ZipArchiveEntry zipEntry = new ZipArchiveEntry ( entryName ) ; zipEntry . setSize ( Files . size ( f ) ) ; if ( entryName . contains ( ""/bin/"" ) || ( ! usePathPrefix && entryName . startsWith ( ""bin"" ) ) ) { if ( ! entryName . endsWith ( "".bat"" ) ) { zipEntry . setUnixMode ( 0755 ) ; } else { zipEntry . setUnixMode ( 0644 ) ; } } tOut . putArchiveEntry ( zipEntry ) ; Files . copy ( f , tOut ) ; tOut . closeArchiveEntry ( ) ; } }",No
 public void setManager ( EndpointManager manager ) { this . manager = manager ; },No
" public void annotate ( JavaAnnotatable ja ) { JavaParameter parameter = null ; if ( ja instanceof JavaParameter ) { parameter = ( JavaParameter ) ja ; } else { throw new RuntimeException ( ""WebParamAnnotator only annotate the JavaParameter"" ) ; } JavaMethod method = parameter . getMethod ( ) ; if ( method . hasParameter ( parameter . getName ( ) ) ) { JavaParameter paramInList = method . getParameter ( parameter . getName ( ) ) ; if ( paramInList . isIN ( ) && parameter . isOUT ( ) ) { parameter . setStyle ( JavaType . Style . INOUT ) ; } } JAnnotation webParamAnnotation = new JAnnotation ( WebParam . class ) ; String name = parameter . getName ( ) ; String targetNamespace = method . getInterface ( ) . getNamespace ( ) ; String partName = null ; if ( method . getSoapStyle ( ) == SOAPBinding . Style . DOCUMENT || parameter . isHeader ( ) ) { targetNamespace = parameter . getTargetNamespace ( ) ; if ( parameter . getQName ( ) != null ) { name = parameter . getQName ( ) . getLocalPart ( ) ; } if ( ! method . isWrapperStyle ( ) ) { partName = parameter . getPartName ( ) ; } } if ( method . getSoapStyle ( ) == SOAPBinding . Style . RPC ) { name = parameter . getPartName ( ) ; partName = parameter . getPartName ( ) ; } if ( partName != null ) { webParamAnnotation . addElement ( new JAnnotationElement ( ""partName"" , partName ) ) ; } if ( parameter . getStyle ( ) == JavaType . Style . OUT ) { webParamAnnotation . addElement ( new JAnnotationElement ( ""mode"" , WebParam . Mode . OUT ) ) ; } else if ( parameter . getStyle ( ) == JavaType . Style . INOUT ) { webParamAnnotation . addElement ( new JAnnotationElement ( ""mode"" , WebParam . Mode . INOUT ) ) ; } webParamAnnotation . addElement ( new JAnnotationElement ( ""name"" , name ) ) ; if ( null != targetNamespace && ( method . getSoapStyle ( ) == SOAPBinding . Style . DOCUMENT || parameter . isHeader ( ) ) ) { webParamAnnotation . addElement ( new JAnnotationElement ( ""targetNamespace"" , targetNamespace ) ) ; } for ( String importClz : webParamAnnotation . getImports ( ) ) { parameter . getMethod ( ) . getInterface ( ) . addImport ( importClz ) ; } if ( forceHeader ) { webParamAnnotation . addElement ( new JAnnotationElement ( ""header"" , true , true ) ) ; } parameter . addAnnotation ( ""WebParam"" , webParamAnnotation ) ; }",Smelly
" public int compare ( final Object o1 , final Object o2 ) { if ( o1 == null && o2 == null ) { return 0 ; } if ( o1 == null ) { return 1 ; } if ( o2 == null ) { return - 1 ; } return o1 . toString ( ) . compareTo ( o2 . toString ( ) ) ; }",No
 public int hashCode ( ) { return name . hashCode ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public String toString ( ) { return ""XXResourceDef ["" + super . toString ( ) + "" id="" + id + "", defId="" + defId + "", itemId="" + itemId + "", name="" + name + "", type="" + type + "", level="" + level + "", parent="" + parent + "", mandatory="" + mandatory + "", lookUpSupported="" + lookUpSupported + "", recursiveSupported="" + recursiveSupported + "", excludesSupported="" + excludesSupported + "", matcher="" + matcher + "", matcherOptions="" + matcherOptions + "", validationRegEx="" + validationRegEx + "", validationMessage="" + validationMessage + "", uiHint="" + uiHint + "", label="" + label + "", description="" + description + "", rbKeyLabel="" + rbKeyLabel + "", rbKeyDescription="" + rbKeyDescription + "", rbKeyValidationMessage="" + rbKeyValidationMessage + "", order="" + order + "", dataMaskOptions="" + dataMaskOptions + "", rowFilterOptions="" + rowFilterOptions + ""]"" ; }",No
" public String toString ( ) { return super . toString ( ) + "";classCName="" + classCName ; }",No
 HelixManagerProperties getHelixProperties ( ) ;,No
 public float getProgress ( ) throws IOException { return verticesRead * 100.0f / totalSplitVertices ; },Smelly
" public QueryIterator execEvaluated ( Binding binding , Node subject , Node predicate , Node object , ExecutionContext execCxt ) { if ( subject . isVariable ( ) && object . isVariable ( ) ) throw new QueryExecException ( ""Both subject and object are unbound variables: "" + FmtUtils . stringForNode ( predicate ) ) ; if ( subject . isVariable ( ) ) return IterLib . oneResult ( binding , Var . alloc ( subject ) , object , execCxt ) ; if ( object . isVariable ( ) ) return IterLib . oneResult ( binding , Var . alloc ( object ) , subject , execCxt ) ; if ( subject . sameValueAs ( object ) ) return IterLib . result ( binding , execCxt ) ; return IterLib . noResults ( execCxt ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public Vertex next ( ) { try { return readVertexInternal ( vertexMaker , edgeMaker , d , input ) ; } catch ( Exception ex ) { throw new RuntimeException ( ex ) ; } }",No
" public ConstantPool getConstantPool ( ) { ConstantPoolItem [ ] ret = new ConstantPoolItem [ count ] ; System . arraycopy ( items , 0 , ret , 0 , count ) ; ConstantPool cpl = new ConstantPool ( ret ) ; return cpl ; }",Smelly
" public void handleMessage ( Message message ) throws Fault { Boolean isColoc = ( Boolean ) message . get ( ""org.apache.cxf.message.Message.COLOCATED"" ) ; if ( isColoc == null || isColoc == Boolean . FALSE ) { String str = new String ( ""Collocated Invocation should have been detected."" ) ; throw new ProtocolException ( str ) ; } }",No
 protected void clearInput ( final Panel panel ) { },No
" protected void onInitialize ( ) { super . onInitialize ( ) ; add ( new Label ( ""invitorLbl"" , getString ( ""1156"" , locale ) ) ) ; add ( new Label ( ""invitor"" , invitorName ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 void clear ( ) ;,No
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { super . looseMarshal ( wireFormat , o , dataOut ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testNumVersionsReportedCorrect ( ) throws IOException { FSNamesystem fsn = Mockito . mock ( FSNamesystem . class ) ; Mockito . when ( fsn . hasWriteLock ( ) ) . thenReturn ( true ) ; DatanodeManager dm = new DatanodeManager ( Mockito . mock ( BlockManager . class ) , fsn , new Configuration ( ) ) ; Random rng = new Random ( ) ; int seed = rng . nextInt ( ) ; rng = new Random ( seed ) ; Log . info ( ""Using seed "" + seed + "" for testing"" ) ; HashMap < String , DatanodeRegistration > sIdToDnReg = new HashMap < String , DatanodeRegistration > ( ) ; for ( int i = 0 ; i < NUM_ITERATIONS ; ++ i ) { if ( rng . nextBoolean ( ) && i % 3 == 0 && sIdToDnReg . size ( ) != 0 ) { int randomIndex = rng . nextInt ( ) % sIdToDnReg . size ( ) ; Iterator < Map . Entry < String , DatanodeRegistration > > it = sIdToDnReg . entrySet ( ) . iterator ( ) ; for ( int j = 0 ; j < randomIndex - 1 ; ++ j ) { it . next ( ) ; } DatanodeRegistration toRemove = it . next ( ) . getValue ( ) ; Log . info ( ""Removing node "" + toRemove . getStorageID ( ) + "" ip "" + toRemove . getXferAddr ( ) + "" version : "" + toRemove . getSoftwareVersion ( ) ) ; dm . removeDatanode ( toRemove ) ; it . remove ( ) ; } else { String storageID = ""someStorageID"" + rng . nextInt ( 5000 ) ; DatanodeRegistration dr = Mockito . mock ( DatanodeRegistration . class ) ; Mockito . when ( dr . getStorageID ( ) ) . thenReturn ( storageID ) ; if ( sIdToDnReg . containsKey ( storageID ) ) { dr = sIdToDnReg . get ( storageID ) ; if ( rng . nextBoolean ( ) ) { dr . setIpAddr ( dr . getIpAddr ( ) + ""newIP"" ) ; } } else { String ip = ""someIP"" + storageID ; Mockito . when ( dr . getIpAddr ( ) ) . thenReturn ( ip ) ; Mockito . when ( dr . getXferAddr ( ) ) . thenReturn ( ip + "":9000"" ) ; Mockito . when ( dr . getXferPort ( ) ) . thenReturn ( 9000 ) ; } Mockito . when ( dr . getSoftwareVersion ( ) ) . thenReturn ( ""version"" + rng . nextInt ( 5 ) ) ; Log . info ( ""Registering node storageID: "" + dr . getStorageID ( ) + "", version: "" + dr . getSoftwareVersion ( ) + "", IP address: "" + dr . getXferAddr ( ) ) ; dm . registerDatanode ( dr ) ; sIdToDnReg . put ( storageID , dr ) ; } Map < String , Integer > mapToCheck = dm . getDatanodesSoftwareVersions ( ) ; for ( Entry < String , DatanodeRegistration > it : sIdToDnReg . entrySet ( ) ) { String ver = it . getValue ( ) . getSoftwareVersion ( ) ; if ( ! mapToCheck . containsKey ( ver ) ) { throw new AssertionError ( ""The correct number of datanodes of a "" + ""version was not found on iteration "" + i ) ; } mapToCheck . put ( ver , mapToCheck . get ( ver ) - 1 ) ; if ( mapToCheck . get ( ver ) == 0 ) { mapToCheck . remove ( ver ) ; } } for ( Entry < String , Integer > entry : mapToCheck . entrySet ( ) ) { Log . info ( ""Still in map: "" + entry . getKey ( ) + "" has "" + entry . getValue ( ) ) ; } assertEquals ( ""The map of version counts returned by DatanodeManager was"" + "" not what it was expected to be on iteration "" + i , 0 , mapToCheck . size ( ) ) ; } }",Smelly
 void addMethod ( final Method method ) ;,No
 public boolean isReadonly ( ) { return Boolean . FALSE ; },No
" public static void set ( Node . Nodes page , ErrorDispatcher err ) throws JasperException { page . visit ( new CustomTagCounter ( ) ) ; page . visit ( new ScriptingVariableVisitor ( err ) ) ; }",Smelly
" public static Map < String , Object > checkAssocPermission ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > results = FastMap . newInstance ( ) ; Delegator delegator = dctx . getDelegator ( ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; Boolean bDisplayFailCond = ( Boolean ) context . get ( ""displayFailCond"" ) ; String contentIdFrom = ( String ) context . get ( ""contentIdFrom"" ) ; String contentIdTo = ( String ) context . get ( ""contentIdTo"" ) ; GenericValue userLogin = ( GenericValue ) context . get ( ""userLogin"" ) ; String entityAction = ( String ) context . get ( ""entityOperation"" ) ; Locale locale = ( Locale ) context . get ( ""locale"" ) ; if ( entityAction == null ) entityAction = ""_ADMIN"" ; String permissionStatus = null ; GenericValue contentTo = null ; GenericValue contentFrom = null ; try { contentTo = delegator . findOne ( ""Content"" , UtilMisc . toMap ( ""contentId"" , contentIdTo ) , true ) ; contentFrom = delegator . findOne ( ""Content"" , UtilMisc . toMap ( ""contentId"" , contentIdFrom ) , true ) ; } catch ( GenericEntityException e ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ContentContentToOrFromErrorRetriving"" , locale ) ) ; } if ( contentTo == null || contentFrom == null ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ContentContentToOrFromIsNull"" , UtilMisc . toMap ( ""contentTo"" , contentTo , ""contentFrom"" , contentFrom ) , locale ) ) ; } Map < String , Object > permResults = FastMap . newInstance ( ) ; List < String > relatedPurposes = EntityPermissionChecker . getRelatedPurposes ( contentFrom , null ) ; List < String > relatedPurposesTo = EntityPermissionChecker . getRelatedPurposes ( contentTo , relatedPurposes ) ; Map < String , Object > serviceInMap = FastMap . newInstance ( ) ; serviceInMap . put ( ""userLogin"" , userLogin ) ; serviceInMap . put ( ""targetOperationList"" , UtilMisc . toList ( ""CONTENT_LINK_TO"" ) ) ; serviceInMap . put ( ""contentPurposeList"" , relatedPurposesTo ) ; serviceInMap . put ( ""currentContent"" , contentTo ) ; serviceInMap . put ( ""displayFailCond"" , bDisplayFailCond ) ; try { permResults = dispatcher . runSync ( ""checkContentPermission"" , serviceInMap ) ; } catch ( GenericServiceException e ) { Debug . logError ( e , ""Problem checking permissions"" , ""ContentServices"" ) ; } permissionStatus = ( String ) permResults . get ( ""permissionStatus"" ) ; if ( permissionStatus == null || ! permissionStatus . equals ( ""granted"" ) ) { if ( bDisplayFailCond != null && bDisplayFailCond . booleanValue ( ) ) { String errMsg = ( String ) permResults . get ( ModelService . ERROR_MESSAGE ) ; results . put ( ModelService . ERROR_MESSAGE , errMsg ) ; } return results ; } serviceInMap . put ( ""currentContent"" , contentFrom ) ; serviceInMap . put ( ""targetOperationList"" , UtilMisc . toList ( ""CONTENT_LINK_FROM"" ) ) ; serviceInMap . put ( ""contentPurposeList"" , relatedPurposes ) ; try { permResults = dispatcher . runSync ( ""checkContentPermission"" , serviceInMap ) ; } catch ( GenericServiceException e ) { Debug . logError ( e , ""Problem checking permissions"" , ""ContentServices"" ) ; } permissionStatus = ( String ) permResults . get ( ""permissionStatus"" ) ; if ( permissionStatus != null && permissionStatus . equals ( ""granted"" ) ) { results . put ( ""permissionStatus"" , ""granted"" ) ; } else { if ( bDisplayFailCond != null && bDisplayFailCond . booleanValue ( ) ) { String errMsg = ( String ) permResults . get ( ModelService . ERROR_MESSAGE ) ; results . put ( ModelService . ERROR_MESSAGE , errMsg ) ; } } return results ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , UserConfigurationDataModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . airavataAutoSchedule = iprot . readBool ( ) ; struct . setAiravataAutoScheduleIsSet ( true ) ; struct . overrideManualScheduledParams = iprot . readBool ( ) ; struct . setOverrideManualScheduledParamsIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { struct . shareExperimentPublicly = iprot . readBool ( ) ; struct . setShareExperimentPubliclyIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . computationalResourceScheduling = new org . apache . airavata . model . scheduling . ComputationalResourceSchedulingModel ( ) ; struct . computationalResourceScheduling . read ( iprot ) ; struct . setComputationalResourceSchedulingIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . throttleResources = iprot . readBool ( ) ; struct . setThrottleResourcesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . userDN = iprot . readString ( ) ; struct . setUserDNIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . generateCert = iprot . readBool ( ) ; struct . setGenerateCertIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . storageId = iprot . readString ( ) ; struct . setStorageIdIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . experimentDataDir = iprot . readString ( ) ; struct . setExperimentDataDirIsSet ( true ) ; } }",No
" private static DatasetGraph datasetFromDescriptionWeb ( HttpAction action , DatasetDescription datasetDesc ) { try { if ( datasetDesc == null ) return null ; if ( datasetDesc . isEmpty ( ) ) return null ; List < String > graphURLs = datasetDesc . getDefaultGraphURIs ( ) ; List < String > namedGraphs = datasetDesc . getNamedGraphURIs ( ) ; if ( graphURLs . size ( ) == 0 && namedGraphs . size ( ) == 0 ) return null ; Dataset dataset = DatasetFactory . create ( ) ; { Model model = ModelFactory . createDefaultModel ( ) ; for ( String uri : graphURLs ) { if ( uri == null || uri . equals ( """" ) ) throw new InternalErrorException ( ""Default graph URI is null or the empty string"" ) ; try { GraphLoadUtils . loadModel ( model , uri , MaxTriples ) ; action . log . info ( format ( ""[%d] Load (default graph) %s"" , action . id , uri ) ) ; } catch ( RiotException ex ) { action . log . info ( format ( ""[%d] Parsing error loading %s: %s"" , action . id , uri , ex . getMessage ( ) ) ) ; ServletOps . errorBadRequest ( ""Failed to load URL (parse error) "" + uri + "" : "" + ex . getMessage ( ) ) ; } catch ( Exception ex ) { action . log . info ( format ( ""[%d] Failed to load (default) %s: %s"" , action . id , uri , ex . getMessage ( ) ) ) ; ServletOps . errorBadRequest ( ""Failed to load URL "" + uri ) ; } } dataset . setDefaultModel ( model ) ; } if ( namedGraphs != null ) { for ( String uri : namedGraphs ) { if ( uri == null || uri . equals ( """" ) ) throw new InternalErrorException ( ""Named graph URI is null or the empty string"" ) ; try { Model model = ModelFactory . createDefaultModel ( ) ; GraphLoadUtils . loadModel ( model , uri , MaxTriples ) ; action . log . info ( format ( ""[%d] Load (named graph) %s"" , action . id , uri ) ) ; dataset . addNamedModel ( uri , model ) ; } catch ( RiotException ex ) { action . log . info ( format ( ""[%d] Parsing error loading %s: %s"" , action . id , uri , ex . getMessage ( ) ) ) ; ServletOps . errorBadRequest ( ""Failed to load URL (parse error) "" + uri + "" : "" + ex . getMessage ( ) ) ; } catch ( Exception ex ) { action . log . info ( format ( ""[%d] Failed to load (named graph) %s: %s"" , action . id , uri , ex . getMessage ( ) ) ) ; ServletOps . errorBadRequest ( ""Failed to load URL "" + uri ) ; } } } return dataset . asDatasetGraph ( ) ; } catch ( ActionErrorException ex ) { throw ex ; } catch ( Exception ex ) { action . log . info ( format ( ""[%d] SPARQL parameter error: "" + ex . getMessage ( ) , action . id , ex ) ) ; ServletOps . errorBadRequest ( ""Parameter error: "" + ex . getMessage ( ) ) ; return null ; } }",Smelly
 boolean isJava9Compatible ( ) { return majorVersion >= 9 ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void populateFilterResolvedInfo ( ColumnResolvedFilterInfo visitableObj , FilterResolverMetadata metadata ) throws FilterUnsupportedException { if ( visitableObj instanceof DimColumnResolvedFilterInfo ) { DimColumnResolvedFilterInfo resolveDimension = ( DimColumnResolvedFilterInfo ) visitableObj ; ColumnFilterInfo resolvedFilterObject = null ; List < ExpressionResult > listOfExpressionResults = new ArrayList < ExpressionResult > ( 20 ) ; List < String > evaluateResultListFinal = new ArrayList < String > ( ) ; try { if ( metadata . getExpression ( ) instanceof RangeExpression ) { listOfExpressionResults = ( ( RangeExpression ) metadata . getExpression ( ) ) . getLiterals ( ) ; } for ( ExpressionResult result : listOfExpressionResults ) { if ( result . getString ( ) == null ) { evaluateResultListFinal . add ( CarbonCommonConstants . MEMBER_DEFAULT_VAL ) ; continue ; } evaluateResultListFinal . add ( result . getString ( ) ) ; } if ( ! metadata . isIncludeFilter ( ) && ! evaluateResultListFinal . contains ( CarbonCommonConstants . MEMBER_DEFAULT_VAL ) ) { evaluateResultListFinal . add ( CarbonCommonConstants . MEMBER_DEFAULT_VAL ) ; } } catch ( FilterIllegalMemberException e ) { throw new FilterUnsupportedException ( e ) ; } resolvedFilterObject = FilterUtil . getNoDictionaryValKeyMemberForFilter ( evaluateResultListFinal , metadata . isIncludeFilter ( ) , metadata . getColumnExpression ( ) . getDataType ( ) ) ; resolveDimension . setFilterValues ( resolvedFilterObject ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Project struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . projectID = iprot . readString ( ) ; struct . setProjectIDIsSet ( true ) ; struct . owner = iprot . readString ( ) ; struct . setOwnerIsSet ( true ) ; struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . description = iprot . readString ( ) ; struct . setDescriptionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list10 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . sharedUsers = new ArrayList < String > ( _list10 . size ) ; String _elem11 ; for ( int _i12 = 0 ; _i12 < _list10 . size ; ++ _i12 ) { _elem11 = iprot . readString ( ) ; struct . sharedUsers . add ( _elem11 ) ; } } struct . setSharedUsersIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list13 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . sharedGroups = new ArrayList < String > ( _list13 . size ) ; String _elem14 ; for ( int _i15 = 0 ; _i15 < _list13 . size ; ++ _i15 ) { _elem14 = iprot . readString ( ) ; struct . sharedGroups . add ( _elem14 ) ; } } struct . setSharedGroupsIsSet ( true ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 public final int getBytes ( ) { return bytes ; },No
 void setFieldInfos ( FieldInfos fieldInfos ) { this . fieldInfos = fieldInfos ; },No
" public static String updateAllContentKeywords ( HttpServletRequest request , HttpServletResponse response ) { Delegator delegator = ( Delegator ) request . getAttribute ( ""delegator"" ) ; Security security = ( Security ) request . getAttribute ( ""security"" ) ; String updateMode = ""CREATE"" ; String errMsg = null ; String doAll = request . getParameter ( ""doAll"" ) ; if ( ! security . hasEntityPermission ( ""CONTENTMGR"" , ""_"" + updateMode , request . getSession ( ) ) ) { Map < String , String > messageMap = UtilMisc . toMap ( ""updateMode"" , updateMode ) ; errMsg = UtilProperties . getMessage ( resource , ""contentevents.not_sufficient_permissions"" , messageMap , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } EntityListIterator entityListIterator = null ; int numConts = 0 ; int errConts = 0 ; boolean beganTx = false ; try { beganTx = TransactionUtil . begin ( 7200 ) ; try { if ( Debug . infoOn ( ) ) { long count = delegator . findCountByCondition ( ""Content"" , null , null , null ) ; Debug . logInfo ( ""========== Found "" + count + "" contents to index =========="" , module ) ; } entityListIterator = delegator . find ( ""Content"" , null , null , null , null , null ) ; } catch ( GenericEntityException gee ) { Debug . logWarning ( gee , gee . getMessage ( ) , module ) ; Map < String , String > messageMap = UtilMisc . toMap ( ""gee"" , gee . toString ( ) ) ; errMsg = UtilProperties . getMessage ( resource , ""contentevents.error_getting_content_list"" , messageMap , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; throw gee ; } GenericValue content ; while ( ( content = entityListIterator . next ( ) ) != null ) { try { ContentKeywordIndex . indexKeywords ( content , ""Y"" . equals ( doAll ) ) ; } catch ( GenericEntityException e ) { Debug . logWarning ( ""[ContentEvents.updateAllContentKeywords] Could not create content-keyword (write error); message: "" + e . getMessage ( ) , module ) ; errConts ++ ; } numConts ++ ; if ( numConts % 500 == 0 ) { Debug . logInfo ( ""Keywords indexed for "" + numConts + "" so far"" , module ) ; } } } catch ( GenericEntityException e ) { try { TransactionUtil . rollback ( beganTx , e . getMessage ( ) , e ) ; } catch ( Exception e1 ) { Debug . logError ( e1 , module ) ; } return ""error"" ; } catch ( Throwable t ) { Debug . logError ( t , module ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , t . getMessage ( ) ) ; try { TransactionUtil . rollback ( beganTx , t . getMessage ( ) , t ) ; } catch ( Exception e2 ) { Debug . logError ( e2 , module ) ; } return ""error"" ; } finally { if ( entityListIterator != null ) { try { entityListIterator . close ( ) ; } catch ( GenericEntityException gee ) { Debug . logError ( gee , ""Error closing EntityListIterator when indexing content keywords."" , module ) ; } } try { TransactionUtil . commit ( beganTx ) ; } catch ( Exception e ) { Debug . logError ( e , module ) ; } } if ( errConts == 0 ) { Map < String , String > messageMap = UtilMisc . toMap ( ""numConts"" , Integer . toString ( numConts ) ) ; errMsg = UtilProperties . getMessage ( resource , ""contentevents.keyword_creation_complete_for_contents"" , messageMap , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( ""_EVENT_MESSAGE_"" , errMsg ) ; return ""success"" ; } else { Map < String , String > messageMap = UtilMisc . toMap ( ""numConts"" , Integer . toString ( numConts ) ) ; messageMap . put ( ""errConts"" , Integer . toString ( errConts ) ) ; errMsg = UtilProperties . getMessage ( resource , ""contentevents.keyword_creation_complete_for_contents_with_errors"" , messageMap , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , errMsg ) ; return ""error"" ; } }",Smelly
" public com . google . protobuf . ExtensionRegistry assignDescriptors ( com . google . protobuf . Descriptors . FileDescriptor root ) { descriptor = root ; internal_static_exec_shared_UserCredentials_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 0 ) ; internal_static_exec_shared_UserCredentials_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_UserCredentials_descriptor , new java . lang . String [ ] { ""UserName"" , } ) ; internal_static_exec_shared_QueryId_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 1 ) ; internal_static_exec_shared_QueryId_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryId_descriptor , new java . lang . String [ ] { ""Part1"" , ""Part2"" , } ) ; internal_static_exec_shared_DrillPBError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 2 ) ; internal_static_exec_shared_DrillPBError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_DrillPBError_descriptor , new java . lang . String [ ] { ""ErrorId"" , ""Endpoint"" , ""ErrorType"" , ""Message"" , ""Exception"" , ""ParsingError"" , } ) ; internal_static_exec_shared_ExceptionWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 3 ) ; internal_static_exec_shared_ExceptionWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ExceptionWrapper_descriptor , new java . lang . String [ ] { ""ExceptionClass"" , ""Message"" , ""StackTrace"" , ""Cause"" , } ) ; internal_static_exec_shared_StackTraceElementWrapper_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 4 ) ; internal_static_exec_shared_StackTraceElementWrapper_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StackTraceElementWrapper_descriptor , new java . lang . String [ ] { ""ClassName"" , ""FileName"" , ""LineNumber"" , ""MethodName"" , ""IsNativeMethod"" , } ) ; internal_static_exec_shared_ParsingError_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 5 ) ; internal_static_exec_shared_ParsingError_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_ParsingError_descriptor , new java . lang . String [ ] { ""StartColumn"" , ""StartRow"" , ""EndColumn"" , ""EndRow"" , } ) ; internal_static_exec_shared_RecordBatchDef_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 6 ) ; internal_static_exec_shared_RecordBatchDef_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_RecordBatchDef_descriptor , new java . lang . String [ ] { ""RecordCount"" , ""Field"" , ""CarriesTwoByteSelectionVector"" , } ) ; internal_static_exec_shared_NamePart_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 7 ) ; internal_static_exec_shared_NamePart_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NamePart_descriptor , new java . lang . String [ ] { ""Type"" , ""Name"" , ""Child"" , } ) ; internal_static_exec_shared_SerializedField_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 8 ) ; internal_static_exec_shared_SerializedField_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SerializedField_descriptor , new java . lang . String [ ] { ""MajorType"" , ""NamePart"" , ""Child"" , ""ValueCount"" , ""VarByteLength"" , ""BufferLength"" , } ) ; internal_static_exec_shared_NodeStatus_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 9 ) ; internal_static_exec_shared_NodeStatus_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_NodeStatus_descriptor , new java . lang . String [ ] { ""NodeId"" , ""MemoryFootprint"" , } ) ; internal_static_exec_shared_QueryResult_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 10 ) ; internal_static_exec_shared_QueryResult_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryResult_descriptor , new java . lang . String [ ] { ""QueryState"" , ""QueryId"" , ""Error"" , } ) ; internal_static_exec_shared_QueryData_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 11 ) ; internal_static_exec_shared_QueryData_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryData_descriptor , new java . lang . String [ ] { ""QueryId"" , ""RowCount"" , ""Def"" , } ) ; internal_static_exec_shared_QueryInfo_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 12 ) ; internal_static_exec_shared_QueryInfo_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryInfo_descriptor , new java . lang . String [ ] { ""Query"" , ""Start"" , ""State"" , ""User"" , ""Foreman"" , ""OptionsJson"" , } ) ; internal_static_exec_shared_QueryProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 13 ) ; internal_static_exec_shared_QueryProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_QueryProfile_descriptor , new java . lang . String [ ] { ""Id"" , ""Type"" , ""Start"" , ""End"" , ""Query"" , ""Plan"" , ""Foreman"" , ""State"" , ""TotalFragments"" , ""FinishedFragments"" , ""FragmentProfile"" , ""User"" , ""Error"" , ""VerboseError"" , ""ErrorId"" , ""ErrorNode"" , ""OptionsJson"" , ""PlanEnd"" , ""QueueWaitEnd"" , } ) ; internal_static_exec_shared_MajorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 14 ) ; internal_static_exec_shared_MajorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MajorFragmentProfile_descriptor , new java . lang . String [ ] { ""MajorFragmentId"" , ""MinorFragmentProfile"" , } ) ; internal_static_exec_shared_MinorFragmentProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 15 ) ; internal_static_exec_shared_MinorFragmentProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MinorFragmentProfile_descriptor , new java . lang . String [ ] { ""State"" , ""Error"" , ""MinorFragmentId"" , ""OperatorProfile"" , ""StartTime"" , ""EndTime"" , ""MemoryUsed"" , ""MaxMemoryUsed"" , ""Endpoint"" , ""LastUpdate"" , ""LastProgress"" , } ) ; internal_static_exec_shared_OperatorProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 16 ) ; internal_static_exec_shared_OperatorProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_OperatorProfile_descriptor , new java . lang . String [ ] { ""InputProfile"" , ""OperatorId"" , ""OperatorType"" , ""SetupNanos"" , ""ProcessNanos"" , ""PeakLocalMemoryAllocated"" , ""Metric"" , ""WaitNanos"" , } ) ; internal_static_exec_shared_StreamProfile_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 17 ) ; internal_static_exec_shared_StreamProfile_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_StreamProfile_descriptor , new java . lang . String [ ] { ""Records"" , ""Batches"" , ""Schemas"" , } ) ; internal_static_exec_shared_MetricValue_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 18 ) ; internal_static_exec_shared_MetricValue_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_MetricValue_descriptor , new java . lang . String [ ] { ""MetricId"" , ""LongValue"" , ""DoubleValue"" , } ) ; internal_static_exec_shared_Registry_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 19 ) ; internal_static_exec_shared_Registry_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Registry_descriptor , new java . lang . String [ ] { ""Jar"" , } ) ; internal_static_exec_shared_Jar_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 20 ) ; internal_static_exec_shared_Jar_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_Jar_descriptor , new java . lang . String [ ] { ""Name"" , ""FunctionSignature"" , } ) ; internal_static_exec_shared_SaslMessage_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 21 ) ; internal_static_exec_shared_SaslMessage_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_shared_SaslMessage_descriptor , new java . lang . String [ ] { ""Mechanism"" , ""Data"" , ""Status"" , } ) ; return null ; }",No
" protected Referenceable createDataSetRef ( AnalysisContext context , ProvenanceEventRecord event ) { final Referenceable ref = new Referenceable ( TYPE ) ; ref . set ( ATTR_NAME , event . getComponentType ( ) ) ; ref . set ( ATTR_QUALIFIED_NAME , toQualifiedName ( context . getNiFiClusterName ( ) , event . getComponentId ( ) ) ) ; ref . set ( ATTR_DESCRIPTION , event . getEventType ( ) + "" was performed by "" + event . getComponentType ( ) ) ; return ref ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , UserConfigurationDataModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . airavataAutoSchedule = iprot . readBool ( ) ; struct . setAiravataAutoScheduleIsSet ( true ) ; struct . overrideManualScheduledParams = iprot . readBool ( ) ; struct . setOverrideManualScheduledParamsIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { struct . shareExperimentPublicly = iprot . readBool ( ) ; struct . setShareExperimentPubliclyIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . computationalResourceScheduling = new org . apache . airavata . model . scheduling . ComputationalResourceSchedulingModel ( ) ; struct . computationalResourceScheduling . read ( iprot ) ; struct . setComputationalResourceSchedulingIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . throttleResources = iprot . readBool ( ) ; struct . setThrottleResourcesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . userDN = iprot . readString ( ) ; struct . setUserDNIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . generateCert = iprot . readBool ( ) ; struct . setGenerateCertIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . storageId = iprot . readString ( ) ; struct . setStorageIdIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . experimentDataDir = iprot . readString ( ) ; struct . setExperimentDataDirIsSet ( true ) ; } }",Smelly
" public TokenInfo getTokenInfo ( Class < ? > protocol , Configuration conf ) { return null ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public void writeToStream ( OutputStream os ) throws IOException { int length = 7 + bitsPerIDE . length ; byte flags = 0x00 ; if ( subtractive ) { flags |= 1 < < 7 ; } DataOutputStream dout = new DataOutputStream ( os ) ; dout . writeByte ( 0x9B ) ; dout . writeByte ( length - 2 ) ; dout . writeByte ( flags ) ; dout . writeByte ( this . colorModel ) ; for ( int i = 0 ; i < 3 ; i ++ ) { dout . writeByte ( 0 ) ; } dout . write ( this . bitsPerIDE ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void runAction ( Map < String , Object > context ) { ModelForm parentModel = modelForm . getParentModelForm ( ) ; switch ( kind ) { case ACTIONS : parentModel . runFormActions ( context ) ; break ; case ROW_ACTIONS : ModelFormAction . runSubActions ( parentModel . rowActions , context ) ; break ; } }",Smelly
" public Convertor build ( Element configElement ) throws Exception { FormattingDateConvertor convertor = new FormattingDateConvertor ( ) ; if ( configElement == null ) return convertor ; String style = configElement . getAttribute ( ""style"" ) ; if ( ! style . equals ( """" ) ) { if ( style . equals ( ""short"" ) ) convertor . setStyle ( DateFormat . SHORT ) ; else if ( style . equals ( ""medium"" ) ) convertor . setStyle ( DateFormat . MEDIUM ) ; else if ( style . equals ( ""long"" ) ) convertor . setStyle ( DateFormat . LONG ) ; else if ( style . equals ( ""full"" ) ) convertor . setStyle ( DateFormat . FULL ) ; else throw new Exception ( ""Invalid value \"""" + style + ""\"" for style attribute at "" + DomHelper . getLocation ( configElement ) ) ; } String variant = configElement . getAttribute ( ""variant"" ) ; if ( ! variant . equals ( """" ) ) { if ( variant . equals ( ""date"" ) ) convertor . setVariant ( FormattingDateConvertor . DATE ) ; else if ( variant . equals ( ""time"" ) ) convertor . setVariant ( FormattingDateConvertor . TIME ) ; else if ( variant . equals ( ""datetime"" ) ) convertor . setVariant ( FormattingDateConvertor . DATE_TIME ) ; else throw new Exception ( ""Invalid value \"""" + variant + ""\"" for variant attribute at "" + DomHelper . getLocation ( configElement ) ) ; } Element patternsEl = DomHelper . getChildElement ( configElement , Constants . WD_NS , ""patterns"" , false ) ; if ( patternsEl != null ) { Element patternEl [ ] = DomHelper . getChildElements ( patternsEl , Constants . WD_NS , ""pattern"" ) ; for ( int i = 0 ; i < patternEl . length ; i ++ ) { String locale = patternEl [ i ] . getAttribute ( ""locale"" ) ; String pattern = DomHelper . getElementText ( patternEl [ i ] ) ; if ( pattern . equals ( """" ) ) throw new Exception ( ""pattern element does not contain any content at "" + DomHelper . getLocation ( patternEl [ i ] ) ) ; if ( locale . equals ( """" ) ) convertor . setNonLocalizedPattern ( pattern ) ; else { Locale loc = I18nUtils . parseLocale ( locale ) ; convertor . addFormattingPattern ( loc , pattern ) ; } } } return convertor ; }",Smelly
 private void run ( ) throws IOException { List < MultiIndex . Action > actions = redoLog . getActions ( ) ; for ( MultiIndex . Action a : actions ) { if ( a . getType ( ) == MultiIndex . Action . TYPE_START ) { losers . add ( a . getTransactionId ( ) ) ; } else if ( a . getType ( ) == MultiIndex . Action . TYPE_COMMIT ) { losers . remove ( a . getTransactionId ( ) ) ; } } int lastSafeVolatileCommit = - 1 ; Set < Long > transactionIds = new HashSet < Long > ( ) ; for ( int i = 0 ; i < actions . size ( ) ; i ++ ) { MultiIndex . Action a = actions . get ( i ) ; if ( a . getType ( ) == MultiIndex . Action . TYPE_COMMIT ) { transactionIds . clear ( ) ; } else if ( a . getType ( ) == MultiIndex . Action . TYPE_VOLATILE_COMMIT ) { transactionIds . retainAll ( losers ) ; if ( transactionIds . size ( ) > 0 ) { break ; } else { lastSafeVolatileCommit = i ; } } else { transactionIds . add ( a . getTransactionId ( ) ) ; } } for ( int i = lastSafeVolatileCommit + 1 ; i < actions . size ( ) ; i ++ ) { MultiIndex . Action a = actions . get ( i ) ; if ( a . getType ( ) == MultiIndex . Action . TYPE_CREATE_INDEX ) { a . undo ( index ) ; } } for ( int i = 0 ; i < actions . size ( ) && i <= lastSafeVolatileCommit ; i ++ ) { MultiIndex . Action a = actions . get ( i ) ; switch ( a . getType ( ) ) { case MultiIndex . Action . TYPE_ADD_INDEX : case MultiIndex . Action . TYPE_CREATE_INDEX : case MultiIndex . Action . TYPE_DELETE_INDEX : case MultiIndex . Action . TYPE_DELETE_NODE : if ( a . getTransactionId ( ) == MultiIndex . Action . INTERNAL_TRANS_REPL_INDEXES ) { continue ; } a . execute ( index ) ; } } for ( int i = lastSafeVolatileCommit + 1 ; i < actions . size ( ) ; i ++ ) { MultiIndex . Action a = actions . get ( i ) ; if ( losers . contains ( new Long ( a . getTransactionId ( ) ) ) ) { break ; } else { if ( a . getTransactionId ( ) == MultiIndex . Action . INTERNAL_TRANS_REPL_INDEXES ) { continue ; } a . execute ( index ) ; } } index . flush ( ) ; index . releaseMultiReader ( ) ; },Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TabletStats struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 8 ) ; if ( incoming . get ( 0 ) ) { struct . extent = new org . apache . accumulo . core . data . thrift . TKeyExtent ( ) ; struct . extent . read ( iprot ) ; struct . setExtentIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . majors = new ActionStats ( ) ; struct . majors . read ( iprot ) ; struct . setMajorsIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . minors = new ActionStats ( ) ; struct . minors . read ( iprot ) ; struct . setMinorsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . splits = new ActionStats ( ) ; struct . splits . read ( iprot ) ; struct . setSplitsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . numEntries = iprot . readI64 ( ) ; struct . setNumEntriesIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . ingestRate = iprot . readDouble ( ) ; struct . setIngestRateIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . queryRate = iprot . readDouble ( ) ; struct . setQueryRateIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . splitCreationTime = iprot . readI64 ( ) ; struct . setSplitCreationTimeIsSet ( true ) ; } }",Smelly
" public int encode ( PositionedByteRange dst , byte [ ] val , int voff , int vlen ) { return ( ( RawBytes ) base ) . encode ( dst , val , voff , vlen ) ; }",No
" public Convertor build ( Element configElement ) throws Exception { FormattingDateConvertor convertor = new FormattingDateConvertor ( ) ; if ( configElement == null ) return convertor ; String style = configElement . getAttribute ( ""style"" ) ; if ( ! style . equals ( """" ) ) { if ( style . equals ( ""short"" ) ) convertor . setStyle ( DateFormat . SHORT ) ; else if ( style . equals ( ""medium"" ) ) convertor . setStyle ( DateFormat . MEDIUM ) ; else if ( style . equals ( ""long"" ) ) convertor . setStyle ( DateFormat . LONG ) ; else if ( style . equals ( ""full"" ) ) convertor . setStyle ( DateFormat . FULL ) ; else throw new Exception ( ""Invalid value \"""" + style + ""\"" for style attribute at "" + DomHelper . getLocation ( configElement ) ) ; } String variant = configElement . getAttribute ( ""variant"" ) ; if ( ! variant . equals ( """" ) ) { if ( variant . equals ( FormattingDateConvertor . DATE ) || variant . equals ( FormattingDateConvertor . TIME ) || variant . equals ( FormattingDateConvertor . DATE_TIME ) ) { convertor . setVariant ( variant ) ; } else { throw new Exception ( ""Invalid value \"""" + variant + ""\"" for variant attribute at "" + DomHelper . getLocation ( configElement ) ) ; } } Element patternsEl = DomHelper . getChildElement ( configElement , Constants . DEFINITION_NS , ""patterns"" , false ) ; if ( patternsEl != null ) { Element patternEl [ ] = DomHelper . getChildElements ( patternsEl , Constants . DEFINITION_NS , ""pattern"" ) ; for ( int i = 0 ; i < patternEl . length ; i ++ ) { String locale = patternEl [ i ] . getAttribute ( ""locale"" ) ; String pattern = DomHelper . getElementText ( patternEl [ i ] ) ; if ( pattern . equals ( """" ) ) throw new Exception ( ""pattern element does not contain any content at "" + DomHelper . getLocation ( patternEl [ i ] ) ) ; if ( locale . equals ( """" ) ) convertor . setNonLocalizedPattern ( pattern ) ; else { Locale loc = I18nUtils . parseLocale ( locale ) ; convertor . addFormattingPattern ( loc , pattern ) ; } } } return convertor ; }",Smelly
" public static void main ( String [ ] args ) { if ( args . length != 13 ) { System . err . println ( ""Usage: DefineJob <description> <connection_name> <output_name> <type> <start_method> <hopcount_method> <recrawl_interval> <expiration_interval> <reseed_interval> <job_priority> <hop_filters> <filespec_xml> <outputspec_xml>"" ) ; System . err . println ( ""<type> is one of: continuous or specified"" ) ; System . err . println ( ""<start_method> is one of: windowbegin, windowinside, disable"" ) ; System . err . println ( ""<hopcount_method> is one of: accurate, nodelete, neverdelete"" ) ; System . err . println ( ""<recrawl_interval> is the default document recrawl interval in minutes"" ) ; System . err . println ( ""<expiration_interval> is the default document expiration interval in minutes"" ) ; System . err . println ( ""<reseed_interval> is the default document reseed interval in minutes"" ) ; System . err . println ( ""<job_priority> is the job priority (and integer between 0 and 10)"" ) ; System . err . println ( ""<hop_filters> is a comma-separated list of tuples, of the form 'linktype=maxhops'"" ) ; System . err . println ( ""<filespec_xml> is the document specification XML, its form dependent on the connection type"" ) ; System . err . println ( ""<outputspec_xml> is the output specification XML, its form dependent on the output connection type"" ) ; System . exit ( - 1 ) ; } String description = args [ 0 ] ; String connectionName = args [ 1 ] ; String outputConnectionName = args [ 2 ] ; String typeString = args [ 3 ] ; String startString = args [ 4 ] ; String hopcountString = args [ 5 ] ; String recrawlInterval = args [ 6 ] ; String expirationInterval = args [ 7 ] ; String reseedInterval = args [ 8 ] ; String jobPriority = args [ 9 ] ; String hopFilters = args [ 10 ] ; String filespecXML = args [ 11 ] ; String outputspecXML = args [ 12 ] ; try { ManifoldCF . initializeEnvironment ( ) ; IThreadContext tc = ThreadContextFactory . make ( ) ; IJobManager jobManager = JobManagerFactory . make ( tc ) ; IJobDescription desc = jobManager . createJob ( ) ; desc . setDescription ( description ) ; desc . setConnectionName ( connectionName ) ; desc . setOutputConnectionName ( outputConnectionName ) ; if ( typeString . equals ( ""continuous"" ) ) desc . setType ( IJobDescription . TYPE_CONTINUOUS ) ; else if ( typeString . equals ( ""specified"" ) ) desc . setType ( IJobDescription . TYPE_SPECIFIED ) ; else throw new ManifoldCFException ( ""Unknown type: '"" + typeString + ""'"" ) ; if ( startString . equals ( ""windowbegin"" ) ) desc . setStartMethod ( IJobDescription . START_WINDOWBEGIN ) ; else if ( startString . equals ( ""windowinside"" ) ) desc . setStartMethod ( IJobDescription . START_WINDOWINSIDE ) ; else if ( startString . equals ( ""disable"" ) ) desc . setStartMethod ( IJobDescription . START_DISABLE ) ; else throw new ManifoldCFException ( ""Unknown start method: '"" + startString + ""'"" ) ; if ( hopcountString . equals ( ""accurate"" ) ) desc . setHopcountMode ( IJobDescription . HOPCOUNT_ACCURATE ) ; else if ( hopcountString . equals ( ""nodelete"" ) ) desc . setHopcountMode ( IJobDescription . HOPCOUNT_NODELETE ) ; else if ( hopcountString . equals ( ""neverdelete"" ) ) desc . setHopcountMode ( IJobDescription . HOPCOUNT_NEVERDELETE ) ; else throw new ManifoldCFException ( ""Unknown hopcount mode: '"" + hopcountString + ""'"" ) ; if ( recrawlInterval . length ( ) > 0 ) desc . setInterval ( new Long ( recrawlInterval ) ) ; if ( expirationInterval . length ( ) > 0 ) desc . setExpiration ( new Long ( expirationInterval ) ) ; if ( reseedInterval . length ( ) > 0 ) desc . setReseedInterval ( new Long ( reseedInterval ) ) ; desc . setPriority ( Integer . parseInt ( jobPriority ) ) ; String [ ] hopFilterSet = hopFilters . split ( "","" ) ; int i = 0 ; while ( i < hopFilterSet . length ) { String hopFilter = hopFilterSet [ i ++ ] ; if ( hopFilter != null && hopFilter . length ( ) > 0 ) { String [ ] stuff = hopFilter . trim ( ) . split ( ""="" ) ; if ( stuff != null && stuff . length == 2 ) desc . addHopCountFilter ( stuff [ 0 ] , ( ( stuff [ 1 ] . length ( ) > 0 ) ? new Long ( stuff [ 1 ] ) : null ) ) ; } } desc . getSpecification ( ) . fromXML ( filespecXML ) ; if ( outputspecXML . length ( ) > 0 ) desc . getOutputSpecification ( ) . fromXML ( outputspecXML ) ; jobManager . save ( desc ) ; System . out . print ( desc . getID ( ) . toString ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( - 2 ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RolePrincipalGrant struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 7 ) ; if ( incoming . get ( 0 ) ) { struct . roleName = iprot . readString ( ) ; struct . setRoleNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . principalName = iprot . readString ( ) ; struct . setPrincipalNameIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . principalType = PrincipalType . findByValue ( iprot . readI32 ( ) ) ; struct . setPrincipalTypeIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . grantOption = iprot . readBool ( ) ; struct . setGrantOptionIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . grantTime = iprot . readI32 ( ) ; struct . setGrantTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . grantorName = iprot . readString ( ) ; struct . setGrantorNameIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . grantorPrincipalType = PrincipalType . findByValue ( iprot . readI32 ( ) ) ; struct . setGrantorPrincipalTypeIsSet ( true ) ; } }",Smelly
 protected void doExecute ( ConcurrentTestCommandExecutor executor ) throws SQLException { Statement stmt = executor . getConnection ( ) . createStatement ( ) ; try { stmt . execute ( sql ) ; } finally { stmt . close ( ) ; } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public FilterSpec open ( Assembler a , Resource root , Mode mode ) { if ( root . hasProperty ( TextVocab . pClass ) ) { String className = root . getProperty ( TextVocab . pClass ) . getString ( ) ; Class < ? > clazz = null ; try { clazz = Class . forName ( className ) ; } catch ( ClassNotFoundException e ) { Log . error ( this , ""Filter class "" + className + "" not found. "" + e . getMessage ( ) , e ) ; return null ; } if ( ! TokenFilter . class . isAssignableFrom ( clazz ) ) { Log . error ( this , clazz . getName ( ) + "" has to be a subclass of "" + TokenFilter . class . getName ( ) ) ; return null ; } if ( root . hasProperty ( TextVocab . pParams ) ) { RDFNode node = root . getProperty ( TextVocab . pParams ) . getObject ( ) ; if ( ! node . isResource ( ) ) { throw new TextIndexException ( ""text:params must be a list of parameter resources: "" + node ) ; } List < ParamSpec > specs = Params . getParamSpecs ( ( Resource ) node ) ; final Class < ? > paramClasses [ ] = new Class < ? > [ specs . size ( ) + 1 ] ; paramClasses [ 0 ] = TokenStream . class ; final Object paramValues [ ] = new Object [ specs . size ( ) + 1 ] ; paramValues [ 0 ] = null ; for ( int i = 0 ; i < specs . size ( ) ; i ++ ) { ParamSpec spec = specs . get ( i ) ; paramClasses [ i + 1 ] = spec . getValueClass ( ) ; paramValues [ i + 1 ] = spec . getValue ( ) ; } return new FilterSpec ( clazz , paramClasses , paramValues ) ; } else { return new FilterSpec ( clazz , new Class < ? > [ ] { TokenStream . class } , new Object [ ] { null } ) ; } } else { throw new TextIndexException ( ""text:class property is required by GenericFilter: "" + root ) ; } }",Smelly
" public HiveClient getClient ( ) { HiveClient result = mock ( HiveClient . class ) ; if ( ClientResult . RETURN_OK . equals ( this . result ) ) { List < String > fetchResult = new ArrayList < String > ( 1 ) ; fetchResult . add ( ""test result"" ) ; try { when ( result . fetchN ( anyInt ( ) ) ) . thenReturn ( fetchResult ) ; } catch ( HiveServerException e ) { } catch ( Exception e ) { } } else if ( ClientResult . RETURN_SERVER_EXCEPTION . equals ( this . result ) ) { HiveServerException exception = new HiveServerException ( ""test HiveServerException"" , 10 , ""sql state"" ) ; try { when ( result . fetchN ( anyInt ( ) ) ) . thenThrow ( exception ) ; when ( result . fetchN ( anyInt ( ) ) ) . thenThrow ( exception ) ; } catch ( TException e ) { ; } return result ; } else if ( ClientResult . RETURN_T_EXCEPTION . equals ( this . result ) ) { TException exception = new TException ( ""test TException"" ) ; try { doThrow ( exception ) . when ( result ) . clean ( ) ; when ( result . fetchN ( anyInt ( ) ) ) . thenThrow ( exception ) ; } catch ( TException e ) { e . printStackTrace ( ) ; } return result ; } return result ; }",No
" public void testRepeatedContainsForWildCards ( ) throws Exception { testBuilder ( ) . sqlQuery ( ""select repeated_contains(topping, 'Choc*') from cp.`testRepeatedWrite.json`"" ) . ordered ( ) . baselineColumns ( ""EXPR$0"" ) . baselineValues ( true ) . baselineValues ( true ) . baselineValues ( true ) . baselineValues ( true ) . baselineValues ( false ) . build ( ) . run ( ) ; testBuilder ( ) . sqlQuery ( ""select repeated_contains(topping, 'Pow*') from cp.`testRepeatedWrite.json`"" ) . ordered ( ) . baselineColumns ( ""EXPR$0"" ) . baselineValues ( true ) . baselineValues ( false ) . baselineValues ( false ) . baselineValues ( true ) . baselineValues ( false ) . build ( ) . run ( ) ; }",Smelly
 public Components getComponents ( ) { return components ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public void flush ( ) throws IOException { if ( getFooter ( ) != null ) { writer . println ( getFooter ( ) ) ; } writer . close ( ) ; },No
 public long getTrailerHitCount ( ) { return this . cacheStats != null ? this . cacheStats . getTrailerHitCount ( ) : 0L ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public StringBuilder appendTo ( StringBuilder sb ) { return sb . append ( ""SQLPlan["" ) . append ( getClass ( ) . getName ( ) ) . append ( ""]"" ) ; }",No
" public Object evaluate ( DeferredObject [ ] arguments ) throws HiveException { Object o0 , o1 ; o0 = arguments [ 0 ] . get ( ) ; if ( o0 == null ) { return null ; } o1 = arguments [ 1 ] . get ( ) ; if ( o1 == null ) { return null ; } switch ( compareType ) { case COMPARE_TEXT : result . set ( ! soi0 . getPrimitiveWritableObject ( o0 ) . equals ( soi1 . getPrimitiveWritableObject ( o1 ) ) ) ; break ; case COMPARE_INT : result . set ( ioi0 . get ( o0 ) != ioi1 . get ( o1 ) ) ; break ; case COMPARE_LONG : result . set ( loi0 . get ( o0 ) != loi1 . get ( o1 ) ) ; break ; case COMPARE_BYTE : result . set ( byoi0 . get ( o0 ) != byoi1 . get ( o1 ) ) ; break ; case COMPARE_BOOL : result . set ( boi0 . get ( o0 ) != boi1 . get ( o1 ) ) ; break ; case COMPARE_STRING : result . set ( ! soi0 . getPrimitiveJavaObject ( o0 ) . equals ( soi1 . getPrimitiveJavaObject ( o1 ) ) ) ; break ; case SAME_TYPE : result . set ( ObjectInspectorUtils . compare ( o0 , argumentOIs [ 0 ] , o1 , argumentOIs [ 1 ] ) != 0 ) ; break ; default : Object converted_o0 = converter0 . convert ( o0 ) ; if ( converted_o0 == null ) { return null ; } Object converted_o1 = converter1 . convert ( o1 ) ; if ( converted_o1 == null ) { return null ; } result . set ( ObjectInspectorUtils . compare ( converted_o0 , compareOI , converted_o1 , compareOI ) != 0 ) ; } return result ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected byte [ ] makeChecksum ( byte [ ] key , byte [ ] data , int hashSize ) throws KrbException { byte [ ] hash = Cmac . cmac ( encProvider ( ) , key , data ) ; byte [ ] output = new byte [ hashSize ] ; System . arraycopy ( hash , 0 , output , 0 , hashSize ) ; return output ; }",No
" public void writeThenReadAll ( ) { TextIO . TypedWrite < String , Object > write = TextIO . write ( ) . to ( filenamePrefix ) . withOutputFilenames ( ) . withCompression ( compressionType ) ; PCollection < String > testFilenames = pipeline . apply ( ""Generate sequence"" , GenerateSequence . from ( 0 ) . to ( numberOfTextLines ) ) . apply ( ""Produce text lines"" , ParDo . of ( new FileBasedIOITHelper . DeterministicallyConstructTestTextLineFn ( ) ) ) . apply ( ""Write content to files"" , write ) . getPerDestinationOutputFilenames ( ) . apply ( Values . create ( ) ) ; PCollection < String > consolidatedHashcode = testFilenames . apply ( ""Read all files"" , TextIO . readAll ( ) . withCompression ( AUTO ) ) . apply ( ""Calculate hashcode"" , Combine . globally ( new HashingFn ( ) ) ) ; String expectedHash = getExpectedHashForLineCount ( numberOfTextLines ) ; PAssert . thatSingleton ( consolidatedHashcode ) . isEqualTo ( expectedHash ) ; testFilenames . apply ( ""Delete test files"" , ParDo . of ( new DeleteFileFn ( ) ) . withSideInputs ( consolidatedHashcode . apply ( View . asSingleton ( ) ) ) ) ; pipeline . run ( ) . waitUntilFinish ( ) ; }",No
" public com . google . protobuf . ExtensionRegistry assignDescriptors ( com . google . protobuf . Descriptors . FileDescriptor root ) { descriptor = root ; internal_static_exec_user_Property_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 0 ) ; internal_static_exec_user_Property_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_Property_descriptor , new java . lang . String [ ] { ""Key"" , ""Value"" , } ) ; internal_static_exec_user_UserProperties_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 1 ) ; internal_static_exec_user_UserProperties_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_UserProperties_descriptor , new java . lang . String [ ] { ""Properties"" , } ) ; internal_static_exec_user_RpcEndpointInfos_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 2 ) ; internal_static_exec_user_RpcEndpointInfos_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_RpcEndpointInfos_descriptor , new java . lang . String [ ] { ""Name"" , ""Version"" , ""MajorVersion"" , ""MinorVersion"" , ""PatchVersion"" , ""Application"" , ""BuildNumber"" , ""VersionQualifier"" , } ) ; internal_static_exec_user_UserToBitHandshake_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 3 ) ; internal_static_exec_user_UserToBitHandshake_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_UserToBitHandshake_descriptor , new java . lang . String [ ] { ""Channel"" , ""SupportListening"" , ""RpcVersion"" , ""Credentials"" , ""Properties"" , ""SupportComplexTypes"" , ""SupportTimeout"" , ""ClientInfos"" , ""SaslSupport"" , } ) ; internal_static_exec_user_RequestResults_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 4 ) ; internal_static_exec_user_RequestResults_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_RequestResults_descriptor , new java . lang . String [ ] { ""QueryId"" , ""MaximumResponses"" , } ) ; internal_static_exec_user_GetQueryPlanFragments_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 5 ) ; internal_static_exec_user_GetQueryPlanFragments_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetQueryPlanFragments_descriptor , new java . lang . String [ ] { ""Query"" , ""Type"" , ""SplitPlan"" , } ) ; internal_static_exec_user_QueryPlanFragments_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 6 ) ; internal_static_exec_user_QueryPlanFragments_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_QueryPlanFragments_descriptor , new java . lang . String [ ] { ""Status"" , ""QueryId"" , ""Fragments"" , ""Error"" , } ) ; internal_static_exec_user_BitToUserHandshake_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 7 ) ; internal_static_exec_user_BitToUserHandshake_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_BitToUserHandshake_descriptor , new java . lang . String [ ] { ""RpcVersion"" , ""Status"" , ""ErrorId"" , ""ErrorMessage"" , ""ServerInfos"" , ""AuthenticationMechanisms"" , ""SupportedMethods"" , ""Encrypted"" , ""MaxWrappedSize"" , } ) ; internal_static_exec_user_LikeFilter_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 8 ) ; internal_static_exec_user_LikeFilter_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_LikeFilter_descriptor , new java . lang . String [ ] { ""Pattern"" , ""Escape"" , } ) ; internal_static_exec_user_GetCatalogsReq_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 9 ) ; internal_static_exec_user_GetCatalogsReq_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetCatalogsReq_descriptor , new java . lang . String [ ] { ""CatalogNameFilter"" , } ) ; internal_static_exec_user_CatalogMetadata_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 10 ) ; internal_static_exec_user_CatalogMetadata_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_CatalogMetadata_descriptor , new java . lang . String [ ] { ""CatalogName"" , ""Description"" , ""Connect"" , } ) ; internal_static_exec_user_GetCatalogsResp_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 11 ) ; internal_static_exec_user_GetCatalogsResp_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetCatalogsResp_descriptor , new java . lang . String [ ] { ""Status"" , ""Catalogs"" , ""Error"" , } ) ; internal_static_exec_user_GetSchemasReq_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 12 ) ; internal_static_exec_user_GetSchemasReq_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetSchemasReq_descriptor , new java . lang . String [ ] { ""CatalogNameFilter"" , ""SchemaNameFilter"" , } ) ; internal_static_exec_user_SchemaMetadata_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 13 ) ; internal_static_exec_user_SchemaMetadata_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_SchemaMetadata_descriptor , new java . lang . String [ ] { ""CatalogName"" , ""SchemaName"" , ""Owner"" , ""Type"" , ""Mutable"" , } ) ; internal_static_exec_user_GetSchemasResp_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 14 ) ; internal_static_exec_user_GetSchemasResp_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetSchemasResp_descriptor , new java . lang . String [ ] { ""Status"" , ""Schemas"" , ""Error"" , } ) ; internal_static_exec_user_GetTablesReq_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 15 ) ; internal_static_exec_user_GetTablesReq_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetTablesReq_descriptor , new java . lang . String [ ] { ""CatalogNameFilter"" , ""SchemaNameFilter"" , ""TableNameFilter"" , ""TableTypeFilter"" , } ) ; internal_static_exec_user_TableMetadata_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 16 ) ; internal_static_exec_user_TableMetadata_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_TableMetadata_descriptor , new java . lang . String [ ] { ""CatalogName"" , ""SchemaName"" , ""TableName"" , ""Type"" , } ) ; internal_static_exec_user_GetTablesResp_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 17 ) ; internal_static_exec_user_GetTablesResp_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetTablesResp_descriptor , new java . lang . String [ ] { ""Status"" , ""Tables"" , ""Error"" , } ) ; internal_static_exec_user_GetColumnsReq_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 18 ) ; internal_static_exec_user_GetColumnsReq_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetColumnsReq_descriptor , new java . lang . String [ ] { ""CatalogNameFilter"" , ""SchemaNameFilter"" , ""TableNameFilter"" , ""ColumnNameFilter"" , } ) ; internal_static_exec_user_ColumnMetadata_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 19 ) ; internal_static_exec_user_ColumnMetadata_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_ColumnMetadata_descriptor , new java . lang . String [ ] { ""CatalogName"" , ""SchemaName"" , ""TableName"" , ""ColumnName"" , ""OrdinalPosition"" , ""DefaultValue"" , ""IsNullable"" , ""DataType"" , ""CharMaxLength"" , ""CharOctetLength"" , ""NumericPrecision"" , ""NumericPrecisionRadix"" , ""NumericScale"" , ""DateTimePrecision"" , ""IntervalType"" , ""IntervalPrecision"" , ""ColumnSize"" , } ) ; internal_static_exec_user_GetColumnsResp_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 20 ) ; internal_static_exec_user_GetColumnsResp_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetColumnsResp_descriptor , new java . lang . String [ ] { ""Status"" , ""Columns"" , ""Error"" , } ) ; internal_static_exec_user_CreatePreparedStatementReq_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 21 ) ; internal_static_exec_user_CreatePreparedStatementReq_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_CreatePreparedStatementReq_descriptor , new java . lang . String [ ] { ""SqlQuery"" , } ) ; internal_static_exec_user_ResultColumnMetadata_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 22 ) ; internal_static_exec_user_ResultColumnMetadata_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_ResultColumnMetadata_descriptor , new java . lang . String [ ] { ""CatalogName"" , ""SchemaName"" , ""TableName"" , ""ColumnName"" , ""Label"" , ""DataType"" , ""IsNullable"" , ""Precision"" , ""Scale"" , ""Signed"" , ""DisplaySize"" , ""IsAliased"" , ""Searchability"" , ""Updatability"" , ""AutoIncrement"" , ""CaseSensitivity"" , ""Sortable"" , ""ClassName"" , ""IsCurrency"" , } ) ; internal_static_exec_user_PreparedStatementHandle_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 23 ) ; internal_static_exec_user_PreparedStatementHandle_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_PreparedStatementHandle_descriptor , new java . lang . String [ ] { ""ServerInfo"" , } ) ; internal_static_exec_user_PreparedStatement_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 24 ) ; internal_static_exec_user_PreparedStatement_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_PreparedStatement_descriptor , new java . lang . String [ ] { ""Columns"" , ""ServerHandle"" , } ) ; internal_static_exec_user_CreatePreparedStatementResp_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 25 ) ; internal_static_exec_user_CreatePreparedStatementResp_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_CreatePreparedStatementResp_descriptor , new java . lang . String [ ] { ""Status"" , ""PreparedStatement"" , ""Error"" , } ) ; internal_static_exec_user_GetServerMetaReq_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 26 ) ; internal_static_exec_user_GetServerMetaReq_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetServerMetaReq_descriptor , new java . lang . String [ ] { } ) ; internal_static_exec_user_ConvertSupport_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 27 ) ; internal_static_exec_user_ConvertSupport_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_ConvertSupport_descriptor , new java . lang . String [ ] { ""From"" , ""To"" , } ) ; internal_static_exec_user_GetServerMetaResp_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 28 ) ; internal_static_exec_user_GetServerMetaResp_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_GetServerMetaResp_descriptor , new java . lang . String [ ] { ""Status"" , ""ServerMeta"" , ""Error"" , } ) ; internal_static_exec_user_ServerMeta_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 29 ) ; internal_static_exec_user_ServerMeta_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_ServerMeta_descriptor , new java . lang . String [ ] { ""AllTablesSelectable"" , ""BlobIncludedInMaxRowSize"" , ""CatalogAtStart"" , ""CatalogSeparator"" , ""CatalogTerm"" , ""CollateSupport"" , ""ColumnAliasingSupported"" , ""ConvertSupport"" , ""CorrelationNamesSupport"" , ""DateTimeFunctions"" , ""DateTimeLiteralsSupport"" , ""GroupBySupport"" , ""IdentifierCasing"" , ""IdentifierQuoteString"" , ""LikeEscapeClauseSupported"" , ""MaxBinaryLiteralLength"" , ""MaxCatalogNameLength"" , ""MaxCharLiteralLength"" , ""MaxColumnNameLength"" , ""MaxColumnsInGroupBy"" , ""MaxColumnsInOrderBy"" , ""MaxColumnsInSelect"" , ""MaxCursorNameLength"" , ""MaxLogicalLobSize"" , ""MaxRowSize"" , ""MaxSchemaNameLength"" , ""MaxStatementLength"" , ""MaxStatements"" , ""MaxTableNameLength"" , ""MaxTablesInSelect"" , ""MaxUserNameLength"" , ""NullCollation"" , ""NullPlusNonNullEqualsNull"" , ""NumericFunctions"" , ""OrderBySupport"" , ""OuterJoinSupport"" , ""QuotedIdentifierCasing"" , ""ReadOnly"" , ""SchemaTerm"" , ""SearchEscapeString"" , ""SelectForUpdateSupported"" , ""SpecialCharacters"" , ""SqlKeywords"" , ""StringFunctions"" , ""SubquerySupport"" , ""SystemFunctions"" , ""TableTerm"" , ""TransactionSupported"" , ""UnionSupport"" , } ) ; internal_static_exec_user_RunQuery_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 30 ) ; internal_static_exec_user_RunQuery_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_exec_user_RunQuery_descriptor , new java . lang . String [ ] { ""ResultsMode"" , ""Type"" , ""Plan"" , ""Fragments"" , ""PreparedStatementHandle"" , } ) ; return null ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" void genSourceData ( ) { Random r = newRandom ( ) ; Schema uSchema = writeSchema . getField ( ""f"" ) . schema ( ) ; sourceData = new GenericRecord [ count ] ; for ( int i = 0 ; i < sourceData . length ; i ++ ) { GenericRecord rec = new GenericData . Record ( writeSchema ) ; int val = r . nextInt ( 1000000 ) ; Integer v = ( val < 750000 ? val : null ) ; rec . put ( ""f"" , v ) ; sourceData [ i ] = rec ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 XSObjectList getAnnotations ( ) ;,No
" public Query createQuery ( String statement , String language ) throws InvalidQueryException , RepositoryException { return QueryObjectModelBuilderRegistry . getQueryObjectModelBuilder ( language ) . createQueryObjectModel ( statement , qf , vf ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public static boolean hasCapability ( FSDataOutputStream stream , String capability ) { if ( stream == null ) { throw new NullPointerException ( ""stream parameter must not be null."" ) ; } boolean result = true ; if ( StreamCapabilities . PRESENT ) { result = false ; if ( StreamCapabilities . CLASS . isAssignableFrom ( stream . getClass ( ) ) ) { try { result = ( ( Boolean ) StreamCapabilities . METHOD . invoke ( stream , capability ) ) . booleanValue ( ) ; } catch ( IllegalAccessException | IllegalArgumentException | InvocationTargetException exception ) { LOG . warn ( ""Your Hadoop installation's StreamCapabilities implementation doesn't match "" + ""our understanding of how it's supposed to work. Please file a JIRA and include "" + ""the following stack trace. In the mean time we're interpreting this behavior "" + ""difference as a lack of capability support, which will probably cause a failure."" , exception ) ; } } } return result ; }",No
" private Path processFS ( FileSinkOperator fsOp , Stack < Node > stack , NodeProcessorCtx opProcCtx , boolean chDir ) throws SemanticException { GenMRProcContext ctx = ( GenMRProcContext ) opProcCtx ; Task < ? extends Serializable > currTask = ctx . getCurrTask ( ) ; Path dest = null ; List < FileSinkOperator > seenFSOps = ctx . getSeenFileSinkOps ( ) ; if ( seenFSOps == null ) { seenFSOps = new ArrayList < FileSinkOperator > ( ) ; } if ( ! seenFSOps . contains ( fsOp ) ) { seenFSOps . add ( fsOp ) ; } ctx . setSeenFileSinkOps ( seenFSOps ) ; dest = GenMapRedUtils . createMoveTask ( ctx . getCurrTask ( ) , chDir , fsOp , ctx . getParseCtx ( ) , ctx . getMvTask ( ) , ctx . getConf ( ) , ctx . getDependencyTaskForMultiInsert ( ) ) ; Operator < ? extends OperatorDesc > currTopOp = ctx . getCurrTopOp ( ) ; String currAliasId = ctx . getCurrAliasId ( ) ; HashMap < Operator < ? extends OperatorDesc > , Task < ? extends Serializable > > opTaskMap = ctx . getOpTaskMap ( ) ; if ( currTopOp != null ) { Task < ? extends Serializable > mapTask = opTaskMap . get ( null ) ; if ( mapTask == null ) { if ( ! ctx . isSeenOp ( currTask , currTopOp ) ) { GenMapRedUtils . setTaskPlan ( currAliasId , currTopOp , currTask , false , ctx ) ; } opTaskMap . put ( null , currTask ) ; } else { if ( ! ctx . isSeenOp ( currTask , currTopOp ) ) { GenMapRedUtils . setTaskPlan ( currAliasId , currTopOp , mapTask , false , ctx ) ; } else { UnionOperator currUnionOp = ctx . getCurrUnionOp ( ) ; if ( currUnionOp != null ) { opTaskMap . put ( null , currTask ) ; ctx . setCurrTopOp ( null ) ; GenMapRedUtils . initUnionPlan ( ctx , currUnionOp , currTask , false ) ; return dest ; } } } return dest ; } UnionOperator currUnionOp = ctx . getCurrUnionOp ( ) ; if ( currUnionOp != null ) { opTaskMap . put ( null , currTask ) ; GenMapRedUtils . initUnionPlan ( ctx , currUnionOp , currTask , false ) ; return dest ; } return dest ; }",Smelly
 public Iterator < T > iterator ( ) { return new ByteStructIterator < T > ( dataInputFactory . create ( ) ) { @ Override protected T createWritable ( ) { return ByteStructIterable . this . createWritable ( ) ; } } ; },No
 protected String getSummary ( ) { return null ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ColumnStatisticsObj struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . colName = iprot . readString ( ) ; struct . setColNameIsSet ( true ) ; struct . colType = iprot . readString ( ) ; struct . setColTypeIsSet ( true ) ; struct . statsData = new ColumnStatisticsData ( ) ; struct . statsData . read ( iprot ) ; struct . setStatsDataIsSet ( true ) ; }",Smelly
" public Map < IStringExpression , IRutaExpression > getParameterMap ( ) { return parameterMap ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected ClientCsdlEnumType doDeserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { final ClientCsdlEnumType enumType = new ClientCsdlEnumType ( ) ; for ( ; jp . getCurrentToken ( ) != JsonToken . END_OBJECT ; jp . nextToken ( ) ) { final JsonToken token = jp . getCurrentToken ( ) ; if ( token == JsonToken . FIELD_NAME ) { if ( ""Name"" . equals ( jp . getCurrentName ( ) ) ) { enumType . setName ( jp . nextTextValue ( ) ) ; } else if ( ""UnderlyingType"" . equals ( jp . getCurrentName ( ) ) ) { enumType . setUnderlyingType ( jp . nextTextValue ( ) ) ; } else if ( ""IsFlags"" . equals ( jp . getCurrentName ( ) ) ) { enumType . setFlags ( BooleanUtils . toBoolean ( jp . nextTextValue ( ) ) ) ; } else if ( ""Member"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; enumType . getMembers ( ) . add ( jp . readValueAs ( ClientCsdlEnumMember . class ) ) ; } else if ( ""Annotation"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; enumType . getAnnotations ( ) . add ( jp . readValueAs ( ClientCsdlAnnotation . class ) ) ; } } } return enumType ; }",Smelly
" public synchronized void run ( ) { getLog ( ) . trace ( Thread . currentThread ( ) . getName ( ) + "": starting update thread"" ) ; try { for ( int i = 0 ; i < 10 ; i ++ ) { if ( _lock != null ) _lock . lock ( ) ; try { _pm . setOptimistic ( false ) ; startTx ( _pm ) ; RuntimeTest1 a = ( RuntimeTest1 ) _pm . find ( RuntimeTest1 . class , _id ) ; getLog ( ) . trace ( Thread . currentThread ( ) . getName ( ) + "": obtained and locked: "" + a ) ; yield ( ) ; super . wait ( 50 ) ; getLog ( ) . trace ( Thread . currentThread ( ) . getName ( ) + "": updating age from "" + a . getIntField1 ( ) ) ; a . setIntField1 ( a . getIntField1 ( ) + 1 ) ; getLog ( ) . trace ( Thread . currentThread ( ) . getName ( ) + "": committed update"" ) ; try { _pm . flush ( ) ; endTx ( _pm ) ; } catch ( Exception ex ) { throw new org . apache . openjpa . util . UserException ( ""Optimistic lock probably failed after "" + i + "" iterations ("" + Thread . currentThread ( ) . getName ( ) + "")"" , ex ) ; } yield ( ) ; } finally { if ( _lock != null ) _lock . unlock ( ) ; } } } catch ( Exception e ) { exception = e ; } }",Smelly
 protected String getExceptionClassName ( ) { return WicketRuntimeException . class . getName ( ) ; },No
" public void close ( ) throws IOException { Preconditions . checkState ( runtimeTask . isTaskDone ( ) , ""Runtime task must be complete before calling cleanup"" ) ; this . objectRegistry = null ; this . initialMemoryDistributor = null ; }",No
" public String encode ( final String str , final String charset ) throws UnsupportedEncodingException { if ( str == null ) { return null ; } return StringUtils . newStringUsAscii ( encode ( str . getBytes ( charset ) ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , IteratorSetting struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . priority = iprot . readI32 ( ) ; struct . setPriorityIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . name = iprot . readString ( ) ; struct . setNameIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . iteratorClass = iprot . readString ( ) ; struct . setIteratorClassIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TMap _map22 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . properties = new HashMap < String , String > ( 2 * _map22 . size ) ; for ( int _i23 = 0 ; _i23 < _map22 . size ; ++ _i23 ) { String _key24 ; String _val25 ; _key24 = iprot . readString ( ) ; _val25 = iprot . readString ( ) ; struct . properties . put ( _key24 , _val25 ) ; } } struct . setPropertiesIsSet ( true ) ; } }",Smelly
" protected Iterator < Quad > findInAnyNamedGraphs ( final Node s , final Node p , final Node o ) { return findInSpecificNamedGraph ( ANY , s , p , o ) ; }",No
" public static void addNamespacePrefix ( Element element , String namespaceUri , String prefix ) { element . setAttributeNS ( XMLConstants . XMLNS_ATTRIBUTE_NS_URI , ""xmlns:"" + prefix , namespaceUri ) ; }",No
" public Iterable < String > getSubPartitions ( String schema , String table , List < String > partitionColumns , List < String > partitionValues ) throws PartitionNotFoundException { AbstractSchema subSchema = rootSchema . getSubSchema ( schema ) . unwrap ( AbstractSchema . class ) ; return subSchema . getSubPartitions ( table , partitionColumns , partitionValues ) ; }",No
 public PageFile getPageFile ( ) { if ( pageFile == null ) { pageFile = createPageFile ( ) ; } return pageFile ; },No
" private RequestSecurityTokenResponseType createResponse ( TokenValidatorResponse tokenResponse , TokenProviderResponse tokenProviderResponse , TokenRequirements tokenRequirements ) throws WSSecurityException { RequestSecurityTokenResponseType response = QNameConstants . WS_TRUST_FACTORY . createRequestSecurityTokenResponseType ( ) ; String context = tokenRequirements . getContext ( ) ; if ( context != null ) { response . setContext ( context ) ; } boolean valid = tokenResponse . getToken ( ) . getState ( ) == STATE . VALID ; String tokenType = tokenRequirements . getTokenType ( ) ; if ( valid || STSConstants . STATUS . equals ( tokenType ) ) { JAXBElement < String > jaxbTokenType = QNameConstants . WS_TRUST_FACTORY . createTokenType ( tokenType ) ; response . getAny ( ) . add ( jaxbTokenType ) ; } StatusType statusType = QNameConstants . WS_TRUST_FACTORY . createStatusType ( ) ; if ( valid ) { statusType . setCode ( STSConstants . VALID_CODE ) ; statusType . setReason ( STSConstants . VALID_REASON ) ; } else { statusType . setCode ( STSConstants . INVALID_CODE ) ; statusType . setReason ( STSConstants . INVALID_REASON ) ; } JAXBElement < StatusType > status = QNameConstants . WS_TRUST_FACTORY . createStatus ( statusType ) ; response . getAny ( ) . add ( status ) ; if ( valid && ! STSConstants . STATUS . equals ( tokenType ) && tokenProviderResponse != null && tokenProviderResponse . getToken ( ) != null ) { RequestedSecurityTokenType requestedTokenType = QNameConstants . WS_TRUST_FACTORY . createRequestedSecurityTokenType ( ) ; JAXBElement < RequestedSecurityTokenType > requestedToken = QNameConstants . WS_TRUST_FACTORY . createRequestedSecurityToken ( requestedTokenType ) ; requestedTokenType . setAny ( tokenProviderResponse . getToken ( ) ) ; response . getAny ( ) . add ( requestedToken ) ; LifetimeType lifetime = createLifetime ( tokenProviderResponse . getLifetime ( ) ) ; JAXBElement < LifetimeType > lifetimeType = QNameConstants . WS_TRUST_FACTORY . createLifetime ( lifetime ) ; response . getAny ( ) . add ( lifetimeType ) ; if ( returnReferences ) { TokenReference attachedReference = tokenProviderResponse . getAttachedReference ( ) ; RequestedReferenceType requestedAttachedReferenceType = null ; if ( attachedReference != null ) { requestedAttachedReferenceType = createRequestedReference ( attachedReference , true ) ; } else { requestedAttachedReferenceType = createRequestedReference ( tokenProviderResponse . getTokenId ( ) , tokenRequirements . getTokenType ( ) , true ) ; } JAXBElement < RequestedReferenceType > requestedAttachedReference = QNameConstants . WS_TRUST_FACTORY . createRequestedAttachedReference ( requestedAttachedReferenceType ) ; response . getAny ( ) . add ( requestedAttachedReference ) ; TokenReference unAttachedReference = tokenProviderResponse . getUnAttachedReference ( ) ; RequestedReferenceType requestedUnattachedReferenceType = null ; if ( unAttachedReference != null ) { requestedUnattachedReferenceType = createRequestedReference ( unAttachedReference , false ) ; } else { requestedUnattachedReferenceType = createRequestedReference ( tokenProviderResponse . getTokenId ( ) , tokenRequirements . getTokenType ( ) , false ) ; } JAXBElement < RequestedReferenceType > requestedUnattachedReference = QNameConstants . WS_TRUST_FACTORY . createRequestedUnattachedReference ( requestedUnattachedReferenceType ) ; response . getAny ( ) . add ( requestedUnattachedReference ) ; } } return response ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public static void main ( String [ ] args ) { Injector injector = Guice . createInjector ( new QuickstartShiroModule ( ) ) ; SecurityManager securityManager = injector . getInstance ( SecurityManager . class ) ; SecurityUtils . setSecurityManager ( securityManager ) ; Subject currentUser = SecurityUtils . getSubject ( ) ; Session session = currentUser . getSession ( ) ; session . setAttribute ( ""someKey"" , ""aValue"" ) ; String value = ( String ) session . getAttribute ( ""someKey"" ) ; if ( value . equals ( ""aValue"" ) ) { log . info ( ""Retrieved the correct value! ["" + value + ""]"" ) ; } if ( ! currentUser . isAuthenticated ( ) ) { UsernamePasswordToken token = new UsernamePasswordToken ( ""lonestarr"" , ""vespa"" ) ; token . setRememberMe ( true ) ; try { currentUser . login ( token ) ; } catch ( UnknownAccountException uae ) { log . info ( ""There is no user with username of "" + token . getPrincipal ( ) ) ; } catch ( IncorrectCredentialsException ice ) { log . info ( ""Password for account "" + token . getPrincipal ( ) + "" was incorrect!"" ) ; } catch ( LockedAccountException lae ) { log . info ( ""The account for username "" + token . getPrincipal ( ) + "" is locked.  "" + ""Please contact your administrator to unlock it."" ) ; } catch ( AuthenticationException ae ) { } } log . info ( ""User ["" + currentUser . getPrincipal ( ) + ""] logged in successfully."" ) ; if ( currentUser . hasRole ( ""schwartz"" ) ) { log . info ( ""May the Schwartz be with you!"" ) ; } else { log . info ( ""Hello, mere mortal."" ) ; } if ( currentUser . isPermitted ( ""lightsaber:weild"" ) ) { log . info ( ""You may use a lightsaber ring.  Use it wisely."" ) ; } else { log . info ( ""Sorry, lightsaber rings are for schwartz masters only."" ) ; } if ( currentUser . isPermitted ( ""winnebago:drive:eagle5"" ) ) { log . info ( ""You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "" + ""Here are the keys - have fun!"" ) ; } else { log . info ( ""Sorry, you aren't allowed to drive the 'eagle5' winnebago!"" ) ; } currentUser . logout ( ) ; System . exit ( 0 ) ; }",Smelly
 long sizeInBytes ( ) ;,No
 protected void populateObject ( Object object ) throws Exception { super . populateObject ( object ) ; BaseCommand info = ( BaseCommand ) object ; info . setCommandId ( 1 ) ; info . setResponseRequired ( true ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public RegressionResults regress ( int [ ] variablesToInclude ) throws ModelSpecificationException { if ( variablesToInclude . length > this . nvars ) { throw new ModelSpecificationException ( LocalizedFormats . TOO_MANY_REGRESSORS , variablesToInclude . length , this . nvars ) ; } if ( this . nobs <= this . nvars ) { throw new ModelSpecificationException ( LocalizedFormats . NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS , this . nobs , this . nvars ) ; } Arrays . sort ( variablesToInclude ) ; int iExclude = 0 ; for ( int i = 0 ; i < variablesToInclude . length ; i ++ ) { if ( i >= this . nvars ) { throw new ModelSpecificationException ( LocalizedFormats . INDEX_LARGER_THAN_MAX , i , this . nvars ) ; } if ( i > 0 && variablesToInclude [ i ] == variablesToInclude [ i - 1 ] ) { variablesToInclude [ i ] = - 1 ; ++ iExclude ; } } int [ ] series ; if ( iExclude > 0 ) { int j = 0 ; series = new int [ variablesToInclude . length - iExclude ] ; for ( int i = 0 ; i < variablesToInclude . length ; i ++ ) { if ( variablesToInclude [ i ] > - 1 ) { series [ j ] = variablesToInclude [ i ] ; ++ j ; } } } else { series = variablesToInclude ; } reorderRegressors ( series , 0 ) ; tolset ( ) ; singcheck ( ) ; double [ ] beta = this . regcf ( series . length ) ; ss ( ) ; double [ ] cov = this . cov ( series . length ) ; int rnk = 0 ; for ( int i = 0 ; i < this . lindep . length ; i ++ ) { if ( ! this . lindep [ i ] ) { ++ rnk ; } } boolean needsReorder = false ; for ( int i = 0 ; i < this . nvars ; i ++ ) { if ( this . vorder [ i ] != series [ i ] ) { needsReorder = true ; break ; } } if ( ! needsReorder ) { return new RegressionResults ( beta , new double [ ] [ ] { cov } , true , this . nobs , rnk , this . sumy , this . sumsqy , this . sserr , this . hasIntercept , false ) ; } else { double [ ] betaNew = new double [ beta . length ] ; int [ ] newIndices = new int [ beta . length ] ; for ( int i = 0 ; i < series . length ; i ++ ) { for ( int j = 0 ; j < this . vorder . length ; j ++ ) { if ( this . vorder [ j ] == series [ i ] ) { betaNew [ i ] = beta [ j ] ; newIndices [ i ] = j ; } } } double [ ] covNew = new double [ cov . length ] ; int idx1 = 0 ; int idx2 ; int _i ; int _j ; for ( int i = 0 ; i < beta . length ; i ++ ) { _i = newIndices [ i ] ; for ( int j = 0 ; j <= i ; j ++ , idx1 ++ ) { _j = newIndices [ j ] ; if ( _i > _j ) { idx2 = _i * ( _i + 1 ) / 2 + _j ; } else { idx2 = _j * ( _j + 1 ) / 2 + _i ; } covNew [ idx1 ] = cov [ idx2 ] ; } } return new RegressionResults ( betaNew , new double [ ] [ ] { covNew } , true , this . nobs , rnk , this . sumy , this . sumsqy , this . sserr , this . hasIntercept , false ) ; } }",No
 String get_SymbolicName ( ) ;,No
 public void close ( ClientProtocol clientProtocol ) throws IOException { },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public static void calculateEvaluatData ( TestCasData data , CAS resultCas ) { data . setEvaluationStatus ( true ) ; TypeSystem ts = resultCas . getTypeSystem ( ) ; Type falsePositiveType = ts . getType ( ICasEvaluator . FALSE_POSITIVE ) ; Type falseNegativeType = ts . getType ( ICasEvaluator . FALSE_NEGATIVE ) ; Type truePositiveType = ts . getType ( ICasEvaluator . TRUE_POSITIVE ) ; Feature originalFeature = truePositiveType . getFeatureByBaseName ( ""original"" ) ; int falsePositiveCount = resultCas . getAnnotationIndex ( falsePositiveType ) . size ( ) ; int falseNegativeCount = resultCas . getAnnotationIndex ( falseNegativeType ) . size ( ) ; int truePositiveCount = resultCas . getAnnotationIndex ( truePositiveType ) . size ( ) ; data . setTruePositiveCount ( truePositiveCount ) ; data . setFalsePositiveCount ( falsePositiveCount ) ; data . setFalseNegativeCount ( falseNegativeCount ) ; HashMap < String , TypeEvalData > map = new HashMap < String , TypeEvalData > ( ) ; map . put ( "" Total"" , new TypeEvalData ( ""Total"" , truePositiveCount , falsePositiveCount , falseNegativeCount ) ) ; AnnotationIndex < AnnotationFS > index = resultCas . getAnnotationIndex ( truePositiveType ) ; FSIterator iter = index . iterator ( ) ; if ( originalFeature != null ) { while ( iter . isValid ( ) ) { AnnotationFS a = ( AnnotationFS ) iter . next ( ) ; FeatureStructure fs = a . getFeatureValue ( originalFeature ) ; String typeName = fs . getType ( ) . getName ( ) ; if ( map . containsKey ( typeName ) ) { TypeEvalData element = map . get ( typeName ) ; int oldCount = element . getTruePositives ( ) ; element . setTruePositives ( oldCount + 1 ) ; } else { TypeEvalData newData = new TypeEvalData ( typeName , 1 , 0 , 0 ) ; map . put ( typeName , newData ) ; } } index = resultCas . getAnnotationIndex ( falsePositiveType ) ; iter = index . iterator ( ) ; while ( iter . isValid ( ) ) { AnnotationFS a = ( AnnotationFS ) iter . next ( ) ; FeatureStructure fs = a . getFeatureValue ( originalFeature ) ; String typeName = fs . getType ( ) . getName ( ) ; if ( map . containsKey ( typeName ) ) { TypeEvalData element = map . get ( typeName ) ; int oldCount = element . getFalsePositives ( ) ; element . setFalsePositives ( oldCount + 1 ) ; } else { TypeEvalData newData = new TypeEvalData ( typeName , 0 , 1 , 0 ) ; map . put ( typeName , newData ) ; } } index = resultCas . getAnnotationIndex ( falseNegativeType ) ; iter = index . iterator ( ) ; while ( iter . isValid ( ) ) { AnnotationFS a = ( AnnotationFS ) iter . next ( ) ; FeatureStructure fs = a . getFeatureValue ( originalFeature ) ; String typeName = fs . getType ( ) . getName ( ) ; if ( map . containsKey ( typeName ) ) { TypeEvalData element = map . get ( typeName ) ; int oldCount = element . getFalseNegatives ( ) ; element . setFalseNegatives ( oldCount + 1 ) ; } else { TypeEvalData newData = new TypeEvalData ( typeName , 0 , 0 , 1 ) ; map . put ( typeName , newData ) ; } } data . setTypeEvalData ( map ) ; Collection < TypeEvalData > col = map . values ( ) ; for ( TypeEvalData typeEvalData : col ) { typeEvalData . calcFOne ( ) ; } return ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , onReceivedZeppelinResource_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; }",Smelly
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . out ( ) , __ . in ( ) , __ . both ( ) , __ . out ( ""knows"" ) , __ . out ( ""created"" ) , __ . out ( ""knows"" , ""created"" ) ) ; }",Smelly
 Stream apply ( Stream input ) ;,No
 boolean substitute ( GlyphSubstitutionState ss ) ;,No
" private void doUnescape ( Writer writer , String str , int firstAmp ) throws IOException { writer . write ( str , 0 , firstAmp ) ; int len = str . length ( ) ; for ( int i = firstAmp ; i < len ; i ++ ) { char c = str . charAt ( i ) ; if ( c == '&' ) { int nextIdx = i + 1 ; int semiColonIdx = str . indexOf ( ';' , nextIdx ) ; if ( semiColonIdx == - 1 ) { writer . write ( c ) ; continue ; } int amphersandIdx = str . indexOf ( '&' , i + 1 ) ; if ( amphersandIdx != - 1 && amphersandIdx < semiColonIdx ) { writer . write ( c ) ; continue ; } String entityContent = str . substring ( nextIdx , semiColonIdx ) ; int entityValue = - 1 ; int entityContentLen = entityContent . length ( ) ; if ( entityContentLen > 0 ) { if ( entityContent . charAt ( 0 ) == '#' ) { if ( entityContentLen > 1 ) { char isHexChar = entityContent . charAt ( 1 ) ; try { switch ( isHexChar ) { case 'X' : case 'x' : { entityValue = Integer . parseInt ( entityContent . substring ( 2 ) , 16 ) ; break ; } default : { entityValue = Integer . parseInt ( entityContent . substring ( 1 ) , 10 ) ; } } if ( entityValue > 0xFFFF ) { entityValue = - 1 ; } } catch ( NumberFormatException e ) { entityValue = - 1 ; } } } else { entityValue = entityValue ( entityContent ) ; } } if ( entityValue == - 1 ) { writer . write ( '&' ) ; writer . write ( entityContent ) ; writer . write ( ';' ) ; } else { writer . write ( entityValue ) ; } i = semiColonIdx ; } else { writer . write ( c ) ; } } }",No
" public static String getBasedir ( ) { String basedir = System . getProperty ( ""basedir"" ) ; if ( basedir != null ) { basedir = basedir + ""/"" ; } else { basedir = """" ; } return basedir ; }",No
 public void testParallelNoChecksums ( ) throws IOException { verifyChecksums = false ; runTestWorkload ( new MixedWorkloadHelper ( ) ) ; },No
 public Parameters getParameters ( ) { return parameters ; },No
 public void tearDown ( ) { processor = null ; env = null ; super . tearDown ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , SSHCredential struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; struct . username = iprot . readString ( ) ; struct . setUsernameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . passphrase = iprot . readString ( ) ; struct . setPassphraseIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . publicKey = iprot . readString ( ) ; struct . setPublicKeyIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . privateKey = iprot . readString ( ) ; struct . setPrivateKeyIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . persistedTime = iprot . readI64 ( ) ; struct . setPersistedTimeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . token = iprot . readString ( ) ; struct . setTokenIsSet ( true ) ; } }",No
 GlobalStats getGlobalStats ( ) ;,No
 URL resolveLocation ( String location ) throws MalformedURLException ;,No
 public void setActive ( final boolean active ) { this . active = getBooleanAsInteger ( active ) ; },No
 void clear ( ) ;,No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" private static String shorten ( String name ) { return TestUtil . getJavaMajorVersion ( ) > 8 ? name . substring ( 0 , 3 ) : name ; }",No
" private URLCrawlDatum createURLCrawlDatum ( final String url , final int fetchInterval , final float score ) { return new CrawlDBTestUtil . URLCrawlDatum ( new Text ( url ) , new CrawlDatum ( CrawlDatum . STATUS_DB_UNFETCHED , fetchInterval , score ) ) ; }",Smelly
" public void testMultiSource ( ) { JavaSparkContext jsc = SparkContextFactory . getSparkContext ( options ) ; Instant instant = new Instant ( 0 ) ; GlobalWatermarkHolder . add ( 1 , new SparkWatermarks ( instant . plus ( Duration . millis ( 5 ) ) , instant . plus ( Duration . millis ( 10 ) ) , instant ) ) ; GlobalWatermarkHolder . add ( 2 , new SparkWatermarks ( instant . plus ( Duration . millis ( 3 ) ) , instant . plus ( Duration . millis ( 6 ) ) , instant ) ) ; GlobalWatermarkHolder . advance ( ) ; SparkWatermarks watermarksForSource1 = GlobalWatermarkHolder . get ( 0L ) . get ( 1 ) ; assertThat ( watermarksForSource1 . getLowWatermark ( ) , equalTo ( instant . plus ( Duration . millis ( 5 ) ) ) ) ; assertThat ( watermarksForSource1 . getHighWatermark ( ) , equalTo ( instant . plus ( Duration . millis ( 10 ) ) ) ) ; SparkWatermarks watermarksForSource2 = GlobalWatermarkHolder . get ( 0L ) . get ( 2 ) ; assertThat ( watermarksForSource2 . getLowWatermark ( ) , equalTo ( instant . plus ( Duration . millis ( 3 ) ) ) ) ; assertThat ( watermarksForSource2 . getHighWatermark ( ) , equalTo ( instant . plus ( Duration . millis ( 6 ) ) ) ) ; }",Smelly
" public ArtifactReference toArtifactReference ( String path ) throws LayoutException { ArtifactReference artifact = new ArtifactReference ( ) ; String normalizedPath = StringUtils . replace ( path , ""\\"" , ""/"" ) ; String pathParts [ ] = StringUtils . split ( normalizedPath , '/' ) ; if ( pathParts . length != 3 ) { throw new LayoutException ( INVALID_ARTIFACT_PATH + ""legacy paths should only have 3 parts [groupId]/[type]s/[artifactId]-[version].[type], found "" + pathParts . length + "" instead."" ) ; } artifact . setGroupId ( pathParts [ 0 ] ) ; String expectedType = pathParts [ 1 ] ; if ( ! expectedType . endsWith ( ""s"" ) ) { throw new LayoutException ( INVALID_ARTIFACT_PATH + ""legacy paths should have an expected type ending in [s] in the second part of the path."" ) ; } String filename = pathParts [ 2 ] ; FilenameParser parser = new FilenameParser ( filename ) ; artifact . setArtifactId ( parser . nextNonVersion ( ) ) ; if ( StringUtils . isEmpty ( artifact . getArtifactId ( ) ) ) { int idx = filename . indexOf ( '-' ) ; if ( idx > 0 ) { parser . reset ( ) ; String artifactId = parser . next ( ) ; String moreArtifactId = parser . nextNonVersion ( ) ; if ( StringUtils . isNotBlank ( moreArtifactId ) ) { artifact . setArtifactId ( artifactId + ""-"" + moreArtifactId ) ; } else { artifact . setArtifactId ( artifactId ) ; } } if ( StringUtils . isEmpty ( artifact . getArtifactId ( ) ) ) { throw new LayoutException ( INVALID_ARTIFACT_PATH + ""no artifact id present."" ) ; } } artifact . setVersion ( parser . remaining ( ) ) ; if ( StringUtils . isEmpty ( artifact . getVersion ( ) ) ) { String artifactId = artifact . getArtifactId ( ) ; int idx = artifactId . lastIndexOf ( '-' ) ; if ( idx > 0 ) { artifact . setVersion ( artifactId . substring ( idx + 1 ) ) ; artifact . setArtifactId ( artifactId . substring ( 0 , idx ) ) ; } else { throw new LayoutException ( INVALID_ARTIFACT_PATH + ""no version found."" ) ; } } String classifier = ArtifactClassifierMapping . getClassifier ( expectedType ) ; if ( classifier != null ) { String version = artifact . getVersion ( ) ; if ( ! version . endsWith ( ""-"" + classifier ) ) { throw new LayoutException ( INVALID_ARTIFACT_PATH + expectedType + "" artifacts must use the classifier "" + classifier ) ; } version = version . substring ( 0 , version . length ( ) - classifier . length ( ) - 1 ) ; artifact . setVersion ( version ) ; artifact . setClassifier ( classifier ) ; } String extension = parser . getExtension ( ) ; String defaultExtension = expectedType . substring ( 0 , expectedType . length ( ) - 1 ) ; artifact . setType ( ArtifactExtensionMapping . mapExtensionAndClassifierToType ( classifier , extension , defaultExtension ) ) ; if ( StringUtils . isEmpty ( artifact . getType ( ) ) ) { throw new LayoutException ( INVALID_ARTIFACT_PATH + ""no extension found."" ) ; } if ( StringUtils . equals ( ""jar"" , extension ) && StringUtils . equals ( ""plugins"" , expectedType ) ) { artifact . setType ( ArtifactExtensionMapping . MAVEN_ONE_PLUGIN ) ; } else { String expectedExtension = ArtifactExtensionMapping . getExtension ( artifact . getType ( ) ) ; if ( ! expectedExtension . equals ( extension ) ) { throw new LayoutException ( INVALID_ARTIFACT_PATH + ""mismatch on extension ["" + extension + ""] and layout specified type ["" + artifact . getType ( ) + ""] (which maps to extension: ["" + expectedExtension + ""]) on path ["" + path + ""]"" ) ; } } return artifact ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public static void main ( String [ ] args ) { SingleIdWrapper wrap = new SingleIdWrapper ( ) ; },No
" void onCheckpoint ( Map < SystemStreamPartition , String > offsets ) { afterCheckpoint ( offsets ) ; }",No
 public JavaClass parseClass ( File classFile ) throws IOException { JavaClass ret = null ; try { FileInputStream fsin = new FileInputStream ( classFile ) ; in = new DataInputStream ( fsin ) ; readMagic ( ) ; readVersion ( ) ; readConstant_Pool_Count ( ) ; readConstantPool ( ) ; readAccess_flags ( ) ; readThis_class ( ) ; readSuper_class ( ) ; readInterfaces ( ) ; readFields ( ) ; readMethods ( ) ; readAttributes ( ) ; ret = new JavaClass ( ) ; ret . magic = magic ; ret . minor_version = minor_Version ; ret . major_version = major_Version ; ret . constant_pool_count = constant_Pool_Count ; ret . constantPool = constantPool ; ret . access_flags = access_flags ; ret . this_class = this_class ; ret . super_class = super_class ; ret . interfaces_count = interfaces_count ; ret . interfaces = interfaces ; ret . fields_count = fields_count ; ret . fields = fields ; ret . methods_count = methods_count ; ret . methods = methods ; ret . attributes_count = attributes_count ; ret . attributes = attributes ; } finally { try { in . close ( ) ; } catch ( Exception e ) { } } return ret ; },Smelly
" public void runAction ( Map < String , Object > context ) { Object valueObject = valueNameAcsr . get ( context ) ; if ( valueObject == null ) { Debug . logVerbose ( ""Value not found with name: "" + valueNameAcsr + "", not getting related..."" , module ) ; return ; } if ( ! ( valueObject instanceof GenericValue ) ) { String errMsg = ""Env variable for value-name "" + valueNameAcsr . toString ( ) + "" is not a GenericValue object; for the relation-name: "" + relationName + ""]"" ; Debug . logError ( errMsg , module ) ; throw new IllegalArgumentException ( errMsg ) ; } GenericValue value = ( GenericValue ) valueObject ; List < String > orderByNames = null ; if ( ! orderByListAcsr . isEmpty ( ) ) { orderByNames = orderByListAcsr . get ( context ) ; } Map < String , Object > constraintMap = null ; if ( ! mapAcsr . isEmpty ( ) ) { constraintMap = mapAcsr . get ( context ) ; } try { listNameAcsr . put ( context , value . getRelated ( relationName , constraintMap , orderByNames , useCache ) ) ; } catch ( GenericEntityException e ) { String errMsg = ""Problem getting related from entity with name "" + value . getEntityName ( ) + "" for the relation-name: "" + relationName + "": "" + e . getMessage ( ) ; Debug . logError ( e , errMsg , module ) ; throw new IllegalArgumentException ( errMsg ) ; } }",Smelly
" public void testDisableResource ( ) { String className = TestHelper . getTestClassName ( ) ; String methodName = TestHelper . getTestMethodName ( ) ; String clusterName = className + ""_"" + methodName ; System . out . println ( ""START "" + clusterName + "" at "" + new Date ( System . currentTimeMillis ( ) ) ) ; HelixAdmin admin = new ZKHelixAdmin ( _zkclient ) ; admin . addCluster ( clusterName , true ) ; Assert . assertTrue ( ZKUtil . isClusterSetup ( clusterName , _zkclient ) , ""Cluster should be setup"" ) ; String resourceName = ""TestDB"" ; admin . addStateModelDef ( clusterName , ""MasterSlave"" , new StateModelDefinition ( StateModelConfigGenerator . generateConfigForMasterSlave ( ) ) ) ; admin . addResource ( clusterName , resourceName , 4 , ""MasterSlave"" ) ; admin . enableResource ( clusterName , resourceName , false ) ; BaseDataAccessor < ZNRecord > baseAccessor = new ZkBaseDataAccessor < ZNRecord > ( _zkclient ) ; HelixDataAccessor accessor = new ZKHelixDataAccessor ( clusterName , baseAccessor ) ; PropertyKey . Builder keyBuilder = accessor . keyBuilder ( ) ; IdealState idealState = accessor . getProperty ( keyBuilder . idealStates ( resourceName ) ) ; Assert . assertFalse ( idealState . isEnabled ( ) ) ; admin . enableResource ( clusterName , resourceName , true ) ; idealState = accessor . getProperty ( keyBuilder . idealStates ( resourceName ) ) ; Assert . assertTrue ( idealState . isEnabled ( ) ) ; System . out . println ( ""END "" + clusterName + "" at "" + new Date ( System . currentTimeMillis ( ) ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , SCPDataMovement struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . dataMovementInterfaceId = iprot . readString ( ) ; struct . setDataMovementInterfaceIdIsSet ( true ) ; struct . securityProtocol = org . apache . airavata . model . data . movement . SecurityProtocol . findByValue ( iprot . readI32 ( ) ) ; struct . setSecurityProtocolIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . alternativeSCPHostName = iprot . readString ( ) ; struct . setAlternativeSCPHostNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sshPort = iprot . readI32 ( ) ; struct . setSshPortIsSet ( true ) ; } }",Smelly
 public Document makeDocument ( ) throws Exception { String [ ] tuple = parser . next ( ) ; return getDocState ( ) . setFields ( tuple ) ; },Smelly
" private Message createMessage ( HelixManager manager , ResourceId resourceId , PartitionId partitionId , ParticipantId participantId , State currentState , State nextState , SessionId participantSessionId , StateModelDefId stateModelDefId , StateModelFactoryId stateModelFactoryId , int bucketSize ) { MessageId uuid = MessageId . from ( UUID . randomUUID ( ) . toString ( ) ) ; Message message = new Message ( MessageType . STATE_TRANSITION , uuid ) ; message . setSrcName ( manager . getInstanceName ( ) ) ; message . setTgtName ( participantId . stringify ( ) ) ; message . setMsgState ( MessageState . NEW ) ; message . setPartitionId ( partitionId ) ; message . setResourceId ( resourceId ) ; message . setFromState ( currentState ) ; message . setToState ( nextState ) ; message . setTgtSessionId ( participantSessionId ) ; message . setSrcSessionId ( SessionId . from ( manager . getSessionId ( ) ) ) ; message . setStateModelDef ( stateModelDefId ) ; message . setStateModelFactoryId ( stateModelFactoryId ) ; message . setBucketSize ( bucketSize ) ; return message ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void typedProperties ( ) throws IOException { TypedProperties tp = new TypedProperties ( ) ; tp . put ( ""commented-key"" , ""# commented-key comment"" , ""value"" ) ; tp . put ( ""commented-key2"" , Arrays . asList ( ""# ca"" , ""# cb"" ) , ""value"" ) ; tp . put ( ""normal-key"" , ""value"" ) ; tp . put ( ""listed-key"" , Arrays . asList ( ""# ca"" , ""# cb"" ) , Arrays . asList ( ""va"" , ""vb"" ) ) ; tp . setHeader ( Arrays . asList ( ""#"" , ""# ASF License 2.0"" , ""#"" ) ) ; tp . setFooter ( Arrays . asList ( ""#"" , ""# bye!"" , ""#"" ) ) ; tp . save ( System . out ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void lockShouldReturnFalseIfTableIsEmpty ( ) throws Exception { initShouldNotCreateTheSchemaIfItAlreadyExists ( ) ; reset ( connection , metaData , statement , preparedStatement , resultSet ) ; expect ( connection . isClosed ( ) ) . andReturn ( false ) ; expect ( connection . prepareStatement ( ""SELECT * FROM "" + tableName + "" FOR UPDATE"" ) ) . andReturn ( preparedStatement ) ; preparedStatement . setQueryTimeout ( 10 ) ; expect ( preparedStatement . execute ( ) ) . andReturn ( true ) ; preparedStatement . close ( ) ; expect ( connection . isClosed ( ) ) . andReturn ( false ) ; expect ( connection . prepareStatement ( ""UPDATE "" + tableName + "" SET MOMENT = 1"" ) ) . andReturn ( preparedStatement ) ; preparedStatement . setQueryTimeout ( 10 ) ; expect ( preparedStatement . executeUpdate ( ) ) . andReturn ( 0 ) ; preparedStatement . close ( ) ; replay ( connection , metaData , statement , preparedStatement , resultSet ) ; boolean lockAcquired = lock . lock ( ) ; verify ( connection , metaData , statement , preparedStatement , resultSet ) ; assertFalse ( lockAcquired ) ; }",No
" public void testRandomCompress ( ) throws Exception { Configuration conf = new Configuration ( ) ; conf . setInt ( Job . COMPLETION_POLL_INTERVAL_KEY , 100 ) ; Job job = Job . getInstance ( conf ) ; conf = job . getConfiguration ( ) ; conf . setInt ( MRJobConfig . IO_SORT_MB , 1 ) ; conf . setBoolean ( MRJobConfig . MAP_OUTPUT_COMPRESS , true ) ; conf . setClass ( ""test.mapcollection.class"" , RandomFactory . class , RecordFactory . class ) ; final Random r = new Random ( ) ; final long seed = r . nextLong ( ) ; LOG . info ( ""SEED: "" + seed ) ; r . setSeed ( seed ) ; conf . set ( MRJobConfig . MAP_SORT_SPILL_PERCENT , Float . toString ( Math . max ( 0.1f , r . nextFloat ( ) ) ) ) ; RandomFactory . setLengths ( conf , r , 1 < < 14 ) ; conf . setInt ( ""test.spillmap.records"" , r . nextInt ( 500 ) ) ; conf . setLong ( ""test.randomfactory.seed"" , r . nextLong ( ) ) ; runTest ( ""randomCompress"" , job ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public String getWelcomePlain ( ) { StringBuffer text = new StringBuffer ( ) ; text . append ( tika . toString ( ) ) ; text . append ( ""\n"" ) ; text . append ( ""For endpoints, please see "" ) ; text . append ( DOCS_URL ) ; text . append ( ""\n\n"" ) ; for ( Endpoint e : identifyEndpoints ( ) ) { text . append ( e . httpMethod ) ; text . append ( "" "" ) ; text . append ( e . path ) ; text . append ( ""\n"" ) ; for ( String produces : e . produces ) { text . append ( "" => "" ) ; text . append ( produces ) ; text . append ( ""\n"" ) ; } } return text . toString ( ) ; }",No
" public void testCompositeProperty ( ) { Metadata meta = new Metadata ( ) ; Property compositeProperty = Property . composite ( DublinCore . DESCRIPTION , new Property [ ] { Property . internalText ( Metadata . DESCRIPTION ) , Property . internalText ( ""testDescriptionAlt"" ) } ) ; String message = ""composite description"" ; meta . set ( compositeProperty , message ) ; assertEquals ( message , meta . get ( compositeProperty ) ) ; assertEquals ( message , meta . get ( DublinCore . DESCRIPTION ) ) ; assertEquals ( message , meta . get ( Metadata . DESCRIPTION ) ) ; assertEquals ( message , meta . get ( ""testDescriptionAlt"" ) ) ; }",Smelly
 public Optional < TypeDescriptor < ValueT > > getValueType ( ) { return Optional . ofNullable ( valueType ) ; },No
" public void syntaxError ( Recognizer < ? , ? > recognizer , Object offendingSymbol , int line , int charPositionInLine , String msg , RecognitionException e ) { CommonTokenStream tokens = ( CommonTokenStream ) recognizer . getInputStream ( ) ; String input = tokens . getTokenSource ( ) . getInputStream ( ) . toString ( ) ; Token token = ( Token ) offendingSymbol ; String [ ] lines = StringUtils . splitPreserveAllTokens ( input , '\n' ) ; String errorLine = lines [ line - 1 ] ; String simpleMessage = ""syntax error at or near \"""" + token . getText ( ) + ""\"""" ; throw new SQLParseError ( token , line , charPositionInLine , simpleMessage , errorLine ) ; }",No
" public String getDescription ( ) { return ""1:1: Tokens : ( T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral | CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT | LINE_COMMENT );"" ; }",No
" public void shouldNotRetainMarkers ( ) { final SubgraphStrategy strategy = SubgraphStrategy . build ( ) . vertices ( __ . < Vertex > out ( ) . hasLabel ( ""person"" ) ) . create ( ) ; final Traversal . Admin < ? , ? > t = out ( ) . inE ( ) . asAdmin ( ) ; t . setStrategies ( t . getStrategies ( ) . clone ( ) . addStrategies ( strategy , StandardVerificationStrategy . instance ( ) ) ) ; t . applyStrategies ( ) ; assertEquals ( t . getSteps ( ) . get ( 0 ) . getClass ( ) , VertexStep . class ) ; assertEquals ( t . getSteps ( ) . get ( 1 ) . getClass ( ) , TraversalFilterStep . class ) ; assertEquals ( AndStep . class , ( ( TraversalFilterStep < ? > ) t . getSteps ( ) . get ( 1 ) ) . getLocalChildren ( ) . get ( 0 ) . getStartStep ( ) . getClass ( ) ) ; assertEquals ( 0 , ( ( TraversalFilterStep < ? > ) t . getSteps ( ) . get ( 1 ) ) . getLocalChildren ( ) . get ( 0 ) . getStartStep ( ) . getLabels ( ) . size ( ) ) ; assertEquals ( t . getSteps ( ) . get ( 2 ) . getClass ( ) , EdgeVertexStep . class ) ; assertEquals ( t . getSteps ( ) . get ( 3 ) . getClass ( ) , TraversalFilterStep . class ) ; assertEquals ( VertexStep . class , ( ( TraversalFilterStep < ? > ) t . getSteps ( ) . get ( 3 ) ) . getLocalChildren ( ) . get ( 0 ) . getStartStep ( ) . getClass ( ) ) ; assertEquals ( 0 , ( ( TraversalFilterStep < ? > ) t . getSteps ( ) . get ( 3 ) ) . getLocalChildren ( ) . get ( 0 ) . getStartStep ( ) . getLabels ( ) . size ( ) ) ; TraversalHelper . getStepsOfAssignableClassRecursively ( Step . class , t ) . forEach ( step -> assertTrue ( step . getLabels ( ) . isEmpty ( ) ) ) ; }",Smelly
" private static ProxyInfo getProxyInfo ( Bean < ? > bean ) { final Set < Class < ? > > interfaceList = new HashSet < Class < ? > > ( ) ; Class < ? > superClass = null ; for ( Type generic : bean . getTypes ( ) ) { Class < ? > type = ClassUtil . getClazz ( generic ) ; if ( type . isInterface ( ) ) { interfaceList . add ( type ) ; } else if ( ( superClass == null ) || ( superClass . isAssignableFrom ( type ) && type != Object . class ) ) { superClass = type ; } } if ( ! interfaceList . contains ( Serializable . class ) ) { interfaceList . add ( Serializable . class ) ; } Class < ? > [ ] interfaceArray = new Class < ? > [ interfaceList . size ( ) ] ; interfaceArray = interfaceList . toArray ( interfaceArray ) ; return new ProxyInfo ( superClass , interfaceArray ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , cancelProcess_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public String toString ( ) { String path = getDirectory ( ) != null ? getDirectory ( ) . getAbsolutePath ( ) : ""DIRECTORY_NOT_SET"" ; return ""KahaDBPersistenceAdapter["" + path + ""]"" ; }",No
" public void parseAddJar ( ) { String query = ""ADD JAR hdfs:///tmp/my_jar.jar"" ; final Set < TableName > tableNames = findTableNames ( query ) ; System . out . printf ( ""tableNames=%s\n"" , tableNames ) ; assertEquals ( 0 , tableNames . size ( ) ) ; }",No
 public V get ( Object key ) { V value = super . get ( key ) ; return value != null ? value : ( V ) Long . valueOf ( 0L ) ; },No
" public void whenClassAndFeatureNotFoundAndHasMembersOfType ( ) throws Exception { final ApplicationFeatureId classFeature = ApplicationFeatureId . newClass ( ""com.mycompany.Bar"" ) ; context . checking ( new Expectations ( ) { { oneOf ( mockApplicationFeatureRepository ) . findFeature ( classFeature ) ; will ( returnValue ( mockApplicationFeature ) ) ; allowing ( mockApplicationFeature ) . membersOf ( ApplicationMemberType . ACTION ) ; will ( returnValue ( new TreeSet < ApplicationFeatureId > ( ) { { add ( ApplicationFeatureId . newMember ( ""com.mycompany.Bar#foo"" ) ) ; } } ) ) ; } } ) ; assertThat ( ApplicationFeatureId . Predicates . isClassContaining ( ApplicationMemberType . ACTION , mockApplicationFeatureRepository ) . apply ( classFeature ) , is ( true ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected static Object updateSchemaIn ( Object keyOrValue , Schema updatedSchema ) { if ( keyOrValue instanceof Struct ) { Struct origStruct = ( Struct ) keyOrValue ; Struct newStruct = new Struct ( updatedSchema ) ; for ( Field field : updatedSchema . fields ( ) ) { newStruct . put ( field , origStruct . get ( field ) ) ; } return newStruct ; } return keyOrValue ; }",Smelly
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 1 , 3 , ""A single sentence!"" , ""And here is another one?"" , ""Testing the ENDSWITH condition of Ruta."" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 2 , 1 , ""Testing the ENDSWITH condition of Ruta."" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 3 , 2 , ""A single sentence!"" , ""Testing the ENDSWITH condition of Ruta."" ) ; cas . release ( ) ; }",Smelly
" private void initHandlerChain ( QName portName , HandlerRegistry handlerRegistry , HandlerInfo handlerInfo , ArrayList < String > soaprolesToAdd ) { HandlerChain handlerChain = ( HandlerChain ) handlerRegistry . getHandlerChain ( portName ) ; @ SuppressWarnings ( ""unchecked"" ) Iterator < Handler > iter = handlerChain . iterator ( ) ; while ( iter . hasNext ( ) ) { Handler handler = iter . next ( ) ; handler . init ( handlerInfo ) ; } String [ ] soaprolesRegistered = handlerChain . getRoles ( ) ; String [ ] soaproles = new String [ soaprolesRegistered . length + soaprolesToAdd . size ( ) ] ; int i ; for ( i = 0 ; i < soaprolesRegistered . length ; i ++ ) soaproles [ i ] = soaprolesRegistered [ i ] ; for ( int j = 0 ; j < soaprolesToAdd . size ( ) ; j ++ ) soaproles [ i + j ] = soaprolesToAdd . get ( j ) ; handlerChain . setRoles ( soaproles ) ; handlerRegistry . setHandlerChain ( portName , handlerChain ) ; }",No
 public Date getHireDate ( ) { return this . hireDate ; },No
" public void testNumberHashNumberRangePutGetDeleteGetSuccess ( ) { final TestRunner putRunner = TestRunners . newTestRunner ( PutDynamoDB . class ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . CREDENTIALS_FILE , CREDENTIALS_FILE ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . REGION , REGION ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . TABLE , numberHashNumberRangeTableName ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . HASH_KEY_NAME , ""hashN"" ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . RANGE_KEY_NAME , ""rangeN"" ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . HASH_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . RANGE_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . HASH_KEY_VALUE , ""40"" ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . RANGE_KEY_VALUE , ""50"" ) ; putRunner . setProperty ( AbstractWriteDynamoDBProcessor . JSON_DOCUMENT , ""document"" ) ; String document = ""{\""40\"":\""50\""}"" ; putRunner . enqueue ( document . getBytes ( ) ) ; putRunner . run ( 1 ) ; putRunner . assertAllFlowFilesTransferred ( AbstractWriteDynamoDBProcessor . REL_SUCCESS , 1 ) ; List < MockFlowFile > flowFiles = putRunner . getFlowFilesForRelationship ( AbstractWriteDynamoDBProcessor . REL_SUCCESS ) ; for ( MockFlowFile flowFile : flowFiles ) { assertEquals ( document , new String ( flowFile . toByteArray ( ) ) ) ; } final TestRunner getRunner = TestRunners . newTestRunner ( GetDynamoDB . class ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . CREDENTIALS_FILE , CREDENTIALS_FILE ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . REGION , REGION ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . TABLE , numberHashNumberRangeTableName ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . HASH_KEY_NAME , ""hashN"" ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . RANGE_KEY_NAME , ""rangeN"" ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . HASH_KEY_VALUE , ""40"" ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . RANGE_KEY_VALUE , ""50"" ) ; getRunner . setProperty ( AbstractWriteDynamoDBProcessor . HASH_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; getRunner . setProperty ( AbstractWriteDynamoDBProcessor . RANGE_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; getRunner . setProperty ( AbstractDynamoDBProcessor . JSON_DOCUMENT , ""document"" ) ; getRunner . enqueue ( new byte [ ] { } ) ; getRunner . run ( 1 ) ; getRunner . assertAllFlowFilesTransferred ( AbstractDynamoDBProcessor . REL_SUCCESS , 1 ) ; flowFiles = getRunner . getFlowFilesForRelationship ( AbstractDynamoDBProcessor . REL_SUCCESS ) ; for ( MockFlowFile flowFile : flowFiles ) { assertEquals ( document , new String ( flowFile . toByteArray ( ) ) ) ; } final TestRunner deleteRunner = TestRunners . newTestRunner ( DeleteDynamoDB . class ) ; deleteRunner . setProperty ( DeleteDynamoDB . CREDENTIALS_FILE , CREDENTIALS_FILE ) ; deleteRunner . setProperty ( DeleteDynamoDB . REGION , REGION ) ; deleteRunner . setProperty ( DeleteDynamoDB . TABLE , numberHashNumberRangeTableName ) ; deleteRunner . setProperty ( DeleteDynamoDB . HASH_KEY_NAME , ""hashN"" ) ; deleteRunner . setProperty ( DeleteDynamoDB . RANGE_KEY_NAME , ""rangeN"" ) ; deleteRunner . setProperty ( DeleteDynamoDB . HASH_KEY_VALUE , ""40"" ) ; deleteRunner . setProperty ( DeleteDynamoDB . RANGE_KEY_VALUE , ""50"" ) ; deleteRunner . setProperty ( AbstractWriteDynamoDBProcessor . HASH_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; deleteRunner . setProperty ( AbstractWriteDynamoDBProcessor . RANGE_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; deleteRunner . enqueue ( new byte [ ] { } ) ; deleteRunner . run ( 1 ) ; deleteRunner . assertAllFlowFilesTransferred ( DeleteDynamoDB . REL_SUCCESS , 1 ) ; flowFiles = deleteRunner . getFlowFilesForRelationship ( DeleteDynamoDB . REL_SUCCESS ) ; for ( MockFlowFile flowFile : flowFiles ) { System . out . println ( flowFile . getAttributes ( ) ) ; assertEquals ( """" , new String ( flowFile . toByteArray ( ) ) ) ; } final TestRunner getRunnerAfterDelete = TestRunners . newTestRunner ( GetDynamoDB . class ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . CREDENTIALS_FILE , CREDENTIALS_FILE ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . REGION , REGION ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . TABLE , numberHashNumberRangeTableName ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . HASH_KEY_NAME , ""hashN"" ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . RANGE_KEY_NAME , ""rangeN"" ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . HASH_KEY_VALUE , ""40"" ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . RANGE_KEY_VALUE , ""50"" ) ; getRunnerAfterDelete . setProperty ( AbstractDynamoDBProcessor . JSON_DOCUMENT , ""document"" ) ; getRunnerAfterDelete . setProperty ( AbstractWriteDynamoDBProcessor . HASH_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; getRunnerAfterDelete . setProperty ( AbstractWriteDynamoDBProcessor . RANGE_KEY_VALUE_TYPE , AbstractWriteDynamoDBProcessor . ALLOWABLE_VALUE_NUMBER ) ; getRunnerAfterDelete . enqueue ( new byte [ ] { } ) ; getRunnerAfterDelete . run ( 1 ) ; getRunnerAfterDelete . assertAllFlowFilesTransferred ( GetDynamoDB . REL_NOT_FOUND , 1 ) ; flowFiles = getRunnerAfterDelete . getFlowFilesForRelationship ( GetDynamoDB . REL_NOT_FOUND ) ; for ( MockFlowFile flowFile : flowFiles ) { String error = flowFile . getAttribute ( AbstractDynamoDBProcessor . DYNAMODB_KEY_ERROR_NOT_FOUND ) ; assertTrue ( error . startsWith ( AbstractDynamoDBProcessor . DYNAMODB_KEY_ERROR_NOT_FOUND_MESSAGE ) ) ; } }",Smelly
 public static void main ( String [ ] args ) { org . apache . camel . spring . Main . main ( args ) ; },No
" void renderPortalPagePortletEnd ( Appendable writer , Map < String , Object > context , ModelScreenWidget . PortalPage portalPage , GenericValue portalPortlet ) throws GeneralException , IOException ;",No
