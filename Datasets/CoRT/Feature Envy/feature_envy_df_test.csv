Code,Smelly
 public Object terminate ( AggregationBuffer agg ) throws HiveException { DecimalStatsAgg myagg = ( DecimalStatsAgg ) agg ; long numDV = 0 ; if ( myagg . numBitVectors != 0 ) { numDV = myagg . numDV . estimateNumDistinctValues ( ) ; } ( ( Text ) result [ 0 ] ) . set ( myagg . columnType ) ; ( ( HiveDecimalWritable ) result [ 1 ] ) . set ( myagg . min ) ; ( ( HiveDecimalWritable ) result [ 2 ] ) . set ( myagg . max ) ; ( ( LongWritable ) result [ 3 ] ) . set ( myagg . countNulls ) ; ( ( LongWritable ) result [ 4 ] ) . set ( numDV ) ; return result ; },Smelly
" public static Path getTaskAttemptDir ( TaskAttemptId quid ) { Path workDir = StorageUtil . concatPath ( ExecutionBlockContext . getBaseInputDir ( quid . getTaskId ( ) . getExecutionBlockId ( ) ) , String . valueOf ( quid . getTaskId ( ) . getId ( ) ) , String . valueOf ( quid . getId ( ) ) ) ; return workDir ; }",Smelly
 protected JmsResourceProvider getJmsResourceProvider ( ) { JmsResourceProvider provider = new JmsResourceProvider ( ) ; provider . setTopic ( true ) ; provider . setDeliveryMode ( DeliveryMode . PERSISTENT ) ; provider . setClientID ( getClass ( ) . getName ( ) ) ; provider . setDurableName ( getName ( ) ) ; return provider ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void cannotFindClassUnderTest ( ) { context . getClassUnderTest ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public void setIgnoreTF ( boolean ignoreTF ) { this . ignoreTF = ignoreTF ; },No
" public static Map < String , Object > productImportFromSpreadsheet ( DispatchContext dctx , Map < String , ? extends Object > context ) { Delegator delegator = dctx . getDelegator ( ) ; Locale locale = ( Locale ) context . get ( ""locale"" ) ; String path = System . getProperty ( ""user.dir"" ) + ""/spreadsheet"" ; List < File > fileItems = FastList . newInstance ( ) ; if ( UtilValidate . isNotEmpty ( path ) ) { File importDir = new File ( path ) ; if ( importDir . isDirectory ( ) && importDir . canRead ( ) ) { File [ ] files = importDir . listFiles ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { if ( files [ i ] . getName ( ) . toUpperCase ( ) . endsWith ( ""XLS"" ) ) { fileItems . add ( files [ i ] ) ; } } } else { return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ProductProductImportDirectoryNotFound"" , locale ) ) ; } } else { return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ProductProductImportPathNotSpecified"" , locale ) ) ; } if ( fileItems . size ( ) < 1 ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ProductProductImportPathNoSpreadsheetExists"" , locale ) + path ) ; } for ( File item : fileItems ) { List < Map < String , Object > > products = FastList . newInstance ( ) ; List < Map < String , Object > > inventoryItems = FastList . newInstance ( ) ; POIFSFileSystem fs = null ; HSSFWorkbook wb = null ; try { fs = new POIFSFileSystem ( new FileInputStream ( item ) ) ; wb = new HSSFWorkbook ( fs ) ; } catch ( IOException e ) { Debug . logError ( ""Unable to read or create workbook from file"" , module ) ; return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ProductProductImportCannotCreateWorkbookFromFile"" , locale ) ) ; } HSSFSheet sheet = wb . getSheetAt ( 0 ) ; int sheetLastRowNumber = sheet . getLastRowNum ( ) ; for ( int j = 1 ; j <= sheetLastRowNumber ; j ++ ) { HSSFRow row = sheet . getRow ( j ) ; if ( row != null ) { HSSFCell cell2 = row . getCell ( 2 ) ; cell2 . setCellType ( HSSFCell . CELL_TYPE_STRING ) ; String productId = cell2 . getRichStringCellValue ( ) . toString ( ) ; HSSFCell cell5 = row . getCell ( 5 ) ; BigDecimal quantityOnHand = BigDecimal . ZERO ; if ( cell5 != null && cell5 . getCellType ( ) == HSSFCell . CELL_TYPE_NUMERIC ) quantityOnHand = new BigDecimal ( cell5 . getNumericCellValue ( ) ) ; boolean productExists = ImportProductHelper . checkProductExists ( productId , delegator ) ; if ( productId != null && ! productId . trim ( ) . equalsIgnoreCase ( """" ) && ! productExists ) { products . add ( ImportProductHelper . prepareProduct ( productId ) ) ; if ( quantityOnHand . compareTo ( BigDecimal . ZERO ) >= 0 ) inventoryItems . add ( ImportProductHelper . prepareInventoryItem ( productId , quantityOnHand , delegator . getNextSeqId ( ""InventoryItem"" ) ) ) ; else inventoryItems . add ( ImportProductHelper . prepareInventoryItem ( productId , BigDecimal . ZERO , delegator . getNextSeqId ( ""InventoryItem"" ) ) ) ; } int rowNum = row . getRowNum ( ) + 1 ; if ( row . toString ( ) != null && ! row . toString ( ) . trim ( ) . equalsIgnoreCase ( """" ) && productExists ) { Debug . logWarning ( ""Row number "" + rowNum + "" not imported from "" + item . getName ( ) , module ) ; } } } for ( int j = 0 ; j < products . size ( ) ; j ++ ) { GenericValue productGV = delegator . makeValue ( ""Product"" , products . get ( j ) ) ; GenericValue inventoryItemGV = delegator . makeValue ( ""InventoryItem"" , inventoryItems . get ( j ) ) ; if ( ! ImportProductHelper . checkProductExists ( productGV . getString ( ""productId"" ) , delegator ) ) { try { delegator . create ( productGV ) ; delegator . create ( inventoryItemGV ) ; } catch ( GenericEntityException e ) { Debug . logError ( ""Cannot store product"" , module ) ; return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ProductProductImportCannotStoreProduct"" , locale ) ) ; } } } int uploadedProducts = products . size ( ) + 1 ; if ( products . size ( ) > 0 ) Debug . logInfo ( ""Uploaded "" + uploadedProducts + "" products from file "" + item . getName ( ) , module ) ; } return ServiceUtil . returnSuccess ( ) ; }",Smelly
" private static String sanitizeTrackingUrl ( String url ) { return ( url == null || url . trim ( ) . isEmpty ( ) ) ? ""N/A"" : url ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public boolean matches ( MessageEvaluationContext message ) throws JMSException { Object object = evaluate ( message ) ; return object != null && object == Boolean . TRUE ; },No
" public void testCookiesInstance ( ) throws Exception { Tomcat tomcat = getTomcatInstance ( ) ; addServlets ( tomcat ) ; tomcat . start ( ) ; ByteChunk res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/invalid"" ) ; assertEquals ( ""Cookie name fail"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/null"" ) ; assertEquals ( ""Cookie name fail"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/blank"" ) ; assertEquals ( ""Cookie name fail"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/invalidFwd"" ) ; assertEquals ( ""Cookie name ok"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/invalidStrict"" ) ; assertEquals ( ""Cookie name ok"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/valid"" ) ; assertEquals ( ""Cookie name ok"" , res . toString ( ) ) ; Map < String , List < String > > headers = new HashMap < String , List < String > > ( ) ; getUrl ( ""http://localhost:"" + getPort ( ) + ""/switch"" , res , headers ) ; List < String > cookieHeaders = headers . get ( ""Set-Cookie"" ) ; for ( String cookieHeader : cookieHeaders ) { assertEquals ( ""name=\""val?ue\""; Version=1"" , cookieHeader ) ; } }",Smelly
 private static String toJsonString ( JsonStructure value ) { StringWriter writer = new StringWriter ( ) ; Json . createWriter ( writer ) . write ( value ) ; return writer . toString ( ) ; },No
" public BatchWriterConfig getBatchWriterConfig ( ) { BatchWriterConfig config = new BatchWriterConfig ( ) ; config . setMaxWriteThreads ( this . batchThreads ) ; config . setMaxLatency ( this . batchLatency , TimeUnit . MILLISECONDS ) ; config . setMaxMemory ( this . batchMemory ) ; config . setTimeout ( this . batchTimeout , TimeUnit . MILLISECONDS ) ; return config ; }",Smelly
" public void list ( ) { if ( input . getParameters ( ) . length == 1 ) { try { final Set < RoleTO > roleTOs = entitlementSyncopeOperations . rolePerEntitlements ( input . firstParameter ( ) ) ; if ( ! entitlementSyncopeOperations . exists ( input . firstParameter ( ) ) ) { entitlementResultManager . notFoundError ( ""Entitlement"" , input . firstParameter ( ) ) ; } else if ( roleTOs != null && ! roleTOs . isEmpty ( ) ) { entitlementResultManager . rolesToView ( roleTOs ) ; } else { entitlementResultManager . genericMessage ( ""No roles found for entitlement "" + input . firstParameter ( ) ) ; } } catch ( final SyncopeClientException | WebServiceException ex ) { LOG . error ( ""Error reading entitlement"" , ex ) ; if ( ex . getMessage ( ) . startsWith ( ""NotFound"" ) ) { entitlementResultManager . notFoundError ( ""User"" , input . firstParameter ( ) ) ; } else { entitlementResultManager . genericError ( ex . getMessage ( ) ) ; } } catch ( final NumberFormatException ex ) { LOG . error ( ""Error reading entitlement"" , ex ) ; entitlementResultManager . numberFormatException ( ""user"" , input . firstParameter ( ) ) ; } } else { entitlementResultManager . commandOptionError ( READ_HELP_MESSAGE ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public abstract int getEvaluationType ( ) ;,No
" protected boolean restoreAdmin ( ) throws IOException { try { admin . close ( ) ; } catch ( IOException ioe ) { LOG . warn ( ""While closing the old connection"" , ioe ) ; } this . admin = this . connection . getAdmin ( ) ; LOG . info ( ""Added new HBaseAdmin"" ) ; return true ; }",Smelly
 private int lookupInt ( int var ) { ConstantPoolItem item ; for ( int i = 0 ; i < count ; i ++ ) { item = items [ i ] ; if ( item != null && item . tag == Constants . CONSTANT_Integer && ( ( Constant_Integer ) item ) . value == var ) { return i ; } } return - 1 ; },Smelly
 public void setSubInt ( int subInt ) { this . subInt = subInt ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , UserProfile struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . userModelVersion = iprot . readString ( ) ; struct . setUserModelVersionIsSet ( true ) ; struct . airavataInternalUserId = iprot . readString ( ) ; struct . setAiravataInternalUserIdIsSet ( true ) ; struct . userId = iprot . readString ( ) ; struct . setUserIdIsSet ( true ) ; { org . apache . thrift . protocol . TList _list44 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . emails = new ArrayList < String > ( _list44 . size ) ; String _elem45 ; for ( int _i46 = 0 ; _i46 < _list44 . size ; ++ _i46 ) { _elem45 = iprot . readString ( ) ; struct . emails . add ( _elem45 ) ; } } struct . setEmailsIsSet ( true ) ; struct . creationTime = iprot . readString ( ) ; struct . setCreationTimeIsSet ( true ) ; struct . lastAccessTime = iprot . readString ( ) ; struct . setLastAccessTimeIsSet ( true ) ; struct . validUntil = iprot . readString ( ) ; struct . setValidUntilIsSet ( true ) ; struct . State = org . apache . airavata . model . user . Status . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . userName = iprot . readString ( ) ; struct . setUserNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . orcidId = iprot . readString ( ) ; struct . setOrcidIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list47 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . phones = new ArrayList < String > ( _list47 . size ) ; String _elem48 ; for ( int _i49 = 0 ; _i49 < _list47 . size ; ++ _i49 ) { _elem48 = iprot . readString ( ) ; struct . phones . add ( _elem48 ) ; } } struct . setPhonesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . country = iprot . readString ( ) ; struct . setCountryIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list50 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . nationality = new ArrayList < String > ( _list50 . size ) ; String _elem51 ; for ( int _i52 = 0 ; _i52 < _list50 . size ; ++ _i52 ) { _elem51 = iprot . readString ( ) ; struct . nationality . add ( _elem51 ) ; } } struct . setNationalityIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . homeOrganization = iprot . readString ( ) ; struct . setHomeOrganizationIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . orginationAffiliation = iprot . readString ( ) ; struct . setOrginationAffiliationIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . comments = iprot . readString ( ) ; struct . setCommentsIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TList _list53 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . labeledURI = new ArrayList < String > ( _list53 . size ) ; String _elem54 ; for ( int _i55 = 0 ; _i55 < _list53 . size ; ++ _i55 ) { _elem54 = iprot . readString ( ) ; struct . labeledURI . add ( _elem54 ) ; } } struct . setLabeledURIIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . gpgKey = iprot . readString ( ) ; struct . setGpgKeyIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . timeZone = iprot . readString ( ) ; struct . setTimeZoneIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . nsfDemographics = new NSFDemographics ( ) ; struct . nsfDemographics . read ( iprot ) ; struct . setNsfDemographicsIsSet ( true ) ; } }",Smelly
 public String getBar ( ) { return ( super . getBar ( ) ) ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public InternalValue [ ] computeSystemGeneratedPropertyValues ( NodeState parent , QPropertyDefinition def ) { InternalValue [ ] genValues = null ; Name name = def . getName ( ) ; Name declaringNT = def . getDeclaringNodeType ( ) ; if ( NameConstants . JCR_UUID . equals ( name ) ) { if ( NameConstants . MIX_REFERENCEABLE . equals ( declaringNT ) ) { genValues = new InternalValue [ ] { InternalValue . create ( parent . getNodeId ( ) . toString ( ) ) } ; } } else if ( NameConstants . JCR_PRIMARYTYPE . equals ( name ) ) { genValues = new InternalValue [ ] { InternalValue . create ( parent . getNodeTypeName ( ) ) } ; } else if ( NameConstants . JCR_MIXINTYPES . equals ( name ) ) { Set < Name > mixins = parent . getMixinTypeNames ( ) ; genValues = new InternalValue [ mixins . size ( ) ] ; int i = 0 ; for ( Name n : mixins ) { genValues [ i ++ ] = InternalValue . create ( n ) ; } } else if ( NameConstants . JCR_CREATED . equals ( name ) ) { if ( NameConstants . MIX_CREATED . equals ( declaringNT ) || NameConstants . NT_VERSION . equals ( declaringNT ) ) { genValues = new InternalValue [ ] { InternalValue . create ( Calendar . getInstance ( ) ) } ; } } else if ( NameConstants . JCR_CREATEDBY . equals ( name ) ) { if ( NameConstants . MIX_CREATED . equals ( declaringNT ) ) { genValues = new InternalValue [ ] { InternalValue . create ( userId ) } ; } } else if ( NameConstants . JCR_LASTMODIFIED . equals ( name ) ) { if ( NameConstants . MIX_LASTMODIFIED . equals ( declaringNT ) ) { genValues = new InternalValue [ ] { InternalValue . create ( Calendar . getInstance ( ) ) } ; } } else if ( NameConstants . JCR_LASTMODIFIEDBY . equals ( name ) ) { if ( NameConstants . MIX_LASTMODIFIED . equals ( declaringNT ) ) { genValues = new InternalValue [ ] { InternalValue . create ( userId ) } ; } } else if ( NameConstants . JCR_ETAG . equals ( name ) ) { if ( NameConstants . MIX_ETAG . equals ( declaringNT ) ) { genValues = new InternalValue [ ] { InternalValue . create ( """" ) } ; } } return genValues ; }",Smelly
 public void process ( WatchedEvent event ) { },No
" public Object deserialize ( Writable field ) throws SerDeException { Object retObj = super . deserialize ( field ) ; BytesWritable b = ( BytesWritable ) field ; bis . reset ( b . getBytes ( ) , b . getLength ( ) ) ; return ( retObj ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" void addCollision ( String file1 , String file2 ) { _resources . add ( file1 ) ; _resources . add ( file2 ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public ValidationResult validate ( final String subject , final String input , final ValidationContext context ) { if ( context . isExpressionLanguageSupported ( subject ) && context . isExpressionLanguagePresent ( input ) ) { return new ValidationResult . Builder ( ) . input ( input ) . subject ( subject ) . valid ( true ) . explanation ( ""Expression Language is present"" ) . build ( ) ; } try { new Schema . Parser ( ) . parse ( input ) ; return new ValidationResult . Builder ( ) . valid ( true ) . build ( ) ; } catch ( final Exception e ) { return new ValidationResult . Builder ( ) . input ( input ) . subject ( subject ) . valid ( false ) . explanation ( ""Not a valid Avro Schema: "" + e . getMessage ( ) ) . build ( ) ; } }",Smelly
 void declareOutputFields ( OutputFieldsDeclarer declarer ) ;,No
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . name = ( String ) in . readObject ( ) ; this . qualified3 = in . readObject ( ) ; }",No
" public void hasGroupBy ( Operator < ? extends OperatorDesc > mapJoinOp , LocalMapJoinProcCtx localMapJoinProcCtx ) throws Exception { List < Operator < ? extends OperatorDesc > > childOps = mapJoinOp . getChildOperators ( ) ; Map < Rule , NodeProcessor > opRules = new LinkedHashMap < Rule , NodeProcessor > ( ) ; opRules . put ( new RuleRegExp ( ""R1"" , GroupByOperator . getOperatorName ( ) + ""%"" ) , LocalMapJoinProcFactory . getGroupByProc ( ) ) ; Dispatcher disp = new DefaultRuleDispatcher ( LocalMapJoinProcFactory . getDefaultProc ( ) , opRules , localMapJoinProcCtx ) ; GraphWalker ogw = new DefaultGraphWalker ( disp ) ; ArrayList < Node > topNodes = new ArrayList < Node > ( ) ; topNodes . addAll ( childOps ) ; ogw . startWalking ( topNodes , null ) ; }",Smelly
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . addE ( ""knows"" ) . property ( ""a"" , ""b"" ) , __ . addE ( ""created"" ) . property ( ""a"" , ""b"" ) , __ . addE ( ""knows"" ) . property ( ""a"" , ""b"" ) . property ( ""c"" , ""d"" ) , __ . addE ( ""knows"" ) . property ( ""c"" , ""d"" ) ) ; }",Smelly
 public void preStoreSource ( Source source ) throws SourceException { },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ActiveScan struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 13 ) ; if ( incoming . get ( 0 ) ) { struct . client = iprot . readString ( ) ; struct . setClientIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . user = iprot . readString ( ) ; struct . setUserIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tableId = iprot . readString ( ) ; struct . setTableIdIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . age = iprot . readI64 ( ) ; struct . setAgeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . idleTime = iprot . readI64 ( ) ; struct . setIdleTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . type = ScanType . findByValue ( iprot . readI32 ( ) ) ; struct . setTypeIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . state = ScanState . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . extent = new org . apache . accumulo . core . data . thrift . TKeyExtent ( ) ; struct . extent . read ( iprot ) ; struct . setExtentIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TList _list35 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . columns = new ArrayList < org . apache . accumulo . core . data . thrift . TColumn > ( _list35 . size ) ; for ( int _i36 = 0 ; _i36 < _list35 . size ; ++ _i36 ) { org . apache . accumulo . core . data . thrift . TColumn _elem37 ; _elem37 = new org . apache . accumulo . core . data . thrift . TColumn ( ) ; _elem37 . read ( iprot ) ; struct . columns . add ( _elem37 ) ; } } struct . setColumnsIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { { org . apache . thrift . protocol . TList _list38 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . ssiList = new ArrayList < org . apache . accumulo . core . data . thrift . IterInfo > ( _list38 . size ) ; for ( int _i39 = 0 ; _i39 < _list38 . size ; ++ _i39 ) { org . apache . accumulo . core . data . thrift . IterInfo _elem40 ; _elem40 = new org . apache . accumulo . core . data . thrift . IterInfo ( ) ; _elem40 . read ( iprot ) ; struct . ssiList . add ( _elem40 ) ; } } struct . setSsiListIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { { org . apache . thrift . protocol . TMap _map41 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . MAP , iprot . readI32 ( ) ) ; struct . ssio = new HashMap < String , Map < String , String > > ( 2 * _map41 . size ) ; for ( int _i42 = 0 ; _i42 < _map41 . size ; ++ _i42 ) { String _key43 ; Map < String , String > _val44 ; _key43 = iprot . readString ( ) ; { org . apache . thrift . protocol . TMap _map45 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; _val44 = new HashMap < String , String > ( 2 * _map45 . size ) ; for ( int _i46 = 0 ; _i46 < _map45 . size ; ++ _i46 ) { String _key47 ; String _val48 ; _key47 = iprot . readString ( ) ; _val48 = iprot . readString ( ) ; _val44 . put ( _key47 , _val48 ) ; } } struct . ssio . put ( _key43 , _val44 ) ; } } struct . setSsioIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { { org . apache . thrift . protocol . TList _list49 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . authorizations = new ArrayList < ByteBuffer > ( _list49 . size ) ; for ( int _i50 = 0 ; _i50 < _list49 . size ; ++ _i50 ) { ByteBuffer _elem51 ; _elem51 = iprot . readBinary ( ) ; struct . authorizations . add ( _elem51 ) ; } } struct . setAuthorizationsIsSet ( true ) ; } if ( incoming . get ( 12 ) ) { struct . scanId = iprot . readI64 ( ) ; struct . setScanIdIsSet ( true ) ; } }",Smelly
" public final void onMessage ( T message , boolean last ) { if ( params . length == 1 && params [ 0 ] instanceof DecodeException ) { ( ( WsSession ) session ) . getLocal ( ) . onError ( session , ( DecodeException ) params [ 0 ] ) ; return ; } Object [ ] parameters = params . clone ( ) ; if ( indexBoolean != - 1 ) { parameters [ indexBoolean ] = Boolean . valueOf ( last ) ; } if ( indexSession != - 1 ) { parameters [ indexSession ] = session ; } if ( convert ) { parameters [ indexPayload ] = ( ( ByteBuffer ) message ) . array ( ) ; } else { parameters [ indexPayload ] = message ; } Object result = null ; try { result = method . invoke ( pojo , parameters ) ; } catch ( IllegalAccessException e ) { handlePojoMethodException ( e ) ; } catch ( InvocationTargetException e ) { handlePojoMethodException ( e ) ; } processResult ( result ) ; }",No
 public void setSelectorExecutor ( Executor selectorExecutor ) { this . selectorExecutor = selectorExecutor ; },No
 private RemoteQueuePartitionDTO mergeRemoteQueuePartitions ( final List < RemoteQueuePartitionDTO > partitions ) { final RemoteQueuePartitionDTO merged = new RemoteQueuePartitionDTO ( ) ; merged . setActiveQueueByteCount ( 0 ) ; merged . setActiveQueueFlowFileCount ( 0 ) ; merged . setInFlightByteCount ( 0 ) ; merged . setInFlightFlowFileCount ( 0 ) ; merged . setSwapByteCount ( 0 ) ; merged . setSwapFiles ( 0 ) ; merged . setSwapFlowFileCount ( 0 ) ; merged . setTotalByteCount ( 0 ) ; merged . setTotalFlowFileCount ( 0 ) ; for ( final RemoteQueuePartitionDTO partition : partitions ) { merged . setActiveQueueByteCount ( merged . getActiveQueueByteCount ( ) + partition . getActiveQueueByteCount ( ) ) ; merged . setActiveQueueFlowFileCount ( merged . getActiveQueueFlowFileCount ( ) + partition . getActiveQueueFlowFileCount ( ) ) ; merged . setInFlightByteCount ( merged . getInFlightByteCount ( ) + partition . getInFlightByteCount ( ) ) ; merged . setInFlightFlowFileCount ( merged . getInFlightFlowFileCount ( ) + partition . getInFlightFlowFileCount ( ) ) ; merged . setSwapByteCount ( merged . getSwapByteCount ( ) + partition . getSwapByteCount ( ) ) ; merged . setSwapFiles ( merged . getSwapFiles ( ) + partition . getSwapFiles ( ) ) ; merged . setSwapFlowFileCount ( merged . getSwapFlowFileCount ( ) + partition . getSwapFlowFileCount ( ) ) ; merged . setTotalByteCount ( merged . getTotalByteCount ( ) + partition . getTotalByteCount ( ) ) ; merged . setTotalFlowFileCount ( merged . getTotalFlowFileCount ( ) + partition . getTotalFlowFileCount ( ) ) ; merged . setNodeIdentifier ( partition . getNodeIdentifier ( ) ) ; } return merged ; },Smelly
 public Map getExtraDescriptions ( ) { return n . getExtraDescriptions ( ) ; },No
" public void cleanup ( Emitter < Pair < Integer , Pair < Double , T > > > emitter ) { for ( int i = 0 ; i < reservoirs . size ( ) ; i ++ ) { Map < Double , T > reservoir = reservoirs . get ( i ) ; for ( Map . Entry < Double , T > e : reservoir . entrySet ( ) ) { emitter . emit ( Pair . of ( i , Pair . of ( e . getKey ( ) , e . getValue ( ) ) ) ) ; } } }",No
" public static void parse ( InputStream stream , ContentHandler baseHandler , Metadata metadata , ParseContext context ) throws IOException , SAXException , TikaException { Locale locale = context . get ( Locale . class , Locale . getDefault ( ) ) ; ExtractorFactory . setThreadPrefersEventExtractors ( true ) ; try { OOXMLExtractor extractor ; OPCPackage pkg ; TikaInputStream tis = TikaInputStream . cast ( stream ) ; if ( tis != null && tis . getOpenContainer ( ) instanceof OPCPackage ) { pkg = ( OPCPackage ) tis . getOpenContainer ( ) ; } else if ( tis != null && tis . hasFile ( ) ) { pkg = OPCPackage . open ( tis . getFile ( ) . getPath ( ) , PackageAccess . READ ) ; tis . setOpenContainer ( pkg ) ; } else { InputStream shield = new CloseShieldInputStream ( stream ) ; pkg = OPCPackage . open ( shield ) ; } MediaType type = ZipContainerDetector . detectOfficeOpenXML ( pkg ) ; if ( type == null || OOXMLParser . UNSUPPORTED_OOXML_TYPES . contains ( type ) ) { EmptyParser . INSTANCE . parse ( stream , baseHandler , metadata , context ) ; return ; } metadata . set ( Metadata . CONTENT_TYPE , type . toString ( ) ) ; POIXMLTextExtractor poiExtractor = ExtractorFactory . createExtractor ( pkg ) ; POIXMLDocument document = poiExtractor . getDocument ( ) ; if ( poiExtractor instanceof XSSFEventBasedExcelExtractor ) { extractor = new XSSFExcelExtractorDecorator ( context , ( XSSFEventBasedExcelExtractor ) poiExtractor , locale ) ; } else if ( document == null ) { throw new TikaException ( ""Expecting UserModel based POI OOXML extractor with a document, but none found. "" + ""The extractor returned was a "" + poiExtractor ) ; } else if ( document instanceof XMLSlideShow ) { extractor = new XSLFPowerPointExtractorDecorator ( context , ( XSLFPowerPointExtractor ) poiExtractor ) ; } else if ( document instanceof XWPFDocument ) { extractor = new XWPFWordExtractorDecorator ( context , ( XWPFWordExtractor ) poiExtractor ) ; } else { extractor = new POIXMLTextExtractorDecorator ( context , poiExtractor ) ; } extractor . getMetadataExtractor ( ) . extract ( metadata ) ; extractor . getXHTML ( baseHandler , metadata , context ) ; } catch ( IllegalArgumentException e ) { if ( e . getMessage ( ) != null && e . getMessage ( ) . startsWith ( ""No supported documents found"" ) ) { throw new TikaException ( ""TIKA-418: RuntimeException while getting content"" + "" for thmx and xps file types"" , e ) ; } else { throw new TikaException ( ""Error creating OOXML extractor"" , e ) ; } } catch ( InvalidFormatException e ) { throw new TikaException ( ""Error creating OOXML extractor"" , e ) ; } catch ( OpenXML4JException e ) { throw new TikaException ( ""Error creating OOXML extractor"" , e ) ; } catch ( XmlException e ) { throw new TikaException ( ""Error creating OOXML extractor"" , e ) ; } }",Smelly
" public PCollection < KV < K , Iterable < V > > > expand ( PCollection < KeyedWorkItem < K , V > > input ) { KeyedWorkItemCoder < K , V > inputCoder = getKeyedWorkItemCoder ( input . getCoder ( ) ) ; return PCollection . createPrimitiveOutputInternal ( input . getPipeline ( ) , outputWindowingStrategy , input . isBounded ( ) , KvCoder . of ( inputCoder . getKeyCoder ( ) , IterableCoder . of ( inputCoder . getElementCoder ( ) ) ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , GatewayResourceProfile struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . gatewayID = iprot . readString ( ) ; struct . setGatewayIDIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . credentialStoreToken = iprot . readString ( ) ; struct . setCredentialStoreTokenIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list10 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . computeResourcePreferences = new ArrayList < ComputeResourcePreference > ( _list10 . size ) ; ComputeResourcePreference _elem11 ; for ( int _i12 = 0 ; _i12 < _list10 . size ; ++ _i12 ) { _elem11 = new ComputeResourcePreference ( ) ; _elem11 . read ( iprot ) ; struct . computeResourcePreferences . add ( _elem11 ) ; } } struct . setComputeResourcePreferencesIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list13 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . storagePreferences = new ArrayList < StoragePreference > ( _list13 . size ) ; StoragePreference _elem14 ; for ( int _i15 = 0 ; _i15 < _list13 . size ; ++ _i15 ) { _elem14 = new StoragePreference ( ) ; _elem14 . read ( iprot ) ; struct . storagePreferences . add ( _elem14 ) ; } } struct . setStoragePreferencesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . identityServerTenant = iprot . readString ( ) ; struct . setIdentityServerTenantIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . identityServerPwdCredToken = iprot . readString ( ) ; struct . setIdentityServerPwdCredTokenIsSet ( true ) ; } }",Smelly
 abstract public IRI create ( IRI i ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , UserProfile struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . userModelVersion = iprot . readString ( ) ; struct . setUserModelVersionIsSet ( true ) ; struct . airavataInternalUserId = iprot . readString ( ) ; struct . setAiravataInternalUserIdIsSet ( true ) ; struct . userId = iprot . readString ( ) ; struct . setUserIdIsSet ( true ) ; { org . apache . thrift . protocol . TList _list44 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . emails = new ArrayList < String > ( _list44 . size ) ; String _elem45 ; for ( int _i46 = 0 ; _i46 < _list44 . size ; ++ _i46 ) { _elem45 = iprot . readString ( ) ; struct . emails . add ( _elem45 ) ; } } struct . setEmailsIsSet ( true ) ; struct . creationTime = iprot . readString ( ) ; struct . setCreationTimeIsSet ( true ) ; struct . lastAccessTime = iprot . readString ( ) ; struct . setLastAccessTimeIsSet ( true ) ; struct . validUntil = iprot . readString ( ) ; struct . setValidUntilIsSet ( true ) ; struct . State = org . apache . airavata . model . user . Status . findByValue ( iprot . readI32 ( ) ) ; struct . setStateIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . userName = iprot . readString ( ) ; struct . setUserNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . orcidId = iprot . readString ( ) ; struct . setOrcidIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list47 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . phones = new ArrayList < String > ( _list47 . size ) ; String _elem48 ; for ( int _i49 = 0 ; _i49 < _list47 . size ; ++ _i49 ) { _elem48 = iprot . readString ( ) ; struct . phones . add ( _elem48 ) ; } } struct . setPhonesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . country = iprot . readString ( ) ; struct . setCountryIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list50 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . nationality = new ArrayList < String > ( _list50 . size ) ; String _elem51 ; for ( int _i52 = 0 ; _i52 < _list50 . size ; ++ _i52 ) { _elem51 = iprot . readString ( ) ; struct . nationality . add ( _elem51 ) ; } } struct . setNationalityIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . homeOrganization = iprot . readString ( ) ; struct . setHomeOrganizationIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . orginationAffiliation = iprot . readString ( ) ; struct . setOrginationAffiliationIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . comments = iprot . readString ( ) ; struct . setCommentsIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { { org . apache . thrift . protocol . TList _list53 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . labeledURI = new ArrayList < String > ( _list53 . size ) ; String _elem54 ; for ( int _i55 = 0 ; _i55 < _list53 . size ; ++ _i55 ) { _elem54 = iprot . readString ( ) ; struct . labeledURI . add ( _elem54 ) ; } } struct . setLabeledURIIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . gpgKey = iprot . readString ( ) ; struct . setGpgKeyIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . timeZone = iprot . readString ( ) ; struct . setTimeZoneIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { struct . nsfDemographics = new NSFDemographics ( ) ; struct . nsfDemographics . read ( iprot ) ; struct . setNsfDemographicsIsSet ( true ) ; } }",Smelly
" public void test ( ) { CAS cas = RutaTestUtils . processTestScript ( this . getClass ( ) ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 5 , 2 , ""Peter geht zur Arbeit"" , ""Peter zur Arbeit"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 6 , 2 , ""Peter geht zur Arbeit"" , ""Peter zur Arbeit"" ) ; RutaTestUtils . assertAnnotationsEquals ( cas , 7 , 2 , ""Peter geht zur Arbeit"" , ""zur Arbeit"" ) ; cas . release ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , ComputeResourcePreference struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . computeResourceId = iprot . readString ( ) ; struct . setComputeResourceIdIsSet ( true ) ; struct . overridebyAiravata = iprot . readBool ( ) ; struct . setOverridebyAiravataIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 8 ) ; if ( incoming . get ( 0 ) ) { struct . loginUserName = iprot . readString ( ) ; struct . setLoginUserNameIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . preferredJobSubmissionProtocol = org . apache . airavata . model . appcatalog . computeresource . JobSubmissionProtocol . findByValue ( iprot . readI32 ( ) ) ; struct . setPreferredJobSubmissionProtocolIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . preferredDataMovementProtocol = org . apache . airavata . model . data . movement . DataMovementProtocol . findByValue ( iprot . readI32 ( ) ) ; struct . setPreferredDataMovementProtocolIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . preferredBatchQueue = iprot . readString ( ) ; struct . setPreferredBatchQueueIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . scratchLocation = iprot . readString ( ) ; struct . setScratchLocationIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . allocationProjectNumber = iprot . readString ( ) ; struct . setAllocationProjectNumberIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . resourceSpecificCredentialStoreToken = iprot . readString ( ) ; struct . setResourceSpecificCredentialStoreTokenIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . usageReportingGatewayId = iprot . readString ( ) ; struct . setUsageReportingGatewayIdIsSet ( true ) ; } }",Smelly
 int getNumStaleDataNodes ( ) ;,No
" public void parseAndSkip ( ScriptParser sp , TokenStream currentStream ) throws ScriptException { }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public void close ( ) throws IOException { outputStream . close ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void visit ( SqlTable sqlNode ) { acc . add ( sqlNode ) ; },No
 public AsyncTask getTask ( String taskId ) { synchronized ( mutex ) { AsyncTask task = runningTasks . get ( taskId ) ; if ( task != null ) return task ; return finishedTasks . get ( taskId ) ; } },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public String toString ( ) { String path = getDirectory ( ) != null ? getDirectory ( ) . getAbsolutePath ( ) : ""DIRECTORY_NOT_SET"" ; return ""PListStore:["" + path + ""]"" ; }",No
 public void setConfigurable ( Boolean configurable ) { this . configurable = configurable ; },No
" private TProtocol getProtocol ( ThriftField field , ColumnIO columnIO , Events returnClause ) { TProtocol p ; final ThriftType type = field . getType ( ) ; switch ( type . getType ( ) ) { case STOP : case VOID : default : throw new UnsupportedOperationException ( ""can't convert type of "" + field ) ; case BOOL : case BYTE : case DOUBLE : case I16 : case I32 : case I64 : case STRING : p = new PrimitiveWriteProtocol ( ( PrimitiveColumnIO ) columnIO , returnClause ) ; break ; case STRUCT : p = new StructWriteProtocol ( ( GroupColumnIO ) columnIO , ( StructType ) type , returnClause ) ; break ; case MAP : p = new MapWriteProtocol ( ( GroupColumnIO ) columnIO , ( MapType ) type , returnClause ) ; break ; case SET : p = new ListWriteProtocol ( ( GroupColumnIO ) columnIO , ( ( SetType ) type ) . getValues ( ) , returnClause ) ; break ; case LIST : p = new ListWriteProtocol ( ( GroupColumnIO ) columnIO , ( ( ListType ) type ) . getValues ( ) , returnClause ) ; break ; case ENUM : p = new EnumWriteProtocol ( ( PrimitiveColumnIO ) columnIO , ( EnumType ) type , returnClause ) ; break ; } return p ; }",No
 public void close ( ) { ctx . close ( ) ; },Smelly
" private RexVisitorImpl < Void > rexVisitor ( final RelNode rel ) { return new RexVisitorImpl < Void > ( true ) { @ Override public Void visitFieldAccess ( RexFieldAccess fieldAccess ) { final RexNode ref = fieldAccess . getReferenceExpr ( ) ; if ( ref instanceof RexCorrelVariable ) { final RexCorrelVariable var = ( RexCorrelVariable ) ref ; if ( mapFieldAccessToCorVar . containsKey ( fieldAccess ) ) { mapRefRelToCorRef . put ( rel , mapFieldAccessToCorVar . get ( fieldAccess ) ) ; } else { final CorRef correlation = new CorRef ( var . id , fieldAccess . getField ( ) . getIndex ( ) , corrIdGenerator ++ ) ; mapFieldAccessToCorVar . put ( fieldAccess , correlation ) ; mapRefRelToCorRef . put ( rel , correlation ) ; } } return super . visitFieldAccess ( fieldAccess ) ; } @ Override public Void visitSubQuery ( RexSubQuery subQuery ) { subQuery . rel . accept ( CorelMapBuilder . this ) ; return super . visitSubQuery ( subQuery ) ; } } ; }",Smelly
" public void onMatch ( RelOptRuleCall call ) { final Sort sort = call . rel ( 0 ) ; final DruidQuery query = call . rel ( 1 ) ; if ( ! DruidQuery . isValidSignature ( query . signature ( ) + 'l' ) ) { return ; } if ( sort . offset != null && RexLiteral . intValue ( sort . offset ) != 0 ) { return ; } if ( query . getQueryType ( ) == QueryType . SCAN && ! RelOptUtil . isPureLimit ( sort ) ) { return ; } final RelNode newSort = sort . copy ( sort . getTraitSet ( ) , ImmutableList . of ( Util . last ( query . rels ) ) ) ; call . transformTo ( DruidQuery . extendQuery ( query , newSort ) ) ; }",Smelly
 public DatabaseMetaData getDatabaseMetaData ( ) { try { return conn . getMetaData ( ) ; } catch ( SQLException e ) { throw new TajoInternalError ( e ) ; } },No
" protected Text convertVertexToLine ( Vertex < I , V , E > vertex ) throws IOException { StringBuilder str = new StringBuilder ( ) ; if ( reverseOutput ) { str . append ( vertex . getValue ( ) . toString ( ) ) ; str . append ( delimiter ) ; str . append ( vertex . getId ( ) . toString ( ) ) ; } else { str . append ( vertex . getId ( ) . toString ( ) ) ; str . append ( delimiter ) ; str . append ( vertex . getValue ( ) . toString ( ) ) ; } return new Text ( str . toString ( ) ) ; }",Smelly
" public static boolean userLogin ( DispatchContext ctx , Map < String , ? > context ) { Debug . logVerbose ( ""Starting LDAP authentication"" , module ) ; Properties env = UtilProperties . getProperties ( ""jndiLdap"" ) ; String username = ( String ) context . get ( ""login.username"" ) ; if ( username == null ) { username = ( String ) context . get ( ""username"" ) ; } String password = ( String ) context . get ( ""login.password"" ) ; if ( password == null ) { password = ( String ) context . get ( ""password"" ) ; } String dn = null ; Delegator delegator = ctx . getDelegator ( ) ; boolean isServiceAuth = context . get ( ""isServiceAuth"" ) != null && ( ( Boolean ) context . get ( ""isServiceAuth"" ) ) . booleanValue ( ) ; GenericValue userLogin = null ; try { userLogin = delegator . findOne ( ""UserLogin"" , isServiceAuth , ""userLoginId"" , username ) ; } catch ( GenericEntityException e ) { Debug . logWarning ( e , """" , module ) ; } if ( userLogin != null ) { dn = userLogin . getString ( ""userLdapDn"" ) ; } if ( UtilValidate . isEmpty ( dn ) ) { String dnTemplate = ( String ) env . get ( ""ldap.dn.template"" ) ; if ( dnTemplate != null ) { dn = dnTemplate . replace ( ""%u"" , username ) ; } Debug . logVerbose ( ""Using DN template: "" + dn , module ) ; } else { Debug . logVerbose ( ""Using UserLogin.userLdapDn: "" + dn , module ) ; } env . put ( Context . SECURITY_PRINCIPAL , dn ) ; env . put ( Context . SECURITY_CREDENTIALS , password ) ; try { DirContext ldapCtx = new InitialDirContext ( env ) ; ldapCtx . close ( ) ; } catch ( NamingException e ) { Debug . logVerbose ( ""LDAP authentication failed: "" + e . getMessage ( ) , module ) ; return false ; } Debug . logVerbose ( ""LDAP authentication succeeded"" , module ) ; if ( ! ""true"" . equals ( env . get ( ""ldap.synchronize.passwords"" ) ) ) { return true ; } if ( userLogin != null ) { boolean useEncryption = ""true"" . equals ( UtilProperties . getPropertyValue ( ""security.properties"" , ""password.encrypt"" ) ) ; String currentPassword = userLogin . getString ( ""currentPassword"" ) ; boolean samePassword ; if ( useEncryption ) { samePassword = HashCrypt . comparePassword ( currentPassword , LoginServices . getHashType ( ) , password ) ; } else { samePassword = currentPassword . equals ( password ) ; } if ( ! samePassword ) { Debug . logVerbose ( ""Starting password synchronization"" , module ) ; userLogin . set ( ""currentPassword"" , useEncryption ? HashCrypt . cryptUTF8 ( LoginServices . getHashType ( ) , null , password ) : password , false ) ; Transaction parentTx = null ; boolean beganTransaction = false ; try { try { parentTx = TransactionUtil . suspend ( ) ; } catch ( GenericTransactionException e ) { Debug . logError ( e , ""Could not suspend transaction: "" + e . getMessage ( ) , module ) ; } try { beganTransaction = TransactionUtil . begin ( ) ; userLogin . store ( ) ; } catch ( GenericEntityException e ) { Debug . logError ( e , ""Error saving UserLogin"" , module ) ; try { TransactionUtil . rollback ( beganTransaction , ""Error saving UserLogin"" , e ) ; } catch ( GenericTransactionException e2 ) { Debug . logError ( e2 , ""Could not rollback nested transaction: "" + e2 . getMessage ( ) , module ) ; } } finally { try { TransactionUtil . commit ( beganTransaction ) ; Debug . logVerbose ( ""Password synchronized"" , module ) ; } catch ( GenericTransactionException e ) { Debug . logError ( e , ""Could not commit nested transaction: "" + e . getMessage ( ) , module ) ; } } } finally { if ( parentTx != null ) { try { TransactionUtil . resume ( parentTx ) ; Debug . logVerbose ( ""Resumed the parent transaction."" , module ) ; } catch ( GenericTransactionException e ) { Debug . logError ( e , ""Could not resume parent nested transaction: "" + e . getMessage ( ) , module ) ; } } } } } return true ; }",Smelly
" private void configureClient ( final FileSystemOptions fileSystemOptions , final C client ) { final String key = builder . getEntryParser ( fileSystemOptions ) ; if ( key != null ) { final FTPClientConfig config = new FTPClientConfig ( key ) ; final String serverLanguageCode = builder . getServerLanguageCode ( fileSystemOptions ) ; if ( serverLanguageCode != null ) { config . setServerLanguageCode ( serverLanguageCode ) ; } final String defaultDateFormat = builder . getDefaultDateFormat ( fileSystemOptions ) ; if ( defaultDateFormat != null ) { config . setDefaultDateFormatStr ( defaultDateFormat ) ; } final String recentDateFormat = builder . getRecentDateFormat ( fileSystemOptions ) ; if ( recentDateFormat != null ) { config . setRecentDateFormatStr ( recentDateFormat ) ; } final String serverTimeZoneId = builder . getServerTimeZoneId ( fileSystemOptions ) ; if ( serverTimeZoneId != null ) { config . setServerTimeZoneId ( serverTimeZoneId ) ; } final String [ ] shortMonthNames = builder . getShortMonthNames ( fileSystemOptions ) ; if ( shortMonthNames != null ) { final StringBuilder shortMonthNamesStr = new StringBuilder ( BUFSZ ) ; for ( final String shortMonthName : shortMonthNames ) { if ( shortMonthNamesStr . length ( ) > 0 ) { shortMonthNamesStr . append ( ""|"" ) ; } shortMonthNamesStr . append ( shortMonthName ) ; } config . setShortMonthNames ( shortMonthNamesStr . toString ( ) ) ; } client . configure ( config ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , TConstraintViolationSummary struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 4 ) ; if ( incoming . get ( 0 ) ) { struct . constrainClass = iprot . readString ( ) ; struct . setConstrainClassIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . violationCode = iprot . readI16 ( ) ; struct . setViolationCodeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . violationDescription = iprot . readString ( ) ; struct . setViolationDescriptionIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . numberOfViolatingMutations = iprot . readI64 ( ) ; struct . setNumberOfViolatingMutationsIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , RDF_Triple struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . S = new RDF_Term ( ) ; struct . S . read ( iprot ) ; struct . setSIsSet ( true ) ; struct . P = new RDF_Term ( ) ; struct . P . read ( iprot ) ; struct . setPIsSet ( true ) ; struct . O = new RDF_Term ( ) ; struct . O . read ( iprot ) ; struct . setOIsSet ( true ) ; }",Smelly
 public long getTimestamp ( ) { return timestamp ; },No
" public void setSafeValue ( ObjectInspector oi , Object hiveFieldValue , ValueVector outputVV , int outputIndex ) { final Text value = ( ( HiveCharObjectInspector ) oi ) . getPrimitiveWritableObject ( hiveFieldValue ) . getStrippedValue ( ) ; final byte [ ] valueBytes = value . getBytes ( ) ; final int valueLen = value . getLength ( ) ; ( ( NullableVarCharVector ) outputVV ) . getMutator ( ) . setSafe ( outputIndex , valueBytes , 0 , valueLen ) ; }",No
" protected SpatialArguments extractObjectArguments ( Node predicate , PropFuncArg object , SRSInfo indexSRSInfo ) { try { List < Node > objectArgs = object . getArgList ( ) ; if ( objectArgs . size ( ) < 3 ) { throw new ExprEvalException ( FmtUtils . stringForNode ( predicate ) + "": Minimum of 3 arguments."" ) ; } else if ( objectArgs . size ( ) > 5 ) { throw new ExprEvalException ( FmtUtils . stringForNode ( predicate ) + "": Maximum of 5 arguments."" ) ; } Node lat = objectArgs . get ( LAT_POS ) ; Node lon = objectArgs . get ( LON_POS ) ; NodeValue radiusNode = NodeValue . makeNode ( objectArgs . get ( RADIUS_POS ) ) ; if ( lat . isVariable ( ) || lon . isVariable ( ) || ! radiusNode . isDouble ( ) ) { throw new ExprEvalException ( ""Arguments are not all concrete: "" + FmtUtils . stringForNode ( lat ) + "", "" + FmtUtils . stringForNode ( lon ) + "", "" + FmtUtils . stringForNode ( radiusNode . asNode ( ) ) ) ; } radius = radiusNode . getDouble ( ) ; if ( objectArgs . size ( ) > UNITS_POS ) { Node unitsNode = objectArgs . get ( UNITS_POS ) ; if ( ! unitsNode . isURI ( ) ) { throw new ExprEvalException ( ""Not a URI: "" + FmtUtils . stringForNode ( unitsNode ) ) ; } unitsURI = unitsNode . getURI ( ) ; } else { unitsURI = DEFAULT_UNITS ; } int limit ; if ( objectArgs . size ( ) > LIMIT_POS ) { NodeValue limitNode = NodeValue . makeNode ( objectArgs . get ( LIMIT_POS ) ) ; if ( ! limitNode . isInteger ( ) ) { throw new ExprEvalException ( ""Not an integer: "" + FmtUtils . stringForNode ( limitNode . getNode ( ) ) ) ; } limit = limitNode . getInteger ( ) . intValue ( ) ; } else { limit = DEFAULT_LIMIT ; } GeometryWrapper geometryWrapper = ConvertLatLon . toGeometryWrapper ( lat , lon ) ; SearchEnvelope searchEnvelope = SearchEnvelope . build ( geometryWrapper , indexSRSInfo , radius , unitsURI ) ; return new SpatialArguments ( limit , geometryWrapper , searchEnvelope ) ; } catch ( DatatypeFormatException ex ) { throw new ExprEvalException ( ex . getMessage ( ) , ex ) ; } }",Smelly
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . group ( ) . by ( T . label ) , __ . group ( ) . by ( T . label ) . by ( ""name"" ) , __ . group ( ) . by ( T . label ) . by ( __ . values ( ""name"" ) . count ( ) ) ) ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 public String getProjectGroupName ( ) throws ContinuumException { if ( StringUtils . isEmpty ( projectGroupName ) ) { projectGroupName = getContinuum ( ) . getProjectGroup ( projectGroupId ) . getName ( ) ; } return projectGroupName ; },No
 void declareOutputFields ( OutputFieldsDeclarer declarer ) ;,No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
 public double cardinality ( ) { return values . size ( ) + ( nullCount > 0 ? 1 : 0 ) ; },Smelly
 public NodeValue exec ( NodeValue v ) { return NodeValue . makeDouble ( Math . asin ( v . getDouble ( ) ) ) ; },No
 public SecurityOperation getSecurityOperation ( ) { return security ; },Smelly
 public int addInteger ( int var ) { int index = lookupInt ( var ) ; if ( index == - 1 ) { ensureCapacity ( ) ; items [ count ] = new Constant_Integer ( var ) ; index = count ; count ++ ; } return index ; },Smelly
 private void push ( ElementGroup el ) { stack . push ( el ) ; },Smelly
" public void testImmutable ( ) { HRegionInfo hri = new HRegionInfo ( TableName . valueOf ( name . getMethodName ( ) ) ) ; ImmutableHRegionInfo immutableHri = new ImmutableHRegionInfo ( hri ) ; TEST_FUNCTIONS . forEach ( f -> { try { f . accept ( immutableHri ) ; fail ( ""ImmutableHRegionInfo can't be modified !!!"" ) ; } catch ( UnsupportedOperationException e ) { } } ) ; }",No
 public int getBufferPosition ( ) { return this . bufferPosition ; },No
" void add ( int streamId , Object id , List < Object > tuple ) ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ApplicationInterfaceDescription struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . applicationInterfaceId = iprot . readString ( ) ; struct . setApplicationInterfaceIdIsSet ( true ) ; struct . applicationName = iprot . readString ( ) ; struct . setApplicationNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . applicationDescription = iprot . readString ( ) ; struct . setApplicationDescriptionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list15 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . applicationModules = new ArrayList < String > ( _list15 . size ) ; String _elem16 ; for ( int _i17 = 0 ; _i17 < _list15 . size ; ++ _i17 ) { _elem16 = iprot . readString ( ) ; struct . applicationModules . add ( _elem16 ) ; } } struct . setApplicationModulesIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list18 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . applicationInputs = new ArrayList < org . apache . airavata . model . application . io . InputDataObjectType > ( _list18 . size ) ; org . apache . airavata . model . application . io . InputDataObjectType _elem19 ; for ( int _i20 = 0 ; _i20 < _list18 . size ; ++ _i20 ) { _elem19 = new org . apache . airavata . model . application . io . InputDataObjectType ( ) ; _elem19 . read ( iprot ) ; struct . applicationInputs . add ( _elem19 ) ; } } struct . setApplicationInputsIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list21 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . applicationOutputs = new ArrayList < org . apache . airavata . model . application . io . OutputDataObjectType > ( _list21 . size ) ; org . apache . airavata . model . application . io . OutputDataObjectType _elem22 ; for ( int _i23 = 0 ; _i23 < _list21 . size ; ++ _i23 ) { _elem22 = new org . apache . airavata . model . application . io . OutputDataObjectType ( ) ; _elem22 . read ( iprot ) ; struct . applicationOutputs . add ( _elem22 ) ; } } struct . setApplicationOutputsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . archiveWorkingDirectory = iprot . readBool ( ) ; struct . setArchiveWorkingDirectoryIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . hasOptionalFileInputs = iprot . readBool ( ) ; struct . setHasOptionalFileInputsIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void testRegistration ( ) throws Exception { RegisterHandler handler = new RegisterHandler ( ) ; Future < BeamFnApi . InstructionResponse > responseFuture = executor . submit ( ( ) -> { Thread . sleep ( 100 ) ; return handler . register ( REGISTER_REQUEST ) . build ( ) ; } ) ; assertEquals ( REGISTER_REQUEST . getRegister ( ) . getProcessBundleDescriptor ( 0 ) , handler . getById ( ""1L"" ) ) ; assertEquals ( REGISTER_REQUEST . getRegister ( ) . getProcessBundleDescriptor ( 1 ) , handler . getById ( ""2L"" ) ) ; assertEquals ( REGISTER_REQUEST . getRegister ( ) . getProcessBundleDescriptor ( 0 ) . getCodersOrThrow ( ""10L"" ) , handler . getById ( ""10L"" ) ) ; assertEquals ( REGISTER_REQUEST . getRegister ( ) . getProcessBundleDescriptor ( 1 ) . getCodersOrThrow ( ""20L"" ) , handler . getById ( ""20L"" ) ) ; assertEquals ( REGISTER_RESPONSE , responseFuture . get ( ) ) ; }",Smelly
" public void virAttrCache ( ) { try { infoResultManager . printVirtualAttributeCacheClass ( platformInfo . getVirAttrCache ( ) ) ; } catch ( final Exception ex ) { LOG . error ( ""Information error"" , ex ) ; infoResultManager . genericError ( ex . getMessage ( ) ) ; } }",No
" public void testDAGFinishedRecoveryError ( ) throws Exception { TezConfiguration tezconf = new TezConfiguration ( defaultConf ) ; MockTezClient tezClient = new MockTezClient ( ""testMockAM"" , tezconf , true , null , null , null , null ) ; tezClient . start ( ) ; MockDAGAppMaster mockApp = tezClient . getLocalClient ( ) . getMockApp ( ) ; mockApp . recoveryFatalError = true ; MockContainerLauncher mockLauncher = mockApp . getContainerLauncher ( ) ; mockLauncher . startScheduling ( true ) ; DAG dag = DAG . create ( ""test"" ) ; Vertex vA = Vertex . create ( ""A"" , ProcessorDescriptor . create ( ""Proc.class"" ) , 5 ) ; dag . addVertex ( vA ) ; DAGClient dagClient = tezClient . submitDAG ( dag ) ; dagClient . waitForCompletion ( ) ; while ( ! mockApp . getShutdownHandler ( ) . wasShutdownInvoked ( ) ) { Thread . sleep ( 100 ) ; } Assert . assertEquals ( DAGState . SUCCEEDED , mockApp . getContext ( ) . getCurrentDAG ( ) . getState ( ) ) ; Assert . assertEquals ( DAGAppMasterState . FAILED , mockApp . getState ( ) ) ; Assert . assertTrue ( StringUtils . join ( mockApp . getDiagnostics ( ) , "","" ) . contains ( ""Recovery had a fatal error, shutting down session after"" + "" DAG completion"" ) ) ; }",Smelly
" public Map < VirSchema , List < String > > getValues ( final Any < ? > any , final Membership < ? > membership ) { return getValues ( any , anyUtilsFactory . getInstance ( any ) . getAllowedSchemas ( any , VirSchema . class ) . getForMembership ( membership . getRightEnd ( ) ) ) ; }",Smelly
" public String toString ( ) { return ""MajorVersion{"" + ""value="" + Arrays . toString ( value ) + ""} "" + super . toString ( ) ; }",No
 private void itemPermissionSelected ( ) { ItemPermissionWrapper itemPermissionWrapper = getSelectedItemPermissionWrapper ( ) ; if ( itemPermissionWrapper == null ) { editButton . setEnabled ( false ) ; deleteButton . setEnabled ( false ) ; } else { editButton . setEnabled ( true ) ; deleteButton . setEnabled ( true ) ; } },No
" public void txn_threaded_03 ( ) { Transactional tx = DatasetGraphFactory . createTxnMem ( ) ; ThreadAction a = ThreadTxn . threadTxnWriteAbort ( tx , ( ) -> { } ) ; Txn . exec ( tx , TxnType . READ_PROMOTE , ( ) -> { a . run ( ) ; boolean b = tx . promote ( ) ; assertTrue ( b ) ; assertEquals ( ReadWrite . WRITE , tx . transactionMode ( ) ) ; } ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" protected ClientCsdlIsOf doDeserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { final ClientCsdlIsOf isof = new ClientCsdlIsOf ( ) ; for ( ; jp . getCurrentToken ( ) != JsonToken . END_OBJECT ; jp . nextToken ( ) ) { final JsonToken token = jp . getCurrentToken ( ) ; if ( token == JsonToken . FIELD_NAME ) { if ( ""Type"" . equals ( jp . getCurrentName ( ) ) ) { isof . setType ( jp . nextTextValue ( ) ) ; } else if ( ""Annotation"" . equals ( jp . getCurrentName ( ) ) ) { isof . getAnnotations ( ) . add ( jp . readValueAs ( ClientCsdlAnnotation . class ) ) ; } else if ( ""MaxLength"" . equals ( jp . getCurrentName ( ) ) ) { final String maxLenght = jp . nextTextValue ( ) ; isof . setMaxLength ( maxLenght . equalsIgnoreCase ( ""max"" ) ? Integer . MAX_VALUE : Integer . valueOf ( maxLenght ) ) ; } else if ( ""Precision"" . equals ( jp . getCurrentName ( ) ) ) { isof . setPrecision ( Integer . valueOf ( jp . nextTextValue ( ) ) ) ; } else if ( ""Scale"" . equals ( jp . getCurrentName ( ) ) ) { final String scale = jp . nextTextValue ( ) ; isof . setScale ( scale . equalsIgnoreCase ( ""variable"" ) ? 0 : Integer . valueOf ( scale ) ) ; } else if ( ""SRID"" . equals ( jp . getCurrentName ( ) ) ) { final String srid = jp . nextTextValue ( ) ; if ( srid != null ) { isof . setSrid ( SRID . valueOf ( srid ) ) ; } } else { isof . setValue ( jp . readValueAs ( ClientCsdlDynamicExpression . class ) ) ; } } } return isof ; }",Smelly
 public void setId ( long id ) { this . cId = id ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public int compare ( KafkaSpoutMessageId m1 , KafkaSpoutMessageId m2 ) { return m1 . offset ( ) < m2 . offset ( ) ? - 1 : m1 . offset ( ) == m2 . offset ( ) ? 0 : 1 ; }",Smelly
 void close ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void testReadRecords ( ) throws IOException , InterruptedException , ClassNotFoundException { Schema keyValueSchema = AvroKeyValue . getSchema ( Schema . create ( Schema . Type . INT ) , Schema . create ( Schema . Type . STRING ) ) ; AvroKeyValue < Integer , CharSequence > record1 = new AvroKeyValue < > ( new GenericData . Record ( keyValueSchema ) ) ; record1 . setKey ( 1 ) ; record1 . setValue ( ""apple banana carrot"" ) ; AvroFiles . createFile ( new File ( mTempDir . getRoot ( ) , ""combineSplit00.avro"" ) , keyValueSchema , record1 . get ( ) ) ; AvroKeyValue < Integer , CharSequence > record2 = new AvroKeyValue < > ( new GenericData . Record ( keyValueSchema ) ) ; record2 . setKey ( 2 ) ; record2 . setValue ( ""apple banana"" ) ; AvroFiles . createFile ( new File ( mTempDir . getRoot ( ) , ""combineSplit01.avro"" ) , keyValueSchema , record2 . get ( ) ) ; Job job = Job . getInstance ( ) ; FileInputFormat . setInputPaths ( job , new Path ( mTempDir . getRoot ( ) . getAbsolutePath ( ) ) ) ; job . setInputFormatClass ( CombineAvroKeyValueFileInputFormat . class ) ; AvroJob . setInputKeySchema ( job , Schema . create ( Schema . Type . INT ) ) ; AvroJob . setInputValueSchema ( job , Schema . create ( Schema . Type . STRING ) ) ; AvroJob . setMapOutputKeySchema ( job , Schema . create ( Schema . Type . INT ) ) ; AvroJob . setMapOutputValueSchema ( job , Schema . create ( Schema . Type . STRING ) ) ; job . setNumReduceTasks ( 0 ) ; job . setOutputKeyClass ( AvroKey . class ) ; job . setOutputValueClass ( AvroValue . class ) ; job . setOutputFormatClass ( AvroKeyValueOutputFormat . class ) ; Path outputPath = new Path ( mTempDir . getRoot ( ) . getPath ( ) , ""out"" ) ; FileOutputFormat . setOutputPath ( job , outputPath ) ; assertTrue ( job . waitForCompletion ( true ) ) ; File avroFile = new File ( outputPath . toString ( ) , ""part-m-00000.avro"" ) ; DatumReader < GenericRecord > datumReader = new SpecificDatumReader < > ( AvroKeyValue . getSchema ( Schema . create ( Schema . Type . INT ) , Schema . create ( Schema . Type . STRING ) ) ) ; DataFileReader < GenericRecord > avroFileReader = new DataFileReader < > ( avroFile , datumReader ) ; assertTrue ( avroFileReader . hasNext ( ) ) ; while ( avroFileReader . hasNext ( ) ) { AvroKeyValue < Integer , CharSequence > mapRecord1 = new AvroKeyValue < > ( avroFileReader . next ( ) ) ; assertNotNull ( mapRecord1 . get ( ) ) ; if ( mapRecord1 . getKey ( ) . intValue ( ) == 1 ) { assertEquals ( ""apple banana carrot"" , mapRecord1 . getValue ( ) . toString ( ) ) ; } else if ( mapRecord1 . getKey ( ) . intValue ( ) == 2 ) { assertEquals ( ""apple banana"" , mapRecord1 . getValue ( ) . toString ( ) ) ; } else { fail ( ""Unknown key "" + mapRecord1 . getKey ( ) . intValue ( ) ) ; } } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public String toString ( ) { return _id . toString ( ) ; },No
" public String invoke ( Event event , RequestMap requestMap , HttpServletRequest request , HttpServletResponse response ) throws EventHandlerException { try { Map < String , Object > context = new HashMap < String , Object > ( ) ; context . put ( ""request"" , request ) ; context . put ( ""response"" , response ) ; HttpSession session = request . getSession ( ) ; context . put ( ""session"" , session ) ; context . put ( ""dispatcher"" , request . getAttribute ( ""dispatcher"" ) ) ; context . put ( ""delegator"" , request . getAttribute ( ""delegator"" ) ) ; context . put ( ""security"" , request . getAttribute ( ""security"" ) ) ; context . put ( ""locale"" , UtilHttp . getLocale ( request ) ) ; context . put ( ""timeZone"" , UtilHttp . getTimeZone ( request ) ) ; context . put ( ""userLogin"" , session . getAttribute ( ""userLogin"" ) ) ; context . put ( ScriptUtil . PARAMETERS_KEY , UtilHttp . getCombinedMap ( request , UtilMisc . toSet ( ""delegator"" , ""dispatcher"" , ""security"" , ""locale"" , ""timeZone"" , ""userLogin"" ) ) ) ; Object result = null ; try { ScriptContext scriptContext = ScriptUtil . createScriptContext ( context , protectedKeys ) ; ScriptHelper scriptHelper = ( ScriptHelper ) scriptContext . getAttribute ( ScriptUtil . SCRIPT_HELPER_KEY ) ; if ( scriptHelper != null ) { context . put ( ScriptUtil . SCRIPT_HELPER_KEY , scriptHelper ) ; } Script script = InvokerHelper . createScript ( GroovyUtil . getScriptClassFromLocation ( event . path , groovyClassLoader ) , GroovyUtil . getBinding ( context ) ) ; if ( UtilValidate . isEmpty ( event . invoke ) ) { result = script . run ( ) ; } else { result = script . invokeMethod ( event . invoke , EMPTY_ARGS ) ; } if ( result == null ) { result = scriptContext . getAttribute ( ScriptUtil . RESULT_KEY ) ; } } catch ( Exception e ) { Debug . logWarning ( e , ""Error running event "" + event . path + "": "" , module ) ; request . setAttribute ( ""_ERROR_MESSAGE_"" , e . getMessage ( ) ) ; return ""error"" ; } if ( result instanceof Map ) { Map resultMap = ( Map ) result ; String successMessage = ( String ) resultMap . get ( ""_event_message_"" ) ; if ( successMessage != null ) { request . setAttribute ( ""_EVENT_MESSAGE_"" , successMessage ) ; } String errorMessage = ( String ) resultMap . get ( ""_error_message_"" ) ; if ( errorMessage != null ) { request . setAttribute ( ""_ERROR_MESSAGE_"" , errorMessage ) ; } return ( String ) resultMap . get ( ""_response_code_"" ) ; } if ( result != null && ! ( result instanceof String ) ) { throw new EventHandlerException ( ""Event did not return a String result, it returned a "" + result . getClass ( ) . getName ( ) ) ; } return ( String ) result ; } catch ( Exception e ) { throw new EventHandlerException ( ""Groovy Event Error"" , e ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 DataT getCumulative ( ) ;,No
" public Edge < I , NullWritable > getCurrentEdge ( ) throws IOException , InterruptedException { HCatRecord record = getRecordReader ( ) . getCurrentValue ( ) ; return EdgeFactory . create ( getTargetVertexId ( record ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public Hamlet del ( String cdata ) { return del ( ) . _ ( cdata ) . _ ( ) ; },No
" public void testSelfCollections ( ) { OpenJPAEntityManager pm = ( OpenJPAEntityManager ) currentEntityManager ( ) ; MultiA a1 = ( MultiA ) pm . getObjectId ( a1oid ) ; assertEquals ( 2 , a1 . getMultiCs ( ) . size ( ) ) ; MultiA a2 = ( MultiA ) pm . getObjectId ( a2oid ) ; assertEquals ( 2 , a2 . getMultiCs ( ) . size ( ) ) ; assertEquals ( a1 . getMultiCs ( ) , a2 . getMultiCs ( ) ) ; MultiA a3 = ( MultiA ) pm . getObjectId ( a3oid ) ; assertEquals ( 2 , a3 . getMultiCs ( ) . size ( ) ) ; MultiA a4 = ( MultiA ) pm . getObjectId ( a4oid ) ; assertEquals ( 2 , a4 . getMultiCs ( ) . size ( ) ) ; assertEquals ( a3 . getMultiCs ( ) , a4 . getMultiCs ( ) ) ; MultiC c1 = ( MultiC ) pm . getObjectId ( c1oid ) ; assertEquals ( 2 , c1 . getMultiAs ( ) . size ( ) ) ; MultiC c2 = ( MultiC ) pm . getObjectId ( c2oid ) ; assertEquals ( 2 , c2 . getMultiAs ( ) . size ( ) ) ; assertEquals ( c1 . getMultiAs ( ) , c2 . getMultiAs ( ) ) ; MultiC c3 = ( MultiC ) pm . getObjectId ( c3oid ) ; assertEquals ( 2 , c3 . getMultiAs ( ) . size ( ) ) ; MultiC c4 = ( MultiC ) pm . getObjectId ( c4oid ) ; assertEquals ( 2 , c4 . getMultiAs ( ) . size ( ) ) ; assertEquals ( c3 . getMultiAs ( ) , c4 . getMultiAs ( ) ) ; assertTrue ( a1 . getMultiCs ( ) . contains ( c1 ) ) ; assertTrue ( a1 . getMultiCs ( ) . contains ( c2 ) ) ; assertTrue ( ! a1 . getMultiCs ( ) . contains ( c3 ) ) ; assertTrue ( ! a1 . getMultiCs ( ) . contains ( c4 ) ) ; assertTrue ( a2 . getMultiCs ( ) . contains ( c1 ) ) ; assertTrue ( a2 . getMultiCs ( ) . contains ( c2 ) ) ; assertTrue ( ! a2 . getMultiCs ( ) . contains ( c3 ) ) ; assertTrue ( ! a2 . getMultiCs ( ) . contains ( c4 ) ) ; assertTrue ( ! a3 . getMultiCs ( ) . contains ( c1 ) ) ; assertTrue ( ! a3 . getMultiCs ( ) . contains ( c2 ) ) ; assertTrue ( a3 . getMultiCs ( ) . contains ( c3 ) ) ; assertTrue ( a3 . getMultiCs ( ) . contains ( c4 ) ) ; assertTrue ( ! a4 . getMultiCs ( ) . contains ( c1 ) ) ; assertTrue ( ! a4 . getMultiCs ( ) . contains ( c2 ) ) ; assertTrue ( a4 . getMultiCs ( ) . contains ( c3 ) ) ; assertTrue ( a4 . getMultiCs ( ) . contains ( c4 ) ) ; assertTrue ( c1 . getMultiAs ( ) . contains ( a1 ) ) ; assertTrue ( c1 . getMultiAs ( ) . contains ( a2 ) ) ; assertTrue ( ! c1 . getMultiAs ( ) . contains ( a3 ) ) ; assertTrue ( ! c1 . getMultiAs ( ) . contains ( a4 ) ) ; assertTrue ( c2 . getMultiAs ( ) . contains ( a1 ) ) ; assertTrue ( c2 . getMultiAs ( ) . contains ( a2 ) ) ; assertTrue ( ! c2 . getMultiAs ( ) . contains ( a3 ) ) ; assertTrue ( ! c2 . getMultiAs ( ) . contains ( a4 ) ) ; assertTrue ( ! c3 . getMultiAs ( ) . contains ( a1 ) ) ; assertTrue ( ! c3 . getMultiAs ( ) . contains ( a2 ) ) ; assertTrue ( c3 . getMultiAs ( ) . contains ( a3 ) ) ; assertTrue ( c3 . getMultiAs ( ) . contains ( a4 ) ) ; assertTrue ( ! c4 . getMultiAs ( ) . contains ( a1 ) ) ; assertTrue ( ! c4 . getMultiAs ( ) . contains ( a2 ) ) ; assertTrue ( c4 . getMultiAs ( ) . contains ( a3 ) ) ; assertTrue ( c4 . getMultiAs ( ) . contains ( a4 ) ) ; pm . close ( ) ; }",Smelly
" public static Map < String , Object > processExtendSubscriptionByOrder ( DispatchContext dctx , Map < String , ? extends Object > context ) throws GenericServiceException { Delegator delegator = dctx . getDelegator ( ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; Map < String , Object > subContext = UtilMisc . makeMapWritable ( context ) ; String orderId = ( String ) context . get ( ""orderId"" ) ; Locale locale = ( Locale ) context . get ( ""locale"" ) ; Debug . logInfo ( ""In processExtendSubscriptionByOrder service with orderId: "" + orderId , module ) ; GenericValue orderHeader = null ; try { List < GenericValue > orderRoleList = delegator . findByAnd ( ""OrderRole"" , UtilMisc . toMap ( ""orderId"" , orderId , ""roleTypeId"" , ""END_USER_CUSTOMER"" ) , null , false ) ; if ( orderRoleList . size ( ) > 0 ) { GenericValue orderRole = orderRoleList . get ( 0 ) ; String partyId = ( String ) orderRole . get ( ""partyId"" ) ; subContext . put ( ""partyId"" , partyId ) ; } else { return ServiceUtil . returnFailure ( UtilProperties . getMessage ( resourceOrderError , ""OrderErrorCannotGetOrderRoleEntity"" , UtilMisc . toMap ( ""itemMsgInfo"" , orderId ) , locale ) ) ; } orderHeader = delegator . findOne ( ""OrderHeader"" , UtilMisc . toMap ( ""orderId"" , orderId ) , false ) ; if ( orderHeader == null ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resourceOrderError , ""OrderErrorNoValidOrderHeaderFoundForOrderId"" , UtilMisc . toMap ( ""orderId"" , orderId ) , locale ) ) ; } Timestamp orderCreatedDate = ( Timestamp ) orderHeader . get ( ""orderDate"" ) ; subContext . put ( ""orderCreatedDate"" , orderCreatedDate ) ; List < GenericValue > orderItemList = orderHeader . getRelated ( ""OrderItem"" , null , null , false ) ; for ( GenericValue orderItem : orderItemList ) { BigDecimal qty = orderItem . getBigDecimal ( ""quantity"" ) ; String productId = orderItem . getString ( ""productId"" ) ; if ( UtilValidate . isEmpty ( productId ) ) { continue ; } List < GenericValue > productSubscriptionResourceList = delegator . findByAnd ( ""ProductSubscriptionResource"" , UtilMisc . toMap ( ""productId"" , productId ) , null , true ) ; List < GenericValue > productSubscriptionResourceListFiltered = EntityUtil . filterByDate ( productSubscriptionResourceList , true ) ; if ( productSubscriptionResourceListFiltered . size ( ) > 0 ) { subContext . put ( ""subscriptionTypeId"" , ""PRODUCT_SUBSCR"" ) ; subContext . put ( ""productId"" , productId ) ; subContext . put ( ""orderId"" , orderId ) ; subContext . put ( ""orderItemSeqId"" , orderItem . get ( ""orderItemSeqId"" ) ) ; subContext . put ( ""inventoryItemId"" , orderItem . get ( ""fromInventoryItemId"" ) ) ; subContext . put ( ""quantity"" , Integer . valueOf ( qty . intValue ( ) ) ) ; Map < String , Object > ctx = dctx . getModelService ( ""processExtendSubscriptionByProduct"" ) . makeValid ( subContext , ModelService . IN_PARAM ) ; Map < String , Object > thisResult = dispatcher . runSync ( ""processExtendSubscriptionByProduct"" , ctx ) ; if ( ServiceUtil . isError ( thisResult ) ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , ""ProductSubscriptionByOrderError"" , UtilMisc . toMap ( ""orderId"" , orderId ) , locale ) , null , null , thisResult ) ; } } } } catch ( GenericEntityException e ) { Debug . logError ( e . toString ( ) , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } return ServiceUtil . returnSuccess ( ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testSuccess ( ) throws Exception { final TestRunner runner = TestRunners . newTestRunner ( PutWebSocket . class ) ; final WebSocketService service = spy ( WebSocketService . class ) ; final WebSocketSession webSocketSession = getWebSocketSession ( ) ; final String serviceId = ""ws-service"" ; final String endpointId = ""client-1"" ; final String textMessageFromServer = ""message from server."" ; when ( service . getIdentifier ( ) ) . thenReturn ( serviceId ) ; doAnswer ( invocation -> { final SendMessage sendMessage = invocation . getArgumentAt ( 2 , SendMessage . class ) ; sendMessage . send ( webSocketSession ) ; return null ; } ) . when ( service ) . sendMessage ( anyString ( ) , anyString ( ) , any ( SendMessage . class ) ) ; runner . addControllerService ( serviceId , service ) ; runner . enableControllerService ( service ) ; runner . setProperty ( PutWebSocket . PROP_WS_MESSAGE_TYPE , ""${"" + ATTR_WS_MESSAGE_TYPE + ""}"" ) ; final Map < String , String > attributes = new HashMap < > ( ) ; attributes . put ( ATTR_WS_CS_ID , serviceId ) ; attributes . put ( ATTR_WS_ENDPOINT_ID , endpointId ) ; attributes . put ( ATTR_WS_SESSION_ID , webSocketSession . getSessionId ( ) ) ; attributes . put ( ATTR_WS_MESSAGE_TYPE , WebSocketMessage . Type . TEXT . name ( ) ) ; runner . enqueue ( textMessageFromServer , attributes ) ; attributes . put ( ATTR_WS_MESSAGE_TYPE , WebSocketMessage . Type . BINARY . name ( ) ) ; runner . enqueue ( textMessageFromServer . getBytes ( ) , attributes ) ; runner . run ( 2 ) ; final List < MockFlowFile > succeededFlowFiles = runner . getFlowFilesForRelationship ( PutWebSocket . REL_SUCCESS ) ; assertEquals ( 2 , succeededFlowFiles . size ( ) ) ; assertFlowFile ( webSocketSession , serviceId , endpointId , succeededFlowFiles . get ( 0 ) , WebSocketMessage . Type . TEXT ) ; assertFlowFile ( webSocketSession , serviceId , endpointId , succeededFlowFiles . get ( 1 ) , WebSocketMessage . Type . BINARY ) ; final List < MockFlowFile > failedFlowFiles = runner . getFlowFilesForRelationship ( PutWebSocket . REL_FAILURE ) ; assertEquals ( 0 , failedFlowFiles . size ( ) ) ; final List < ProvenanceEventRecord > provenanceEvents = runner . getProvenanceEvents ( ) ; assertEquals ( 2 , provenanceEvents . size ( ) ) ; }",Smelly
" public void testIsEncrypted ( ) { PatternColumnMapper mapper = new PatternColumnMapper ( ""^bla_"" ) ; assertTrue ( mapper . isEncrypted ( new DbAttribute ( ""bla_"" ) ) ) ; assertTrue ( mapper . isEncrypted ( new DbAttribute ( ""bla_x"" ) ) ) ; assertFalse ( mapper . isEncrypted ( new DbAttribute ( ""_bla_x"" ) ) ) ; assertFalse ( mapper . isEncrypted ( new DbAttribute ( ""nnn"" ) ) ) ; }",Smelly
" public void testMastercardUsingSeparators ( ) { String MASTERCARD_REGEX_SEP = ""^(5[1-5]\\d{2})(?:[- ])?(\\d{4})(?:[- ])?(\\d{4})(?:[- ])?(\\d{4})$"" ; CodeValidator validator = new CodeValidator ( MASTERCARD_REGEX_SEP , LuhnCheckDigit . LUHN_CHECK_DIGIT ) ; RegexValidator regex = validator . getRegexValidator ( ) ; assertEquals ( ""Number"" , ""5134567890123456"" , regex . validate ( ""5134567890123456"" ) ) ; assertEquals ( ""Hyphen"" , ""5134567890123456"" , regex . validate ( ""5134-5678-9012-3456"" ) ) ; assertEquals ( ""Space"" , ""5134567890123456"" , regex . validate ( ""5134 5678 9012 3456"" ) ) ; assertEquals ( ""MixedA"" , ""5134567890123456"" , regex . validate ( ""5134-5678 9012-3456"" ) ) ; assertEquals ( ""MixedB"" , ""5134567890123456"" , regex . validate ( ""5134 5678-9012 3456"" ) ) ; assertFalse ( ""Invalid Separator A"" , regex . isValid ( ""5134.5678.9012.3456"" ) ) ; assertFalse ( ""Invalid Separator B"" , regex . isValid ( ""5134_5678_9012_3456"" ) ) ; assertFalse ( ""Invalid Grouping A"" , regex . isValid ( ""513-45678-9012-3456"" ) ) ; assertFalse ( ""Invalid Grouping B"" , regex . isValid ( ""5134-567-89012-3456"" ) ) ; assertFalse ( ""Invalid Grouping C"" , regex . isValid ( ""5134-5678-901-23456"" ) ) ; assertEquals ( ""Valid-A"" , ""5500000000000004"" , validator . validate ( ""5500-0000-0000-0004"" ) ) ; assertEquals ( ""Valid-B"" , ""5424000000000015"" , validator . validate ( ""5424 0000 0000 0015"" ) ) ; assertEquals ( ""Valid-C"" , ""5301250070000191"" , validator . validate ( ""5301-250070000191"" ) ) ; assertEquals ( ""Valid-D"" , ""5123456789012346"" , validator . validate ( ""5123456789012346"" ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected void setUp ( ) throws Exception { scriptName = ""src/test/java/org/apache/camel/ruby/scopes.rb"" ; super . setUp ( ) ; }",No
" public String toString ( ) { return String . format ( ""%d/%d (%.2f%%)"" , currentCompactedKVs , getTotalCompactingKVs ( ) , 100 * getProgressPct ( ) ) ; }",No
" protected ClientCsdlCast doDeserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { final ClientCsdlCast cast = new ClientCsdlCast ( ) ; for ( ; jp . getCurrentToken ( ) != JsonToken . END_OBJECT ; jp . nextToken ( ) ) { final JsonToken token = jp . getCurrentToken ( ) ; if ( token == JsonToken . FIELD_NAME ) { if ( ""Type"" . equals ( jp . getCurrentName ( ) ) ) { cast . setType ( jp . nextTextValue ( ) ) ; } else if ( ""Annotation"" . equals ( jp . getCurrentName ( ) ) ) { cast . getAnnotations ( ) . add ( jp . readValueAs ( ClientCsdlAnnotation . class ) ) ; } else if ( ""MaxLength"" . equals ( jp . getCurrentName ( ) ) ) { final String maxLenght = jp . nextTextValue ( ) ; cast . setMaxLength ( maxLenght . equalsIgnoreCase ( ""max"" ) ? Integer . MAX_VALUE : Integer . valueOf ( maxLenght ) ) ; } else if ( ""Precision"" . equals ( jp . getCurrentName ( ) ) ) { cast . setPrecision ( Integer . valueOf ( jp . nextTextValue ( ) ) ) ; } else if ( ""Scale"" . equals ( jp . getCurrentName ( ) ) ) { final String scale = jp . nextTextValue ( ) ; cast . setScale ( scale . equalsIgnoreCase ( ""variable"" ) ? 0 : Integer . valueOf ( scale ) ) ; } else if ( ""SRID"" . equals ( jp . getCurrentName ( ) ) ) { final String srid = jp . nextTextValue ( ) ; if ( srid != null ) { cast . setSrid ( SRID . valueOf ( srid ) ) ; } } else { cast . setValue ( jp . readValueAs ( ClientCsdlDynamicExpression . class ) ) ; } } } return cast ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
 public Database getDatabase ( ) { return db ; },No
 public static void setProtocol ( ) throws Exception { SharedMiniClusterIT . startMiniCluster ( ) ; SimpleProxyBase . factory = new TJSONProtocol . Factory ( ) ; setUpProxy ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 String sayHi ( ) ;,No
" public Expr make ( ItemList list ) { BuilderLib . checkLength ( 1 , list , ""Broken syntax: "" + list . shortString ( ) ) ; return new ExprAggregator ( null , AggregatorFactory . createAggNull ( ) ) ; }",Smelly
" public String encodeByteArray ( byte [ ] inputByteArray ) throws ManifoldCFException { try { Writer writer = new StringWriter ( ( inputByteArray . length * 4 ) / 3 + 4 ) ; try { InputStream is = new ByteArrayInputStream ( inputByteArray ) ; try { encodeStream ( is , writer ) ; writer . flush ( ) ; return writer . toString ( ) ; } finally { is . close ( ) ; } } finally { writer . close ( ) ; } } catch ( IOException e ) { throw new ManifoldCFException ( ""Error streaming through base64 encoder"" , e ) ; } }",No
" protected AccessTokenTO resolveReference ( final Method method , final Object ... args ) throws UnresolvedReferenceException { throw new UnresolvedReferenceException ( ) ; }",No
" public void testFilterOnDate ( ) throws IOException { ExprNodeDesc column = new ExprNodeColumnDesc ( TypeInfoFactory . dateTypeInfo , ""datee"" , null , false ) ; ExprNodeDesc constant = new ExprNodeConstantDesc ( TypeInfoFactory . dateTypeInfo , ""2020-01-01"" ) ; List < ExprNodeDesc > children = Lists . newArrayList ( ) ; children . add ( column ) ; children . add ( constant ) ; ExprNodeGenericFuncDesc node = new ExprNodeGenericFuncDesc ( TypeInfoFactory . dateTypeInfo , new GenericUDFOPEqual ( ) , children ) ; Expression expression = Hive2CarbonExpression . convertExprHive2Carbon ( node ) ; assert ( ( ( LiteralExpression ) expression . getChildren ( ) . get ( 1 ) ) . getLiteralExpValue ( ) . toString ( ) . equalsIgnoreCase ( ""2020-01-01"" ) ) ; }",Smelly
" public void visit ( State state , Environment env , Properties props ) throws Exception { Connector conn = env . getInstance ( ) . getConnector ( WalkingSecurity . get ( state , env ) . getSysUserName ( ) , WalkingSecurity . get ( state , env ) . getSysToken ( ) ) ; String tableName = WalkingSecurity . get ( state , env ) . getTableName ( ) ; boolean exists = WalkingSecurity . get ( state , env ) . getTableExists ( ) ; boolean hasPermission = WalkingSecurity . get ( state , env ) . canCreateTable ( WalkingSecurity . get ( state , env ) . getSysCredentials ( ) , null , null ) ; try { conn . tableOperations ( ) . create ( tableName ) ; } catch ( AccumuloSecurityException ae ) { if ( ae . getSecurityErrorCode ( ) . equals ( SecurityErrorCode . PERMISSION_DENIED ) ) { if ( hasPermission ) throw new AccumuloException ( ""Got a security exception when I should have had permission."" , ae ) ; else { try { env . getConnector ( ) . tableOperations ( ) . create ( tableName ) ; WalkingSecurity . get ( state , env ) . initTable ( tableName ) ; } catch ( TableExistsException tee ) { if ( exists ) return ; else throw new AccumuloException ( ""Test and Accumulo are out of sync"" ) ; } return ; } } else throw new AccumuloException ( ""Got unexpected error"" , ae ) ; } catch ( TableExistsException tee ) { if ( ! exists ) throw new TableExistsException ( null , tableName , ""Got a TableExistsException but it shouldn't have existed"" , tee ) ; else return ; } WalkingSecurity . get ( state , env ) . initTable ( tableName ) ; for ( TablePermission tp : TablePermission . values ( ) ) WalkingSecurity . get ( state , env ) . grantTablePermission ( conn . whoami ( ) , tableName , tp ) ; if ( ! hasPermission ) throw new AccumuloException ( ""Didn't get Security Exception when we should have"" ) ; }",Smelly
" private static InstructionInput createInstructionInput ( int instructionIndex , int outputNum ) { InstructionInput rval = new InstructionInput ( ) ; rval . setProducerInstructionIndex ( instructionIndex ) ; rval . setOutputNum ( outputNum ) ; return rval ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ProcessIdentifier struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . processId = iprot . readString ( ) ; struct . setProcessIdIsSet ( true ) ; struct . experimentId = iprot . readString ( ) ; struct . setExperimentIdIsSet ( true ) ; struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" protected RouteBuilder createRouteBuilder ( ) throws Exception { return new RouteBuilder ( ) { public void configure ( ) throws Exception { from ( ftpUrl ) . to ( ""mock:result"" ) ; } } ; }",No
" public void checkEmpMap ( Map < Division , Employee > es0 , Map < Division , Employee > es ) throws Exception { Collection < Map . Entry < Division , Employee > > entrySets0 = es0 . entrySet ( ) ; for ( Map . Entry < Division , Employee > entry0 : entrySets0 ) { Division d0 = entry0 . getKey ( ) ; Employee e0 = entry0 . getValue ( ) ; Employee e = es . get ( d0 ) ; if ( ! e0 . equals ( e ) ) throw new Exception ( ""Assertion failure"" ) ; } }",No
" public void create ( ) throws Exception { BusFactory . setDefaultBus ( bus ) ; String jsFileString = getClass ( ) . getResource ( js ) . toURI ( ) . getPath ( ) ; jsFileString = URLDecoder . decode ( jsFileString , ""UTF-8"" ) ; File file = new File ( jsFileString ) ; providerFactory . createAndPublish ( file , address , isBaseAddr ) ; }",No
" protected boolean compare ( final Object lhs , final Object rhs ) { return lhs != null && rhs != null && ( ( lhs == rhs ) || ( lhs . equals ( rhs ) ) || lhs . toString ( ) . equals ( rhs . toString ( ) ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , BatchQueue struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . queueName = iprot . readString ( ) ; struct . setQueueNameIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . queueDescription = iprot . readString ( ) ; struct . setQueueDescriptionIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . maxRunTime = iprot . readI32 ( ) ; struct . setMaxRunTimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . maxNodes = iprot . readI32 ( ) ; struct . setMaxNodesIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . maxProcessors = iprot . readI32 ( ) ; struct . setMaxProcessorsIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . maxJobsInQueue = iprot . readI32 ( ) ; struct . setMaxJobsInQueueIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . maxMemory = iprot . readI32 ( ) ; struct . setMaxMemoryIsSet ( true ) ; } }",No
" private static final < K , V > Map < K , V > sortMap ( final Map < K , V > map , final ChainedComparator comparator ) { final List < Map . Entry < K , V > > entries = new ArrayList < > ( map . entrySet ( ) ) ; if ( comparator . isShuffle ( ) ) Collections . shuffle ( entries ) ; else Collections . sort ( entries , comparator ) ; final LinkedHashMap < K , V > sortedMap = new LinkedHashMap < > ( ) ; entries . forEach ( entry -> sortedMap . put ( entry . getKey ( ) , entry . getValue ( ) ) ) ; return sortedMap ; }",No
 public long expiryTimePeriodMs ( ) { return expiryTimePeriodMs ; },No
" public void afterAll ( final ProvisioningProfile < ? , ? > profile ) throws JobExecutionException { }",No
" private void updateDeliveryTag ( CuratorFramework curatorClient , String gfacServerName , ProcessSubmitEvent event , MessageContext messageContext ) throws Exception { String experimentId = event . getExperimentId ( ) ; String processId = event . getProcessId ( ) ; long deliveryTag = messageContext . getDeliveryTag ( ) ; String processNodePath = ZKPaths . makePath ( GFacUtils . getExperimentNodePath ( experimentId ) , processId ) ; Stat stat = curatorClient . checkExists ( ) . forPath ( processNodePath ) ; if ( stat != null ) { String deliveryTagPath = ZKPaths . makePath ( processNodePath , ZkConstants . ZOOKEEPER_DELIVERYTAG_NODE ) ; curatorClient . setData ( ) . withVersion ( - 1 ) . forPath ( deliveryTagPath , GFacUtils . longToBytes ( deliveryTag ) ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void test ( ) { assertNotNull ( emf ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void eval ( ) { out . value = org . apache . drill . exec . expr . fn . impl . HashHelper . hash64 ( in . value , 0 ) ; }",No
" static VertexAttributePredicate getEndsWithPredicate ( String attrName , Class attrClass , String value ) { return new StringPredicate ( attrName , attrClass , value ) { protected boolean compareValue ( Object vertexAttrVal ) { return ( ( String ) vertexAttrVal ) . endsWith ( value ) ; } } ; }",No
" public float getProgress ( ) throws IOException { if ( end == start ) { return 0.0f ; } else { return Math . min ( 1.0f , ( float ) ( ( in . getPosition ( ) - start ) / ( double ) ( end - start ) ) ) ; } }",No
" public void delta ( ) { ContextURL contextURL = ContextURLParser . parse ( URI . create ( ""http://host/service/$metadata#Customers/$delta"" ) ) ; assertTrue ( contextURL . isDelta ( ) ) ; assertNull ( contextURL . getSelectList ( ) ) ; assertNull ( contextURL . getNavOrPropertyPath ( ) ) ; assertFalse ( contextURL . isEntity ( ) ) ; contextURL = ContextURLParser . parse ( URI . create ( ""http://host/service/$metadata#Customers/$deletedLink"" ) ) ; assertTrue ( contextURL . isDeltaDeletedLink ( ) ) ; assertNull ( contextURL . getSelectList ( ) ) ; assertNull ( contextURL . getNavOrPropertyPath ( ) ) ; assertFalse ( contextURL . isEntity ( ) ) ; contextURL = ContextURLParser . parse ( URI . create ( ""http://host/service/$metadata#Customers/$link"" ) ) ; assertTrue ( contextURL . isDeltaLink ( ) ) ; assertNull ( contextURL . getSelectList ( ) ) ; assertNull ( contextURL . getNavOrPropertyPath ( ) ) ; assertFalse ( contextURL . isEntity ( ) ) ; contextURL = ContextURLParser . parse ( URI . create ( ""http://host/service/$metadata#Customers/$deletedEntity"" ) ) ; assertTrue ( contextURL . isDeltaDeletedEntity ( ) ) ; assertNull ( contextURL . getSelectList ( ) ) ; assertNull ( contextURL . getNavOrPropertyPath ( ) ) ; assertFalse ( contextURL . isEntity ( ) ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" HistoryEvent maybeEmitEvent ( ParsedLine line , String taskAttemptIDName , HistoryEventEmitter thatg ) { if ( taskAttemptIDName == null ) { return null ; } TaskAttemptID taskAttemptID = TaskAttemptID . forName ( taskAttemptIDName ) ; String finishTime = line . get ( ""FINISH_TIME"" ) ; String status = line . get ( ""TASK_STATUS"" ) ; if ( finishTime != null && status != null && ! status . equalsIgnoreCase ( ""success"" ) ) { String hostName = line . get ( ""HOSTNAME"" ) ; String error = line . get ( ""ERROR"" ) ; TaskAttempt20LineEventEmitter that = ( TaskAttempt20LineEventEmitter ) thatg ; ParsedHost pHost = ParsedHost . parse ( hostName ) ; String rackName = null ; if ( pHost != null ) { rackName = pHost . getRackName ( ) ; hostName = pHost . getNodeName ( ) ; } return new TaskAttemptUnsuccessfulCompletionEvent ( taskAttemptID , that . originalTaskType , status , Long . parseLong ( finishTime ) , hostName , - 1 , rackName , error , null ) ; } return null ; }",Smelly
" public Token set ( int index , Token element ) { final Token t = get ( index ) ; element . previous = t . previous ; if ( t . previous == null ) { first = element ; } else { t . previous . next = element ; } element . next = t . next ; if ( t . next == null ) { last = element ; } else { t . next . previous = element ; } return t ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , checkNamespaceClass_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 3 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . sec = new ThriftSecurityException ( ) ; struct . sec . read ( iprot ) ; struct . setSecIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . tope = new ThriftTableOperationException ( ) ; struct . tope . read ( iprot ) ; struct . setTopeIsSet ( true ) ; } }",Smelly
 public boolean getTaskRescheduleRelaxedLocality ( ) { return taskRescheduleRelaxedLocality ; },Smelly
" private void appendByteArrayToString ( StringBuilder sb , byte [ ] input ) { if ( input == null ) { sb . append ( ""null"" ) ; return ; } for ( int i = 0 ; i < input . length ; i ++ ) { if ( i > 0 ) { sb . append ( '.' ) ; } sb . append ( input [ i ] & 0xFF ) ; } }",Smelly
" public String toString ( ) { return MoreObjects . toStringHelper ( this ) . add ( ""tags"" , tags ) . add ( ""value"" , value ) . toString ( ) ; }",No
" public void testAccessors ( ) { final NumberIsTooSmallException e = new NumberIsTooSmallException ( 0 , 0 , false ) ; Assert . assertEquals ( 0 , e . getArgument ( ) ) ; Assert . assertEquals ( 0 , e . getMin ( ) ) ; Assert . assertFalse ( e . getBoundIsAllowed ( ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
 public String adaptToJson ( final Model obj ) throws Exception { assertTrue ( OwbNormalScopeProxy . class . isInstance ( service ) ) ; return service . toString ( obj ) ; },No
" public void start ( ) { LOG . info ( "" Starting Stress submission "" ) ; this . rThread . start ( ) ; }",Smelly
" public byte [ ] calculate ( Content content , Parse parse ) { byte [ ] data = content . getContent ( ) ; if ( data == null || ( data . length == 0 ) ) data = content . getUrl ( ) . getBytes ( ) ; return MD5Hash . digest ( data ) . getDigest ( ) ; }",No
 public int getLockLevel ( OpenJPAStateManager sm ) { return LOCK_NONE ; },No
" public Map < String , Object > run ( Map < String , Object > args , String crawlId ) throws Exception { if ( args . size ( ) < 1 ) { throw new IllegalArgumentException ( ""Required arguments <url_dir> or <seedName>"" ) ; } Path input ; Object path = null ; if ( args . containsKey ( Nutch . ARG_SEEDDIR ) ) { path = args . get ( Nutch . ARG_SEEDDIR ) ; } else if ( args . containsKey ( Nutch . ARG_SEEDNAME ) ) { path = NutchServer . getInstance ( ) . getSeedManager ( ) . getSeedList ( ( String ) args . get ( Nutch . ARG_SEEDNAME ) ) . getSeedFilePath ( ) ; } else { throw new IllegalArgumentException ( ""Required arguments <url_dir> or <seedName>"" ) ; } if ( path instanceof Path ) { input = ( Path ) path ; } else { input = new Path ( path . toString ( ) ) ; } Map < String , Object > results = new HashMap < > ( ) ; Path crawlDb ; if ( args . containsKey ( Nutch . ARG_CRAWLDB ) ) { Object crawldbPath = args . get ( Nutch . ARG_CRAWLDB ) ; if ( crawldbPath instanceof Path ) { crawlDb = ( Path ) crawldbPath ; } else { crawlDb = new Path ( crawldbPath . toString ( ) ) ; } } else { crawlDb = new Path ( crawlId + ""/crawldb"" ) ; } inject ( crawlDb , input ) ; results . put ( Nutch . VAL_RESULT , Integer . toString ( 0 ) ) ; return results ; }",Smelly
" public void run ( ) { resetManager . registerMe ( ) ; try { IThreadContext threadContext = ThreadContextFactory . make ( ) ; IJobManager jobManager = JobManagerFactory . make ( threadContext ) ; Logging . threads . debug ( ""Expire stuffer thread: Maximum document count per check is "" + Integer . toString ( n ) ) ; HashMap documentSets = new HashMap ( ) ; HashMap jobDescriptionMap = new HashMap ( ) ; IDBInterface database = DBInterfaceFactory . make ( threadContext , ManifoldCF . getMasterDatabaseName ( ) , ManifoldCF . getMasterDatabaseUsername ( ) , ManifoldCF . getMasterDatabasePassword ( ) ) ; int deleteChunkSize = database . getMaxInClause ( ) ; while ( true ) { try { if ( Thread . currentThread ( ) . isInterrupted ( ) ) throw new ManifoldCFException ( ""Interrupted"" , ManifoldCFException . INTERRUPTED ) ; resetManager . waitForReset ( threadContext ) ; boolean isEmpty = documentQueue . checkIfEmpty ( n * 3 ) ; if ( isEmpty == false ) { sleep ( 1000 ) ; continue ; } Logging . threads . debug ( ""Expiration stuffer thread woke up"" ) ; long currentTime = System . currentTimeMillis ( ) ; DocumentSetAndFlags docsAndFlags = jobManager . getExpiredDocuments ( deleteChunkSize , currentTime ) ; DocumentDescription [ ] descs = docsAndFlags . getDocumentSet ( ) ; boolean [ ] deleteFromIndex = docsAndFlags . getFlags ( ) ; if ( Thread . currentThread ( ) . isInterrupted ( ) ) throw new ManifoldCFException ( ""Interrupted"" , ManifoldCFException . INTERRUPTED ) ; if ( Logging . threads . isDebugEnabled ( ) ) { Logging . threads . debug ( ""Expiration stuffer thread: Found "" + Integer . toString ( descs . length ) + "" documents to expire"" ) ; } if ( descs . length == 0 ) { ManifoldCF . sleep ( 60000L ) ; continue ; } Map jobMap = new HashMap ( ) ; int k = 0 ; while ( k < descs . length ) { CleanupQueuedDocument x = new CleanupQueuedDocument ( descs [ k ] , deleteFromIndex [ k ] ) ; Long jobID = descs [ k ] . getJobID ( ) ; List y = ( List ) jobMap . get ( jobID ) ; if ( y == null ) { y = new ArrayList ( ) ; jobMap . put ( jobID , y ) ; } y . add ( x ) ; k ++ ; } Iterator iter = jobMap . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Long jobID = ( Long ) iter . next ( ) ; IJobDescription jobDescription = jobManager . load ( jobID , true ) ; List y = ( List ) jobMap . get ( jobID ) ; CleanupQueuedDocument [ ] docDescs = new CleanupQueuedDocument [ y . size ( ) ] ; k = 0 ; while ( k < docDescs . length ) { docDescs [ k ] = ( CleanupQueuedDocument ) y . get ( k ) ; k ++ ; } DocumentCleanupSet set = new DocumentCleanupSet ( docDescs , jobDescription ) ; documentQueue . addDocuments ( set ) ; } yield ( ) ; } catch ( ManifoldCFException e ) { if ( e . getErrorCode ( ) == ManifoldCFException . INTERRUPTED ) break ; if ( e . getErrorCode ( ) == ManifoldCFException . DATABASE_CONNECTION_ERROR ) { resetManager . noteEvent ( ) ; Logging . threads . error ( ""Expiration stuffer thread aborting and restarting due to database connection reset: "" + e . getMessage ( ) , e ) ; try { ManifoldCF . sleep ( 10000L ) ; } catch ( InterruptedException se ) { break ; } continue ; } Logging . threads . error ( ""Exception tossed: "" + e . getMessage ( ) , e ) ; if ( e . getErrorCode ( ) == ManifoldCFException . SETUP_ERROR ) { System . exit ( 1 ) ; } } catch ( InterruptedException e ) { break ; } catch ( OutOfMemoryError e ) { System . err . println ( ""agents process ran out of memory - shutting down"" ) ; e . printStackTrace ( System . err ) ; System . exit ( - 200 ) ; } catch ( Throwable e ) { Logging . threads . fatal ( ""Error tossed: "" + e . getMessage ( ) , e ) ; } } } catch ( Throwable e ) { System . err . println ( ""agents process could not start - shutting down"" ) ; Logging . threads . fatal ( ""ExpirationStufferThread initialization error tossed: "" + e . getMessage ( ) , e ) ; System . exit ( - 300 ) ; } }",Smelly
" public File locatePom ( File projectDirectory ) { return new File ( projectDirectory , ""pom.xml"" ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , JobSubmissionTaskModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . jobSubmissionProtocol = org . apache . airavata . model . appcatalog . computeresource . JobSubmissionProtocol . findByValue ( iprot . readI32 ( ) ) ; struct . setJobSubmissionProtocolIsSet ( true ) ; struct . monitorMode = org . apache . airavata . model . appcatalog . computeresource . MonitorMode . findByValue ( iprot . readI32 ( ) ) ; struct . setMonitorModeIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . wallTime = iprot . readI32 ( ) ; struct . setWallTimeIsSet ( true ) ; } }",Smelly
" public final Vertex < I , V , Writable > getCurrentVertex ( ) throws IOException , InterruptedException { Vertex < I , V , Writable > vertex = getConf ( ) . createVertex ( ) ; vertex . initialize ( getCurrentVertexId ( ) , getCurrentVertexValue ( ) ) ; return vertex ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public Coder < KV < Integer , Integer > > getDefaultOutputCoder ( ) { return KvCoder . of ( VarIntCoder . of ( ) , VarIntCoder . of ( ) ) ; }",No
 public void terminateProcessor ( ProcessorNode processor ) { },No
 public void validate ( ) throws TException { },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , ZeppelinServerResourceParagraphRunner struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . noteId = iprot . readString ( ) ; struct . setNoteIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . paragraphId = iprot . readString ( ) ; struct . setParagraphIdIsSet ( true ) ; } }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" protected Iterator < QuadWritable > generateTuples ( int num ) { List < QuadWritable > qs = new ArrayList < QuadWritable > ( ) ; for ( int i = 0 ; i < num ; i ++ ) { Quad q = new Quad ( NodeFactory . createURI ( ""http://example.org/graphs/"" + i ) , NodeFactory . createURI ( ""http://example.org/subjects/"" + i ) , NodeFactory . createURI ( ""http://example.org/predicate"" ) , NodeFactory . createLiteral ( Integer . toString ( i ) , XSDDatatype . XSDinteger ) ) ; qs . add ( new QuadWritable ( q ) ) ; } return qs . iterator ( ) ; }",Smelly
" public void appendSummaryHtml ( PrintWriter writer ) { writer . println ( ""Worker Threads: "" + workUnitExecutor . getPoolSize ( ) + ""/"" + workUnitExecutor . getMaximumPoolSize ( ) + ""<br>"" ) ; writer . println ( ""Active Threads: "" + workUnitExecutor . getActiveCount ( ) + ""<br>"" ) ; writer . println ( ""Work Queue Size: "" + workUnitExecutor . getQueue ( ) . size ( ) + ""/"" + MAX_WORK_UNITS_QUEUED + ""<br>"" ) ; writer . print ( ""Commit Queue: "" ) ; writer . print ( commitQueue . weight ( ) > > 20 ) ; writer . print ( ""MB, "" ) ; writer . print ( commitQueue . size ( ) ) ; writer . println ( "" elements<br>"" ) ; writer . print ( ""Active commit: "" ) ; long commitBytes = activeCommitBytes . get ( ) ; if ( commitBytes == 0 ) { writer . print ( ""none"" ) ; } else { writer . print ( ""~"" ) ; writer . print ( ( commitBytes > > 20 ) + 1 ) ; writer . print ( ""MB"" ) ; } writer . println ( ""<br>"" ) ; metricTrackingWindmillServer . printHtml ( writer ) ; writer . println ( ""<br>"" ) ; writer . println ( ""Active Keys: <br>"" ) ; for ( Map . Entry < String , ComputationState > computationEntry : computationMap . entrySet ( ) ) { writer . print ( computationEntry . getKey ( ) ) ; writer . print ( "":<br>"" ) ; computationEntry . getValue ( ) . printActiveWork ( writer ) ; writer . println ( ""<br>"" ) ; } }",No
" private static void cleanup ( FileSystem fs ) throws Exception { LOG . info ( ""Cleaning up test files"" ) ; fs . delete ( new Path ( TEST_ROOT_DIR ) , true ) ; fs . delete ( HDFS_TEST_DIR , true ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testInvalidateDuringCallableExecution ( ) throws ExecutionException , InterruptedException { final String key = ""testGet"" ; final int firstValue = 20 ; final int secondValue = 40 ; final ExecutorService es = Executors . newSingleThreadExecutor ( ) ; es . submit ( new Runnable ( ) { @ Override public void run ( ) { final int getFirstValue1 ; try { getFirstValue1 = cache . get ( key , new SleepingInteger ( firstValue , computationMillis ) ) ; assertEquals ( firstValue , getFirstValue1 ) ; } catch ( final ExecutionException e ) { throw new RuntimeException ( e ) ; } } } ) ; Thread . sleep ( 500 ) ; final int numSequentialCalls = numConcurrentCalls ; final int indexToInvalidateOn = numSequentialCalls / 2 ; for ( int i = 1 ; i < numSequentialCalls ; i ++ ) { final int index = i ; if ( index == indexToInvalidateOn ) { cache . invalidate ( key ) ; } else if ( index < indexToInvalidateOn ) { try { final int getFirstValue2 = cache . get ( key , new ImmediateInteger ( secondValue ) ) ; assertEquals ( firstValue , getFirstValue2 ) ; } catch ( final ExecutionException e ) { throw new RuntimeException ( e ) ; } } else { try { final int getFirstValue2 = cache . get ( key , new ImmediateInteger ( secondValue ) ) ; assertEquals ( secondValue , getFirstValue2 ) ; } catch ( final ExecutionException e ) { throw new RuntimeException ( e ) ; } } } es . shutdown ( ) ; assertTrue ( ""Tasks should finish before timeout"" , es . awaitTermination ( timeoutMillis , TimeUnit . MILLISECONDS ) ) ; }",No
" public void describeTo ( Description description ) { description . appendText ( ""a KV("" ) . appendValue ( keyMatcher ) . appendText ( "", "" ) . appendValue ( valueMatcher ) . appendText ( "")"" ) ; }",Smelly
 public void setEntityDData ( String entityDData ) { this . entityDData = entityDData ; },No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public static void main ( String [ ] args ) throws Exception { final Arguments arguments = new Arguments ( ) ; JCommander jc = new JCommander ( arguments ) ; jc . setProgramName ( ""pulsar-perf read"" ) ; try { jc . parse ( args ) ; } catch ( ParameterException e ) { System . out . println ( e . getMessage ( ) ) ; jc . usage ( ) ; System . exit ( - 1 ) ; } if ( arguments . help ) { jc . usage ( ) ; System . exit ( - 1 ) ; } if ( arguments . topic . size ( ) != 1 ) { System . out . println ( ""Only one topic name is allowed"" ) ; jc . usage ( ) ; System . exit ( - 1 ) ; } if ( arguments . confFile != null ) { Properties prop = new Properties ( System . getProperties ( ) ) ; prop . load ( new FileInputStream ( arguments . confFile ) ) ; if ( arguments . serviceURL == null ) { arguments . serviceURL = prop . getProperty ( ""brokerServiceUrl"" ) ; } if ( arguments . serviceURL == null ) { arguments . serviceURL = prop . getProperty ( ""webServiceUrl"" ) ; } if ( arguments . serviceURL == null ) { arguments . serviceURL = prop . getProperty ( ""serviceUrl"" , ""http://localhost:8080/"" ) ; } if ( arguments . authPluginClassName == null ) { arguments . authPluginClassName = prop . getProperty ( ""authPlugin"" , null ) ; } if ( arguments . authParams == null ) { arguments . authParams = prop . getProperty ( ""authParams"" , null ) ; } if ( arguments . useTls == false ) { arguments . useTls = Boolean . parseBoolean ( prop . getProperty ( ""useTls"" ) ) ; } if ( isBlank ( arguments . tlsTrustCertsFilePath ) ) { arguments . tlsTrustCertsFilePath = prop . getProperty ( ""tlsTrustCertsFilePath"" , """" ) ; } } ObjectMapper m = new ObjectMapper ( ) ; ObjectWriter w = m . writerWithDefaultPrettyPrinter ( ) ; log . info ( ""Starting Pulsar performance reader with config: {}"" , w . writeValueAsString ( arguments ) ) ; final TopicName prefixTopicName = TopicName . get ( arguments . topic . get ( 0 ) ) ; final RateLimiter limiter = arguments . rate > 0 ? RateLimiter . create ( arguments . rate ) : null ; ReaderListener < byte [ ] > listener = ( reader , msg ) -> { messagesReceived . increment ( ) ; bytesReceived . add ( msg . getData ( ) . length ) ; if ( limiter != null ) { limiter . acquire ( ) ; } } ; ClientBuilder clientBuilder = PulsarClient . builder ( ) . serviceUrl ( arguments . serviceURL ) . connectionsPerBroker ( arguments . maxConnections ) . statsInterval ( arguments . statsIntervalSeconds , TimeUnit . SECONDS ) . ioThreads ( Runtime . getRuntime ( ) . availableProcessors ( ) ) . enableTls ( arguments . useTls ) . tlsTrustCertsFilePath ( arguments . tlsTrustCertsFilePath ) ; if ( isNotBlank ( arguments . authPluginClassName ) ) { clientBuilder . authentication ( arguments . authPluginClassName , arguments . authParams ) ; } PulsarClient pulsarClient = clientBuilder . build ( ) ; List < CompletableFuture < Reader < byte [ ] > > > futures = Lists . newArrayList ( ) ; MessageId startMessageId ; if ( ""earliest"" . equals ( arguments . startMessageId ) ) { startMessageId = MessageId . earliest ; } else if ( ""latest"" . equals ( arguments . startMessageId ) ) { startMessageId = MessageId . latest ; } else { String [ ] parts = arguments . startMessageId . split ( "":"" ) ; startMessageId = new MessageIdImpl ( Long . parseLong ( parts [ 0 ] ) , Long . parseLong ( parts [ 1 ] ) , - 1 ) ; } ReaderBuilder < byte [ ] > readerBuilder = pulsarClient . newReader ( ) . readerListener ( listener ) . receiverQueueSize ( arguments . receiverQueueSize ) . startMessageId ( startMessageId ) ; for ( int i = 0 ; i < arguments . numTopics ; i ++ ) { final TopicName topicName = ( arguments . numTopics == 1 ) ? prefixTopicName : TopicName . get ( String . format ( ""%s-%d"" , prefixTopicName , i ) ) ; futures . add ( readerBuilder . clone ( ) . topic ( topicName . toString ( ) ) . createAsync ( ) ) ; } FutureUtil . waitForAll ( futures ) . get ( ) ; log . info ( ""Start reading from {} topics"" , arguments . numTopics ) ; long oldTime = System . nanoTime ( ) ; while ( true ) { try { Thread . sleep ( 10000 ) ; } catch ( InterruptedException e ) { break ; } long now = System . nanoTime ( ) ; double elapsed = ( now - oldTime ) / 1e9 ; double rate = messagesReceived . sumThenReset ( ) / elapsed ; double throughput = bytesReceived . sumThenReset ( ) / elapsed * 8 / 1024 / 1024 ; log . info ( ""Read throughput: {}  msg/s -- {} Mbit/s"" , dec . format ( rate ) , dec . format ( throughput ) ) ; oldTime = now ; } pulsarClient . close ( ) ; }",Smelly
" RexNode convertCall ( SqlRexContext cx , SqlCall call ) ;",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public void shutdown ( ) { _execService . shutdown ( ) ; },Smelly
" public void initializeDefaultPreferences ( ) { IPreferenceStore store = TextRulerPlugin . getDefault ( ) . getPreferenceStore ( ) ; store . setDefault ( TextRulerPreferences . REMOVE_BASICS , true ) ; store . setDefault ( TextRulerPreferences . LOW_MEMORY_PROFILE , false ) ; store . setDefault ( TextRulerPreferences . MAX_ERROR_RATE , 10 ) ; store . setDefault ( TextRulerPreferences . CAS_CACHE , 50 ) ; List < TextRulerLearnerController > availableControllers = TextRulerController . getAvailableControllers ( ) ; for ( TextRulerLearnerController each : availableControllers ) { String id = each . getID ( ) ; Map < String , Object > defaultValues = each . getFactory ( ) . getAlgorithmParameterStandardValues ( ) ; Set < Entry < String , Object > > entrySet = defaultValues . entrySet ( ) ; for ( Entry < String , Object > entry : entrySet ) { String key = id + ""."" + entry . getKey ( ) ; Object value = entry . getValue ( ) ; if ( value instanceof Integer ) { store . setDefault ( key , ( Integer ) value ) ; } else if ( value instanceof Double ) { store . setDefault ( key , ( Double ) value ) ; } else if ( value instanceof Float ) { store . setDefault ( key , ( Float ) value ) ; } else if ( value instanceof Boolean ) { store . setDefault ( key , ( Boolean ) value ) ; } else if ( value instanceof String ) { store . setDefault ( key , ( String ) value ) ; } } } }",No
 public RealMatrix getInverse ( ) { return solve ( MatrixUtils . createRealIdentityMatrix ( qrt [ 0 ] . length ) ) ; },Smelly
" public int hashCode ( ) { return Objects . hash ( TestStream . class , getValueCoder ( ) , getEvents ( ) ) ; }",No
 public String getVersion ( ) { return version ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , CertificateCredential struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . communityUser = new CommunityUser ( ) ; struct . communityUser . read ( iprot ) ; struct . setCommunityUserIsSet ( true ) ; struct . x509Cert = iprot . readString ( ) ; struct . setX509CertIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . notAfter = iprot . readString ( ) ; struct . setNotAfterIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . privateKey = iprot . readString ( ) ; struct . setPrivateKeyIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . lifeTime = iprot . readI64 ( ) ; struct . setLifeTimeIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . notBefore = iprot . readString ( ) ; struct . setNotBeforeIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . persistedTime = iprot . readI64 ( ) ; struct . setPersistedTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . token = iprot . readString ( ) ; struct . setTokenIsSet ( true ) ; } }",No
" public JSONObject build ( ) throws JSONException { Preconditions . checkNotNull ( fullTextResults ) ; count ( fullTextResults . length ( ) ) ; queryType ( QUERY_TYPE_FULLTEXT ) ; JSONObject response = super . build ( ) ; response . put ( AtlasClient . RESULTS , fullTextResults ) ; return response ; }",No
 public Expression < Exchange > createExpression ( String expression ) { return XQueryBuilder . xquery ( expression ) ; },No
 public void open ( ) throws SQLException { },No
" public void testServiceInvalidKeyPassword ( ) throws Exception { String basedir = System . getProperty ( ""basedir"" ) ; if ( basedir == null ) { basedir = new File ( ""."" ) . getCanonicalPath ( ) ; } GatewayConfig config = EasyMock . createMock ( GatewayConfig . class ) ; EasyMock . expect ( config . getGatewayKeystoreDir ( ) ) . andReturn ( basedir + ""/target/test-classes/keystores"" ) . atLeastOnce ( ) ; EasyMock . expect ( config . getSigningKeystorePath ( ) ) . andReturn ( basedir + ""/target/test-classes/keystores/server-keystore.jks"" ) . atLeastOnce ( ) ; EasyMock . expect ( config . getSigningKeystoreType ( ) ) . andReturn ( ""jks"" ) . atLeastOnce ( ) ; EasyMock . expect ( config . getSigningKeystorePasswordAlias ( ) ) . andReturn ( GatewayConfig . DEFAULT_SIGNING_KEYSTORE_PASSWORD_ALIAS ) . anyTimes ( ) ; EasyMock . expect ( config . getSigningKeyAlias ( ) ) . andReturn ( ""server"" ) . anyTimes ( ) ; MasterService ms = EasyMock . createMock ( MasterService . class ) ; EasyMock . expect ( ms . getMasterSecret ( ) ) . andReturn ( ""horton"" . toCharArray ( ) ) . atLeastOnce ( ) ; AliasService as = EasyMock . createMock ( AliasService . class ) ; EasyMock . expect ( as . getSigningKeyPassphrase ( ) ) . andReturn ( ""invalid"" . toCharArray ( ) ) . atLeastOnce ( ) ; EasyMock . replay ( config , ms , as ) ; DefaultKeystoreService ks = new DefaultKeystoreService ( ) ; ks . setMasterService ( ms ) ; ks . init ( config , new HashMap < > ( ) ) ; ks . start ( ) ; DefaultTokenAuthorityService ta = new DefaultTokenAuthorityService ( ) ; ta . setAliasService ( as ) ; ta . setKeystoreService ( ks ) ; ta . init ( config , new HashMap < > ( ) ) ; ta . start ( ) ; EasyMock . verify ( config , ms , as ) ; }",Smelly
" private void verifyScanNoEarlyOut ( Scan s , long expectedRows , long expectedKeys ) throws IOException { InternalScanner scanner = this . region . getScanner ( s ) ; List < Cell > results = new ArrayList < > ( ) ; int i = 0 ; for ( boolean done = true ; done ; i ++ ) { done = scanner . next ( results ) ; Arrays . sort ( results . toArray ( new Cell [ results . size ( ) ] ) , CellComparator . getInstance ( ) ) ; LOG . info ( ""counter="" + i + "", "" + results ) ; if ( results . isEmpty ( ) ) { break ; } assertTrue ( ""Scanned too many rows! Only expected "" + expectedRows + "" total but already scanned "" + ( i + 1 ) , expectedRows > i ) ; assertEquals ( ""Expected "" + expectedKeys + "" keys per row but "" + ""returned "" + results . size ( ) , expectedKeys , results . size ( ) ) ; results . clear ( ) ; } assertEquals ( ""Expected "" + expectedRows + "" rows but scanned "" + i + "" rows"" , expectedRows , i ) ; }",No
 public void setReportingTasks ( Set < ReportingTaskEntity > reportingTasks ) { this . reportingTasks = reportingTasks ; },No
" public void echoBinaryMessage ( Session session , ByteBuffer msg ) { try { session . getBasicRemote ( ) . sendBinary ( msg ) ; } catch ( IOException e ) { try { session . close ( ) ; } catch ( IOException e1 ) { } } }",Smelly
" public RecordReader < LongWritable , TripleWritable > createTripleReader ( ) { return new RdfJsonReader ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , show_compact_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new ShowCompactResponse ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public static Map < String , Object > refundFinAccount ( DispatchContext dctx , Map < String , Object > context ) { LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; Delegator delegator = dctx . getDelegator ( ) ; Locale locale = ( Locale ) context . get ( ""locale"" ) ; GenericValue userLogin = ( GenericValue ) context . get ( ""userLogin"" ) ; String finAccountId = ( String ) context . get ( ""finAccountId"" ) ; Map < String , Object > result = null ; GenericValue finAccount ; try { finAccount = delegator . findOne ( ""FinAccount"" , UtilMisc . toMap ( ""finAccountId"" , finAccountId ) , false ) ; } catch ( GenericEntityException e ) { return ServiceUtil . returnError ( e . getMessage ( ) ) ; } if ( finAccount != null ) { if ( ! ""Y"" . equals ( finAccount . getString ( ""isRefundable"" ) ) ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resourceError , ""AccountingFinAccountIsNotRefundable"" , locale ) ) ; } BigDecimal availableBalance = finAccount . getBigDecimal ( ""availableBalance"" ) ; BigDecimal actualBalance = finAccount . getBigDecimal ( ""actualBalance"" ) ; if ( actualBalance . compareTo ( availableBalance ) != 0 ) { return ServiceUtil . returnError ( UtilProperties . getMessage ( resourceError , ""AccountingFinAccountCannotBeRefunded"" , locale ) ) ; } if ( actualBalance . compareTo ( BigDecimal . ZERO ) > 0 ) { BigDecimal remainingBalance = new BigDecimal ( actualBalance . toString ( ) ) ; BigDecimal refundAmount = BigDecimal . ZERO ; List < EntityExpr > exprs = UtilMisc . toList ( EntityCondition . makeCondition ( ""finAccountTransTypeId"" , EntityOperator . EQUALS , ""DEPOSIT"" ) , EntityCondition . makeCondition ( ""finAccountId"" , EntityOperator . EQUALS , finAccountId ) ) ; EntityCondition condition = EntityCondition . makeCondition ( exprs , EntityOperator . AND ) ; EntityListIterator eli = null ; try { eli = delegator . find ( ""FinAccountTrans"" , condition , null , null , UtilMisc . toList ( ""-transactionDate"" ) , null ) ; GenericValue trans ; while ( remainingBalance . compareTo ( FinAccountHelper . ZERO ) < 0 && ( trans = eli . next ( ) ) != null ) { String orderId = trans . getString ( ""orderId"" ) ; String orderItemSeqId = trans . getString ( ""orderItemSeqId"" ) ; if ( orderId != null && orderItemSeqId != null ) { GenericValue orderHeader = delegator . findOne ( ""OrderHeader"" , UtilMisc . toMap ( ""orderId"" , orderId ) , false ) ; GenericValue productStore = orderHeader . getRelatedOne ( ""ProductStore"" , false ) ; GenericValue orderItem = delegator . findOne ( ""OrderItem"" , UtilMisc . toMap ( ""orderId"" , orderId , ""orderItemSeqId"" , orderItemSeqId ) , false ) ; if ( ! ""ITEM_CANCELLED"" . equals ( orderItem . getString ( ""statusId"" ) ) ) { List < GenericValue > returnItems = orderItem . getRelated ( ""ReturnItem"" , null , null , false ) ; if ( UtilValidate . isEmpty ( returnItems ) ) { BigDecimal txAmt = trans . getBigDecimal ( ""amount"" ) ; BigDecimal refAmt = txAmt ; if ( remainingBalance . compareTo ( txAmt ) == - 1 ) { refAmt = remainingBalance ; } remainingBalance = remainingBalance . subtract ( refAmt ) ; refundAmount = refundAmount . add ( refAmt ) ; Map < String , Object > rhCtx = UtilMisc . toMap ( ""returnHeaderTypeId"" , ""CUSTOMER_RETURN"" , ""fromPartyId"" , finAccount . getString ( ""ownerPartyId"" ) , ""toPartyId"" , productStore . getString ( ""payToPartyId"" ) , ""userLogin"" , userLogin ) ; Map < String , Object > rhResp = dispatcher . runSync ( ""createReturnHeader"" , rhCtx ) ; if ( ServiceUtil . isError ( rhResp ) ) { throw new GeneralException ( ServiceUtil . getErrorMessage ( rhResp ) ) ; } String returnId = ( String ) rhResp . get ( ""returnId"" ) ; Map < String , Object > returnItemCtx = FastMap . newInstance ( ) ; returnItemCtx . put ( ""returnId"" , returnId ) ; returnItemCtx . put ( ""orderId"" , orderId ) ; returnItemCtx . put ( ""description"" , orderItem . getString ( ""itemDescription"" ) ) ; returnItemCtx . put ( ""orderItemSeqId"" , orderItemSeqId ) ; returnItemCtx . put ( ""returnQuantity"" , BigDecimal . ONE ) ; returnItemCtx . put ( ""receivedQuantity"" , BigDecimal . ONE ) ; returnItemCtx . put ( ""returnPrice"" , refAmt ) ; returnItemCtx . put ( ""returnReasonId"" , ""RTN_NOT_WANT"" ) ; returnItemCtx . put ( ""returnTypeId"" , ""RTN_REFUND"" ) ; returnItemCtx . put ( ""returnItemTypeId"" , ""RET_NPROD_ITEM"" ) ; returnItemCtx . put ( ""userLogin"" , userLogin ) ; Map < String , Object > retItResp = dispatcher . runSync ( ""createReturnItem"" , returnItemCtx ) ; if ( ServiceUtil . isError ( retItResp ) ) { throw new GeneralException ( ServiceUtil . getErrorMessage ( retItResp ) ) ; } String returnItemSeqId = ( String ) retItResp . get ( ""returnItemSeqId"" ) ; Map < String , Object > appRet = UtilMisc . toMap ( ""statusId"" , ""RETURN_ACCEPTED"" , ""returnId"" , returnId , ""userLogin"" , userLogin ) ; Map < String , Object > appResp = dispatcher . runSync ( ""updateReturnHeader"" , appRet ) ; if ( ServiceUtil . isError ( appResp ) ) { throw new GeneralException ( ServiceUtil . getErrorMessage ( appResp ) ) ; } Map < String , Object > recRet = UtilMisc . toMap ( ""statusId"" , ""RETURN_RECEIVED"" , ""returnId"" , returnId , ""userLogin"" , userLogin ) ; Map < String , Object > recResp = dispatcher . runSync ( ""updateReturnHeader"" , recRet ) ; if ( ServiceUtil . isError ( recResp ) ) { throw new GeneralException ( ServiceUtil . getErrorMessage ( recResp ) ) ; } GenericValue returnItem = delegator . findOne ( ""ReturnItem"" , UtilMisc . toMap ( ""returnId"" , returnId , ""returnItemSeqId"" , returnItemSeqId ) , false ) ; GenericValue response = returnItem . getRelatedOne ( ""ReturnItemResponse"" , false ) ; if ( response == null ) { throw new GeneralException ( ""No return response found for: "" + returnItem . getPrimaryKey ( ) ) ; } String paymentId = response . getString ( ""paymentId"" ) ; Map < String , Object > txCtx = FastMap . newInstance ( ) ; txCtx . put ( ""finAccountTransTypeId"" , ""ADJUSTMENT"" ) ; txCtx . put ( ""finAccountId"" , finAccountId ) ; txCtx . put ( ""orderId"" , orderId ) ; txCtx . put ( ""orderItemSeqId"" , orderItemSeqId ) ; txCtx . put ( ""paymentId"" , paymentId ) ; txCtx . put ( ""amount"" , refAmt . negate ( ) ) ; txCtx . put ( ""partyId"" , finAccount . getString ( ""ownerPartyId"" ) ) ; txCtx . put ( ""userLogin"" , userLogin ) ; Map < String , Object > txResp = dispatcher . runSync ( ""createFinAccountTrans"" , txCtx ) ; if ( ServiceUtil . isError ( txResp ) ) { throw new GeneralException ( ServiceUtil . getErrorMessage ( txResp ) ) ; } } } } } } catch ( GeneralException e ) { Debug . logError ( e , module ) ; return ServiceUtil . returnError ( e . getMessage ( ) ) ; } finally { if ( eli != null ) { try { eli . close ( ) ; } catch ( GenericEntityException e ) { Debug . logWarning ( e , module ) ; } } } if ( remainingBalance . compareTo ( FinAccountHelper . ZERO ) == 1 ) { result = ServiceUtil . returnSuccess ( UtilProperties . getMessage ( resourceError , ""AccountingFinAccountPartiallyRefunded"" , locale ) ) ; } } } if ( result == null ) { result = ServiceUtil . returnSuccess ( ) ; } return result ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , DataProductModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . productUri = iprot . readString ( ) ; struct . setProductUriIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . gatewayId = iprot . readString ( ) ; struct . setGatewayIdIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . parentProductUri = iprot . readString ( ) ; struct . setParentProductUriIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . productName = iprot . readString ( ) ; struct . setProductNameIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . productDescription = iprot . readString ( ) ; struct . setProductDescriptionIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . ownerName = iprot . readString ( ) ; struct . setOwnerNameIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . dataProductType = org . apache . airavata . model . data . replica . DataProductType . findByValue ( iprot . readI32 ( ) ) ; struct . setDataProductTypeIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . productSize = iprot . readI32 ( ) ; struct . setProductSizeIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . lastModifiedTime = iprot . readI64 ( ) ; struct . setLastModifiedTimeIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { { org . apache . thrift . protocol . TMap _map11 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . productMetadata = new HashMap < String , String > ( 2 * _map11 . size ) ; String _key12 ; String _val13 ; for ( int _i14 = 0 ; _i14 < _map11 . size ; ++ _i14 ) { _key12 = iprot . readString ( ) ; _val13 = iprot . readString ( ) ; struct . productMetadata . put ( _key12 , _val13 ) ; } } struct . setProductMetadataIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { { org . apache . thrift . protocol . TList _list15 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . replicaLocations = new ArrayList < DataReplicaLocationModel > ( _list15 . size ) ; DataReplicaLocationModel _elem16 ; for ( int _i17 = 0 ; _i17 < _list15 . size ; ++ _i17 ) { _elem16 = new DataReplicaLocationModel ( ) ; _elem16 . read ( iprot ) ; struct . replicaLocations . add ( _elem16 ) ; } } struct . setReplicaLocationsIsSet ( true ) ; } }",Smelly
 protected abstract String functionName ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , DataStagingTaskModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . source = iprot . readString ( ) ; struct . setSourceIsSet ( true ) ; struct . destination = iprot . readString ( ) ; struct . setDestinationIsSet ( true ) ; struct . type = org . apache . airavata . model . task . DataStageType . findByValue ( iprot . readI32 ( ) ) ; struct . setTypeIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { struct . transferStartTime = iprot . readI64 ( ) ; struct . setTransferStartTimeIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . transferEndTime = iprot . readI64 ( ) ; struct . setTransferEndTimeIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . transferRate = iprot . readString ( ) ; struct . setTransferRateIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . processInput = new org . apache . airavata . model . application . io . InputDataObjectType ( ) ; struct . processInput . read ( iprot ) ; struct . setProcessInputIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . processOutput = new org . apache . airavata . model . application . io . OutputDataObjectType ( ) ; struct . processOutput . read ( iprot ) ; struct . setProcessOutputIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public String transform ( final RealmTO input ) { return input . getFullPath ( ) ; },No
 public TableStats getInputStats ( ) { if ( iterator != null ) { inputStats . reset ( ) ; for ( SeqScanExec scanner : scanners ) { TableStats scannerTableStats = scanner . getInputStats ( ) ; if ( scannerTableStats != null ) { inputStats . merge ( scannerTableStats ) ; } } } return inputStats ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void testNull ( ) throws IOException { final NullOutputStream nos = new NullOutputStream ( ) ; nos . write ( ""string"" . getBytes ( ) ) ; nos . write ( ""some string"" . getBytes ( ) , 3 , 5 ) ; nos . write ( 1 ) ; nos . write ( 0x0f ) ; nos . flush ( ) ; nos . close ( ) ; nos . write ( ""allowed"" . getBytes ( ) ) ; nos . write ( 255 ) ; }",Smelly
 public Coder < Integer > getOutputCoder ( ) { return BigEndianIntegerCoder . of ( ) ; },No
" public boolean validatePolicy ( AssertionInfoMap aim , Message message , List < WSSecurityEngineResult > results , List < WSSecurityEngineResult > signedResults , List < WSSecurityEngineResult > encryptedResults ) { Collection < AssertionInfo > ais = aim . get ( SP12Constants . SIGNED_ENCRYPTED_SUPPORTING_TOKENS ) ; if ( ais == null || ais . isEmpty ( ) ) { return true ; } setMessage ( message ) ; setResults ( results ) ; setSignedResults ( signedResults ) ; setEncryptedResults ( encryptedResults ) ; for ( AssertionInfo ai : ais ) { SupportingToken binding = ( SupportingToken ) ai . getAssertion ( ) ; if ( SPConstants . SupportTokenType . SUPPORTING_TOKEN_SIGNED_ENCRYPTED != binding . getTokenType ( ) ) { continue ; } ai . setAsserted ( true ) ; setSignedParts ( binding . getSignedParts ( ) ) ; setEncryptedParts ( binding . getEncryptedParts ( ) ) ; setSignedElements ( binding . getSignedElements ( ) ) ; setEncryptedElements ( binding . getEncryptedElements ( ) ) ; List < Token > tokens = binding . getTokens ( ) ; for ( Token token : tokens ) { if ( ! isTokenRequired ( token , message ) ) { continue ; } boolean processingFailed = false ; if ( token instanceof UsernameToken ) { if ( ! processUsernameTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KerberosToken ) { if ( ! processKerberosTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof X509Token ) { if ( ! processX509Tokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KeyValueToken ) { if ( ! processKeyValueTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SecurityContextToken ) { if ( ! processSCTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SamlToken ) { if ( ! processSAMLTokens ( ) ) { processingFailed = true ; } } else if ( ! ( token instanceof IssuedToken ) ) { processingFailed = true ; } if ( processingFailed ) { ai . setNotAsserted ( ""The received token does not match the signed encrypted supporting token requirement"" ) ; return false ; } } } return true ; }",Smelly
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 public void trim ( ) { edgeMultimap . trimToSize ( ) ; },No
" protected abstract void updateStatesToRedis ( T state , Map < String , String > keyToValue ) ;",No
 public void init ( ) { super . init ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" HistoryEvent maybeEmitEvent ( ParsedLine line , String taskAttemptIDName , HistoryEventEmitter thatg ) { if ( taskAttemptIDName == null ) { return null ; } TaskAttemptID taskAttemptID = TaskAttemptID . forName ( taskAttemptIDName ) ; String finishTime = line . get ( ""FINISH_TIME"" ) ; String status = line . get ( ""TASK_STATUS"" ) ; if ( finishTime != null && status != null && ! status . equalsIgnoreCase ( ""success"" ) ) { String hostName = line . get ( ""HOSTNAME"" ) ; String error = line . get ( ""ERROR"" ) ; TaskAttempt20LineEventEmitter that = ( TaskAttempt20LineEventEmitter ) thatg ; ParsedHost pHost = ParsedHost . parse ( hostName ) ; String rackName = null ; if ( pHost != null ) { rackName = pHost . getRackName ( ) ; hostName = pHost . getNodeName ( ) ; } return new TaskAttemptUnsuccessfulCompletionEvent ( taskAttemptID , that . originalTaskType , status , Long . parseLong ( finishTime ) , hostName , - 1 , rackName , error , null ) ; } return null ; }",Smelly
" protected void readState ( ObjectInputStream in ) throws IOException , ClassNotFoundException { super . readState ( in ) ; this . name = ( String ) in . readObject ( ) ; }",No
" public void looseMarshal ( OpenWireFormat wireFormat , Object o , DataOutput dataOut ) throws IOException { Message info = ( Message ) o ; info . beforeMarshall ( wireFormat ) ; super . looseMarshal ( wireFormat , o , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getProducerId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getDestination ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getTransactionId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getOriginalDestination ( ) , dataOut ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getMessageId ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getOriginalTransactionId ( ) , dataOut ) ; looseMarshalString ( info . getGroupID ( ) , dataOut ) ; dataOut . writeInt ( info . getGroupSequence ( ) ) ; looseMarshalString ( info . getCorrelationId ( ) , dataOut ) ; dataOut . writeBoolean ( info . isPersistent ( ) ) ; looseMarshalLong ( wireFormat , info . getExpiration ( ) , dataOut ) ; dataOut . writeByte ( info . getPriority ( ) ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getReplyTo ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getTimestamp ( ) , dataOut ) ; looseMarshalString ( info . getType ( ) , dataOut ) ; looseMarshalByteSequence ( wireFormat , info . getContent ( ) , dataOut ) ; looseMarshalByteSequence ( wireFormat , info . getMarshalledProperties ( ) , dataOut ) ; looseMarshalNestedObject ( wireFormat , ( DataStructure ) info . getDataStructure ( ) , dataOut ) ; looseMarshalCachedObject ( wireFormat , ( DataStructure ) info . getTargetConsumerId ( ) , dataOut ) ; dataOut . writeBoolean ( info . isCompressed ( ) ) ; dataOut . writeInt ( info . getRedeliveryCounter ( ) ) ; looseMarshalObjectArray ( wireFormat , info . getBrokerPath ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getArrival ( ) , dataOut ) ; looseMarshalString ( info . getUserID ( ) , dataOut ) ; dataOut . writeBoolean ( info . isRecievedByDFBridge ( ) ) ; dataOut . writeBoolean ( info . isDroppable ( ) ) ; looseMarshalObjectArray ( wireFormat , info . getCluster ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getBrokerInTime ( ) , dataOut ) ; looseMarshalLong ( wireFormat , info . getBrokerOutTime ( ) , dataOut ) ; }",Smelly
 protected ExtensionAttachment instantiateExtensionAttachment ( ) { return null ; },No
 public void setFieldMapping ( FieldMapping owner ) { },No
 public String getTimestamp ( ) { return this . pojo . getTimestamp ( ) ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private Response getPigVersion ( ) { return SimpleWebException . buildMessage ( HttpStatus . NOT_IMPLEMENTED_501 , null , ""Pig version request not yet implemented"" ) ; }",No
" public int compare ( ArtifactMetadata o1 , ArtifactMetadata o2 ) { int result = new DefaultArtifactVersion ( o2 . getVersion ( ) ) . compareTo ( new DefaultArtifactVersion ( o1 . getVersion ( ) ) ) ; return result != 0 ? result : o1 . getId ( ) . compareTo ( o2 . getId ( ) ) ; }",Smelly
" protected void createSenderReceiverMapping ( ) { if ( isSenderReceiverMappingCreated ) { return ; } senderToReceiversMapping = ArrayListMultimap . create ( ) ; receiverToSenderMapping = Maps . newHashMap ( ) ; ArrayListMultimap < DrillbitEndpoint , Integer > endpointReceiverList = ArrayListMultimap . create ( ) ; int receiverFragmentId = 0 ; for ( DrillbitEndpoint receiverLocation : receiverLocations ) { endpointReceiverList . put ( receiverLocation , receiverFragmentId ) ; receiverFragmentId ++ ; } int senderFragmentId = 0 ; for ( DrillbitEndpoint senderLocation : senderLocations ) { final List < Integer > receiverMinorFragmentIds = endpointReceiverList . get ( senderLocation ) ; for ( Integer receiverId : receiverMinorFragmentIds ) { receiverToSenderMapping . put ( receiverId , new MinorFragmentEndpoint ( senderFragmentId , senderLocation ) ) ; senderToReceiversMapping . put ( senderFragmentId , new MinorFragmentEndpoint ( receiverId , receiverLocations . get ( receiverId ) ) ) ; } senderFragmentId ++ ; } isSenderReceiverMappingCreated = true ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
 StringTokenizer fromString ( String idString ) { StringTokenizer tok = super . fromString ( idString ) ; pka = new Integer ( tok . nextToken ( ) ) . intValue ( ) ; return tok ; },No
" public void handle ( TaskAttemptEvent event ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""Processing "" + event . getTaskAttemptId ( ) + "" of type "" + event . getType ( ) ) ; } try { writeLock . lock ( ) ; TaskAttemptState oldState = getState ( ) ; try { stateMachine . doTransition ( event . getType ( ) , event ) ; } catch ( InvalidStateTransitonException e ) { LOG . error ( ""Can't handle this event at current state of "" + event . getTaskAttemptId ( ) + "")"" + "", eventType:"" + event . getType ( ) . name ( ) + "", oldState:"" + oldState . name ( ) + "", nextState:"" + getState ( ) . name ( ) , e ) ; eventHandler . handle ( new StageDiagnosticsUpdateEvent ( event . getTaskAttemptId ( ) . getTaskId ( ) . getExecutionBlockId ( ) , ""Can't handle this event at current state of "" + event . getTaskAttemptId ( ) + "")"" ) ) ; eventHandler . handle ( new StageEvent ( event . getTaskAttemptId ( ) . getTaskId ( ) . getExecutionBlockId ( ) , StageEventType . SQ_INTERNAL_ERROR ) ) ; } if ( LOG . isDebugEnabled ( ) ) { if ( oldState != getState ( ) ) { LOG . debug ( id + "" TaskAttempt Transitioned from "" + oldState + "" to "" + getState ( ) ) ; } } } finally { writeLock . unlock ( ) ; } }",Smelly
" public void run ( SessionState sess , Set < ReadEntity > inputs , Set < WriteEntity > outputs , LineageInfo linfo , UserGroupInformation ugi ) throws Exception { LogHelper console = SessionState . getConsole ( ) ; if ( console == null ) { return ; } if ( sess != null ) { console . printError ( ""POSTHOOK: query: "" + sess . getCmd ( ) . trim ( ) ) ; console . printError ( ""POSTHOOK: type: "" + sess . getCommandType ( ) ) ; } PreExecutePrinter . printEntities ( console , inputs , ""POSTHOOK: Input: "" ) ; PreExecutePrinter . printEntities ( console , outputs , ""POSTHOOK: Output: "" ) ; if ( linfo != null ) { LinkedList < Map . Entry < DependencyKey , Dependency > > entry_list = new LinkedList < Map . Entry < DependencyKey , Dependency > > ( linfo . entrySet ( ) ) ; Collections . sort ( entry_list , new DependencyKeyComp ( ) ) ; Iterator < Map . Entry < DependencyKey , Dependency > > iter = entry_list . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < DependencyKey , Dependency > it = iter . next ( ) ; Dependency dep = it . getValue ( ) ; DependencyKey depK = it . getKey ( ) ; if ( dep == null ) { continue ; } StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""POSTHOOK: Lineage: "" ) ; if ( depK . getDataContainer ( ) . isPartition ( ) ) { Partition part = depK . getDataContainer ( ) . getPartition ( ) ; sb . append ( part . getTableName ( ) ) ; sb . append ( "" PARTITION("" ) ; int i = 0 ; for ( FieldSchema fs : depK . getDataContainer ( ) . getTable ( ) . getPartitionKeys ( ) ) { if ( i != 0 ) { sb . append ( "","" ) ; } sb . append ( fs . getName ( ) + ""="" + part . getValues ( ) . get ( i ++ ) ) ; } sb . append ( "")"" ) ; } else { sb . append ( depK . getDataContainer ( ) . getTable ( ) . getTableName ( ) ) ; } sb . append ( ""."" + depK . getFieldSchema ( ) . getName ( ) + "" "" + dep . getType ( ) + "" "" ) ; sb . append ( ""["" ) ; for ( BaseColumnInfo col : dep . getBaseCols ( ) ) { sb . append ( ""("" + col . getTabAlias ( ) . getTable ( ) . getTableName ( ) + "")"" + col . getTabAlias ( ) . getAlias ( ) + ""."" + col . getColumn ( ) + "", "" ) ; } sb . append ( ""]"" ) ; console . printError ( sb . toString ( ) ) ; } } }",Smelly
" public Long extractThrottleTime ( ) { Long totalThrottleTime = 0L ; for ( MetricsContainerImpl container : containerRegistry . getContainers ( ) ) { CounterCell throttleTime = container . tryGetCounter ( MetricName . named ( BatchModeExecutionContext . DATASTORE_THROTTLE_TIME_NAMESPACE , ""cumulativeThrottlingSeconds"" ) ) ; if ( throttleTime != null ) { totalThrottleTime += throttleTime . getCumulative ( ) ; } CounterCell throttlingMsecs = container . tryGetCounter ( DataflowSystemMetrics . THROTTLING_MSECS_METRIC_NAME ) ; if ( throttlingMsecs != null ) { totalThrottleTime += TimeUnit . MILLISECONDS . toSeconds ( throttlingMsecs . getCumulative ( ) ) ; } } return totalThrottleTime ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" public void encodeNullThrowsException ( ) throws Exception { thrown . expect ( NullPointerException . class ) ; thrown . expectMessage ( ""cannot encode a null BigDecimal"" ) ; CoderUtils . encodeToBase64 ( TEST_CODER , null ) ; }",No
" public static void main ( String [ ] args ) throws FileNotFoundException , UnsupportedEncodingException { if ( args . length == 2 && args [ 0 ] . equals ( ""--generate-html"" ) ) { new ConfigurationDocGen ( new PrintStream ( args [ 1 ] , UTF_8 . name ( ) ) ) . generateHtml ( ) ; } else if ( args . length == 2 && args [ 0 ] . equals ( ""--generate-asciidoc"" ) ) { new ConfigurationDocGen ( new PrintStream ( args [ 1 ] , UTF_8 . name ( ) ) ) . generateAsciidoc ( ) ; } else { throw new IllegalArgumentException ( ""Usage: "" + ConfigurationDocGen . class . getName ( ) + "" --generate-html <filename> | --generate-asciidoc <filename>"" ) ; } }",No
 XSModel load ( LSInput is ) ;,No
" protected void addIncludedDestination ( NetworkConnector nc ) { nc . addExcludedDestination ( ActiveMQDestination . createDestination ( ""local.>"" , ActiveMQDestination . QUEUE_TYPE ) ) ; nc . addExcludedDestination ( ActiveMQDestination . createDestination ( ""local.>"" , ActiveMQDestination . TOPIC_TYPE ) ) ; nc . addExcludedDestination ( ActiveMQDestination . createDestination ( ""Consumer.*.local.>"" , ActiveMQDestination . QUEUE_TYPE ) ) ; nc . addStaticallyIncludedDestination ( ActiveMQDestination . createDestination ( ""global.>"" , ActiveMQDestination . QUEUE_TYPE ) ) ; nc . addStaticallyIncludedDestination ( ActiveMQDestination . createDestination ( ""global.>"" , ActiveMQDestination . TOPIC_TYPE ) ) ; nc . addStaticallyIncludedDestination ( ActiveMQDestination . createDestination ( ""Consumer.*.global.>"" , ActiveMQDestination . QUEUE_TYPE ) ) ; }",Smelly
 void setHttpHeaders ( HttpHeaders sc ) ;,No
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . group ( ""x"" ) . by ( T . label ) , __ . group ( ""x"" ) . by ( T . label ) . by ( ""name"" ) , __ . group ( ""x"" ) . by ( T . label ) . by ( __ . values ( ""name"" ) . count ( ) ) , __ . group ( ""y"" ) . by ( T . label ) , __ . group ( ""y"" ) . by ( T . label ) . by ( ""name"" ) , __ . group ( ""y"" ) . by ( T . label ) . by ( __ . values ( ""name"" ) . count ( ) ) ) ; }",Smelly
" public OrderedMapIterator < K , V > mapIterator ( ) { return decorated ( ) . mapIterator ( ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , Complex struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 6 ) ; if ( incoming . get ( 0 ) ) { struct . aint = iprot . readI32 ( ) ; struct . setAintIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . aString = iprot . readString ( ) ; struct . setAStringIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { { org . apache . thrift . protocol . TList _list21 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . I32 , iprot . readI32 ( ) ) ; struct . lint = new ArrayList < Integer > ( _list21 . size ) ; for ( int _i22 = 0 ; _i22 < _list21 . size ; ++ _i22 ) { int _elem23 ; _elem23 = iprot . readI32 ( ) ; struct . lint . add ( _elem23 ) ; } } struct . setLintIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { { org . apache . thrift . protocol . TList _list24 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . lString = new ArrayList < String > ( _list24 . size ) ; for ( int _i25 = 0 ; _i25 < _list24 . size ; ++ _i25 ) { String _elem26 ; _elem26 = iprot . readString ( ) ; struct . lString . add ( _elem26 ) ; } } struct . setLStringIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { { org . apache . thrift . protocol . TList _list27 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . lintString = new ArrayList < IntString > ( _list27 . size ) ; for ( int _i28 = 0 ; _i28 < _list27 . size ; ++ _i28 ) { IntString _elem29 ; _elem29 = new IntString ( ) ; _elem29 . read ( iprot ) ; struct . lintString . add ( _elem29 ) ; } } struct . setLintStringIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { { org . apache . thrift . protocol . TMap _map30 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . mStringString = new HashMap < String , String > ( 2 * _map30 . size ) ; for ( int _i31 = 0 ; _i31 < _map30 . size ; ++ _i31 ) { String _key32 ; String _val33 ; _key32 = iprot . readString ( ) ; _val33 = iprot . readString ( ) ; struct . mStringString . put ( _key32 , _val33 ) ; } } struct . setMStringStringIsSet ( true ) ; } }",Smelly
 public int getOrdinalPos ( ) { return ordinalPos ; },No
" protected CsdlNavigationProperty doDeserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { final CsdlNavigationProperty property = new ClientCsdlNavigationProperty ( ) ; for ( ; jp . getCurrentToken ( ) != JsonToken . END_OBJECT ; jp . nextToken ( ) ) { final JsonToken token = jp . getCurrentToken ( ) ; if ( token == JsonToken . FIELD_NAME ) { if ( ""Name"" . equals ( jp . getCurrentName ( ) ) ) { property . setName ( jp . nextTextValue ( ) ) ; } else if ( ""Type"" . equals ( jp . getCurrentName ( ) ) ) { String metadataTypeName = jp . nextTextValue ( ) ; if ( metadataTypeName . startsWith ( ""Collection("" ) ) { property . setType ( metadataTypeName . substring ( metadataTypeName . indexOf ( ""("" ) + 1 , metadataTypeName . length ( ) - 1 ) ) ; property . setCollection ( true ) ; } else { property . setType ( metadataTypeName ) ; property . setCollection ( false ) ; } } else if ( ""Nullable"" . equals ( jp . getCurrentName ( ) ) ) { property . setNullable ( BooleanUtils . toBoolean ( jp . nextTextValue ( ) ) ) ; } else if ( ""Partner"" . equals ( jp . getCurrentName ( ) ) ) { property . setPartner ( jp . nextTextValue ( ) ) ; } else if ( ""ContainsTarget"" . equals ( jp . getCurrentName ( ) ) ) { property . setContainsTarget ( BooleanUtils . toBoolean ( jp . nextTextValue ( ) ) ) ; } else if ( ""ReferentialConstraint"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; property . getReferentialConstraints ( ) . add ( jp . readValueAs ( ClientCsdlReferentialConstraint . class ) ) ; } else if ( ""OnDelete"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; property . setOnDelete ( jp . readValueAs ( ClientCsdlOnDelete . class ) ) ; } else if ( ""Annotation"" . equals ( jp . getCurrentName ( ) ) ) { jp . nextToken ( ) ; property . getAnnotations ( ) . add ( jp . readValueAs ( ClientCsdlAnnotation . class ) ) ; } } } return property ; }",Smelly
" protected List < Traversal > getTraversals ( ) { return Arrays . asList ( __ . not ( V ( ) . out ( ) ) , __ . not ( as ( ""test"" ) . in ( ""my-edge"" ) ) ) ; }",Smelly
" public static Iterable < Object [ ] > generateTestParameters ( ) { return Arrays . asList ( new Object [ ] [ ] { { __ . select ( ""a"" ) , __ . select ( ""a"" ) , Collections . emptyList ( ) } , { __ . select ( ""a"" ) . by ( ) , __ . select ( ""a"" ) . by ( ) , Collections . emptyList ( ) } , { __ . select ( ""a"" ) . by ( __ . outE ( ) . count ( ) ) , __ . select ( ""a"" ) . map ( __ . outE ( ) . count ( ) ) , Collections . emptyList ( ) } , { __ . select ( ""a"" ) . by ( ""name"" ) , __ . select ( ""a"" ) . map ( new ElementValueTraversal < > ( ""name"" ) ) , Collections . emptyList ( ) } , { __ . select ( ""a"" ) . out ( ) , __ . select ( ""a"" ) . out ( ) , Collections . emptyList ( ) } , { __ . select ( Pop . all , ""a"" ) . by ( __ . values ( ""name"" ) ) , __ . select ( Pop . all , ""a"" ) . by ( __ . values ( ""name"" ) ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( Pop . last , ""a"" ) . by ( __ . values ( ""name"" ) ) , __ . select ( Pop . last , ""a"" ) . map ( __ . values ( ""name"" ) ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( Pop . first , ""a"" ) . by ( __ . values ( ""name"" ) ) , __ . select ( Pop . first , ""a"" ) . map ( __ . values ( ""name"" ) ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( ""a"" , ""b"" ) , __ . select ( ""a"" , ""b"" ) , Collections . emptyList ( ) } , { __ . select ( ""a"" , ""b"" ) . by ( ) , __ . select ( ""a"" , ""b"" ) . by ( ) , Collections . emptyList ( ) } , { __ . select ( ""a"" , ""b"" , ""c"" ) . by ( ) , __ . select ( ""a"" , ""b"" , ""c"" ) . by ( ) , Collections . emptyList ( ) } , { __ . select ( ""a"" , ""b"" ) . by ( ) . by ( ""age"" ) , __ . select ( ""b"" ) . map ( new ElementValueTraversal < > ( ""age"" ) ) . as ( ""b"" ) . select ( ""a"" ) . map ( new IdentityTraversal < > ( ) ) . as ( ""a"" ) . select ( Pop . last , ""a"" , ""b"" ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . select ( ""b"" ) . map ( new ElementValueTraversal < > ( ""age"" ) ) . as ( ""b"" ) . select ( ""a"" ) . map ( new ElementValueTraversal < > ( ""name"" ) ) . as ( ""a"" ) . select ( Pop . last , ""a"" , ""b"" ) , Collections . emptyList ( ) } , { __ . select ( ""a"" , ""b"" , ""c"" ) . by ( ""name"" ) . by ( __ . outE ( ) . count ( ) ) , __ . select ( ""c"" ) . map ( new ElementValueTraversal < > ( ""name"" ) ) . as ( ""c"" ) . select ( ""b"" ) . map ( __ . outE ( ) . count ( ) ) . as ( ""b"" ) . select ( ""a"" ) . map ( new ElementValueTraversal < > ( ""name"" ) ) . as ( ""a"" ) . select ( Pop . last , ""a"" , ""b"" , ""c"" ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( Pop . first , ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . select ( Pop . first , ""b"" ) . map ( new ElementValueTraversal < > ( ""age"" ) ) . as ( ""b"" ) . select ( Pop . first , ""a"" ) . map ( new ElementValueTraversal < > ( ""name"" ) ) . as ( ""a"" ) . select ( Pop . last , ""a"" , ""b"" ) , Collections . emptyList ( ) } , { __ . select ( Pop . last , ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . select ( Pop . last , ""b"" ) . map ( new ElementValueTraversal < > ( ""age"" ) ) . as ( ""b"" ) . select ( Pop . last , ""a"" ) . map ( new ElementValueTraversal < > ( ""name"" ) ) . as ( ""a"" ) . select ( Pop . last , ""a"" , ""b"" ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( Pop . all , ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . select ( Pop . all , ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , Collections . emptyList ( ) } , { __ . select ( Pop . mixed , ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , __ . select ( Pop . mixed , ""a"" , ""b"" ) . by ( ""name"" ) . by ( ""age"" ) , Collections . emptyList ( ) } , { __ . where ( __ . out ( ""knows"" ) ) , __ . where ( __ . outE ( ""knows"" ) ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . where ( __ . as ( ""a"" ) . out ( ""knows"" ) ) , __ . identity ( ) . as ( ""xyz"" ) . select ( Pop . last , ""a"" ) . filter ( __ . out ( ""knows"" ) ) . select ( Pop . last , ""xyz"" ) , Collections . emptyList ( ) } , { __ . where ( __ . as ( ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) ) , __ . identity ( ) . as ( ""xyz"" ) . select ( Pop . last , ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) . select ( Pop . last , ""xyz"" ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . select ( ""b"" ) . where ( __ . as ( ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) ) , __ . select ( ""b"" ) . as ( ""xyz"" ) . select ( Pop . last , ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) . select ( Pop . last , ""xyz"" ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . where ( __ . as ( ""a"" ) . out ( ""knows"" ) . as ( ""b"" ) ) , __ . identity ( ) . as ( ""xyz"" ) . select ( Pop . last , ""a"" ) . where ( __ . out ( ""knows"" ) . as ( ""b"" ) ) . select ( Pop . last , ""xyz"" ) , Collections . emptyList ( ) } , { __ . where ( ""a"" , P . eq ( ""b"" ) ) , __ . where ( ""a"" , P . eq ( ""b"" ) ) , Collections . emptyList ( ) } , { __ . as ( ""a"" ) . out ( ) . where ( __ . as ( ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) ) . in ( ) , __ . as ( ""a"" ) . out ( ) . as ( ""xyz"" ) . select ( Pop . last , ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) . select ( Pop . last , ""xyz"" ) . in ( ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , { __ . as ( ""a"" ) . out ( ) . where ( __ . as ( ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) ) . in ( ) . path ( ) , __ . as ( ""a"" ) . out ( ) . where ( __ . as ( ""a"" ) . has ( ""age"" , P . gt ( 10 ) ) ) . in ( ) . path ( ) , TraversalStrategies . GlobalCache . getStrategies ( Graph . class ) . toList ( ) } , } ) ; }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , drainReplicationTable_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readBool ( ) ; struct . setSuccessIsSet ( true ) ; } }",Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , replicateKeyValues_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 2 ) ; if ( incoming . get ( 0 ) ) { struct . success = iprot . readI64 ( ) ; struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . e = new RemoteReplicationException ( ) ; struct . e . read ( iprot ) ; struct . setEIsSet ( true ) ; } }",Smelly
 public void testMixedOrmAnno ( ) throws Exception { OpenJPAEntityManagerSPI em = emf . createEntityManager ( ) ; em . close ( ) ; },No
 public void reset ( ) { super . reset ( ) ; for ( int i = 0 ; i < children . length ; i ++ ) { children [ i ] . reset ( ) ; } },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getFollowing_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { struct . success = new Key ( ) ; struct . success . read ( iprot ) ; struct . setSuccessIsSet ( true ) ; } }",No
 public ActiveContext getParentContext ( ) { return jcloseContext . getParentContext ( ) ; },No
 protected abstract T initialize ( ) throws ConcurrentException ;,No
" public void testSenderWithSpringXml ( ) throws Exception { assertSenderConfig ( ""org/apache/activemq/xbean/spring.xml"" ) ; }",No
 private static < S extends org . apache . thrift . scheme . IScheme > S scheme ( org . apache . thrift . protocol . TProtocol proto ) { return ( org . apache . thrift . scheme . StandardScheme . class . equals ( proto . getScheme ( ) ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ) . getScheme ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , getActiveLogs_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 1 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list327 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . success = new ArrayList < String > ( _list327 . size ) ; for ( int _i328 = 0 ; _i328 < _list327 . size ; ++ _i328 ) { String _elem329 ; _elem329 = iprot . readString ( ) ; struct . success . add ( _elem329 ) ; } } struct . setSuccessIsSet ( true ) ; } }",Smelly
 public int compareTo ( Broker o ) { if ( this . host . equals ( o . host ) ) { return this . port - o . port ; } else { return this . host . compareTo ( o . host ) ; } },No
 protected abstract T initialize ( ) throws ConcurrentException ;,No
" public int compare ( TermVectorOffsetInfo o1 , TermVectorOffsetInfo o2 ) { int s1 = o1 . getStartOffset ( ) ; int s2 = o2 . getStartOffset ( ) ; if ( s1 == s2 ) { return 0 ; } return s1 < s2 ? - 1 : 1 ; }",Smelly
" public void roundtripWhenParsingDateTimeFormatWithAdjustBy ( ) { final DateConverterForJodaDateTime converter = new DateConverterForJodaDateTime ( settings , - 1 ) ; final DateTime dt = converter . convertToObject ( ""2013-05-11 00:00"" , null ) ; assertThat ( dt , is ( new DateTime ( 2013 , 05 , 12 , 0 , 0 ) ) ) ; final String str = converter . convertToString ( dt , null ) ; assertThat ( str , is ( ""2013-05-11 00:00"" ) ) ; }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" private int getStart ( int levelNumber , LevelTuple [ ] overrideLevelTuples ) { if ( levelNumber >= levelTuples . length ) { return 1 ; } else { return ( overrideLevelTuples == null || overrideLevelTuples [ levelNumber ] . start < 0 ) ? levelTuples [ levelNumber ] . start : overrideLevelTuples [ levelNumber ] . start ; } }",No
" public void read ( org . apache . thrift . protocol . TProtocol prot , TByteColumn struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; { org . apache . thrift . protocol . TList _list67 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . BYTE , iprot . readI32 ( ) ) ; struct . values = new ArrayList < Byte > ( _list67 . size ) ; for ( int _i68 = 0 ; _i68 < _list67 . size ; ++ _i68 ) { byte _elem69 ; _elem69 = iprot . readByte ( ) ; struct . values . add ( _elem69 ) ; } } struct . setValuesIsSet ( true ) ; struct . nulls = iprot . readBinary ( ) ; struct . setNullsIsSet ( true ) ; }",No
" public void testLogStringDurationIsNotZero ( ) throws Exception { ThroughputLogger underTest = new ThroughputLogger ( 10 ) ; for ( int i = 0 ; i < 25 ; i ++ ) { underTest . process ( null ) ; } String message = ( String ) underTest . logMessage ( null ) ; assertTrue ( ""consumed 20 :"" + message , message . contains ( ""20"" ) ) ; }",No
" protected Transport createConsumer ( ) throws Exception { OpenWireFormat wireFormat = createWireFormat ( ) ; MulticastTransport transport = new MulticastTransport ( wireFormat , new URI ( multicastURI ) ) ; transport . setLoopBackMode ( false ) ; transport . setSequenceGenerator ( new IntSequenceGenerator ( ) ) ; return new CommandJoiner ( transport , wireFormat ) ; }",No
 private Object readResolve ( ) { return DataTypes . STRING ; },No
" public void testBasicAddDeleteUser ( ) { username = getProperty ( ""GUEST_USERNAME"" ) ; fullname = getProperty ( ""GUEST_FULLNAME"" ) ; createUser ( username , fullname , getUserEmail ( ) , getUserRolePassword ( ) , true ) ; deleteUser ( username , fullname , getUserEmail ( ) ) ; logout ( ) ; login ( getAdminUsername ( ) , getAdminPassword ( ) ) ; }",Smelly
" public void print ( StringBuilder sb , int indent , Verbosity verbosity ) { BaseAllocator . indent ( sb , indent ) . append ( toString ( ) ) ; if ( BaseAllocator . DEBUG && ! isEmpty && verbosity . includeHistoricalLog ) { sb . append ( ""\n"" ) ; historicalLog . buildHistory ( sb , indent + 1 , verbosity . includeStackTraces ) ; } }",No
 public boolean isSuspended ( ) { return false ; },No
" public void read ( org . apache . thrift . protocol . TProtocol prot , DataReplicaLocationModel struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 12 ) ; if ( incoming . get ( 0 ) ) { struct . replicaId = iprot . readString ( ) ; struct . setReplicaIdIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . productUri = iprot . readString ( ) ; struct . setProductUriIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . replicaName = iprot . readString ( ) ; struct . setReplicaNameIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . replicaDescription = iprot . readString ( ) ; struct . setReplicaDescriptionIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . creationTime = iprot . readI64 ( ) ; struct . setCreationTimeIsSet ( true ) ; } if ( incoming . get ( 5 ) ) { struct . lastModifiedTime = iprot . readI64 ( ) ; struct . setLastModifiedTimeIsSet ( true ) ; } if ( incoming . get ( 6 ) ) { struct . validUntilTime = iprot . readI64 ( ) ; struct . setValidUntilTimeIsSet ( true ) ; } if ( incoming . get ( 7 ) ) { struct . replicaLocationCategory = org . apache . airavata . model . data . replica . ReplicaLocationCategory . findByValue ( iprot . readI32 ( ) ) ; struct . setReplicaLocationCategoryIsSet ( true ) ; } if ( incoming . get ( 8 ) ) { struct . replicaPersistentType = org . apache . airavata . model . data . replica . ReplicaPersistentType . findByValue ( iprot . readI32 ( ) ) ; struct . setReplicaPersistentTypeIsSet ( true ) ; } if ( incoming . get ( 9 ) ) { struct . storageResourceId = iprot . readString ( ) ; struct . setStorageResourceIdIsSet ( true ) ; } if ( incoming . get ( 10 ) ) { struct . filePath = iprot . readString ( ) ; struct . setFilePathIsSet ( true ) ; } if ( incoming . get ( 11 ) ) { { org . apache . thrift . protocol . TMap _map24 = new org . apache . thrift . protocol . TMap ( org . apache . thrift . protocol . TType . STRING , org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . replicaMetadata = new HashMap < String , String > ( 2 * _map24 . size ) ; String _key25 ; String _val26 ; for ( int _i27 = 0 ; _i27 < _map24 . size ; ++ _i27 ) { _key25 = iprot . readString ( ) ; _val26 = iprot . readString ( ) ; struct . replicaMetadata . put ( _key25 , _val26 ) ; } } struct . setReplicaMetadataIsSet ( true ) ; } }",Smelly
" public double value ( double x , double y ) { return FastMath . pow ( x , y ) ; }",No
" SecuredStatement getStatement ( ) throws ReadDeniedException , AuthenticationRequiredException ;",No
" public boolean validatePolicy ( AssertionInfoMap aim , Message message , List < WSSecurityEngineResult > results , List < WSSecurityEngineResult > signedResults , List < WSSecurityEngineResult > encryptedResults ) { Collection < AssertionInfo > ais = aim . get ( SP12Constants . SUPPORTING_TOKENS ) ; if ( ais == null || ais . isEmpty ( ) ) { return true ; } setMessage ( message ) ; setResults ( results ) ; setSignedResults ( signedResults ) ; setEncryptedResults ( encryptedResults ) ; for ( AssertionInfo ai : ais ) { SupportingToken binding = ( SupportingToken ) ai . getAssertion ( ) ; if ( SPConstants . SupportTokenType . SUPPORTING_TOKEN_SUPPORTING != binding . getTokenType ( ) ) { continue ; } ai . setAsserted ( true ) ; setSignedParts ( binding . getSignedParts ( ) ) ; setEncryptedParts ( binding . getEncryptedParts ( ) ) ; setSignedElements ( binding . getSignedElements ( ) ) ; setEncryptedElements ( binding . getEncryptedElements ( ) ) ; List < Token > tokens = binding . getTokens ( ) ; for ( Token token : tokens ) { if ( ! isTokenRequired ( token , message ) ) { continue ; } boolean processingFailed = false ; if ( token instanceof UsernameToken ) { if ( ! processUsernameTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SamlToken ) { if ( ! processSAMLTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KerberosToken ) { if ( ! processKerberosTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof X509Token ) { if ( ! processX509Tokens ( ) ) { processingFailed = true ; } } else if ( token instanceof KeyValueToken ) { if ( ! processKeyValueTokens ( ) ) { processingFailed = true ; } } else if ( token instanceof SecurityContextToken ) { if ( ! processSCTokens ( ) ) { processingFailed = true ; } } else if ( ! ( token instanceof IssuedToken ) ) { processingFailed = true ; } if ( processingFailed ) { ai . setNotAsserted ( ""The received token does not match the supporting token requirement"" ) ; return false ; } } } return true ; }",Smelly
 void initialize ( ) ;,No
" public void read ( org . apache . thrift . protocol . TProtocol prot , getChildDataProducts_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( 5 ) ; if ( incoming . get ( 0 ) ) { { org . apache . thrift . protocol . TList _list283 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < org . apache . airavata . model . data . replica . DataProductModel > ( _list283 . size ) ; org . apache . airavata . model . data . replica . DataProductModel _elem284 ; for ( int _i285 = 0 ; _i285 < _list283 . size ; ++ _i285 ) { _elem284 = new org . apache . airavata . model . data . replica . DataProductModel ( ) ; _elem284 . read ( iprot ) ; struct . success . add ( _elem284 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { struct . ire = new org . apache . airavata . model . error . InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( 2 ) ) { struct . ace = new org . apache . airavata . model . error . AiravataClientException ( ) ; struct . ace . read ( iprot ) ; struct . setAceIsSet ( true ) ; } if ( incoming . get ( 3 ) ) { struct . ase = new org . apache . airavata . model . error . AiravataSystemException ( ) ; struct . ase . read ( iprot ) ; struct . setAseIsSet ( true ) ; } if ( incoming . get ( 4 ) ) { struct . ae = new org . apache . airavata . model . error . AuthorizationException ( ) ; struct . ae . read ( iprot ) ; struct . setAeIsSet ( true ) ; } }",Smelly
" protected List < Result > doScan ( Scan scan ) throws Exception { BufferingScanResultConsumer scanConsumer = new BufferingScanResultConsumer ( ) ; ASYNC_CONN . getTable ( TABLE_NAME ) . scan ( scan , scanConsumer ) ; List < Result > results = new ArrayList < > ( ) ; for ( Result result ; ( result = scanConsumer . take ( ) ) != null ; ) { results . add ( result ) ; } if ( scan . getBatch ( ) > 0 ) { results = convertFromBatchResult ( results ) ; } return results ; }",No
" private void readInterfaces ( ) throws IOException { prt ( ""#interfaces"" ) ; interfaces_count = in . readUnsignedShort ( ) ; if ( interfaces_count != 0 ) { interfaces = new int [ interfaces_count ] ; for ( int i = 0 ; i < interfaces_count ; i ++ ) { interfaces [ i ] = in . readUnsignedShort ( ) ; } } }",Smelly
" public void testCookiesInstance ( ) throws Exception { System . setProperty ( ""org.apache.catalina.STRICT_SERVLET_COMPLIANCE"" , ""true"" ) ; System . setProperty ( ""org.apache.tomcat.util.http.ServerCookie.STRICT_NAMING"" , ""false"" ) ; Tomcat tomcat = getTomcatInstance ( ) ; addServlets ( tomcat ) ; tomcat . start ( ) ; ByteChunk res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/invalid"" ) ; assertEquals ( ""Cookie name fail"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/null"" ) ; assertEquals ( ""Cookie name fail"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/blank"" ) ; assertEquals ( ""Cookie name fail"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/invalidFwd"" ) ; assertEquals ( ""Cookie name ok"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/invalidStrict"" ) ; assertEquals ( ""Cookie name ok"" , res . toString ( ) ) ; res = getUrl ( ""http://localhost:"" + getPort ( ) + ""/valid"" ) ; assertEquals ( ""Cookie name ok"" , res . toString ( ) ) ; }",Smelly
 public Socket getResult ( ) { return rval ; },No
 public static CheckSelectProc canApplyOnSelectOperator ( ) { return new CheckSelectProc ( ) ; },Smelly
" public void read ( org . apache . thrift . protocol . TProtocol prot , LongColumnStatsData struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . lowValue = iprot . readI64 ( ) ; struct . setLowValueIsSet ( true ) ; struct . highValue = iprot . readI64 ( ) ; struct . setHighValueIsSet ( true ) ; struct . numNulls = iprot . readI64 ( ) ; struct . setNumNullsIsSet ( true ) ; struct . numDVs = iprot . readI64 ( ) ; struct . setNumDVsIsSet ( true ) ; }",Smelly
 public void setEvictExpiredMessagesHighWatermark ( int evictExpiredMessagesHighWaterMark ) { this . evictExpiredMessagesHighWatermark = evictExpiredMessagesHighWaterMark ; },No
" public K [ ] getSample ( InputFormat < K , V > inf , JobConf job ) throws IOException { InputSplit [ ] splits = inf . getSplits ( job , job . getNumMapTasks ( ) ) ; ArrayList < K > samples = new ArrayList < K > ( ) ; int splitsToSample = Math . min ( maxSplitsSampled , splits . length ) ; int splitStep = splits . length / splitsToSample ; long records = 0 ; long kept = 0 ; for ( int i = 0 ; i < splitsToSample ; ++ i ) { RecordReader < K , V > reader = inf . getRecordReader ( splits [ i * splitStep ] , job , Reporter . NULL ) ; K key = reader . createKey ( ) ; V value = reader . createValue ( ) ; while ( reader . next ( key , value ) ) { ++ records ; if ( ( double ) kept / records < freq ) { ++ kept ; samples . add ( key ) ; key = reader . createKey ( ) ; } } reader . close ( ) ; } return ( K [ ] ) samples . toArray ( ) ; }",Smelly
 public void end ( final String name ) { AnnotationVisitor av = ( AnnotationVisitor ) pop ( ) ; if ( av != null ) { av . visitEnd ( ) ; } },Smelly
" public static void main ( String [ ] args ) { if ( args . length != 13 ) { System . err . println ( ""Usage: DefineJob <description> <connection_name> <output_name> <type> <start_method> <hopcount_method> <recrawl_interval> <expiration_interval> <reseed_interval> <job_priority> <hop_filters> <filespec_xml> <outputspec_xml>"" ) ; System . err . println ( ""<type> is one of: continuous or specified"" ) ; System . err . println ( ""<start_method> is one of: windowbegin, windowinside, disable"" ) ; System . err . println ( ""<hopcount_method> is one of: accurate, nodelete, neverdelete"" ) ; System . err . println ( ""<recrawl_interval> is the default document recrawl interval in minutes"" ) ; System . err . println ( ""<expiration_interval> is the default document expiration interval in minutes"" ) ; System . err . println ( ""<reseed_interval> is the default document reseed interval in minutes"" ) ; System . err . println ( ""<job_priority> is the job priority (and integer between 0 and 10)"" ) ; System . err . println ( ""<hop_filters> is a comma-separated list of tuples, of the form 'linktype=maxhops'"" ) ; System . err . println ( ""<filespec_xml> is the document specification XML, its form dependent on the connection type"" ) ; System . err . println ( ""<outputspec_xml> is the output specification XML, its form dependent on the output connection type"" ) ; System . exit ( - 1 ) ; } String description = args [ 0 ] ; String connectionName = args [ 1 ] ; String outputConnectionName = args [ 2 ] ; String typeString = args [ 3 ] ; String startString = args [ 4 ] ; String hopcountString = args [ 5 ] ; String recrawlInterval = args [ 6 ] ; String expirationInterval = args [ 7 ] ; String reseedInterval = args [ 8 ] ; String jobPriority = args [ 9 ] ; String hopFilters = args [ 10 ] ; String filespecXML = args [ 11 ] ; String outputspecXML = args [ 12 ] ; try { ManifoldCF . initializeEnvironment ( ) ; IThreadContext tc = ThreadContextFactory . make ( ) ; IJobManager jobManager = JobManagerFactory . make ( tc ) ; IJobDescription desc = jobManager . createJob ( ) ; desc . setDescription ( description ) ; desc . setConnectionName ( connectionName ) ; desc . setOutputConnectionName ( outputConnectionName ) ; if ( typeString . equals ( ""continuous"" ) ) desc . setType ( IJobDescription . TYPE_CONTINUOUS ) ; else if ( typeString . equals ( ""specified"" ) ) desc . setType ( IJobDescription . TYPE_SPECIFIED ) ; else throw new ManifoldCFException ( ""Unknown type: '"" + typeString + ""'"" ) ; if ( startString . equals ( ""windowbegin"" ) ) desc . setStartMethod ( IJobDescription . START_WINDOWBEGIN ) ; else if ( startString . equals ( ""windowinside"" ) ) desc . setStartMethod ( IJobDescription . START_WINDOWINSIDE ) ; else if ( startString . equals ( ""disable"" ) ) desc . setStartMethod ( IJobDescription . START_DISABLE ) ; else throw new ManifoldCFException ( ""Unknown start method: '"" + startString + ""'"" ) ; if ( hopcountString . equals ( ""accurate"" ) ) desc . setHopcountMode ( IJobDescription . HOPCOUNT_ACCURATE ) ; else if ( hopcountString . equals ( ""nodelete"" ) ) desc . setHopcountMode ( IJobDescription . HOPCOUNT_NODELETE ) ; else if ( hopcountString . equals ( ""neverdelete"" ) ) desc . setHopcountMode ( IJobDescription . HOPCOUNT_NEVERDELETE ) ; else throw new ManifoldCFException ( ""Unknown hopcount mode: '"" + hopcountString + ""'"" ) ; if ( recrawlInterval . length ( ) > 0 ) desc . setInterval ( new Long ( recrawlInterval ) ) ; if ( expirationInterval . length ( ) > 0 ) desc . setExpiration ( new Long ( expirationInterval ) ) ; if ( reseedInterval . length ( ) > 0 ) desc . setReseedInterval ( new Long ( reseedInterval ) ) ; desc . setPriority ( Integer . parseInt ( jobPriority ) ) ; String [ ] hopFilterSet = hopFilters . split ( "","" ) ; int i = 0 ; while ( i < hopFilterSet . length ) { String hopFilter = hopFilterSet [ i ++ ] ; if ( hopFilter != null && hopFilter . length ( ) > 0 ) { String [ ] stuff = hopFilter . trim ( ) . split ( ""="" ) ; if ( stuff != null && stuff . length == 2 ) desc . addHopCountFilter ( stuff [ 0 ] , ( ( stuff [ 1 ] . length ( ) > 0 ) ? new Long ( stuff [ 1 ] ) : null ) ) ; } } desc . getSpecification ( ) . fromXML ( filespecXML ) ; if ( outputspecXML . length ( ) > 0 ) desc . getOutputSpecification ( ) . fromXML ( outputspecXML ) ; jobManager . save ( desc ) ; System . out . print ( desc . getID ( ) . toString ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( - 2 ) ; } }",Smelly
 public void setBalance ( int balance ) { this . balance = balance ; },No
" private static String formatExpandedName ( String [ ] n ) { String u = ( n [ 0 ] != null ) ? n [ 0 ] : ""null"" ; String l = ( n [ 1 ] != null ) ? n [ 1 ] : ""null"" ; return ""{"" + u + ""}"" + l ; }",No
