Smell,Code
God Class,"public class RetailStore {
    private String name;
    private String location;
    private List<Product> products;
    private List<Employee> employees;
    private List<Customer> customers;

    public RetailStore(String name, String location) {
        this.name = name;
        this.location = location;
        this.products = new ArrayList<>();
        this.employees = new ArrayList<>();
        this.customers = new ArrayList<>();
    }

    public void addProduct(Product product) {
        products.add(product);
    }

    public void removeProduct(Product product) {
        products.remove(product);
    }

    public void addEmployee(Employee employee) {
        employees.add(employee);
    }

    public void removeEmployee(Employee employee) {
        employees.remove(employee);
    }

    public void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public void removeCustomer(Customer customer) {
        customers.remove(customer);
    }

    public void processSale(Customer customer, Product product) {
        if(customers.contains(customer) && products.contains(product)) {
            System.out.println(""Processing sale for "" + customer.getName() + "" for product "" + product.getName());
            // additional sale processing logic
        }
    }

    public void manageInventory() {
        // logic to manage inventory
    }

    public void calculateProfit() {
        // logic to calculate total profit
    }

    public void generateSalesReport() {
        // logic to generate sales report
    }

    public void conductEmployeeReview(Employee employee) {
        // logic to conduct employee performance review
    }

    public void updateCustomerInformation(Customer customer) {
        // logic to update customer information
    }
    
    // Getters and Setters for name, location, products, employees, customers
}
"
Data Class,"class Subscriber {
    constructor(name, phoneNumber, email, address) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.address = address;
    }

    getSubscriberInfo() {
        return {
            name: this.name,
            phoneNumber: this.phoneNumber,
            email: this.email,
            address: this.address
        };
    }
}
"
Long Parameter List,"def calculate_production_cost(material_cost, labor_cost, overhead_cost, shipping_cost, taxes, discounts, markup_percentage, production_time, machine_hours, maintenance_cost, waste_percentage, environmental_fees):
    total_cost = (material_cost + labor_cost + overhead_cost + shipping_cost + taxes - discounts) * (1 + markup_percentage / 100)
    per_hour_cost = total_cost / production_time
    adjusted_cost = per_hour_cost + (maintenance_cost / machine_hours) + (total_cost * waste_percentage / 100) + environmental_fees
    return adjusted_cost
"
Data Class,"from dataclasses import dataclass

@dataclass
class EnergyConsumption:
    user_id: int
    month: str
    year: int
    kwh_used: float
    cost: float

    def total_cost(self):
        return self.kwh_used * self.cost

    def display(self):
        print(f""User {self.user_id} consumed {self.kwh_used} kWh in {self.month}/{self.year} at a cost of {self.cost:.2f}."")
"
Data Class,"class Product {
public:
    std::string name;
    double price;
    int quantity;

    Product(std::string n, double p, int q) : name(n), price(p), quantity(q) {}

    double totalValue() const {
        return price * quantity;
    }

    void displayInfo() const {
        std::cout << ""Name: "" << name << "", Price: "" << price << "", Quantity: "" << quantity << std::endl;
    }
};
"
Long Parameter List,"void enrollStudentInCourse(int studentId, int courseId, const std::string& semester, const std::string& year, bool isFullTime, bool isOnline, const std::string& major, const std::string& advisorName, double gpa, const std::vector<std::string>& prerequisites, const std::string& academicStanding, const std::string& studentEmail) {
    // Method implementation
}
"
Data Class,"class EnergyConsumption {
    constructor(electricity, gas, water) {
        this.electricity = electricity;
        this.gas = gas;
        this.water = water;
    }

    getTotalConsumption() {
        return this.electricity + this.gas + this.water;
    }

    getElectricityUsage() {
        return this.electricity;
    }

    getGasUsage() {
        return this.gas;
    }

    getWaterUsage() {
        return this.water;
    }
}
"
Long Method,"async function handleBookingRequest(bookingDetails) {
    const { customerInfo, checkInDate, checkOutDate, roomType, paymentInfo } = bookingDetails;

    // Validate customer information
    if (!customerInfo.name || !customerInfo.email) {
        throw new Error('Invalid customer information');
    }

    // Check room availability
    const availableRooms = await checkRoomAvailability(roomType, checkInDate, checkOutDate);
    if (!availableRooms.length) {
        throw new Error('No rooms available for selected dates');
    }

    // Process payment
    const paymentResult = await processPayment(paymentInfo);
    if (!paymentResult.success) {
        throw new Error('Payment failed');
    }

    // Create booking
    const bookingId = await createBooking({
        customerId: customerInfo.id,
        roomType,
        checkInDate,
        checkOutDate,
        paymentId: paymentResult.id
    });

    // Send confirmation email
    await sendConfirmationEmail(customerInfo.email, bookingId, checkInDate, checkOutDate);

    // Update room status
    await updateRoomStatus(roomType, checkInDate, checkOutDate, 'booked');

    // Log booking activity
    await logBookingActivity(bookingId, customerInfo.id);

    // Return booking confirmation
    return {
        bookingId,
        message: 'Booking successful',
        checkInDate,
        checkOutDate
    };
}
"
Code Clone,"public class Patient {
    private String name;
    private int age;
    private String gender;
    private String diagnosis;

    public Patient(String name, int age, String gender, String diagnosis) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.diagnosis = diagnosis;
    }

    public void printPatientInfo() {
        System.out.println(""Patient Name: "" + name);
        System.out.println(""Patient Age: "" + age);
        System.out.println(""Patient Gender: "" + gender);
        System.out.println(""Patient Diagnosis: "" + diagnosis);
    }

    public void printPatientSummary() {
        System.out.println(""Summary of Patient: "" + name);
        System.out.println(""Age: "" + age);
        System.out.println(""Gender: "" + gender);
        System.out.println(""Diagnosis: "" + diagnosis);
    }

    public void printPatientOverview() {
        System.out.println(""Overview of Patient: "" + name);
        System.out.println(""Age: "" + age);
        System.out.println(""Gender: "" + gender);
        System.out.println(""Diagnosis: "" + diagnosis);
    }
}
"
Feature Envy,"def calculate_discounted_price(self, customer):
    if customer.loyalty_points > 100:
        discount = 0.2
    elif customer.loyalty_points > 50:
        discount = 0.1
    else:
        discount = 0
    
    return self.price * (1 - discount)
"
Long Method,"void TransportCompany::processTransportRequest(const TransportRequest& request) {
    if (request.getDestination() == ""Airport"") {
        Vehicle vehicle = fleet.getAvailableVehicle(""Airport"");
        if (vehicle.isAvailable()) {
            driver.assign(vehicle, request.getPickupLocation());
            double distance = calculateDistance(request.getPickupLocation(), request.getDestination());
            double estimatedTime = distance / vehicle.getSpeed();
            double fare = calculateFare(distance, vehicle.getRate());
            sendConfirmation(request.getCustomerId(), estimatedTime, fare);
            vehicle.markUnavailable();
        } else {
            notifyCustomer(request.getCustomerId(), ""No available vehicles for your request."");
        }
    } else if (request.getDestination() == ""Train Station"") {
        Vehicle vehicle = fleet.getAvailableVehicle(""Train Station"");
        if (vehicle.isAvailable()) {
            driver.assign(vehicle, request.getPickupLocation());
            double distance = calculateDistance(request.getPickupLocation(), request.getDestination());
            double estimatedTime = distance / vehicle.getSpeed();
            double fare = calculateFare(distance, vehicle.getRate());
            sendConfirmation(request.getCustomerId(), estimatedTime, fare);
            vehicle.markUnavailable();
        } else {
            notifyCustomer(request.getCustomerId(), ""No available vehicles for your request."");
        }
    } else if (request.getDestination() == ""City Center"") {
        Vehicle vehicle = fleet.getAvailableVehicle(""City Center"");
        if (vehicle.isAvailable()) {
            driver.assign(vehicle, request.getPickupLocation());
            double distance = calculateDistance(request.getPickupLocation(), request.getDestination());
            double estimatedTime = distance / vehicle.getSpeed();
            double fare = calculateFare(distance, vehicle.getRate());
            sendConfirmation(request.getCustomerId(), estimatedTime, fare);
            vehicle.markUnavailable();
        } else {
            notifyCustomer(request.getCustomerId(), ""No available vehicles for your request."");
        }
    } else {
        notifyCustomer(request.getCustomerId(), ""Destination not serviced."");
    }
}
"
Data Class,"public class User {
    private String username;
    private String email;
    private String password;
    private String firstName;
    private String lastName;

    public User(String username, String email, String password, String firstName, String lastName) {
        this.username = username;
        this.email = email;
        this.password = password;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getUsername() {
        return username;
    }

    public String getEmail() {
        return email;
    }

    public String getPassword() {
        return password;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    @Override
    public String toString() {
        return ""User{"" +
                ""username='"" + username + '\'' +
                "", email='"" + email + '\'' +
                "", firstName='"" + firstName + '\'' +
                "", lastName='"" + lastName + '\'' +
                '}';
    }
}
"
Long Method,"void processReservation(const Reservation& reservation) {
    checkAvailability(reservation.roomType, reservation.checkInDate, reservation.checkOutDate);
    calculateTotalPrice(reservation.roomType, reservation.checkInDate, reservation.checkOutDate, reservation.numberOfGuests);
    if (reservation.hasSpecialRequests) {
        handleSpecialRequests(reservation.specialRequests);
    }
    generateConfirmationNumber(reservation);
    sendConfirmationEmail(reservation.customerEmail, reservation.confirmationNumber);
    logReservationDetails(reservation);
    if (reservation.paymentMethod == ""credit"") {
        processCreditPayment(reservation);
    } else if (reservation.paymentMethod == ""cash"") {
        processCashPayment(reservation);
    } else {
        throw std::runtime_error(""Invalid payment method"");
    }
    updateRoomStatus(reservation.roomType, reservation.checkInDate);
    notifyFrontDesk(reservation);
    updateCustomerProfile(reservation.customerId, reservation.specialRequests);
    createPaymentReceipt(reservation);
    scheduleCleaningService(reservation.roomType, reservation.checkInDate);
}
"
Long Parameter List,"function scheduleService(appointmentDate, vehicleId, serviceType, customerName, customerContact, serviceCenterId, technicianId, isInsuranceClaim, specialRequests, preferredPaymentMethod) {
    // Implementation logic here
}
"
Long Method,"def process_guest_check_in(guest_info, room_type, payment_info, special_requests):
    check_in_time = datetime.now()
    room_assignment = assign_room(room_type)
    if room_assignment is None:
        return ""No rooms available""
    
    guest_id = create_guest_record(guest_info, check_in_time, room_assignment)
    if guest_id is None:
        return ""Error creating guest record""
    
    if not process_payment(payment_info):
        return ""Payment processing failed""

    for request in special_requests:
        if request == ""late check-out"":
            schedule_late_check_out(guest_id)
        elif request == ""extra towels"":
            notify_housekeeping(guest_id, ""extra towels"")
        elif request == ""wake-up call"":
            schedule_wake_up_call(guest_id)
        # Additional special requests can be added here

    send_confirmation_email(guest_info['email'], guest_id)
    return f""Guest {guest_info['name']} checked in successfully.""
"
God Class,"class RestaurantManagementSystem:
    def __init__(self):
        self.menu_items = []
        self.customers = []
        self.orders = []
    
    def add_menu_item(self, item):
        self.menu_items.append(item)

    def remove_menu_item(self, item):
        self.menu_items.remove(item)

    def list_menu_items(self):
        return self.menu_items

    def register_customer(self, customer):
        self.customers.append(customer)

    def remove_customer(self, customer):
        self.customers.remove(customer)

    def place_order(self, customer, items):
        order = {
            'customer': customer,
            'items': items,
            'status': 'Pending'
        }
        self.orders.append(order)

    def change_order_status(self, order_id, status):
        self.orders[order_id]['status'] = status

    def get_order_summary(self, order_id):
        return self.orders[order_id]

    def get_customer_orders(self, customer):
        return [order for order in self.orders if order['customer'] == customer]

    def generate_report(self):
        # Generates a report of all orders
        report = {}
        for order in self.orders:
            status = order['status']
            if status not in report:
                report[status] = 0
            report[status] += 1
        return report

    def calculate_total_sales(self):
        # Total sales calculation (simplified)
        total = 0
        for order in self.orders:
            total += sum(item['price'] for item in order['items'])
        return total
    
    def handle_customer_feedback(self, customer, feedback):
        # Store the feedback
        print(f""Feedback from {customer}: {feedback}"")

    def update_staff_schedule(self, staff_member, schedule):
        # Update staff schedule
        print(f""Updated schedule for {staff_member}."")

    def manage_inventory(self, item, quantity):
        # Manage inventory levels for restaurant stock
        print(f""Updated inventory: {item}, Quantity: {quantity}."")
"
Code Clone,"public class Car {
    private String make;
    private String model;
    private int year;

    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void drive() {
        System.out.println(""Driving the "" + make + "" "" + model);
    }

    public void park() {
        System.out.println(""Parking the "" + make + "" "" + model);
    }

    public void displayInfo() {
        System.out.println(year + "" "" + make + "" "" + model);
    }
}

public class Truck {
    private String make;
    private String model;
    private int year;

    public Truck(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void drive() {
        System.out.println(""Driving the "" + make + "" "" + model);
    }

    public void park() {
        System.out.println(""Parking the "" + make + "" "" + model);
    }

    public void displayInfo() {
        System.out.println(year + "" "" + make + "" "" + model);
    }
}
"
Data Class,"class Movie {
public:
    std::string title;
    std::string director;
    int releaseYear;
    std::string genre;

    Movie(std::string t, std::string d, int rY, std::string g) 
        : title(t), director(d), releaseYear(rY), genre(g) {}

    void displayInfo() {
        std::cout << ""Title: "" << title << std::endl;
        std::cout << ""Director: "" << director << std::endl;
        std::cout << ""Release Year: "" << releaseYear << std::endl;
        std::cout << ""Genre: "" << genre << std::endl;
    }
};
"
Data Class,"public class Vehicle {
    private String make;
    private String model;
    private int year;
    private String color;
    private String vin;

    public Vehicle(String make, String model, int year, String color, String vin) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
        this.vin = vin;
    }

    public String getMake() {
        return make;
    }

    public String getModel() {
        return model;
    }

    public int getYear() {
        return year;
    }

    public String getColor() {
        return color;
    }

    public String getVin() {
        return vin;
    }
}
"
Feature Envy,"def calculate_total_price(self):
    total = 0
    for part in self.parts:
        total += part.get_price() + part.get_tax()
    total += self.get_service_charge()
    return total
"
Long Parameter List,"public void processOrder(Long orderId, Long customerId, Long productId, Long paymentId, Long shippingId, Long discountId, Long taxId) {
    // method implementation here
}
"
Feature Envy,"public void printMovieDetails(Movie movie) {
    System.out.println(""Title: "" + movie.getTitle());
    System.out.println(""Director: "" + movie.getDirector().getName());
    System.out.println(""Release Year: "" + movie.getReleaseYear());
    System.out.println(""Genre: "" + movie.getGenre().getName());
    System.out.println(""Rating: "" + movie.getRating().getValue());
}
"
Long Method,"public void generateConstructionReport() {
    StringBuilder report = new StringBuilder();
    report.append(""Construction Report\n"");
    report.append(""Date: "").append(LocalDate.now()).append(""\n"");
    report.append(""Project Name: "").append(projectName).append(""\n"");
    report.append(""Location: "").append(location).append(""\n"");
    report.append(""Client: "").append(clientName).append(""\n"");
    report.append(""\nWork Summary:\n"");
    
    for (WorkItem item : workItems) {
        report.append(""Work Item: "").append(item.getDescription()).append(""\n"");
        report.append(""Hours Spent: "").append(item.getHours()).append(""\n"");
        report.append(""Status: "").append(item.getStatus()).append(""\n"");
        report.append(""\n"");
    }
    
    report.append(""Materials Used:\n"");
    
    for (Material material : materials) {
        report.append(""Material: "").append(material.getName()).append(""\n"");
        report.append(""Quantity: "").append(material.getQuantity()).append(""\n"");
        report.append(""Cost: "").append(material.getCost()).append(""\n"");
        report.append(""\n"");
    }
    
    report.append(""Labor Costs:\n"");
    
    for (Labor labor : laborCosts) {
        report.append(""Worker: "").append(labor.getWorkerName()).append(""\n"");
        report.append(""Hours Worked: "").append(labor.getHoursWorked()).append(""\n"");
        report.append(""Rate: "").append(labor.getHourlyRate()).append(""\n"");
        report.append(""Total Cost: "").append(labor.getTotalCost()).append(""\n"");
        report.append(""\n"");
    }
    
    report.append(""Overall Project Status: "").append(overallStatus).append(""\n"");
    
    writeReportToFile(report.toString());
}
"
Long Method,"void calculatePremium(Customer customer, Policy policy) {
    double baseRate = policy.getBaseRate();
    double ageFactor = 1.0;
    
    if (customer.getAge() < 25) {
        ageFactor = 1.5;
    } else if (customer.getAge() >= 25 && customer.getAge() < 40) {
        ageFactor = 1.2;
    } else if (customer.getAge() >= 40 && customer.getAge() < 60) {
        ageFactor = 1.1;
    } else {
        ageFactor = 1.3;
    }

    double drivingRecordFactor = 1.0;
    if (customer.hasAccidentsLast5Years()) {
        drivingRecordFactor = 1.5;
    }
    
    double creditScoreFactor = 1.0;
    if (customer.getCreditScore() < 600) {
        creditScoreFactor = 1.8;
    } else if (customer.getCreditScore() >= 600 && customer.getCreditScore() < 700) {
        creditScoreFactor = 1.3;
    }

    double locationFactor = 1.0;
    if (customer.getLocation() == ""high crime"") {
        locationFactor = 1.6;
    } else if (customer.getLocation() == ""average"") {
        locationFactor = 1.2;
    } else if (customer.getLocation() == ""low crime"") {
        locationFactor = 0.9;
    }

    double discount = 0.0;
    if (customer.isLoyal()) {
        discount += 0.1; // 10% discount for loyalty
    }
    if (policy.isBundled()) {
        discount += 0.15; // 15% discount for bundling
    }

    double premium = baseRate * ageFactor * drivingRecordFactor * creditScoreFactor * locationFactor * (1 - discount);
    
    if (customer.hasPendingClaims()) {
        premium *= 1.2; // increase by 20% if there are pending claims
    }
    
    if (policy.isHighValue() && customer.getAge() > 50) {
        premium += 500; // additional charge for high-value policies for older customers
    }

    customer.setCalculatedPremium(premium);
}
"
Long Method,"public void processPrescription(Prescription prescription) {
    if (prescription == null) {
        throw new IllegalArgumentException(""Prescription cannot be null"");
    }
    String patientName = prescription.getPatientName();
    Date prescriptionDate = prescription.getDate();
    List<Medication> medications = prescription.getMedications();
    
    for (Medication medication : medications) {
        validateMedication(medication);
        if (medication.isRefill()) {
            refillMedication(medication);
        } else {
            dispenseMedication(medication, patientName);
        }
        logDispenseAction(medication, patientName, prescriptionDate);
    }
    
    checkInsuranceCoverage(prescription);
    updateInventory(medications);
    sendNotificationToPatient(patientName, medications);
    updatePatientRecord(prescription);
    generateReport(prescription);
    
    // Additional processing
    if (prescription.hasDrugInteraction()) {
        warnPatientOfInteractions(prescription);
    }

    if (prescription.isExpired()) {
        handleExpiredPrescription(prescription);
    }

    // Final checks
    checkRegulatoryCompliance(prescription);
    auditPrescriptionProcessing(prescription);
}
"
Long Method,"calculateTotalPrice(cartItems) {
    let totalPrice = 0;
    let discount = 0;
    let tax = 0;
    let shippingCost = 0;

    for (let item of cartItems) {
        totalPrice += item.price * item.quantity;

        if (item.discount) {
            discount += item.price * item.discount * item.quantity;
        }

        if (item.isTaxable) {
            tax += item.price * 0.1 * item.quantity; // assuming a 10% tax rate
        }

        if (item.requiresShipping) {
            shippingCost += item.shippingCost;
        }
    }

    let finalPrice = totalPrice - discount + tax + shippingCost;

    if (totalPrice > 100) {
        finalPrice -= 10; // apply a flat discount for orders over $100
    }

    if (cartItems.length > 5) {
        finalPrice -= 5; // apply an additional discount for large carts
    }

    return finalPrice;
}
"
Code Clone,"class Movie {
    constructor(title, director, releaseYear) {
        this.title = title;
        this.director = director;
        this.releaseYear = releaseYear;
    }

    getDetails() {
        return `${this.title}, directed by ${this.director}, released in ${this.releaseYear}`;
    }
}

class TVShow {
    constructor(title, creator, seasons) {
        this.title = title;
        this.creator = creator;
        this.seasons = seasons;
    }

    getDetails() {
        return `${this.title}, created by ${this.creator}, with ${this.seasons} seasons`;
    }
}
"
Code Clone,"public class Medication {
    private String name;
    private double dosage;
    private String manufacturer;
    private String sideEffects;

    public Medication(String name, double dosage, String manufacturer, String sideEffects) {
        this.name = name;
        this.dosage = dosage;
        this.manufacturer = manufacturer;
        this.sideEffects = sideEffects;
    }

    public void displayInfo() {
        System.out.println(""Medication Name: "" + name);
        System.out.println(""Dosage: "" + dosage);
        System.out.println(""Manufacturer: "" + manufacturer);
        System.out.println(""Side Effects: "" + sideEffects);
    }

    public void printLabel() {
        System.out.println(""Medication: "" + name);
        System.out.println(""Dosage: "" + dosage);
        System.out.println(""Produced by: "" + manufacturer);
    }

    public void printSideEffects() {
        System.out.println(""Caution: "" + sideEffects);
    }

    public void printDosageInstructions() {
        System.out.println(""Take "" + dosage + "" of "" + name);
    }
}
"
Code Clone,"public class Course {
    private String courseName;
    private String courseCode;
    private int credits;

    public Course(String courseName, String courseCode, int credits) {
        this.courseName = courseName;
        this.courseCode = courseCode;
        this.credits = credits;
    }

    public String getCourseName() {
        return courseName;
    }

    public String getCourseCode() {
        return courseCode;
    }

    public int getCredits() {
        return credits;
    }

    public void printCourseDetails() {
        System.out.println(""Course Name: "" + courseName);
        System.out.println(""Course Code: "" + courseCode);
        System.out.println(""Credits: "" + credits);
    }
}

public class LabCourse {
    private String labCourseName;
    private String labCourseCode;
    private int labCredits;

    public LabCourse(String labCourseName, String labCourseCode, int labCredits) {
        this.labCourseName = labCourseName;
        this.labCourseCode = labCourseCode;
        this.labCredits = labCredits;
    }

    public String getLabCourseName() {
        return labCourseName;
    }

    public String getLabCourseCode() {
        return labCourseCode;
    }

    public int getLabCredits() {
        return labCredits;
    }

    public void printLabCourseDetails() {
        System.out.println(""Lab Course Name: "" + labCourseName);
        System.out.println(""Lab Course Code: "" + labCourseCode);
        System.out.println(""Lab Credits: "" + labCredits);
    }
}
"
Feature Envy,"def calculate_total_order_value(order):
    total = 0
    for item in order.items:
        total += item.price * item.quantity
        total += item.get_tax()  # Feature Envy: relying on item to calculate its own tax
    return total
"
Code Clone,"public class Beverage {
    private String name;
    private double volume;
    private double price;

    public Beverage(String name, double volume, double price) {
        this.name = name;
        this.volume = volume;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getVolume() {
        return volume;
    }

    public double getPrice() {
        return price;
    }

    public void serve() {
        System.out.println(""Serving "" + name + "" of "" + volume + "" liters at $"" + price);
    }
}

public class Coffee extends Beverage {
    private String roastType;

    public Coffee(String name, double volume, double price, String roastType) {
        super(name, volume, price);
        this.roastType = roastType;
    }

    @Override
    public void serve() {
        System.out.println(""Serving "" + getName() + "" ("" + roastType + "") of "" + getVolume() + "" liters at $"" + getPrice());
    }
}

public class Tea extends Beverage {
    private String leafType;

    public Tea(String name, double volume, double price, String leafType) {
        super(name, volume, price);
        this.leafType = leafType;
    }

    @Override
    public void serve() {
        System.out.println(""Serving "" + getName() + "" ("" + leafType + "") of "" + getVolume() + "" liters at $"" + getPrice());
    }
}
"
Long Method,"calculateInsurancePremium(age, vehicleType, coverageAmount, location) {
    let basePremium = 200;
    if (age < 25) {
        basePremium += 100;
    } else if (age > 60) {
        basePremium += 50;
    }

    if (vehicleType === 'sports') {
        basePremium += 150;
    } else if (vehicleType === 'suv') {
        basePremium += 75;
    }

    if (coverageAmount > 50000) {
        basePremium += 100;
    } else if (coverageAmount < 20000) {
        basePremium -= 50;
    }

    if (location === 'high_crime') {
        basePremium += 200;
    } else if (location === 'rural') {
        basePremium -= 50;
    }
    
    // Additional calculations
    const discounts = this.calculateDiscounts(age, vehicleType, location);
    const fees = this.calculateAdditionalFees(location);
    const finalPremium = basePremium - discounts + fees;

    if (finalPremium < 100) {
        return 100;
    } else {
        return finalPremium;
    }
}
"
Long Parameter List,"public void registerPatient(String firstName, String lastName, Long patientId, Long phoneNumber, Long insuranceId, Long dob, Long addressId, Long emergencyContactId, Long primaryDoctorId) {
    // Implementation for registering a patient with the given details
}
"
Long Method,"calculateShippingCost(order) {
    let baseCost = 5.00;
    let weightCost = 0.0;
    let distanceCost = 0.0;
    let deliverySpeedCost = 0.0;

    if (order.weight <= 10) {
        weightCost = 0.0;
    } else if (order.weight <= 20) {
        weightCost = 5.00;
    } else if (order.weight <= 30) {
        weightCost = 10.00;
    } else {
        weightCost = 20.00;
    }

    if (order.distance <= 50) {
        distanceCost = 0.0;
    } else if (order.distance <= 100) {
        distanceCost = 10.00;
    } else if (order.distance <= 200) {
        distanceCost = 20.00;
    } else {
        distanceCost = 40.00;
    }

    if (order.deliverySpeed === 'standard') {
        deliverySpeedCost = 0.0;
    } else if (order.deliverySpeed === 'express') {
        deliverySpeedCost = 15.00;
    } else if (order.deliverySpeed === 'overnight') {
        deliverySpeedCost = 30.00;
    }

    let totalCost = baseCost + weightCost + distanceCost + deliverySpeedCost;

    if (order.hasFragileItems) {
        totalCost += 10.00;
    }

    if (order.insuranceCoverage) {
        totalCost += 5.00;
    }

    if (order.isInternational) {
        totalCost += 25.00;
        if (order.customsClearance) {
            totalCost += 20.00;
        }
    }

    return totalCost;
}
"
God Class,"class HealthcareSystem {
    constructor() {
        this.patients = [];
        this.doctors = [];
        this.appointments = [];
        this.prescriptions = [];
    }

    addPatient(patient) {
        this.patients.push(patient);
    }

    addDoctor(doctor) {
        this.doctors.push(doctor);
    }

    scheduleAppointment(patientId, doctorId, date) {
        const appointment = { patientId, doctorId, date };
        this.appointments.push(appointment);
    }

    issuePrescription(patientId, doctorId, medication) {
        const prescription = { patientId, doctorId, medication };
        this.prescriptions.push(prescription);
    }

    getPatientHistory(patientId) {
        // fetch and return patient details
    }

    getDoctorSchedule(doctorId) {
        // fetch and return doctor's schedule
    }

    sendReminder(appointmentId) {
        // send reminder for appointment
    }

    generateReport(patientId) {
        // generate health report for patient
    }

    handleEmergencyCase(patientId) {
        // handle emergency cases for the patient
    }

    updatePatientRecord(patientId, updateData) {
        // update patient's medical records
    }

    calculateInsuranceClaims(patientId) {
        // calculate claims for the patient's insurance
    }

    manageInventory(medicine, quantity) {
        // manage pharmacy inventory
    }

    performResearchStudy(studyDetails) {
        // conduct a research study based on the study details
    }
}
"
Long Method,"public void processCropData(List<Crop> crops) {
    for (Crop crop : crops) {
        if (crop.getType().equals(""Wheat"")) {
            double yield = calculateYield(crop);
            storeYieldData(crop.getId(), yield);
            if (crop.getRegion().equals(""North"")) {
                adjustFertilizer(crop, yield);
            }
            double averagePrice = fetchAveragePrice(crop.getType());
            updateMarketData(crop.getId(), averagePrice);
            if (yield < threshold) {
                notifyFarmers(crop.getFarmId(), yield);
            }
            List<Pest> pests = identifyPests(crop);
            for (Pest pest : pests) {
                applyPesticide(crop, pest);
            }
            logCropProcessing(crop);
            if (crop.getWaterNeed() > getAvailableWater(crop.getRegion())) {
                scheduleIrrigation(crop);
            }
            if (isHarvestTime(crop)) {
                initiateHarvest(crop);
            }
            provideFeedback(crop);
        } else if (crop.getType().equals(""Corn"")) {
            // Similar processing for Corn...
            // This part includes multiple conditions and method calls,
            // making it lengthy with further yield evaluation and market updates.
        } else if (crop.getType().equals(""Soybean"")) {
            // Processing for Soybean...
        }
        // Additional crop types can similarly be handled here, 
        // leading to a long method as more conditions and processing logic are added.
    }
}
"
Data Class,"class Hotel {
public:
    std::string name;
    std::string address;
    int rating;
    int numberOfRooms;
    double pricePerNight;

    Hotel(std::string name, std::string address, int rating, int numberOfRooms, double pricePerNight) 
        : name(name), address(address), rating(rating), numberOfRooms(numberOfRooms), pricePerNight(pricePerNight) {}

    void displayInfo() {
        std::cout << ""Hotel Name: "" << name << std::endl;
        std::cout << ""Address: "" << address << std::endl;
        std::cout << ""Rating: "" << rating << std::endl;
        std::cout << ""Number of Rooms: "" << numberOfRooms << std::endl;
        std::cout << ""Price per Night: $"" << pricePerNight << std::endl;
    }
};
"
Data Class,"from dataclasses import dataclass

@dataclass
class Stock:
    symbol: str
    name: str
    price: float
    volume: int
    market_cap: float

    def get_market_cap_per_share(self) -> float:
        return self.market_cap / self.volume if self.volume > 0 else 0.0

    def is_high_volume(self, threshold: int) -> bool:
        return self.volume > threshold
"
Data Class,"class Stock {
public:
    std::string ticker;
    double price;
    int sharesOutstanding;

    Stock(const std::string& ticker, double price, int sharesOutstanding)
        : ticker(ticker), price(price), sharesOutstanding(sharesOutstanding) {}
};
"
Long Method,"calculateTotalPrice(orderItems, taxRate, discount) {
    let totalPrice = 0;

    for (let item of orderItems) {
        if (item.type === 'food') {
            totalPrice += item.price * item.quantity;
        } else if (item.type === 'beverage') {
            totalPrice += item.price * item.quantity;
        }

        // Applying some conditionals for special items
        if (item.name === 'special drink') {
            totalPrice += 2; // additional cost for special drink
        }

        if (item.quantity > 10) {
            totalPrice -= item.price * 0.1; // 10% discount for bulk order
        }

        // Applying discount if any
        if (discount && discount.active) {
            totalPrice -= discount.amount;
        }

        // Calculate and add tax
        let tax = (totalPrice * taxRate) / 100;
        totalPrice += tax;

        // Other promotional adjustments
        if (orderItems.length > 5) {
            totalPrice -= 5; // flat discount for orders with more than 5 items
        }

        // Adding packaging cost if applicable
        if (item.requiresPackaging) {
            totalPrice += 1; // fixed packaging cost
        }

        // Adding delivery charges based on distance
        if (item.deliveryDistance > 10) {
            totalPrice += 5; // extra delivery charge for farther distances
        }
    }

    return totalPrice;
}
"
Long Method,"public void processSubscriberData(Subscriber subscriber) {
    if (subscriber == null) {
        throw new IllegalArgumentException(""Subscriber cannot be null"");
    }
    
    String subscriberId = subscriber.getId();
    if (subscriberId == null || subscriberId.isEmpty()) {
        throw new IllegalArgumentException(""Subscriber ID cannot be null or empty"");
    }
    
    List<CallRecord> callRecords = fetchCallRecords(subscriberId);
    List<BillingRecord> billingRecords = fetchBillingRecords(subscriberId);
    List<Complaint> complaints = fetchComplaints(subscriberId);
    
    for (CallRecord call : callRecords) {
        analyzeCall(call);
        logCallDetails(call);
        sendCallAlertIfNecessary(call);
    }
    
    for (BillingRecord bill : billingRecords) {
        verifyBillingAccuracy(bill);
        updateBillingStatus(bill);
        sendBillingNotification(bill);
    }
    
    for (Complaint complaint : complaints) {
        resolveComplaint(complaint);
        logComplaintResolution(complaint);
        notifySubscriberOfResolution(complaint);
    }
    
    updateSubscriberStatus(subscriber);
    generateSubscriberReport(subscriber);
    archiveOldRecords(subscriberId);
    notifySupportTeamIfNecessary(subscriber);
    
    System.out.println(""Processed data for subscriber: "" + subscriberId);
}
"
Long Method,"void calculateDosage(const Patient& patient, const Medication& medication) {
    double weight = patient.getWeight();
    double age = patient.getAge();
    double baseDosage = medication.getBaseDosage();
    double calculatedDosage = baseDosage;

    if (age < 12) {
        calculatedDosage *= 0.5; // Pediatric dosage adjustment
    } else if (age >= 65) {
        calculatedDosage *= 0.75; // Geriatric dosage adjustment
    }

    if (weight < 50) {
        calculatedDosage *= 0.8; // Dosage adjustment for underweight patients
    } else if (weight > 100) {
        calculatedDosage *= 1.2; // Dosage adjustment for overweight patients
    }

    if (medication.getType() == Medication::Type::Antibiotic) {
        calculatedDosage *= 1.1; // Extra adjustment for antibiotics
    } else if (medication.getType() == Medication::Type::Antidepressant) {
        calculatedDosage *= 0.9; // Extra adjustment for antidepressants
    }

    if (patient.hasKidneyIssues()) {
        calculatedDosage *= 0.5; // Significant reduction for kidney issues
    }

    if (patient.hasLiverIssues()) {
        calculatedDosage *= 0.7; // Reduction for liver issues
    }

    if (patient.isPregnant()) {
        calculatedDosage *= 0.6; // Reduction for pregnant patients
    } else if (patient.isBreastfeeding()) {
        calculatedDosage *= 0.75; // Reduction for breastfeeding patients
    }

    // Log the calculated dosage
    logger.log(""Calculated dosage for patient: "" + std::to_string(calculatedDosage));

    // Check for possible interactions
    for (const auto& interaction : medication.getInteractions()) {
        if (patient.isTaking(interaction)) {
            logger.log(""Interaction with "" + interaction);
            calculatedDosage *= 0.9; // Reduction in the presence of an interaction
        }
    }

    // Final dosage adjustment based on patient feedback
    if (patient.isExperiencingSideEffects()) {
        calculatedDosage *= 0.8; // Further reduction for side effects
    }

    // Final assignment to patient's dosage
    patient.setDosage(calculatedDosage);
}
"
Data Class,"class Vehicle {
public:
    std::string make;
    std::string model;
    int year;
    double mileage;

    Vehicle(const std::string& make, const std::string& model, int year, double mileage)
        : make(make), model(model), year(year), mileage(mileage) {}

    void printInfo() const {
        std::cout << ""Make: "" << make << "", Model: "" << model 
                  << "", Year: "" << year << "", Mileage: "" << mileage << std::endl;
    }
};
"
Data Class,"from dataclasses import dataclass
from typing import List

@dataclass
class Patient:
    name: str
    age: int
    allergies: List[str]
    medical_history: List[str]
    phone_number: str
    email: str

    def add_allergy(self, allergy: str):
        self.allergies.append(allergy)

    def add_medical_record(self, record: str):
        self.medical_history.append(record)

    def contact_patient(self):
        if self.phone_number:
            return f""Contacted {self.name} at {self.phone_number}""
        elif self.email:
            return f""Contacted {self.name} at {self.email}""
        else:
            return ""No contact information available""
"
Code Clone,"public class HealthInsurancePolicy {
    private String policyNumber;
    private String insuredName;
    private double premiumAmount;
    private String coverageDetails;

    public HealthInsurancePolicy(String policyNumber, String insuredName, double premiumAmount, String coverageDetails) {
        this.policyNumber = policyNumber;
        this.insuredName = insuredName;
        this.premiumAmount = premiumAmount;
        this.coverageDetails = coverageDetails;
    }

    public void printPolicyDetails() {
        System.out.println(""Health Insurance Policy:"");
        System.out.println(""Policy Number: "" + policyNumber);
        System.out.println(""Insured Name: "" + insuredName);
        System.out.println(""Premium Amount: "" + premiumAmount);
        System.out.println(""Coverage Details: "" + coverageDetails);
    }
}

public class LifeInsurancePolicy {
    private String policyNumber;
    private String insuredName;
    private double premiumAmount;
    private String coverageDetails;

    public LifeInsurancePolicy(String policyNumber, String insuredName, double premiumAmount, String coverageDetails) {
        this.policyNumber = policyNumber;
        this.insuredName = insuredName;
        this.premiumAmount = premiumAmount;
        this.coverageDetails = coverageDetails;
    }

    public void printPolicyDetails() {
        System.out.println(""Life Insurance Policy:"");
        System.out.println(""Policy Number: "" + policyNumber);
        System.out.println(""Insured Name: "" + insuredName);
        System.out.println(""Premium Amount: "" + premiumAmount);
        System.out.println(""Coverage Details: "" + coverageDetails);
    }
}
"
Long Method,"def process_patient_record(patient_id, patient_data):
    record = retrieve_patient_record(patient_id)
    if not record:
        return ""Patient record not found""
    update_history(record, patient_data['history'])
    record['medications'].extend(patient_data['medications'])
    record['allergies'] += patient_data['allergies']
    
    if patient_data.get('insurance'):
        insurance_info = validate_insurance(patient_data['insurance'])
        if insurance_info:
            record['insurance'] = insurance_info
            
    if 'emergency_contact' in patient_data:
        record['emergency_contact'] = patient_data['emergency_contact']
    
    if 'appointments' in patient_data:
        for appointment in patient_data['appointments']:
            if not appointment_exists(record['appointments'], appointment):
                record['appointments'].append(appointment)
    
    if patient_data.get('notes'):
        for note in patient_data['notes']:
            add_note_to_record(record, note)
    
    if patient_data.get('lab_results'):
        for result in patient_data['lab_results']:
            record['lab_results'].append(result)
    
    save_patient_record(record)
    return ""Patient record processed successfully""
"
Feature Envy,"public void calculateConstructionCost(Project project) {
    double totalCost = 0;
    for (Material material : project.getMaterials()) {
        totalCost += material.getCost() * material.getQuantity();
    }
    for (Labor labor : project.getLaborList()) {
        totalCost += labor.getHourlyRate() * labor.getHoursWorked();
    }
    project.setTotalCost(totalCost);
}
"
Code Clone,"class Order:
    def __init__(self, order_id, user_id, items):
        self.order_id = order_id
        self.user_id = user_id
        self.items = items
        self.status = ""Pending""

    def process_order(self):
        # Process the payment
        self.status = ""Processing""
        print(f""Processing order {self.order_id}"")

    def cancel_order(self):
        # Process the cancellation
        self.status = ""Cancelled""
        print(f""Cancelling order {self.order_id}"")

    def ship_order(self):
        # Process the shipping
        self.status = ""Shipped""
        print(f""Shipping order {self.order_id}"")

class ReturnOrder:
    def __init__(self, return_id, order_id, user_id, items):
        self.return_id = return_id
        self.order_id = order_id
        self.user_id = user_id
        self.items = items
        self.status = ""Pending""

    def process_return(self):
        # Process the return payment
        self.status = ""Processing""
        print(f""Processing return {self.return_id}"")

    def cancel_return(self):
        # Process the return cancellation
        self.status = ""Cancelled""
        print(f""Cancelling return {self.return_id}"")

    def ship_return(self):
        # Process the return shipping
        self.status = ""Shipped""
        print(f""Shipping return {self.return_id}"")
"
Long Parameter List,"def create_trip(segment_id, user_id, start_location, end_location, vehicle_type, 
                distance_km, estimated_time, fare, payment_method, 
                trip_timestamp, driver_id, trip_status):
    # Implementation for creating a trip
    pass
"
Code Clone,"class Student:
    def __init__(self, name, age, student_id):
        self.name = name
        self.age = age
        self.student_id = student_id

    def get_details(self):
        return f'Student Name: {self.name}, Age: {self.age}, ID: {self.student_id}'

    def display(self):
        print(self.get_details())


class Teacher:
    def __init__(self, name, age, employee_id):
        self.name = name
        self.age = age
        self.employee_id = employee_id

    def get_details(self):
        return f'Teacher Name: {self.name}, Age: {self.age}, ID: {self.employee_id}'

    def display(self):
        print(self.get_details())
"
God Class,"public class FinancialManagementSystem {
    private String clientName;
    private double accountBalance;
    private List<String> transactionHistory;
    
    public FinancialManagementSystem(String clientName) {
        this.clientName = clientName;
        this.accountBalance = 0.0;
        this.transactionHistory = new ArrayList<>();
    }

    public void deposit(double amount) {
        accountBalance += amount;
        transactionHistory.add(""Deposited: "" + amount);
    }

    public void withdraw(double amount) {
        if(amount <= accountBalance) {
            accountBalance -= amount;
            transactionHistory.add(""Withdrew: "" + amount);
        } else {
            System.out.println(""Insufficient funds"");
        }
    }

    public double getAccountBalance() {
        return accountBalance;
    }

    public List<String> getTransactionHistory() {
        return transactionHistory;
    }

    public void generateMonthlyStatement() {
        System.out.println(""Monthly Statement for "" + clientName);
        System.out.println(""Account Balance: "" + accountBalance);
        System.out.println(""Transaction History:"");
        for(String transaction : transactionHistory) {
            System.out.println(transaction);
        }
    }

    public void calculateInterest(double rate) {
        double interest = accountBalance * rate / 100;
        deposit(interest);
    }

    public void applyForLoan(double amount, double interestRate) {
        System.out.println(""Loan of "" + amount + "" applied at interest rate of "" + interestRate + ""%."");
    }

    public void calculateTax(double income) {
        double tax = income * 0.2;
        System.out.println(""Tax on income of "" + income + "" is "" + tax);
    }

    public void investInStock(String stockName, double amount) {
        System.out.println(""Invested "" + amount + "" in "" + stockName);
    }

    public void diversifyPortfolio() {
        System.out.println(""Portfolio diversified across multiple assets."");
    }

    public void calculateRetirementSavings(int years) {
        double retirementSavings = accountBalance * Math.pow(1.05, years);
        System.out.println(""Expected retirement savings in "" + years + "" years: "" + retirementSavings);
    }
}
"
Long Method,"def calculate_interest(principal, rate, time, compound_frequency=1):
    amount = principal
    for i in range(time * compound_frequency):
        amount += amount * (rate / compound_frequency)
    interest = amount - principal
    total_amount = principal + interest
    print(f""Principal: {principal}"")
    print(f""Interest: {interest}"")
    print(f""Total Amount: {total_amount}"")
    print(f""Rate: {rate * 100}%"")
    print(f""Time: {time} years"")
    print(f""Compound Frequency: {compound_frequency} times per year"")
    # Further calculations for taxation or deductions
    tax_rate = 0.2
    tax_deduction = interest * tax_rate
    net_interest = interest - tax_deduction
    print(f""Tax Deduction on Interest: {tax_deduction}"")
    print(f""Net Interest After Tax: {net_interest}"")
    # Additional financial planning or forecasting
    future_value = total_amount * (1 + rate) ** time
    print(f""Future Value after {time} years: {future_value}"")
    return net_interest, total_amount, future_value
"
Feature Envy,"calculateTripCost(transportation) {
    return transportation.getDistance() * transportation.getRatePerMile() + transportation.getTollCharges();
}
"
Long Parameter List,"void configureTelecomDevice(const std::string& deviceId, const std::string& ipAddress, int port, bool enableLogging, const std::string& logLevel, int timeout, const std::string& region, const std::string& protocol, bool enableAlert, const std::string& alertEmail) {
    // Implementation here
}
"
Long Parameter List,"void calculateEnergyConsumption(double voltage, double current, double time, double temperature, double humidity, double pressure, const std::string& location, const std::string& deviceType, bool isPeakHours, int userID) {
    // Calculating energy consumption based on the provided parameters
    double energy = voltage * current * time;
    // Additional calculations considering environmental factors and user information...
}
"
Long Method,"def process_call_data(call_data):
    total_calls = len(call_data)
    total_duration = 0
    successful_calls = 0
    failed_calls = 0
    call_types = {}

    for call in call_data:
        if call['status'] == 'successful':
            successful_calls += 1
            total_duration += call['duration']
            if call['type'] in call_types:
                call_types[call['type']] += 1
            else:
                call_types[call['type']] = 1
        else:
            failed_calls += 1
        
    average_duration = total_duration / successful_calls if successful_calls > 0 else 0
    call_summary = {
        'total_calls': total_calls,
        'successful_calls': successful_calls,
        'failed_calls': failed_calls,
        'average_duration': average_duration,
        'call_types': call_types
    }

    # Printing summary
    print(f""Total Calls: {call_summary['total_calls']}"")
    print(f""Successful Calls: {call_summary['successful_calls']}"")
    print(f""Failed Calls: {call_summary['failed_calls']}"")
    print(f""Average Duration: {call_summary['average_duration']:.2f} seconds"")
    print(""Call Types Breakdown:"")
    for call_type, count in call_summary['call_types'].items():
        print(f""- {call_type}: {count}"")

    return call_summary
"
Feature Envy,"calculateTotalWeight() {
    let totalWeight = 0;
    for (let product of this.products) {
        totalWeight += product.getWeight();
    }
    return totalWeight;
}
"
God Class,"class Vehicle {
    constructor(make, model, year, color, engineType) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engineType = engineType;
    }

    startEngine() {
        console.log(`${this.make} ${this.model}'s engine started.`);
    }

    stopEngine() {
        console.log(`${this.make} ${this.model}'s engine stopped.`);
    }

    accelerate() {
        console.log(`${this.make} ${this.model} is accelerating.`);
    }

    brake() {
        console.log(`${this.make} ${this.model} is braking.`);
    }
    
    paint(newColor) {
        this.color = newColor;
        console.log(`${this.make} ${this.model} has been painted ${this.color}.`);
    }

    checkFuelLevel() {
        console.log(`Checking fuel level for ${this.make} ${this.model}.`);
    }

    performMaintenance() {
        console.log(`Performing maintenance on ${this.make} ${this.model}.`);
    }

    honkHorn() {
        console.log(`${this.make} ${this.model} honked the horn.`);
    }

    setGPS(destination) {
        console.log(`Setting GPS to ${destination} for ${this.make} ${this.model}.`);
    }

    playMusic(track) {
        console.log(`Now playing ${track} in ${this.make} ${this.model}.`);
    }
}
"
Feature Envy,"double calculateTotalCost(const Order& order) {
    double totalCost = 0.0;
    for (const auto& item : order.getItems()) {
        totalCost += item.getPrice() * item.getQuantity();
    }
    totalCost += order.getShippingCost();
    totalCost -= order.getDiscount();
    return totalCost;
}
"
Long Method,"def generate_production_report(start_date, end_date, factory_id):
    report = []
    total_produced = 0
    total_defective = 0
    total_hours = 0
    machines = get_machines(factory_id)
    for machine in machines:
        production_data = get_production_data(machine.id, start_date, end_date)
        for record in production_data:
            total_produced += record['produced']
            total_defective += record['defective']
            total_hours += record['hours']
            report.append({
                'machine_id': machine.id,
                'date': record['date'],
                'produced': record['produced'],
                'defective': record['defective'],
                'hours': record['hours'],
                'efficiency': calculate_efficiency(record['produced'], record['defective'], record['hours'])
            })
    overall_efficiency = calculate_overall_efficiency(total_produced, total_defective, total_hours)
    summary = {
        'total_produced': total_produced,
        'total_defective': total_defective,
        'total_hours': total_hours,
        'overall_efficiency': overall_efficiency
    }
    report.append(summary)
    return report
"
Long Method,"def calculate_material_costs(self, area, material_type):
    base_cost = 0
    if material_type == ""concrete"":
        base_cost = 75  # per cubic meter
    elif material_type == ""wood"":
        base_cost = 50  # per cubic meter
    elif material_type == ""steel"":
        base_cost = 100  # per cubic meter
    else:
        raise ValueError(""Unknown material type"")

    total_volume = area * self.average_depth  # Assume average depth is an instance variable
    total_cost = total_volume * base_cost

    # More detailed cost breakdown
    labor_cost = 0
    equipment_cost = 0
    permits_cost = 0
    overhead_cost = 0
   
    if material_type == ""concrete"":
        labor_cost = total_volume * 20  # labor cost for concrete
        equipment_cost = total_volume * 15  # equipment cost for concrete
        permits_cost = 300  # fixed permits cost
        overhead_cost = total_volume * 10  # overhead for concrete
    elif material_type == ""wood"":
        labor_cost = total_volume * 25  # labor cost for wood
        equipment_cost = total_volume * 10  # equipment cost for wood
        permits_cost = 200  # fixed permits cost
        overhead_cost = total_volume * 5  # overhead for wood
    elif material_type == ""steel"":
        labor_cost = total_volume * 30  # labor cost for steel
        equipment_cost = total_volume * 20  # equipment cost for steel
        permits_cost = 400  # fixed permits cost
        overhead_cost = total_volume * 12  # overhead for steel
    
    total_cost += labor_cost + equipment_cost + permits_cost + overhead_cost

    if area > 100:
        total_cost *= 0.9  # apply bulk discount for areas over 100m2

    return total_cost
"
Long Parameter List,"void prepareBeverage(const std::string& beverageType, const std::string& size, int temperature, bool isIced, bool hasCream, bool hasSugar, const std::string& cupType, const std::string& flavor, bool isDecaf, bool takeAway, const std::string& name) {
    // implementation details
}
"
Code Clone,"class UserService:
    def create_user(self, username, email):
        user = {""username"": username, ""email"": email}
        self.save_user(user)
        return user

    def update_user(self, username, email):
        user = {""username"": username, ""email"": email}
        self.save_user(user)
        return user

    def save_user(self, user):
        # Code to save the user in the database
        print(f""User {user['username']} saved to database."")
        
class OrderService:
    def create_order(self, order_id, amount):
        order = {""order_id"": order_id, ""amount"": amount}
        self.save_order(order)
        return order

    def update_order(self, order_id, amount):
        order = {""order_id"": order_id, ""amount"": amount}
        self.save_order(order)
        return order

    def save_order(self, order):
        # Code to save the order in the database
        print(f""Order {order['order_id']} saved to database."")
"
God Class,"class RealEstateAgency:
    def __init__(self):
        self.properties = []
        self.clients = []
        self.agent_assignments = {}
    
    def add_property(self, property_details):
        self.properties.append(property_details)
    
    def remove_property(self, property_id):
        self.properties = [p for p in self.properties if p['id'] != property_id]
    
    def list_properties(self):
        return self.properties
    
    def register_client(self, client_details):
        self.clients.append(client_details)
    
    def find_client(self, client_id):
        for client in self.clients:
            if client['id'] == client_id:
                return client
        return None
    
    def assign_agent(self, property_id, agent_id):
        self.agent_assignments[property_id] = agent_id
    
    def list_agents(self):
        return self.agent_assignments
    
    def calculate_commission(self, sale_price, commission_rate):
        return sale_price * commission_rate
    
    def generate_report(self):
        report = {
            'total_properties': len(self.properties),
            'total_clients': len(self.clients),
            'agent_assignments': self.agent_assignments,
        }
        return report
    
    def market_property(self, property_id):
        # Simulating marketing logic
        print(f""Marketing property {property_id}"")
    
    def hold_open_house(self, property_id):
        # Simulating Open House event logic
        print(f""Holding open house for property {property_id}"")
    
    def track_sales(self):
        # Simulating sales tracking
        print(""Tracking sales"")
    
    def handle_inquiries(self, inquiry_details):
        # Simulating inquiry handling
        print(f""Handling inquiry: {inquiry_details}"")
    
    def negotiate_deal(self, property_id, offer):
        # Simulating deal negotiation
        print(f""Negotiating deal for property {property_id} with offer {offer}"")
"
Feature Envy,"double calculateDosage(const Patient& patient) {
    double weightFact = patient.getWeight() * 0.75; // weight-based factor
    double ageFact = patient.getAge() > 60 ? 1.2 : 1.0; // age-based adjustment
    
    double dosage = (weightFact * ageFact) / 10; // base dosage calculation
    if (patient.hasAllergy()) {
        dosage *= 0.5; // reduce dosage if allergic
    }
    
    return dosage;
}
"
God Class,"class NetworkManager {
public:
    void initializeNetwork() {
        // Setup network connection
    }

    void sendData(const std::string& data) {
        // Logic to send data over the network
    }

    void receiveData(std::string& data) {
        // Logic to receive data from the network
    }

    void establishConnection() {
        // Logic to establish a connection
    }

    void closeConnection() {
        // Logic to close the connection
    }

    std::string getIPAddress() const {
        // Logic to retrieve IP address
    }

    std::string getSubnetMask() const {
        // Logic to retrieve subnet mask
    }

    void setFirewallRules() {
        // Logic to set firewall rules
    }

    void monitorTraffic() {
        // Logic to monitor network traffic
    }

    void logNetworkActivity() {
        // Logic to log activities
    }

    void handleNetworkErrors() {
        // Logic to handle network errors
    }

    void configureProxy() {
        // Logic to configure proxy settings
    }

    void updateNetworkSettings() {
        // Logic to update network settings
    }

    void manageDNSSettings() {
        // Logic to manage DNS settings
    }

    void printNetworkStatus() const {
        // Logic to print network status
    }

    void resetNetwork() {
        // Logic to reset network settings
    }

    void ping(const std::string& address) {
        // Logic to ping an address
    }
};
"
God Class,"class OrderProcessor {
    constructor() {
        this.orderDetails = {};
    }

    validateOrder(order) {
        // Logic to validate order
        if (!order.items.length) {
            throw new Error(""Order must have at least one item."");
        }
    }

    processPayment(order) {
        // Logic to process payment
        console.log(""Processing payment for order:"", order.id);
    }

    sendConfirmationEmail(order) {
        // Logic to send confirmation email
        console.log(""Sending confirmation email for order:"", order.id);
    }

    updateInventory(order) {
        // Logic to update inventory
        order.items.forEach(item => {
            console.log(""Updating inventory for item:"", item.id);
        });
    }

    generateInvoice(order) {
        // Logic to generate invoice
        console.log(""Generating invoice for order:"", order.id);
    }

    processOrder(order) {
        try {
            this.validateOrder(order);
            this.processPayment(order);
            this.sendConfirmationEmail(order);
            this.updateInventory(order);
            this.generateInvoice(order);
            console.log(""Order processed successfully:"", order.id);
        } catch (error) {
            console.error(""Failed to process order:"", error.message);
        }
    }
}
"
God Class,"public class Movie {
    private String title;
    private String director;
    private int year;
    private String genre;
    private double rating;
    private List<String> cast;
    private String synopsis;
    private String language;

    public Movie(String title, String director, int year, String genre, double rating, List<String> cast, String synopsis, String language) {
        this.title = title;
        this.director = director;
        this.year = year;
        this.genre = genre;
        this.rating = rating;
        this.cast = cast;
        this.synopsis = synopsis;
        this.language = language;
    }

    public void displayMovieDetails() {
        System.out.println(""Title: "" + title);
        System.out.println(""Director: "" + director);
        System.out.println(""Year: "" + year);
        System.out.println(""Genre: "" + genre);
        System.out.println(""Rating: "" + rating);
        System.out.println(""Cast: "" + String.join("", "", cast));
        System.out.println(""Synopsis: "" + synopsis);
        System.out.println(""Language: "" + language);
    }

    public void updateRating(double newRating) {
        this.rating = newRating;
    }

    public void addCastMember(String actor) {
        cast.add(actor);
    }

    public void removeCastMember(String actor) {
        cast.remove(actor);
    }

    public String getMovieInfo() {
        return title + "" ("" + year + "") - "" + genre + "" - Rated: "" + rating;
    }

    public boolean isHighlyRated() {
        return rating >= 8.0;
    }

    public void performScreening() {
        System.out.println(""Screening "" + title + ""..."");
        // Additional logic for screening
    }

    public void saveToDatabase() {
        // Logic to save movie details in a database
    }

    public static void main(String[] args) {
        List<String> cast = new ArrayList<>(Arrays.asList(""Actor 1"", ""Actor 2""));
        Movie movie = new Movie(""Sample Movie"", ""Director Name"", 2023, ""Drama"", 9.0, cast, ""A compelling story."", ""English"");
        movie.displayMovieDetails();
        movie.performScreening();
        movie.saveToDatabase();
    }
}
"
Long Parameter List,"public void processPatientData(Long patientId, Long prescriptionId, Long medicationId, Long pharmacyId, Long doctorId, Long dosageId, Long insuranceId, Long appointmentId, Long refillId) {
    // Implementation for processing patient data with provided identifiers
}
"
Long Method,"def process_order(order_id, user_id, payment_info, shipping_address):
    order = get_order(order_id)
    user = get_user(user_id)
    if not order or not user:
        return ""Invalid order or user""
    
    if not validate_payment(payment_info):
        return ""Payment validation failed""
    
    inventory_items = order.get(""items"", [])
    for item in inventory_items:
        if not check_inventory(item[""product_id""], item[""quantity""]):
            return f""Not enough inventory for product {item['product_id']}""
    
    total_amount = calculate_total(order)
    if total_amount != payment_info[""amount""]:
        return ""Payment amount mismatch""

    shipping_label = generate_shipping_label(shipping_address, order)
    update_inventory(inventory_items)
    charge_payment(payment_info)
    
    send_confirmation_email(user.email, order_id)
    update_order_status(order_id, ""processed"")
    
    return {
        ""status"": ""success"",
        ""message"": ""Order processed successfully"",
        ""order_id"": order_id,
        ""shipping_label"": shipping_label
    }
"
Feature Envy,"def calculate_final_grade(self, student):
    total_score = 0
    for assignment in student.assignments:
        total_score += assignment.score
    average_score = total_score / len(student.assignments)
    if average_score >= 90:
        return 'A'
    elif average_score >= 80:
        return 'B'
    elif average_score >= 70:
        return 'C'
    elif average_score >= 60:
        return 'D'
    else:
        return 'F'
"
God Class,"public class ManufacturingManager {
    private List<Order> orders;
    private List<InventoryItem> inventoryItems;
    private List<Worker> workers;

    public ManufacturingManager() {
        orders = new ArrayList<>();
        inventoryItems = new ArrayList<>();
        workers = new ArrayList<>();
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            checkInventory(order);
            assignWorkers(order);
            produceOrder(order);
        }
    }

    private void checkInventory(Order order) {
        for (InventoryItem item : order.getItems()) {
            if (!inventoryItems.contains(item)) {
                restockItem(item);
            }
        }
    }

    private void restockItem(InventoryItem item) {
        // Logic to restock the item
    }

    private void assignWorkers(Order order) {
        for (Worker worker : workers) {
            if (worker.isAvailable()) {
                worker.assignToOrder(order);
                break;
            }
        }
    }

    private void produceOrder(Order order) {
        // Production logic
    }

    public void addInventoryItem(InventoryItem item) {
        inventoryItems.add(item);
    }

    public void addWorker(Worker worker) {
        workers.add(worker);
    }

    public void manageProductionSchedule() {
        // Logic to manage production scheduling
    }

    public void generateProductionReport() {
        // Logic to generate reports
    }

    public void updateWorkerSkills(Worker worker, List<String> newSkills) {
        worker.updateSkills(newSkills);
    }

    public void trackEfficiency() {
        // Logic to track manufacturing efficiency
    }

    public void handleQualityControl() {
        // Logic to handle quality control
    }
}
"
Data Class,"public class Shipment {
    private String trackingNumber;
    private String origin;
    private String destination;
    private double weight;
    private String status;

    public Shipment(String trackingNumber, String origin, String destination, double weight, String status) {
        this.trackingNumber = trackingNumber;
        this.origin = origin;
        this.destination = destination;
        this.weight = weight;
        this.status = status;
    }

    public String getTrackingNumber() {
        return trackingNumber;
    }

    public String getOrigin() {
        return origin;
    }

    public String getDestination() {
        return destination;
    }

    public double getWeight() {
        return weight;
    }

    public String getStatus() {
        return status;
    }
}
"
Long Method,"function processPharmaceuticalData(data) {
    let processedData = [];
    for (let i = 0; i < data.length; i++) {
        let item = data[i];
        if (item.isActive) {
            let temp = {};
            temp.id = item.id;
            temp.name = item.name;
            temp.dosage = item.dosage;
            temp.sideEffects = item.sideEffects;
            temp.interactions = item.interactions;
            
            if (item.dosageFrequency) {
                temp.dosageFrequency = item.dosageFrequency;
            } else {
                temp.dosageFrequency = 'N/A';
            }
            
            if (item.manufacturer) {
                temp.manufacturer = item.manufacturer.name;
            } else {
                temp.manufacturer = 'Unknown';
            }
            
            if (item.approvalDate) {
                temp.approvalDate = new Date(item.approvalDate).toLocaleDateString();
            } else {
                temp.approvalDate = 'Not Approved';
            }

            // Additional processing
            if (item.reviews && item.reviews.length > 0) {
                let totalRating = 0;
                item.reviews.forEach(review => {
                    totalRating += review.rating;
                });
                temp.averageRating = (totalRating / item.reviews.length).toFixed(2);
            } else {
                temp.averageRating = 'No Reviews';
            }
            
            processedData.push(temp);
        }
    }

    processedData.sort((a, b) => a.name.localeCompare(b.name));

    let uniqueManufacturers = new Set();
    for (let i = 0; i < processedData.length; i++) {
        uniqueManufacturers.add(processedData[i].manufacturer);
    }

    return {
        totalCount: processedData.length,
        uniqueManufacturers: Array.from(uniqueManufacturers),
        processedData: processedData
    };
}
"
Data Class,"public class Product {
    private String id;
    private String name;
    private double price;
    private int quantity;

    public Product(String id, String name, double price, int quantity) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}
"
Long Method,"function calculateFinalGrade(assignments, exams, attendance) {
    let totalAssignmentsScore = 0;
    let totalExamsScore = 0;
    let attendanceScore = 0;

    for (let i = 0; i < assignments.length; i++) {
        if (assignments[i] >= 0 && assignments[i] <= 100) {
            totalAssignmentsScore += assignments[i];
        }
    }

    for (let j = 0; j < exams.length; j++) {
        if (exams[j] >= 0 && exams[j] <= 100) {
            totalExamsScore += exams[j];
        }
    }

    if (attendance >= 90) {
        attendanceScore = 10;
    } else if (attendance >= 80) {
        attendanceScore = 8;
    } else if (attendance >= 70) {
        attendanceScore = 6;
    } else {
        attendanceScore = 0;
    }

    let assignmentsAverage = totalAssignmentsScore / assignments.length;
    let examsAverage = totalExamsScore / exams.length;

    let finalGrade = (assignmentsAverage * 0.4) + (examsAverage * 0.5) + attendanceScore;

    if (finalGrade >= 90) {
        return ""A"";
    } else if (finalGrade >= 80) {
        return ""B"";
    } else if (finalGrade >= 70) {
        return ""C"";
    } else if (finalGrade >= 60) {
        return ""D"";
    } else {
        return ""F"";
    }
}
"
Data Class,"class Property {
public:
    std::string address;
    int squareFeet;
    double price;
    int numBedrooms;
    int numBathrooms;

    Property(const std::string& addr, int sqft, double pr, int bedrooms, int bathrooms)
        : address(addr), squareFeet(sqft), price(pr), numBedrooms(bedrooms), numBathrooms(bathrooms) {}

    void display() const {
        std::cout << ""Address: "" << address << ""\n""
                  << ""Size: "" << squareFeet << "" sqft\n""
                  << ""Price: $"" << price << ""\n""
                  << ""Bedrooms: "" << numBedrooms << ""\n""
                  << ""Bathrooms: "" << numBathrooms << std::endl;
    }
};
"
Long Parameter List,"def deploy_application(app_name, version, environment, cpu_limit, memory_limit, disk_size, db_connection_string, api_keys, timeout, retries, notification_email, log_level):
    # Deployment logic here
    pass
"
Long Method,"public void processMovieRentals(List<Rental> rentals) {
    for (Rental rental : rentals) {
        Movie movie = rental.getMovie();
        Customer customer = rental.getCustomer();
        int daysRented = rental.getDaysRented();

        if (movie.getGenre() == Genre.NEW_RELEASE) {
            customer.addPoints(2);
            customer.setRentalCharge(customer.getRentalCharge() + (daysRented * 3));
        } else if (movie.getGenre() == Genre.REGULAR) {
            customer.addPoints(1);
            customer.setRentalCharge(customer.getRentalCharge() + (daysRented > 2 ? (daysRented - 2) * 1.5 : 2));
        } else if (movie.getGenre() == Genre.CHILDREN) {
            customer.addPoints(1);
            customer.setRentalCharge(customer.getRentalCharge() + (daysRented > 3 ? (daysRented - 3) * 1.5 : 1.5));
        }

        customer.addRentalHistory(rental);
        
        if (daysRented > 5) {
            movie.setAvailability(false);
        } else {
            movie.setAvailability(true);
        }
        
        customer.updateLastRentalDate(rental.getRentalDate());
        if (customer.getRentalCount() > 5) {
            customer.setDiscountEligible(true);
        }
        
        if (customer.getRentalCount() % 10 == 0) {
            customer.addBonusPoints(5);
        }
        
        customer.notifyRentalStatus(movie);
    }
}
"
Feature Envy,"double CalculateAnnualYield(const Investment& investment) {
    double yield = investment.GetCurrentValue() - investment.GetInvestmentAmount();
    return yield / investment.GetInvestmentAmount() * 100.0;
}
"
Long Method,"void prepareBeverage() {
    boilWater();
    brewCoffeeGrinds();
    pourInCup();
    addSugarAndMilk();
    stir();
    serve();
    cleanUp();
    // Additional steps for beverage preparation
    checkWaterTemperature();
    grindCoffeeBeans();
    steepTeaBag();
    addCondiments();
    chooseCupSize();
    addIce();
    shakeDrink();
    testTaste();
    adjustFlavor();
    finalizePresentation();
    checkIngredients();
    ensureQuality();
    storeLeftovers();
    labelContainer();
    disposeOfWaste();
    checkExpirationDates();
    manageInventory();
}
"
Data Class,"from dataclasses import dataclass
from typing import List

@dataclass
class PolicyHolder:
    name: str
    age: int
    address: str
    phone_number: str

@dataclass
class InsurancePolicy:
    policy_number: str
    policy_type: str
    premium_amount: float
    coverage_amount: float
    policy_holder: PolicyHolder
    beneficiaries: List[PolicyHolder]
    start_date: str
    end_date: str
    terms: str
"
Data Class,"public class Property {
    private String address;
    private double price;
    private int squareFootage;
    private int numberOfBedrooms;
    private int numberOfBathrooms;

    public Property(String address, double price, int squareFootage, int numberOfBedrooms, int numberOfBathrooms) {
        this.address = address;
        this.price = price;
        this.squareFootage = squareFootage;
        this.numberOfBedrooms = numberOfBedrooms;
        this.numberOfBathrooms = numberOfBathrooms;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getSquareFootage() {
        return squareFootage;
    }

    public void setSquareFootage(int squareFootage) {
        this.squareFootage = squareFootage;
    }

    public int getNumberOfBedrooms() {
        return numberOfBedrooms;
    }

    public void setNumberOfBedrooms(int numberOfBedrooms) {
        this.numberOfBedrooms = numberOfBedrooms;
    }

    public int getNumberOfBathrooms() {
        return numberOfBathrooms;
    }

    public void setNumberOfBathrooms(int numberOfBathrooms) {
        this.numberOfBathrooms = numberOfBathrooms;
    }
}
"
Feature Envy,"double calculatePremiumForDriver(const Driver& driver) {
    double basePremium = 500.0;

    if (driver.getAge() < 25) {
        basePremium += 200.0;
    }
    if (driver.hasPreviousAccidents()) {
        basePremium += driver.getAccidentCount() * 100.0;
    }
    if (driver.getDrivingRecord().isClean()) {
        basePremium -= 150.0;
    }

    return basePremium;
}
"
Data Class,"class Vehicle {
public:
    std::string make;
    std::string model;
    int year;
    double mileage;

    Vehicle(const std::string& make, const std::string& model, int year, double mileage)
        : make(make), model(model), year(year), mileage(mileage) {}
};
"
Long Parameter List,"void createMovie(const std::string& title, const std::string& director, int releaseYear, const std::string& genre, 
                 const std::string& cast, float rating, const std::string& language, const std::string& country, 
                 const std::string& description, int duration, bool isAnimated) {
    // Method implementation
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Drug:
    name: str
    dosage: str
    side_effects: list
    manufacturer: str
    expiration_date: str

    def display_info(self):
        return f""{self.name} ({self.dosage})\nManufacturer: {self.manufacturer}\nExpires on: {self.expiration_date}\nSide Effects: {', '.join(self.side_effects)}""
"
Long Method,"getEnergyUsageData: function(startDate, endDate) {
    let totalConsumption = 0;
    let totalProduction = 0;
    let consumptionData = [];
    let productionData = [];
    let currentDate = new Date(startDate);

    while (currentDate <= new Date(endDate)) {
        let dailyConsumption = this.fetchDailyConsumption(currentDate);
        let dailyProduction = this.fetchDailyProduction(currentDate);
        
        consumptionData.push({ date: currentDate.toISOString().split('T')[0], consumption: dailyConsumption });
        productionData.push({ date: currentDate.toISOString().split('T')[0], production: dailyProduction });
        
        totalConsumption += dailyConsumption;
        totalProduction += dailyProduction;
        
        currentDate.setDate(currentDate.getDate() + 1);
    }

    this.generateUsageReport(consumptionData, productionData);
    
    return {
        totalConsumption: totalConsumption,
        totalProduction: totalProduction,
        averageConsumption: totalConsumption / (new Date(endDate) - new Date(startDate) + 1) * 1000 * 60 * 60 * 24,
        averageProduction: totalProduction / (new Date(endDate) - new Date(startDate) + 1) * 1000 * 60 * 60 * 24
    };
}
"
God Class,"class PharmaceuticalCompany:
    def __init__(self, name):
        self.name = name
        self.products = []
        self.employees = []
        self.research_projects = []
        self.financials = {}
        self.patents = []

    def add_product(self, product):
        self.products.append(product)

    def remove_product(self, product):
        self.products.remove(product)

    def hire_employee(self, employee):
        self.employees.append(employee)

    def fire_employee(self, employee):
        self.employees.remove(employee)

    def start_research_project(self, project):
        self.research_projects.append(project)

    def end_research_project(self, project):
        self.research_projects.remove(project)

    def record_financials(self, year, revenue, expenses):
        self.financials[year] = {
            'revenue': revenue,
            'expenses': expenses,
            'profit': revenue - expenses
        }

    def add_patent(self, patent):
        self.patents.append(patent)

    def remove_patent(self, patent):
        self.patents.remove(patent)

    def generate_financial_report(self):
        return self.financials

    def list_employees(self):
        return self.employees

    def list_products(self):
        return self.products

    def get_patents(self):
        return self.patents

    def conduct_clinical_trial(self, trial):
        # Simulate conducting a trial
        print(f""Conducting clinical trial for {trial}"")

    def manage_sales_strategy(self, strategy):
        # Simulate managing sales strategy
        print(f""Managing sales strategy: {strategy}"")

    def handle_regulatory_compliance(self):
        # Simulate handling regulatory compliance
        print(""Handling regulatory compliance"")

    def organize_community_health_events(self):
        # Simulate organizing health events
        print(""Organizing community health events"")
"
God Class,"public class BeverageManager {
    private List<Beverage> beverages;

    public BeverageManager() {
        beverages = new ArrayList<>();
    }

    public void addBeverage(Beverage beverage) {
        beverages.add(beverage);
    }

    public void removeBeverage(Beverage beverage) {
        beverages.remove(beverage);
    }

    public Beverage getBeverage(String name) {
        for (Beverage beverage : beverages) {
            if (beverage.getName().equals(name)) {
                return beverage;
            }
        }
        return null;
    }

    public void serveBeverage(String name) {
        Beverage beverage = getBeverage(name);
        if (beverage != null) {
            System.out.println(""Serving "" + beverage.getName());
        } else {
            System.out.println(""Beverage not found."");
        }
    }

    public void listAllBeverages() {
        for (Beverage beverage : beverages) {
            System.out.println(beverage.getName());
        }
    }

    public void sortBeveragesByType() {
        Collections.sort(beverages, Comparator.comparing(Beverage::getType));
    }

    public void sortBeveragesByPrice() {
        Collections.sort(beverages, Comparator.comparing(Beverage::getPrice));
    }

    public void filterBeveragesByAlcoholContent(double minAlcoholContent) {
        for (Beverage beverage : beverages) {
            if (beverage.getAlcoholContent() >= minAlcoholContent) {
                System.out.println(beverage.getName());
            }
        }
    }

    public void serveAllBeverages() {
        for (Beverage beverage : beverages) {
            serveBeverage(beverage.getName());
        }
    }

    public void calculateTotalCost() {
        double totalCost = 0;
        for (Beverage beverage : beverages) {
            totalCost += beverage.getPrice();
        }
        System.out.println(""Total cost: $"" + totalCost);
    }

    // Add more methods that deal with various beverage-related functionalities
}
"
Data Class,"class Drug {
public:
    std::string name;
    std::string manufacturer;
    double dosage;
    std::string form;
    std::string sideEffects;

    Drug(std::string n, std::string m, double d, std::string f, std::string s)
        : name(n), manufacturer(m), dosage(d), form(f), sideEffects(s) {}
};
"
Long Method,"public void processEnergyData(List<EnergyRecord> records) {
    for (EnergyRecord record : records) {
        if (record.isValid()) {
            String facilityId = record.getFacilityId();
            double energyConsumption = record.getEnergyConsumption();
            Date timestamp = record.getTimestamp();
            updateFacilityEnergy(facilityId, energyConsumption, timestamp);
            logEnergyConsumption(facilityId, energyConsumption, timestamp);
            if (shouldAlert(facilityId, energyConsumption)) {
                sendAlert(facilityId, energyConsumption);
            }
            if (energyConsumption > threshold) {
                incrementExceedanceCount(facilityId);
                updateExceedanceRecord(facilityId, energyConsumption);
            }
            generateMonthlyReport(facilityId);
            if (yearlyReportNeeded(facilityId)) {
                generateYearlyReport(facilityId);
            }
            if (isPeakHour(timestamp)) {
                trackPeakUsage(facilityId, energyConsumption);
            }
            checkForMalfunctions(facilityId);
            if (maintenanceNeeded(facilityId)) {
                scheduleMaintenance(facilityId);
            }
            calculateAverageConsumption(facilityId);
            updateEnergyEfficiencyMetrics(facilityId, energyConsumption);
            notifyUser(facilityId);
            storeInDatabase(record);
            sendToCloud(record);
            generateAnalytics(record);
            logTransaction(record);
            updateLastProcessedTime(facilityId, timestamp);
        }
    }
}
"
Feature Envy,"void printMovieDetails(const Movie& movie) {
    std::cout << ""Title: "" << movie.getTitle() << ""\n"";
    std::cout << ""Director: "" << movie.getDirector() << ""\n"";
    std::cout << ""Genre: "" << movie.getGenre() << ""\n"";
    std::cout << ""Release Year: "" << movie.getReleaseYear() << ""\n"";
    std::cout << ""Duration: "" << movie.getDuration() << "" mins\n"";
}
"
Data Class,"class Shipment {
public:
    std::string trackingNumber;
    std::string origin;
    std::string destination;
    std::string status;
    double weight;
    std::string shippingDate;

    Shipment(std::string tn, std::string org, std::string dest, std::string stat, double w, std::string sd)
        : trackingNumber(tn), origin(org), destination(dest), status(stat), weight(w), shippingDate(sd) {}

    // Method to update the status of the shipment
    void updateStatus(const std::string& newStatus) {
        status = newStatus;
    }

    // Method to print the shipment details
    void printDetails() {
        std::cout << ""Tracking Number: "" << trackingNumber << std::endl;
        std::cout << ""Origin: "" << origin << std::endl;
        std::cout << ""Destination: "" << destination << std::endl;
        std::cout << ""Status: "" << status << std::endl;
        std::cout << ""Weight: "" << weight << std::endl;
        std::cout << ""Shipping Date: "" << shippingDate << std::endl;
    }
};
"
Data Class,"class Vehicle:
    def __init__(self, make, model, year, color, mileage):
        self.make = make
        self.model = model
        self.year = year
        self.color = color
        self.mileage = mileage

    def display_info(self):
        return f""{self.year} {self.color} {self.make} {self.model} with {self.mileage} miles""

    def drive(self, miles):
        self.mileage += miles

    def paint(self, new_color):
        self.color = new_color
"
Code Clone,"class Delivery {
    constructor(id, address, weight) {
        this.id = id;
        this.address = address;
        this.weight = weight;
    }

    calculateDeliveryCost() {
        return this.weight * 10;
    }

    displayDeliveryInfo() {
        return `Delivery ID: ${this.id}, Address: ${this.address}, Weight: ${this.weight}kg`;
    }
}

class ExpressDelivery extends Delivery {
    constructor(id, address, weight, expressFee) {
        super(id, address, weight);
        this.expressFee = expressFee;
    }

    calculateDeliveryCost() {
        return (this.weight * 15) + this.expressFee;
    }

    displayDeliveryInfo() {
        return `Express Delivery ID: ${this.id}, Address: ${this.address}, Weight: ${this.weight}kg, Express Fee: ${this.expressFee}`;
    }
}

class InternationalDelivery extends Delivery {
    constructor(id, address, weight, customsFee) {
        super(id, address, weight);
        this.customsFee = customsFee;
    }

    calculateDeliveryCost() {
        return (this.weight * 20) + this.customsFee;
    }

    displayDeliveryInfo() {
        return `International Delivery ID: ${this.id}, Address: ${this.address}, Weight: ${this.weight}kg, Customs Fee: ${this.customsFee}`;
    }
}
"
Code Clone,"class Property:
    def __init__(self, address, price, area):
        self.address = address
        self.price = price
        self.area = area

    def calculate_property_tax(self):
        return self.price * 0.01

    def display_info(self):
        return f""Address: {self.address}, Price: {self.price}, Area: {self.area} sq ft""


class House(Property):
    def __init__(self, address, price, area, num_bedrooms, num_bathrooms):
        super().__init__(address, price, area)
        self.num_bedrooms = num_bedrooms
        self.num_bathrooms = num_bathrooms

    def calculate_property_tax(self):
        return self.price * 0.012

    def display_info(self):
        return f""Address: {self.address}, Price: {self.price}, Area: {self.area} sq ft, Bedrooms: {self.num_bedrooms}, Bathrooms: {self.num_bathrooms}""


class Apartment(Property):
    def __init__(self, address, price, area, num_bedrooms):
        super().__init__(address, price, area)
        self.num_bedrooms = num_bedrooms

    def calculate_property_tax(self):
        return self.price * 0.011

    def display_info(self):
        return f""Address: {self.address}, Price: {self.price}, Area: {self.area} sq ft, Bedrooms: {self.num_bedrooms}""
"
God Class,"class TelecomManager {
    constructor() {
        this.customers = [];
        this.plans = [];
        this.devices = [];
    }

    addCustomer(customer) {
        this.customers.push(customer);
    }

    removeCustomer(customerId) {
        this.customers = this.customers.filter(c => c.id !== customerId);
    }

    listCustomers() {
        return this.customers;
    }

    addPlan(plan) {
        this.plans.push(plan);
    }

    removePlan(planId) {
        this.plans = this.plans.filter(p => p.id !== planId);
    }

    listPlans() {
        return this.plans;
    }

    addDevice(device) {
        this.devices.push(device);
    }

    removeDevice(deviceId) {
        this.devices = this.devices.filter(d => d.id !== deviceId);
    }
  
    listDevices() {
        return this.devices;
    }

    upgradeCustomerPlan(customerId, newPlanId) {
        const customer = this.customers.find(c => c.id === customerId);
        if (customer) {
            customer.planId = newPlanId;
        }
    }

    handleCustomerSupportInquiry(customerId, inquiry) {
        // handle the customer support logic here
    }

    generateBillingStatement(customerId) {
        const customer = this.customers.find(c => c.id === customerId);
        // logic to generate billing statement
    }

    runMarketingCampaign() {
        // logic to run marketing campaigns
    }
}
"
Long Parameter List,"function createShippingOrder(customerId, shippingAddress, itemList, paymentMethod, deliveryDate, specialInstructions, shippingMethod, insuranceAmount, discountCode) {
    // Implementation of order creation
}
"
Data Class,"class EnergyData {
public:
    double voltage;
    double current;
    double power;
    
    EnergyData(double v, double i) : voltage(v), current(i) {
        power = calculatePower();
    }
    
    double calculatePower() {
        return voltage * current;
    }
};
"
Long Method,"void processStudentGrades(std::vector<Student>& students) {
    for (auto& student : students) {
        if (student.getGrades().empty()) {
            std::cout << ""No grades available for student: "" << student.getName() << std::endl;
            continue;
        }
        
        double total = 0.0;
        int count = 0;
        
        for (auto grade : student.getGrades()) {
            total += grade;
            count++;
        }
        
        double average = total / count;
        
        if (average >= 90.0) {
            student.setLetterGrade(""A"");
        } else if (average >= 80.0) {
            student.setLetterGrade(""B"");
        } else if (average >= 70.0) {
            student.setLetterGrade(""C"");
        } else if (average >= 60.0) {
            student.setLetterGrade(""D"");
        } else {
            student.setLetterGrade(""F"");
        }

        std::cout << ""Student: "" << student.getName() << "", Average: "" << average << "", Grade: "" << student.getLetterGrade() << std::endl;
        
        // Additional processing
        if (average >= 75.0) {
            student.setStatus(""Pass"");
        } else {
            student.setStatus(""Fail"");
        }

        // Print scholarship eligibility
        if (average >= 85.0) {
            std::cout << ""Scholarship eligible for student: "" << student.getName() << std::endl;
        }

        // Record attendance
        if (student.getAttendanceRate() < 75) {
            std::cout << ""Warning: "" << student.getName() << "" has low attendance."" << std::endl;
        }

        // Check for extracurricular activities
        if (student.hasExtracurricularActivities()) {
            std::cout << student.getName() << "" is engaged in extracurricular activities."" << std::endl;
        }
        
        // Final remarks
        std::cout << ""--- End of report for "" << student.getName() << "" ---"" << std::endl;
    }
}
"
Feature Envy,"public void processOrder(Order order) {
    double total = 0;
    for (Item item : order.getItems()) {
        total += item.getPrice();
        System.out.println(""Item Name: "" + item.getName() + "", Quantity: "" + item.getQuantity());
    }
    System.out.println(""Total Order Amount: "" + total);
}
"
Long Parameter List,"def create_listing(property_id, address, price, num_bedrooms, num_bathrooms, square_footage, listing_type, year_built, lot_size, description, agent_contact, open_house_dates):
    # Logic to create a property listing
    pass
"
Data Class,"public class Beverage {
    private String name;
    private String type;
    private int volume;
    private double price;

    public Beverage(String name, String type, int volume, double price) {
        this.name = name;
        this.type = type;
        this.volume = volume;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public int getVolume() {
        return volume;
    }

    public double getPrice() {
        return price;
    }
}
"
Feature Envy,"calculateShippingCost(order) {
    const weight = order.getWeight();
    const distance = order.getDistance();
    const baseCost = this.baseShippingRate();
    const weightCost = weight * this.costPerWeight();
    const distanceCost = distance * this.costPerDistance();
    return baseCost + weightCost + distanceCost;
}
"
God Class,"class LogisticsManager {
    constructor() {
        this.packages = [];
        this.drivers = [];
        this.vehicles = [];
    }

    addPackage(package) {
        this.packages.push(package);
    }

    assignDriverToPackage(packageId, driverId) {
        const pkg = this.packages.find(p => p.id === packageId);
        const driver = this.drivers.find(d => d.id === driverId);
        if (pkg && driver) {
            pkg.driverId = driverId;
        }
    }

    addDriver(driver) {
        this.drivers.push(driver);
    }

    createVehicle(vehicle) {
        this.vehicles.push(vehicle);
    }

    scheduleDelivery(packageId, vehicleId) {
        const pkg = this.packages.find(p => p.id === packageId);
        const vehicle = this.vehicles.find(v => v.id === vehicleId);
        if (pkg && vehicle) {
            pkg.deliveryScheduled = true;
            pkg.vehicleId = vehicleId;
        }
    }

    trackPackage(packageId) {
        const pkg = this.packages.find(p => p.id === packageId);
        if (pkg) {
            return `Package ${pkg.id} is ${pkg.deliveryScheduled ? 'scheduled' : 'not scheduled'}.`;
        }
        return 'Package not found.';
    }

    generateReport() {
        return {
            totalPackages: this.packages.length,
            totalDrivers: this.drivers.length,
            totalVehicles: this.vehicles.length,
        };
    }

    manageInventory() {
        // Manage inventory logic
    }

    handleReturns() {
        // Handle return logic
    }

    optimizeRoutes() {
        // Route optimization logic
    }

    maintainVehicles() {
        // Vehicle maintenance logic
    }
}
"
Code Clone,"class DeliveryServiceA:
    def __init__(self, package_weight, distance):
        self.package_weight = package_weight
        self.distance = distance

    def calculate_delivery_cost(self):
        base_cost = 5
        weight_cost = self.package_weight * 0.5
        distance_cost = self.distance * 0.2
        total_cost = base_cost + weight_cost + distance_cost
        return total_cost

    def estimate_delivery_time(self):
        base_time = 1
        weight_time = self.package_weight * 0.1
        distance_time = self.distance * 0.05
        total_time = base_time + weight_time + distance_time
        return total_time


class DeliveryServiceB:
    def __init__(self, package_weight, distance):
        self.package_weight = package_weight
        self.distance = distance

    def calculate_delivery_cost(self):
        base_cost = 7
        weight_cost = self.package_weight * 0.6
        distance_cost = self.distance * 0.15
        total_cost = base_cost + weight_cost + distance_cost
        return total_cost

    def estimate_delivery_time(self):
        base_time = 1.5
        weight_time = self.package_weight * 0.12
        distance_time = self.distance * 0.06
        total_time = base_time + weight_time + distance_time
        return total_time
"
Long Method,"void ConstructionProject::calculateTotalCost() {
    double totalMaterialCost = 0.0;
    double totalLaborCost = 0.0;
    double totalEquipmentCost = 0.0;
    
    for (const auto& material : materials) {
        totalMaterialCost += material.getCost() * material.getQuantity();
    }
    
    for (const auto& worker : workers) {
        totalLaborCost += worker.getHourlyRate() * worker.getHoursWorked();
    }

    for (const auto& equipment : equipments) {
        totalEquipmentCost += equipment.getRentalRate() * equipment.getRentalDuration();
    }
    
    double overhead = (totalMaterialCost + totalLaborCost + totalEquipmentCost) * 0.1;
    double contingency = (totalMaterialCost + totalLaborCost + totalEquipmentCost + overhead) * 0.05;

    double totalCost = totalMaterialCost + totalLaborCost + totalEquipmentCost + overhead + contingency;

    std::cout << ""Total Project Cost: "" << totalCost << std::endl;
    
    // Additional reports
    std::cout << ""Material Cost Breakdown:"" << std::endl;
    for (const auto& material : materials) {
        std::cout << material.getName() << "": "" << material.getCost() * material.getQuantity() << std::endl;
    }
    
    std::cout << ""Labor Cost Breakdown:"" << std::endl;
    for (const auto& worker : workers) {
        std::cout << worker.getName() << "": "" << worker.getHourlyRate() * worker.getHoursWorked() << std::endl;
    }
    
    std::cout << ""Equipment Cost Breakdown:"" << std::endl;
    for (const auto& equipment : equipments) {
        std::cout << equipment.getName() << "": "" << equipment.getRentalRate() * equipment.getRentalDuration() << std::endl;
    }
    
    std::cout << ""Overhead: "" << overhead << std::endl;
    std::cout << ""Contingency: "" << contingency << std::endl;
}
"
God Class,"class PatientManagementSystem {
public:
    void admitPatient(const std::string& name, int age, const std::string& ailment) {
        // Logic to admit patient
        // Update records, notify staff, etc.
    }

    void dischargePatient(int patientId) {
        // Logic to discharge patient
        // Update records, notify staff, etc.
    }

    void scheduleAppointment(int patientId, const std::string& doctorName, const std::string& dateTime) {
        // Logic to schedule appointment
        // Update records, notify patient, etc.
    }

    void prescribeMedication(int patientId, const std::string& medication) {
        // Logic to prescribe medication
        // Update records, notify pharmacy, etc.
    }

    void generateReport(int patientId) {
        // Logic to generate patient report
        // Compile data from various departments, etc.
    }

    void updatePatientHistory(int patientId, const std::string& historyDetails) {
        // Logic to update patient history
        // Store in records, notify relevant departments, etc.
    }

    void manageBilling(int patientId, double amount) {
        // Logic to manage billing
        // Update finances, generate invoice, etc.
    }

    void handleEmergency(int patientId) {
        // Logic to handle emergency cases
        // Notify emergency team, update records, etc.
    }

    void sendReminder(int patientId, const std::string& message) {
        // Logic to send appointment reminders
        // Use communication system to notify patients, etc.
    }

    void analyzeData() {
        // Logic to analyze patient data across the system
        // Generate insights for improving healthcare practices, etc.
    }

    // other methods related to patient management...
};
"
Data Class,"class ConstructionProject {
    constructor(name, budget, deadline, location) {
        this.name = name;
        this.budget = budget;
        this.deadline = deadline;
        this.location = location;
    }

    getProjectDetails() {
        return {
            name: this.name,
            budget: this.budget,
            deadline: this.deadline,
            location: this.location
        };
    }
}
"
Feature Envy,"def calculate_total_premiums(insured_items):
    total = 0
    for item in insured_items:
        total += item.base_value * item.coverage_rate
        total += item.get_additional_fees()
    return total
"
Data Class,"from dataclasses import dataclass

@dataclass
class Product:
    id: int
    name: str
    price: float
    quantity: int
    category: str
    description: str
    discount: float

    def total_price(self) -> float:
        return self.price * self.quantity * (1 - self.discount / 100)

    def update_quantity(self, amount: int) -> None:
        self.quantity += amount

    def apply_discount(self, discount: float) -> None:
        self.discount = discount
"
Long Method,"def process_patient_data(patient_record):
    # Validate patient information
    if not patient_record.get('name'):
        raise ValueError(""Patient name is required"")
    if not isinstance(patient_record.get('age'), int) or patient_record['age'] <= 0:
        raise ValueError(""Patient age must be a positive integer"")
    
    # Check for allergies
    allergies = patient_record.get('allergies', [])
    if not isinstance(allergies, list):
        raise ValueError(""Allergies must be a list"")
        
    allergy_info = ''
    if allergies:
        allergy_info = f""Patient has allergies to: {', '.join(allergies)}. ""
    
    # Medication history
    medication_history = patient_record.get('medications', [])
    if not isinstance(medication_history, list):
        raise ValueError(""Medication history must be a list"")
        
    med_info = ''
    if medication_history:
        med_info = f""Patient is currently on: {', '.join(medication_history)}. ""
    
    # Calculate dosage based on weight
    weight = patient_record.get('weight')
    if not isinstance(weight, (int, float)) or weight <= 0:
        raise ValueError(""Patient weight must be a positive number"")
    
    dosage = weight * 10  # Simple dosage calculation, for example purposes
    
    # Log patient information
    print(f""Processing patient: {patient_record['name']}"")
    print(allergy_info)
    print(med_info)
    print(f""Calculated dosage: {dosage} mg"")

    # Notify medical staff about patient
    notify_medical_staff(patient_record['name'], dosage)
    
    # Store patient data in the system
    store_patient_data(patient_record)
    
    # Schedule follow-up
    schedule_follow_up(patient_record['name'], patient_record['age'])
"
Long Method,"def process_order(order):
    total_price = 0
    for item in order['items']:
        if item['type'] == 'food':
            if item['name'] == 'pizza':
                total_price += 10 * item['quantity']
                if item.get('extra_cheese'):
                    total_price += 2 * item['quantity']
            elif item['name'] == 'burger':
                total_price += 8 * item['quantity']
                if item.get('fries'):
                    total_price += 3 * item['quantity']
            elif item['name'] == 'pasta':
                total_price += 12 * item['quantity']
                if item.get('sauce'):
                    total_price += 1 * item['quantity']
        elif item['type'] == 'beverage':
            if item['name'] == 'soda':
                total_price += 1.5 * item['quantity']
            elif item['name'] == 'coffee':
                total_price += 2.5 * item['quantity']
            elif item['name'] == 'tea':
                total_price += 2 * item['quantity']
            elif item['name'] == 'beer':
                total_price += 5 * item['quantity']
    if order.get('delivery'):
        total_price += 5
    if total_price > 50:
        total_price *= 0.9
    return total_price
"
God Class,"class DrugManagementSystem {
public:
    void addNewDrug(std::string name, std::string dosage, std::string form) {
        // Logic to add drug
    }

    void getDrugInfo(std::string name) {
        // Logic to get drug information
    }

    void updateDrugDosage(std::string name, std::string newDosage) {
        // Logic to update drug dosage
    }

    void removeDrug(std::string name) {
        // Logic to remove drug
    }
    
    void checkDrugInteractions(std::string name) {
        // Logic to check interactions
    }

    void verifyDrugApproval(std::string name) {
        // Logic to verify if drug is approved for use
    }

    void manageInventory(std::string name, int quantity) {
        // Logic to manage drug inventory
    }

    void generatePrescription(std::string patientName, std::string drugName) {
        // Logic to generate prescription
    }

    void scheduleDrugDistribution(std::string drugName, std::string date) {
        // Logic to schedule drug distribution
    }

    void trackAdverseEffects(std::string drugName) {
        // Logic to track adverse effects
    }
};
"
Code Clone,"class Medication {
public:
    Medication(std::string name, double dosage, std::string unit) 
        : name(name), dosage(dosage), unit(unit) {}

    void display() {
        std::cout << ""Medication: "" << name << "", Dosage: "" << dosage << "" "" << unit << std::endl;
    }

private:
    std::string name;
    double dosage;
    std::string unit;
};

class Vaccine {
public:
    Vaccine(std::string name, double dosage, std::string unit, std::string strain) 
        : name(name), dosage(dosage), unit(unit), strain(strain) {}

    void display() {
        std::cout << ""Vaccine: "" << name << "", Dosage: "" << dosage << "" "" << unit << "", Strain: "" << strain << std::endl;
    }

private:
    std::string name;
    double dosage;
    std::string unit;
    std::string strain;
};
"
Feature Envy,"function getTopRatedMovies(movies) {
    return movies
        .filter(movie => movie.rating > 8)
        .map(movie => `${movie.title} (${movie.releaseYear}) - Rating: ${movie.rating}`)
        .sort((a, b) => b.rating - a.rating);
}
"
Feature Envy,"calculateTotalCharge(patient) {
    let total = 0;
    total += patient.getConsultationFee();
    total += patient.getLabTestCharges();
    total += patient.getMedicationCosts();
    total += patient.getSurgeryCosts();
    return total;
}
"
God Class,"public class FarmManagementSystem {
    private String farmName;
    private List<Crop> crops;
    private List<Animal> animals;
    private List<Employee> employees;
    private List<Equipment> equipment;
    private double revenue;
    private double expenses;

    public FarmManagementSystem(String farmName) {
        this.farmName = farmName;
        this.crops = new ArrayList<>();
        this.animals = new ArrayList<>();
        this.employees = new ArrayList<>();
        this.equipment = new ArrayList<>();
        this.revenue = 0;
        this.expenses = 0;
    }

    public void addCrop(Crop crop) {
        crops.add(crop);
    }

    public void removeCrop(Crop crop) {
        crops.remove(crop);
    }

    public void addAnimal(Animal animal) {
        animals.add(animal);
    }

    public void removeAnimal(Animal animal) {
        animals.remove(animal);
    }

    public void hireEmployee(Employee employee) {
        employees.add(employee);
    }

    public void fireEmployee(Employee employee) {
        employees.remove(employee);
    }

    public void addEquipment(Equipment equipment) {
        this.equipment.add(equipment);
    }

    public void removeEquipment(Equipment equipment) {
        this.equipment.remove(equipment);
    }

    public void calculateRevenue(double amount) {
        revenue += amount;
    }

    public void calculateExpenses(double amount) {
        expenses += amount;
    }

    public double getNetIncome() {
        return revenue - expenses;
    }

    public void displayFarmReport() {
        System.out.println(""Farm Name: "" + farmName);
        System.out.println(""Total Crops: "" + crops.size());
        System.out.println(""Total Animals: "" + animals.size());
        System.out.println(""Total Employees: "" + employees.size());
        System.out.println(""Total Equipment: "" + equipment.size());
        System.out.println(""Net Income: "" + getNetIncome());
    }

    // Additional methods for crop management, animal management, equipment management, etc.
}
"
God Class,"class ManufacturingSystem {
public:
    void manageInventory() {
        // code to manage inventory
    }

    void scheduleProduction() {
        // code to schedule production
    }

    void qualityControl() {
        // code for quality control
    }

    void machineMaintenance() {
        // code for machine maintenance
    }

    void manageSuppliers() {
        // code to manage suppliers
    }

    void handleShipping() {
        // code to handle shipping
    }

    void processOrders() {
        // code to process orders
    }

    void analyzeSalesData() {
        // code to analyze sales data
    }

    void implementSafetyProtocols() {
        // code to implement safety protocols
    }

    void optimizeProductionProcess() {
        // code to optimize production process
    }

    void generateReports() {
        // code to generate reports
    }

    // ... potentially more methods
};
"
Long Parameter List,"function createSubscription(customerId, planId, startDate, endDate, paymentMethod, promoCode, billingCycle, isAutoRenew, contactPreferences, usageLimits) {
    // Function implementation goes here
}
"
Long Parameter List,"void SchedulePatientAppointment(const std::string& patientName, const std::string& patientId, const std::string& doctorId, const std::string& appointmentDate, const std::string& appointmentTime, const std::string& reasonForVisit, const std::string& insuranceProvider, const std::string& contactNumber, const std::string& emailAddress, const std::string& preferredMethodOfContact) {
    // Implementation details
}
"
Data Class,"class Hotel {
    constructor(name, location, rooms, pricePerNight) {
        this.name = name;
        this.location = location;
        this.rooms = rooms;
        this.pricePerNight = pricePerNight;
    }

    getDetails() {
        return {
            name: this.name,
            location: this.location,
            rooms: this.rooms,
            pricePerNight: this.pricePerNight
        };
    }

    calculateTotalPrice(nights) {
        return this.pricePerNight * nights;
    }
}
"
Feature Envy,"public void printPolicyDetails(Policy policy) {
    System.out.println(""Policy Number: "" + policy.getPolicyNumber());
    System.out.println(""Holder Name: "" + policy.getHolder().getName());
    System.out.println(""Holder Address: "" + policy.getHolder().getAddress());
    System.out.println(""Premium Amount: "" + policy.getPremium().getAmount());
    System.out.println(""Coverage Type: "" + policy.getCoverage().getType());
    System.out.println(""Start Date: "" + policy.getStartDate());
    System.out.println(""End Date: "" + policy.getEndDate());
}
"
Long Method,"void Vehicle::CalculateVehicleDynamics(float speed, float steeringAngle, float throttleInput, float brakeInput, float terrainCoefficient)
{
    float mass = GetVehicleMass();
    float inertia = GetVehicleInertia();
    
    // Calculate forces
    float dragForce = 0.5 * dragCoefficient * area * speed * speed;
    float tractionForce = throttleInput * enginePower / speed;
    float steeringForce = steeringAngle * steeringRatio;

    // Apply brakes
    if (brakeInput > 0)
    {
        tractionForce -= brakeInput * brakeForce;
    }

    // Calculate net force
    float netForce = tractionForce - dragForce;
    float acceleration = netForce / mass;

    // Update vehicle speed
    speed += acceleration * timeStep;

    // Update position based on speed
    float distanceTravelled = speed * timeStep;
    position += distanceTravelled;

    // Calculate dynamics for next step based on terrain
    float terrainEffect = terrainCoefficient * speed; // This is a simplified model
    speed -= terrainEffect * timeStep;

    // Update state values
    velocity.x = speed * cos(steeringAngle);
    velocity.y = speed * sin(steeringAngle);
    orientation += steeringAngle * timeStep;

    // Calculate final dynamics
    finalPosition.x += velocity.x * timeStep;
    finalPosition.y += velocity.y * timeStep;
    finalOrientation = orientation;

    // Normalize values to prevent overflow
    if (finalPosition.x > maxPosition.x) finalPosition.x = maxPosition.x;
    if (finalPosition.y > maxPosition.y) finalPosition.y = maxPosition.y;
    if (finalOrientation > 360) finalOrientation -= 360;
    if (finalOrientation < 0) finalOrientation += 360;

    // Setting the state of the vehicle
    SetVehicleState(finalPosition, finalOrientation, speed);
}
"
Code Clone,"class Hotel {
private:
    std::string name;
    std::string location;
    int numberOfRooms;

public:
    Hotel(std::string n, std::string loc, int rooms) 
        : name(n), location(loc), numberOfRooms(rooms) {}

    void displayInfo() {
        std::cout << ""Hotel Name: "" << name << std::endl;
        std::cout << ""Location: "" << location << std::endl;
        std::cout << ""Number of Rooms: "" << numberOfRooms << std::endl;
    }

    void bookRoom() {
        std::cout << ""Booking a room in "" << name << std::endl;
    }

    void cancelRoom() {
        std::cout << ""Canceling a room in "" << name << std::endl;
    }
};

class Resort {
private:
    std::string name;
    std::string location;
    int numberOfRooms;

public:
    Resort(std::string n, std::string loc, int rooms) 
        : name(n), location(loc), numberOfRooms(rooms) {}

    void displayInfo() {
        std::cout << ""Resort Name: "" << name << std::endl;
        std::cout << ""Location: "" << location << std::endl;
        std::cout << ""Number of Rooms: "" << numberOfRooms << std::endl;
    }

    void bookRoom() {
        std::cout << ""Booking a room in "" << name << std::endl;
    }

    void cancelRoom() {
        std::cout << ""Canceling a room in "" << name << std::endl;
    }
};
"
Code Clone,"class Car {
    constructor(make, model, year, mileage) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.mileage = mileage;
    }

    drive(distance) {
        this.mileage += distance;
        console.log(`${this.make} ${this.model} has been driven ${distance} miles.`);
    }

    service() {
        console.log(`${this.make} ${this.model} is being serviced.`);
    }
}

class Truck {
    constructor(make, model, year, mileage, loadCapacity) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.mileage = mileage;
        this.loadCapacity = loadCapacity;
    }

    drive(distance) {
        this.mileage += distance;
        console.log(`${this.make} ${this.model} has been driven ${distance} miles.`);
    }

    service() {
        console.log(`${this.make} ${this.model} is being serviced.`);
    }
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Order:
    order_id: int
    customer_name: str
    product_name: str
    quantity: int
    price_per_unit: float

    def total_price(self) -> float:
        return self.quantity * self.price_per_unit

    def display_order(self):
        print(f""Order ID: {self.order_id}"")
        print(f""Customer Name: {self.customer_name}"")
        print(f""Product Name: {self.product_name}"")
        print(f""Quantity: {self.quantity}"")
        print(f""Total Price: {self.total_price()}"")
"
God Class,"public class PropertyManager {
    private List<Property> properties;
    private List<Tenant> tenants;
    private List<Lease> leases;

    public PropertyManager() {
        properties = new ArrayList<>();
        tenants = new ArrayList<>();
        leases = new ArrayList<>();
    }

    public void addProperty(Property property) {
        properties.add(property);
    }

    public void removeProperty(Property property) {
        properties.remove(property);
    }

    public void addTenant(Tenant tenant) {
        tenants.add(tenant);
    }

    public void removeTenant(Tenant tenant) {
        tenants.remove(tenant);
    }

    public void createLease(Property property, Tenant tenant, Date startDate, Date endDate) {
        Lease lease = new Lease(property, tenant, startDate, endDate);
        leases.add(lease);
    }

    public void terminateLease(Lease lease) {
        leases.remove(lease);
    }

    public List<Property> getProperties() {
        return properties;
    }

    public List<Tenant> getTenants() {
        return tenants;
    }

    public List<Lease> getLeases() {
        return leases;
    }

    public void displayPropertyDetails(Property property) {
        System.out.println(""Property Details: "" + property.toString());
    }

    public void displayTenantDetails(Tenant tenant) {
        System.out.println(""Tenant Details: "" + tenant.toString());
    }

    public void displayLeaseDetails(Lease lease) {
        System.out.println(""Lease Details: "" + lease.toString());
    }

    public void calculateTotalRent() {
        double totalRent = 0;
        for (Lease lease : leases) {
            totalRent += lease.getRentAmount();
        }
        System.out.println(""Total Rent: "" + totalRent);
    }

    public void managePropertyMaintenance(Property property) {
        // Handle property maintenance
    }

    public void handleTenantComplaints(Tenant tenant) {
        // Handle tenant complaints
    }

    public void performBackgroundCheck(Tenant tenant) {
        // Perform background check on tenant
    }

    public void sendPaymentReminder(Tenant tenant) {
        // Send payment reminder to tenant
    }
}
"
Long Parameter List,"void CreateConstructionProject(const std::string& projectName, const std::string& location, double budget, int numberOfWorkers, const std::string& startDate, const std::string& endDate, const std::string& projectManager, const std::vector<std::string>& subcontractors, const std::string& clientName, bool requiresPermit, bool isResidential, double estimatedDuration, int numberOfPhases) {
    // Method implementation
}
"
Code Clone,"class Movie {
public:
    Movie(std::string title, double duration) 
        : title(title), duration(duration) {}

    void play() {
        std::cout << ""Playing movie: "" << title << std::endl;
    }

    void displayInfo() {
        std::cout << ""Movie: "" << title << "", Duration: "" << duration << "" minutes"" << std::endl;
    }

private:
    std::string title;
    double duration;
};

class Series {
public:
    Series(std::string title, double duration, int episodes) 
        : title(title), duration(duration), episodes(episodes) {}

    void play() {
        std::cout << ""Playing series: "" << title << std::endl;
    }

    void displayInfo() {
        std::cout << ""Series: "" << title << "", Duration per episode: "" << duration 
                  << "" minutes, Total episodes: "" << episodes << std::endl;
    }

private:
    std::string title;
    double duration;
    int episodes;
};
"
God Class,"class OrderManager:
    def __init__(self):
        self.orders = []
        self.customers = []
        self.products = []

    def create_order(self, customer_id, product_id, quantity):
        order = {
            'customer_id': customer_id,
            'product_id': product_id,
            'quantity': quantity
        }
        self.orders.append(order)
        self.update_inventory(product_id, quantity)
        self.notify_customer(customer_id, order)

    def update_inventory(self, product_id, quantity):
        for product in self.products:
            if product['id'] == product_id:
                product['stock'] -= quantity

    def notify_customer(self, customer_id, order):
        for customer in self.customers:
            if customer['id'] == customer_id:
                print(f""Notification sent to {customer['email']} about order: {order}"")

    def add_customer(self, customer):
        self.customers.append(customer)

    def add_product(self, product):
        self.products.append(product)

    def get_orders(self):
        return self.orders

    def get_products(self):
        return self.products

    def get_customers(self):
        return self.customers

    def print_order_summary(self, order):
        print(f""Order Summary: {order}"")

    def process_payment(self, order):
        print(f""Processing payment for order: {order}"")

    def generate_invoice(self, order):
        print(f""Generating invoice for order: {order}"")

    def refund_order(self, order_id):
        print(f""Processing refund for order ID: {order_id}"")
"
Data Class,"class Crop {
    constructor(name, type, yieldPerAcre, growthPeriod) {
        this.name = name;
        this.type = type;
        this.yieldPerAcre = yieldPerAcre;
        this.growthPeriod = growthPeriod;
    }

    getDetails() {
        return {
            name: this.name,
            type: this.type,
            yieldPerAcre: this.yieldPerAcre,
            growthPeriod: this.growthPeriod
        };
    }
}
"
Data Class,"from dataclasses import dataclass
from typing import List

@dataclass
class Movie:
    title: str
    director: str
    release_year: int
    genre: str
    rating: float
    cast: List[str]
    duration: int  # duration in minutes

    def is_highly_rated(self) -> bool:
        return self.rating >= 8.0

    def get_cast_string(self) -> str:
        return ', '.join(self.cast)

    def get_summary(self) -> str:
        return f""{self.title} is a {self.genre} film directed by {self.director}, released in {self.release_year}. It lasts {self.duration} minutes and has a rating of {self.rating}.""
"
Feature Envy,"def calculate_total_revenue(movies):
    total_revenue = 0
    for movie in movies:
        total_revenue += movie.get_box_office_collection() * movie.get_ticket_price() * movie.get_number_of_tickets_sold()
    return total_revenue
"
Data Class,"class Shipment {
    constructor(trackingNumber, sender, receiver, weight, dimensions, status) {
        this.trackingNumber = trackingNumber;
        this.sender = sender;
        this.receiver = receiver;
        this.weight = weight;
        this.dimensions = dimensions;
        this.status = status;
    }

    getDetails() {
        return {
            trackingNumber: this.trackingNumber,
            sender: this.sender,
            receiver: this.receiver,
            weight: this.weight,
            dimensions: this.dimensions,
            status: this.status
        };
    }

    updateStatus(newStatus) {
        this.status = newStatus;
    }
}
"
Long Method,"public void processPropertyTransaction(Property property, Buyer buyer, Seller seller, boolean financing, String transactionType) {
    if (property.isAvailable()) {
        if (financing) {
            Loan loan = loanService.approveLoan(buyer.getCreditScore(), property.getValue());
            if (loan != null) {
                buyer.addLoan(loan);
            } else {
                throw new RuntimeException(""Loan approval failed"");
            }
        }
        
        double commission = calculateCommission(property.getValue(), seller.getCommissionRate());
        seller.receivePayment(property.getValue() - commission);
        
        buyer.addProperty(property);
        seller.removeProperty(property);
        property.setSold(true);
        property.setOwner(buyer);
        
        // Notify all parties
        notificationService.sendNotification(buyer.getEmail(), ""Congratulations! You have purchased "" + property.getAddress());
        notificationService.sendNotification(seller.getEmail(), ""Your property at "" + property.getAddress() + "" has been sold."");
        notificationService.sendNotification(property.getAgent().getEmail(), ""Property transaction completed for "" + property.getAddress());
        
        // Log transaction
        TransactionLog log = new TransactionLog();
        log.setBuyer(buyer);
        log.setSeller(seller);
        log.setProperty(property);
        log.setTransactionType(transactionType);
        log.setTransactionDate(new Date());
        transactionLogger.log(log);
        
        // Update market status
        marketService.updateMarketStatus(property);
        
        // Final checks
        if (!property.isInspected()) {
            throw new RuntimeException(""Property must be inspected before transaction"");
        }
        
        // Additional processing such as title transfer
        titleService.transferTitle(property, buyer);
        System.out.println(""Transaction completed successfully"");
    } else {
        throw new RuntimeException(""Property is not available for transaction"");
    }
}
"
Code Clone,"class Stock:
    def __init__(self, symbol, price, volume):
        self.symbol = symbol
        self.price = price
        self.volume = volume

    def calculate_market_cap(self):
        return self.price * self.volume

    def display_info(self):
        return f""Stock: {self.symbol}, Price: {self.price}, Volume: {self.volume}, Market Cap: {self.calculate_market_cap()}""

class Bond:
    def __init__(self, symbol, price, volume):
        self.symbol = symbol
        self.price = price
        self.volume = volume

    def calculate_market_cap(self):
        return self.price * self.volume

    def display_info(self):
        return f""Bond: {self.symbol}, Price: {self.price}, Volume: {self.volume}, Market Cap: {self.calculate_market_cap()}""
"
God Class,"class School:
    def __init__(self):
        self.students = []
        self.teachers = []
        self.classes = []
        self.subjects = []
        self.schedule = {}
    
    def add_student(self, student):
        self.students.append(student)
    
    def add_teacher(self, teacher):
        self.teachers.append(teacher)
    
    def schedule_class(self, class_name, time_slot):
        self.schedule[class_name] = time_slot
    
    def assign_teacher_to_class(self, teacher, class_name):
        # Logic to assign teacher to class
        pass
    
    def enroll_student_in_class(self, student, class_name):
        # Logic to enroll student in class
        pass

    def create_class(self, class_name):
        self.classes.append(class_name)
    
    def create_subject(self, subject_name):
        self.subjects.append(subject_name)
    
    def get_student_report(self, student):
        # Generate report for student
        pass
    
    def get_teacher_report(self, teacher):
        # Generate report for teacher
        pass
    
    def organize_event(self, event_name, date, time):
        # Event organization logic
        pass
    
    def manage_budget(self, amount):
        # Budget management logic
        pass
    
    def communicate_with_parents(self, message):
        # Communication logic with parents
        pass

    # Additional methods continue...
    # This class has too many responsibilities
"
Long Parameter List,"function createManufacturingOrder(orderId, customerId, productId, quantity, dueDate, priority, shippingMethod, paymentTerms, specialInstructions) {
    // Implementation logic here
}
"
Long Method,"def calculate_premium(age, vehicle_value, accident_history, coverage_type, zipcode):
    base_rate = 500
    age_factor = 0
    if age < 25:
        age_factor = 200
    elif age < 40:
        age_factor = 100
    elif age < 60:
        age_factor = 50

    vehicle_factor = 0
    if vehicle_value < 5000:
        vehicle_factor = 50
    elif vehicle_value < 20000:
        vehicle_factor = 100
    else:
        vehicle_factor = 150

    accident_factor = 0
    if accident_history == 'none':
        accident_factor = 0
    elif accident_history == 'minor':
        accident_factor = 100
    elif accident_history == 'major':
        accident_factor = 300

    coverage_factor = 0
    if coverage_type == 'basic':
        coverage_factor = 0
    elif coverage_type == 'standard':
        coverage_factor = 200
    elif coverage_type == 'premium':
        coverage_factor = 400

    zipcode_factor = 0
    if zipcode in ['10001', '10002', '10003']:
        zipcode_factor = 150
    elif zipcode in ['20001', '20002', '20003']:
        zipcode_factor = 100
    else:
        zipcode_factor = 50

    total_premium = base_rate + age_factor + vehicle_factor + accident_factor + coverage_factor + zipcode_factor
    return total_premium
"
Long Parameter List,"void ScheduleTrain(const std::string& trainNumber, const std::string& departureStation, const std::string& arrivalStation, 
                   const std::string& departureTime, const std::string& arrivalTime, int distanceInKm, 
                   double ticketPrice, const std::string& trainType, int seatingCapacity, bool hasDiningCar, 
                   bool isExpress, const std::vector<std::string>& stops, const std::vector<std::string>& crewMembers) {
    // Method implementation...
}
"
Code Clone,"public class SolarPanel {
    private double area;
    private double efficiency;

    public SolarPanel(double area, double efficiency) {
        this.area = area;
        this.efficiency = efficiency;
    }

    public double calculatePowerOutput(double solarIrradiance) {
        return area * efficiency * solarIrradiance;
    }

    public double calculateAnnualOutput(double solarIrradiance, int hoursOfSunlight) {
        return calculatePowerOutput(solarIrradiance) * hoursOfSunlight * 365;
    }
}

public class WindTurbine {
    private double sweptArea;
    private double efficiency;

    public WindTurbine(double sweptArea, double efficiency) {
        this.sweptArea = sweptArea;
        this.efficiency = efficiency;
    }

    public double calculatePowerOutput(double windSpeed) {
        return 0.5 * efficiency * sweptArea * Math.pow(windSpeed, 3);
    }

    public double calculateAnnualOutput(double windSpeed, int hoursOperational) {
        return calculatePowerOutput(windSpeed) * hoursOperational * 365;
    }
}
"
Code Clone,"class Crop:
    def __init__(self, name, yield_per_acre, water_requirement):
        self.name = name
        self.yield_per_acre = yield_per_acre
        self.water_requirement = water_requirement

    def irrigation_schedule(self):
        if self.water_requirement < 15:
            return ""Irrigation once a week""
        elif self.water_requirement < 30:
            return ""Irrigation twice a week""
        else:
            return ""Daily irrigation required""

class Vegetable(Crop):
    def __init__(self, name, yield_per_acre, water_requirement):
        super().__init__(name, yield_per_acre, water_requirement)

    def irrigation_schedule(self):
        if self.water_requirement < 15:
            return ""Irrigation once a week""
        elif self.water_requirement < 30:
            return ""Irrigation twice a week""
        else:
            return ""Daily irrigation required""

class Fruit(Crop):
    def __init__(self, name, yield_per_acre, water_requirement):
        super().__init__(name, yield_per_acre, water_requirement)

    def irrigation_schedule(self):
        if self.water_requirement < 15:
            return ""Irrigation once a week""
        elif self.water_requirement < 30:
            return ""Irrigation twice a week""
        else:
            return ""Daily irrigation required""
"
Feature Envy,"void checkPlanUsage(const Customer& customer) {
    int totalMinutesUsed = customer.getCallHistory().getTotalMinutes();
    int totalMessagesSent = customer.getMessageHistory().getSentMessagesCount();
    
    std::cout << ""Customer: "" << customer.getName() << std::endl;
    std::cout << ""Total Minutes Used: "" << totalMinutesUsed << std::endl;
    std::cout << ""Total Messages Sent: "" << totalMessagesSent << std::endl;

    if (totalMinutesUsed > customer.getPlan().getMinutesLimit()) {
        std::cout << ""Warning: Exceeded minutes limit!"" << std::endl;
    }
}
"
Long Method,"void processPatientAdmission(Patient& patient, Database& db) {
    // Step 1: Validate Patient Information
    if (patient.getName().empty() || patient.getAge() <= 0 || patient.getInsuranceID().empty()) {
        throw std::invalid_argument(""Invalid patient information"");
    }

    // Step 2: Check for existing records
    auto existingRecord = db.findPatientRecord(patient.getInsuranceID());
    if (existingRecord) {
        // Step 2a: Update existing record if necessary
        if (existingRecord->getName() != patient.getName() || existingRecord->getAge() != patient.getAge()) {
            db.updatePatientRecord(patient);
        }
    } else {
        // Step 2b: Add new patient record
        db.addPatientRecord(patient);
    }

    // Step 3: Assign room
    Room availableRoom = db.findAvailableRoom();
    if (!availableRoom.isAvailable()) {
        throw std::runtime_error(""No available rooms"");
    }
    patient.assignRoom(availableRoom.getRoomNumber());

    // Step 4: Notify healthcare staff
    NotificationService::notifyStaff(patient);

    // Step 5: Schedule initial tests
    std::vector<Test> initialTests = {Test(""Blood Test""), Test(""X-Ray""), Test(""ECG"")};
    for (auto& test : initialTests) {
        TestScheduler::scheduleTest(patient, test);
    }

    // Step 6: Provide admission instructions to the patient
    std::string admissionInstructions = ""Please follow the instructions provided..."";
    NotificationService::sendInstructionsToPatient(patient, admissionInstructions);
}
"
Long Method,"async function fetchAndProcessData(apiUrl) {
    try {
        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        const processedData = data.map(item => {
            const transformedItem = {};
            transformedItem.id = item.id;
            transformedItem.name = item.name.toUpperCase();
            transformedItem.active = item.active;
            transformedItem.date = new Date(item.timestamp).toLocaleDateString();
            if (item.details) {
                transformedItem.details = item.details.map(detail => {
                    return {
                        type: detail.type,
                        value: detail.value,
                        expanded: detail.expanded,
                        additionalInfo: detail.additionalInfo ? detail.additionalInfo : null
                    };
                });
            }
            if (item.notes) {
                transformedItem.notes = item.notes.join(', ');
            }
            return transformedItem;
        });

        // Perform calculations on the processed data
        const summary = processedData.reduce((acc, item) => {
            acc.total += 1;
            if (item.active) acc.active += 1;
            return acc;
        }, { total: 0, active: 0 });

        // Log the summary
        console.log('Summary:', summary);

        // More processing on processedData
        const filteredData = processedData.filter(item => item.active);

        // Send processed data to another service
        await fetch('https://example.com/submit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filteredData)
        });
        
        console.log('Data processed and submitted successfully.');
    } catch (error) {
        console.error('Error fetching and processing data:', error);
    }
}
"
Data Class,"from dataclasses import dataclass
from typing import List

@dataclass
class Property:
    id: int
    address: str
    owner_name: str
    price: float
    bedrooms: int
    bathrooms: int
    square_feet: int
    listing_agent: str
    features: List[str]
    
    def calculate_price_per_square_foot(self) -> float:
        return self.price / self.square_feet if self.square_feet > 0 else 0.0
    
    def display_listing(self):
        return f""{self.address} by {self.owner_name}, Price: ${self.price}, Features: {', '.join(self.features)}""
"
Code Clone,"class Crop {
public:
    Crop(std::string name, double yield) : name(name), yield(yield) {}

    void printInfo() const {
        std::cout << ""Crop Name: "" << name << "", Yield: "" << yield << "" tons/acre"" << std::endl;
    }

    double calculateFertilizerNeeds() const {
        return yield * 1.5; // 1.5 tons of fertilizer per ton of yield
    }

private:
    std::string name;
    double yield;
};

class Vegetable : public Crop {
public:
    Vegetable(std::string name, double yield) : Crop(name, yield) {}

    void printInfo() const {
        std::cout << ""Vegetable Name: "" << name << "", Yield: "" << yield << "" tons/acre"" << std::endl;
    }

    double calculateFertilizerNeeds() const {
        return yield * 1.5; // 1.5 tons of fertilizer per ton of yield
    }
};

class Grain : public Crop {
public:
    Grain(std::string name, double yield) : Crop(name, yield) {}

    void printInfo() const {
        std::cout << ""Grain Name: "" << name << "", Yield: "" << yield << "" tons/acre"" << std::endl;
    }

    double calculateFertilizerNeeds() const {
        return yield * 1.5; // 1.5 tons of fertilizer per ton of yield
    }
};
"
Code Clone,"class Crop {
    constructor(name, yieldPerAcre) {
        this.name = name;
        this.yieldPerAcre = yieldPerAcre;
    }

    calculateHarvest(area) {
        return this.yieldPerAcre * area;
    }

    calculateFertilizerNeeded(area) {
        return area * 2; // Assume 2 units of fertilizer per acre
    }

    calculateWaterNeeded(area) {
        return area * 100; // Assume 100 liters of water per acre
    }
}

class Vegetable extends Crop {
    constructor(name, yieldPerAcre) {
        super(name, yieldPerAcre);
    }

    calculateHarvest(area) {
        return this.yieldPerAcre * area;
    }

    calculateFertilizerNeeded(area) {
        return area * 2; // Assume 2 units of fertilizer per acre
    }

    calculateWaterNeeded(area) {
        return area * 100; // Assume 100 liters of water per acre
    }
}

class Grain extends Crop {
    constructor(name, yieldPerAcre) {
        super(name, yieldPerAcre);
    }

    calculateHarvest(area) {
        return this.yieldPerAcre * area;
    }

    calculateFertilizerNeeded(area) {
        return area * 2; // Assume 2 units of fertilizer per acre
    }

    calculateWaterNeeded(area) {
        return area * 100; // Assume 100 liters of water per acre
    }
}
"
Data Class,"public class Product {
    private String name;
    private String productId;
    private double price;
    private int quantity;

    public Product(String name, String productId, double price, int quantity) {
        this.name = name;
        this.productId = productId;
        this.price = price;
        this.quantity = quantity;
    }

    public String getName() {
        return name;
    }

    public String getProductId() {
        return productId;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}
"
Code Clone,"public class NetworkConnection {
    private String ipAddress;
    private int port;
    private String protocol;

    public NetworkConnection(String ipAddress, int port, String protocol) {
        this.ipAddress = ipAddress;
        this.port = port;
        this.protocol = protocol;
    }

    public void connect() {
        if (""TCP"".equals(protocol)) {
            // TCP connection logic
            System.out.println(""Connecting via TCP to "" + ipAddress + "":"" + port);
        } else if (""UDP"".equals(protocol)) {
            // UDP connection logic
            System.out.println(""Connecting via UDP to "" + ipAddress + "":"" + port);
        }
    }
}

public class SecureNetworkConnection {
    private String ipAddress;
    private int port;
    private String protocol;

    public SecureNetworkConnection(String ipAddress, int port, String protocol) {
        this.ipAddress = ipAddress;
        this.port = port;
        this.protocol = protocol;
    }

    public void connect() {
        if (""TCP"".equals(protocol)) {
            // Secure TCP connection logic
            System.out.println(""Connecting securely via TCP to "" + ipAddress + "":"" + port);
        } else if (""UDP"".equals(protocol)) {
            // Secure UDP connection logic
            System.out.println(""Connecting securely via UDP to "" + ipAddress + "":"" + port);
        }
    }
}
"
Code Clone,"#include <string>
#include <vector>

class Order {
public:
    Order(int id, const std::string &customerName) : id(id), customerName(customerName) {}

    void addItem(const std::string &itemName, double price) {
        items.push_back(itemName);
        prices.push_back(price);
    }
    
    double calculateTotal() const {
        double total = 0.0;
        for (const auto &price : prices) {
            total += price;
        }
        return total;
    }

    void printReceipt() const {
        std::cout << ""Receipt for Order ID: "" << id << "" for customer "" << customerName << ""\n"";
        for (size_t i = 0; i < items.size(); ++i) {
            std::cout << items[i] << "" - $"" << prices[i] << ""\n"";
        }
        std::cout << ""Total: $"" << calculateTotal() << ""\n"";
    }

private:
    int id;
    std::string customerName;
    std::vector<std::string> items;
    std::vector<double> prices;
};

class Invoice {
public:
    Invoice(int invoiceId, const std::string &clientName) : invoiceId(invoiceId), clientName(clientName) {}

    void addService(const std::string &serviceName, double cost) {
        services.push_back(serviceName);
        costs.push_back(cost);
    }
    
    double calculateTotal() const {
        double total = 0.0;
        for (const auto &cost : costs) {
            total += cost;
        }
        return total;
    }

    void printInvoice() const {
        std::cout << ""Invoice ID: "" << invoiceId << "" for client "" << clientName << ""\n"";
        for (size_t i = 0; i < services.size(); ++i) {
            std::cout << services[i] << "" - $"" << costs[i] << ""\n"";
        }
        std::cout << ""Total: $"" << calculateTotal() << ""\n"";
    }

private:
    int invoiceId;
    std::string clientName;
    std::vector<std::string> services;
    std::vector<double> costs;
};
"
Data Class,"class Product {
    constructor(id, name, price, quantity) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    getTotalValue() {
        return this.price * this.quantity;
    }
}

class Order {
    constructor(orderId, products) {
        this.orderId = orderId;
        this.products = products;
    }

    getOrderTotal() {
        return this.products.reduce((total, product) => total + product.getTotalValue(), 0);
    }
}
"
Code Clone,"class HotelRoom:
    def __init__(self, room_number, room_type, price):
        self.room_number = room_number
        self.room_type = room_type
        self.price = price

    def book_room(self, customer):
        print(f""Booking {self.room_type} room number {self.room_number} for {customer} at ${self.price}."")

    def cancel_booking(self, customer):
        print(f""Cancelling {self.room_type} room number {self.room_number} for {customer}."")

class SuiteRoom:
    def __init__(self, room_number, price):
        self.room_number = room_number
        self.room_type = ""Suite""
        self.price = price

    def book_room(self, customer):
        print(f""Booking {self.room_type} room number {self.room_number} for {customer} at ${self.price}."")

    def cancel_booking(self, customer):
        print(f""Cancelling {self.room_type} room number {self.room_number} for {customer}."")
"
God Class,"class Movie {
private:
    string title;
    string director;
    string genre;
    int duration; // in minutes
    float rating;
    string releaseDate;
    vector<string> cast;
    string synopsis;

public:
    Movie(string t, string d, string g, int dur, float r, string date, vector<string> c, string s) 
    : title(t), director(d), genre(g), duration(dur), rating(r), releaseDate(date), cast(c), synopsis(s) {}

    void play() {
        // Code to play the movie
    }

    void pause() {
        // Code to pause the movie
    }

    void stop() {
        // Code to stop the movie
    }

    void displayInfo() {
        // Code to display movie information
    }

    void rate(float newRating) {
        // Code to rate the movie
    }

    void addToWatchlist() {
        // Code to add to watchlist
    }

    void removeFromWatchlist() {
        // Code to remove from watchlist
    }

    void buyTicket() {
        // Code to buy a ticket for the movie
    }

    void updateSynopsis(string newSynopsis) {
        synopsis = newSynopsis;
    }

    void updateCast(vector<string> newCast) {
        cast = newCast;
    }

    // Additional methods that manage user reviews, genres, box office collection, etc.
    void addReview(string review) {
        // Code to add a user review
    }

    void boxOfficeCollection(float amount) {
        // Code to update box office collection
    }

    void setReleaseDate(string date) {
        releaseDate = date;
    }

    void displayTrailer() {
        // Code to display the movie trailer
    }

    // More methods...
};
"
Long Parameter List,"public void enrollStudent(Long studentId, Long courseId, Long semesterId, Long instructorId, Long departmentId, Long paymentMethodId, Long scholarshipId) {
    // Implementation for enrolling a student in a course
}
"
God Class,"class ConstructionManager:
    def __init__(self):
        self.projects = []
        self.employees = []
        self.suppliers = []
    
    def add_project(self, project):
        self.projects.append(project)
    
    def assign_employee(self, employee, project):
        if project in self.projects:
            project.add_employee(employee)
            self.employees.append(employee)
    
    def add_supplier(self, supplier):
        self.suppliers.append(supplier)
    
    def manage_budget(self, project, budget):
        project.set_budget(budget)
    
    def schedule_meeting(self, project, date):
        project.schedule_meeting(date)
    
    def track_progress(self, project):
        return project.get_progress()
    
    def evaluate_employee_performance(self, employee):
        return employee.get_performance_data()
    
    def handle_complaints(self, complaint):
        print(f""Handling complaint: {complaint}"")
    
    def issue_reports(self):
        for project in self.projects:
            print(f""Report for {project.name}: {project.get_report()}"")
    
    def manage_inventory(self, supplier, items):
        supplier.update_inventory(items)

    def oversee_regulatory_compliance(self, project):
        return project.check_compliance()
    
    def provide_training(self, employee, training_module):
        employee.complete_training(training_module)
    
    def update_insurance(self, project, insurance_details):
        project.update_insurance(insurance_details)
"
Long Parameter List,"function createPropertyListing(title, description, price, address, city, state, zipcode, bedrooms, bathrooms, squareFeet, lotSize, yearBuilt, propertyType, amenities, images, contactInfo) {
    // Function implementation goes here
}
"
Data Class,"class Policy {
    constructor(policyNumber, policyHolderName, startDate, endDate, premiumAmount, coverageDetails) {
        this.policyNumber = policyNumber;
        this.policyHolderName = policyHolderName;
        this.startDate = startDate;
        this.endDate = endDate;
        this.premiumAmount = premiumAmount;
        this.coverageDetails = coverageDetails;
    }

    getPolicyInfo() {
        return {
            policyNumber: this.policyNumber,
            policyHolderName: this.policyHolderName,
            startDate: this.startDate,
            endDate: this.endDate,
            premiumAmount: this.premiumAmount,
            coverageDetails: this.coverageDetails
        };
    }
}
"
Long Parameter List,"void processOrder(int orderId, const std::string& customerName, const std::string& customerAddress, const std::string& customerEmail, const std::string& paymentMethod, const std::string& shippingMethod, double orderTotal, bool applyDiscount, bool giftWrap, const std::vector<std::string>& itemIds, const std::map<std::string, int>& itemQuantities, const std::string& orderDate, const std::string& deliveryInstructions) {
    // Process the order
    // ...
}
"
Long Method,"def process_order(order_id, customer_id, items):
    order = get_order(order_id)
    customer = get_customer(customer_id)
    if not order or not customer:
        raise ValueError(""Invalid order or customer ID"")
    
    if customer.balance < order.total:
        raise ValueError(""Insufficient balance"")
    
    for item in items:
        product = get_product(item.product_id)
        if not product:
            raise ValueError(f""Product {item.product_id} not found"")
        
        if item.quantity > product.stock:
            raise ValueError(f""Insufficient stock for product {item.product_id}"")
        
        product.stock -= item.quantity

    order.status = 'Processed'
    update_order(order)
    customer.balance -= order.total
    update_customer(customer)

    send_confirmation_email(customer.email, order_id)
    log_transaction(order_id, customer_id, order.total)

    for item in items:
        ship_product(item.product_id, item.quantity, customer.shipping_address)

    update_inventory(items)
"
Code Clone,"class Car {
  constructor(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
  }

  start() {
    console.log(`${this.year} ${this.make} ${this.model} is starting.`);
  }

  stop() {
    console.log(`${this.year} ${this.make} ${this.model} is stopping.`);
  }

  drive() {
    console.log(`${this.year} ${this.make} ${this.model} is driving.`);
  }
}

class Truck {
  constructor(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
  }

  start() {
    console.log(`${this.year} ${this.make} ${this.model} is starting.`);
  }

  stop() {
    console.log(`${this.year} ${this.make} ${this.model} is stopping.`);
  }

  drive() {
    console.log(`${this.year} ${this.make} ${this.model} is driving.`);
  }
}
"
God Class,"class Vehicle:
    def __init__(self, make, model, year, color, engine_type, horsepower, weight, fuel_type, num_doors):
        self.make = make
        self.model = model
        self.year = year
        self.color = color
        self.engine_type = engine_type
        self.horsepower = horsepower
        self.weight = weight
        self.fuel_type = fuel_type
        self.num_doors = num_doors
        self.current_speed = 0
        self.fuel_level = 100

    def accelerate(self, speed_increase):
        self.current_speed += speed_increase
    
    def brake(self, speed_decrease):
        self.current_speed -= speed_decrease if self.current_speed - speed_decrease >= 0 else self.current_speed
    
    def refuel(self, amount):
        self.fuel_level = min(self.fuel_level + amount, 100)

    def display_info(self):
        return f""{self.year} {self.make} {self.model} - Color: {self.color}, Engine: {self.engine_type}, HP: {self.horsepower}, Weight: {self.weight}kg, Fuel: {self.fuel_level}%""

    def turn_left(self):
        print(""Turning left."")
    
    def turn_right(self):
        print(""Turning right."")
    
    def honk_horn(self):
        print(""Honk! Honk!"")
    
    def check_maintenance(self):
        print(""Checking maintenance status..."")
    
    def play_radio(self, station):
        print(f""Playing radio station: {station}"")

    def activate_cruise_control(self, speed):
        print(f""Cruise control activated at {speed} km/h."")
    
    def open_trunk(self):
        print(""Trunk opened."")
    
    def close_trunk(self):
        print(""Trunk closed."")
"
Code Clone,"public class ImageProcessor {
    private String filePath;

    public ImageProcessor(String filePath) {
        this.filePath = filePath;
    }

    public void processImage() {
        // Load image
        System.out.println(""Processing image from: "" + filePath);
        // Apply filter
        applyFilter();
        // Save image
        saveImage();
    }

    private void applyFilter() {
        System.out.println(""Applying filter to image"");
    }

    private void saveImage() {
        System.out.println(""Saving image to: "" + filePath);
    }
}

public class VideoProcessor {
    private String filePath;

    public VideoProcessor(String filePath) {
        this.filePath = filePath;
    }

    public void processVideo() {
        // Load video
        System.out.println(""Processing video from: "" + filePath);
        // Apply filter
        applyFilter();
        // Save video
        saveVideo();
    }

    private void applyFilter() {
        System.out.println(""Applying filter to video"");
    }

    private void saveVideo() {
        System.out.println(""Saving video to: "" + filePath);
    }
}
"
Long Method,"public void processData(List<Data> dataList) {
    for (Data data : dataList) {
        String processedData = data.getRawValue();
        if (data.isValid()) {
            processedData = processedData.trim();
            processedData = processedData.toLowerCase();
            if (processedData.length() > 0) {
                processedData = ""Processed: "" + processedData;
                saveProcessedData(processedData);
                logProcessing(data);
                if (data.isSpecial()) {
                    sendToExternalService(processedData);
                }
                if (data.hasAttachments()) {
                    for (Attachment attachment : data.getAttachments()) {
                        saveAttachment(attachment);
                        if (attachment.isImportant()) {
                            notifyUser(attachment.getUser());
                        }
                    }
                }
            }
        } else {
            logInvalidData(data);
        }
    }
    generateReport(dataList);
}
"
God Class,"class InsurancePolicy {
    constructor(policyNumber, policyHolder, coverageAmount, premium, policyType) {
        this.policyNumber = policyNumber;
        this.policyHolder = policyHolder;
        this.coverageAmount = coverageAmount;
        this.premium = premium;
        this.policyType = policyType;
    }

    calculatePremium() {
        // Complex premium calculation logic
        return this.premium;
    }

    fileClaim(amount) {
        // Logic to file a claim
        console.log(`Claim of ${amount} filed.`);
    }

    getPolicyDetails() {
        return {
            policyNumber: this.policyNumber,
            policyHolder: this.policyHolder,
            coverageAmount: this.coverageAmount,
            premium: this.premium,
            policyType: this.policyType
        };
    }

    renewPolicy() {
        // Logic to renew the policy
        console.log(`Policy ${this.policyNumber} renewed.`);
    }

    cancelPolicy() {
        // Logic to cancel the policy
        console.log(`Policy ${this.policyNumber} canceled.`);
    }

    checkCoverage() {
        // Logic to check coverage details
        return `Coverage Amount: ${this.coverageAmount}`;
    }

    updatePolicyHolder(newHolder) {
        this.policyHolder = newHolder;
        console.log(`Policy holder updated to: ${newHolder}`);
    }

    adjustCoverage(newAmount) {
        this.coverageAmount = newAmount;
        console.log(`Coverage amount adjusted to: ${newAmount}`);
    }

    sendReminder() {
        // Logic to send a reminder for payment
        console.log(`Reminder sent for policy ${this.policyNumber}.`);
    }

    getClaimHistory() {
        // Logic to retrieve claim history
        return `Claim history for policy ${this.policyNumber}.`;
    }
}
"
Long Parameter List,"public void processCallDetails(Long callStartTime, Long callEndTime, Long callerId, Long receiverId, Long duration, Long cost, Long callType, Long callStatus, Long locationId) {
    // Method implementation here
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Hotel:
    name: str
    location: str
    rooms: int
    price_per_night: float
    rating: float

    def calculate_total_cost(self, nights: int) -> float:
        return nights * self.price_per_night

    def is_high_rated(self) -> bool:
        return self.rating >= 4.0

    def to_dict(self):
        return {
            'name': self.name,
            'location': self.location,
            'rooms': self.rooms,
            'price_per_night': self.price_per_night,
            'rating': self.rating
        }
"
God Class,"class InsurancePolicy {
public:
    void calculatePremium() {
        // Calculate premium based on various factors
    }

    void issuePolicy() {
        // Issue the policy to the customer
    }

    void cancelPolicy() {
        // Cancel the specific policy
    }

    void updatePolicyDetails() {
        // Update policy details
    }

    void claimSettlement() {
        // Process claim settlement
    }

    void generatePolicyReport() {
        // Generate detailed report for the policy
    }

    void sendNotifications() {
        // Send notifications related to the policy
    }

    void conductPolicyReview() {
        // Review the policy after a specific period
    }

    void handleCustomerQueries() {
        // Handle customer support queries
    }

    void manageFraudInvestigations() {
        // Manage any fraud investigations related to the policy
    }
};
"
Long Parameter List,"public void scheduleEnergyConsumption(Long userId, Long deviceId, Long startTime, Long endTime, Long energyAmount, Long consumptionRate, Long energyPrice, Long duration, Long frequency, Long userSettingId) {
    // method implementation
}
"
Code Clone,"class HealthInsurance:
    def __init__(self, policy_number, coverage_amount):
        self.policy_number = policy_number
        self.coverage_amount = coverage_amount

    def calculate_premium(self, age, health_conditions):
        base_premium = self.coverage_amount * 0.02
        if age > 40:
            base_premium += 0.01 * self.coverage_amount
        if ""smoker"" in health_conditions:
            base_premium += 0.03 * self.coverage_amount
        return base_premium

    def display_policy_info(self):
        return f""Policy Number: {self.policy_number}, Coverage Amount: {self.coverage_amount}""


class LifeInsurance:
    def __init__(self, policy_number, coverage_amount):
        self.policy_number = policy_number
        self.coverage_amount = coverage_amount

    def calculate_premium(self, age, health_conditions):
        base_premium = self.coverage_amount * 0.03
        if age > 40:
            base_premium += 0.015 * self.coverage_amount
        if ""smoker"" in health_conditions:
            base_premium += 0.04 * self.coverage_amount
        return base_premium

    def display_policy_info(self):
        return f""Policy Number: {self.policy_number}, Coverage Amount: {self.coverage_amount}""
"
Long Parameter List,"function createUser(firstName, lastName, email, password, address, phoneNumber, dateOfBirth, profilePicture, twoFactorEnabled, preferredLanguage) {
    // Implementation to create a user
}
"
Feature Envy,"double calculateTotalEnergyConsumption(const Appliance& appliance) {
    double totalEnergy = 0;
    totalEnergy += appliance.getWattage() * appliance.getHoursUsed();
    totalEnergy += appliance.getStandbyWattage() * appliance.getStandbyHours();
    return totalEnergy;
}
"
God Class,"public class EnergyManagementSystem {
    private double totalEnergyConsumption;
    private double totalEnergyProduction;
    private double energyCosts;
    private double energyRevenue;
    private List<Consumer> consumers;
    private List<Producer> producers;

    public EnergyManagementSystem() {
        this.consumers = new ArrayList<>();
        this.producers = new ArrayList<>();
        this.totalEnergyConsumption = 0;
        this.totalEnergyProduction = 0;
        this.energyCosts = 0;
        this.energyRevenue = 0;
    }

    public void addConsumer(Consumer consumer) {
        consumers.add(consumer);
    }

    public void addProducer(Producer producer) {
        producers.add(producer);
    }

    public void calculateTotalConsumption() {
        totalEnergyConsumption = consumers.stream()
                .mapToDouble(Consumer::getEnergyConsumption)
                .sum();
    }

    public void calculateTotalProduction() {
        totalEnergyProduction = producers.stream()
                .mapToDouble(Producer::getEnergyProduction)
                .sum();
    }

    public void calculateEnergyCosts() {
        energyCosts = totalEnergyConsumption * 0.12; // Example cost per kWh
    }

    public void calculateEnergyRevenue() {
        energyRevenue = totalEnergyProduction * 0.15; // Example revenue per kWh
    }

    public void generateReport() {
        System.out.println(""Total Energy Consumption: "" + totalEnergyConsumption);
        System.out.println(""Total Energy Production: "" + totalEnergyProduction);
        System.out.println(""Energy Costs: "" + energyCosts);
        System.out.println(""Energy Revenue: "" + energyRevenue);
    }

    public void manageEnergy() {
        calculateTotalConsumption();
        calculateTotalProduction();
        calculateEnergyCosts();
        calculateEnergyRevenue();
        generateReport();
    }
    
    // Additional methods can include a method to interface with different types of energy sources,
    // manage energy distribution, and handle consumer payments which would further complicate this class.
}
"
Long Parameter List,"function createIrrigationPlan(fieldId, cropType, waterSource, soilType, irrigationMethod, frequency, duration, startTime, endTime, weatherConditions, budget, equipmentRequired, laborNeeded, permissionsNeeded) {
    // implementation
}
"
Feature Envy,"calculateTotalCost() {
    let totalCost = 0;
    this.items.forEach(item => {
        totalCost += item.getPrice() * item.getQuantity();
    });
    totalCost += this.getLaborCost();
    totalCost += this.getPermits().reduce((sum, permit) => sum + permit.getFee(), 0);
    return totalCost;
}
"
Code Clone,"public class Car {
    private String make;
    private String model;
    private int year;

    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void displayInfo() {
        System.out.println(""Car Make: "" + make);
        System.out.println(""Car Model: "" + model);
        System.out.println(""Car Year: "" + year);
    }

    public void displayCarDetails() {
        System.out.println(""Details - Make: "" + make + "", Model: "" + model + "", Year: "" + year);
    }

    public String getCarDescription() {
        return ""Car: "" + make + "" "" + model + "" ("" + year + "")"";
    }

    public String describeCar() {
        return ""This car is a "" + year + "" "" + make + "" "" + model + ""."";
    }
}
"
Long Parameter List,"public void scheduleTransport(Long vehicleId, Long routeId, Long driverId, Long startTime, Long endTime, Long passengerCount, Long cargoWeight, Long cargoVolume, Long fuelTypeId, Long maintenanceScheduleId) {
    // Scheduling logic here
}
"
Code Clone,"class Building {
public:
    Building(int floors, int area) : floors(floors), area(area) {}

    void displayInfo() const {
        std::cout << ""Building with "" << floors << "" floors and "" << area << "" sq ft."" << std::endl;
    }

private:
    int floors;
    int area;
};

class House {
public:
    House(int floors, int area) : floors(floors), area(area) {}

    void displayInfo() const {
        std::cout << ""House with "" << floors << "" floors and "" << area << "" sq ft."" << std::endl;
    }

private:
    int floors;
    int area;
};
"
Long Parameter List,"public void processManufacturingOrder(Long orderId, Long customerId, Long productId, Long quantity, Long warehouseId, Long priority, Long discountId, Long shipmentMethodId) {
    // processing logic here
}
"
Code Clone,"class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def get_description(self):
        return f""{self.year} {self.make} {self.model}""

    def start_engine(self):
        print(f""The engine of the {self.get_description()} is starting."")

    def stop_engine(self):
        print(f""The engine of the {self.get_description()} is stopping."")

class Truck:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def get_description(self):
        return f""{self.year} {self.make} {self.model}""

    def start_engine(self):
        print(f""The engine of the {self.get_description()} is starting."")

    def stop_engine(self):
        print(f""The engine of the {self.get_description()} is stopping."")
"
Long Method,"void calculateEnergyConsumption(const std::vector<double>& usageData, double& totalConsumption, double& averageConsumption, double& peakConsumption) {
    totalConsumption = 0.0;
    peakConsumption = 0.0;
    for (const auto& usage : usageData) {
        totalConsumption += usage;
        if (usage > peakConsumption) {
            peakConsumption = usage;
        }
    }
    if (!usageData.empty()) {
        averageConsumption = totalConsumption / usageData.size();
        // More lengthy calculations and detailed adjustments based on seasonal changes, energy tariffs,
        // demand forecasting, and efficiency metrics over several periods could be included here.
        // Additional logic to accommodate special cases such as weekends, holidays, and different rates.
        // Further adjustments for historical data trends and predictive modeling insights
        // taking into account user patterns, habitat types, and building classifications are performed.
        // Eventually, thresholds for managing energy consumption during peak hours would be computed as well,
        // along with potential recommendations for energy saving.
    } else {
        averageConsumption = 0.0;
    }
}
"
God Class,"class EducationSystem {
    constructor() {
        this.students = [];
        this.courses = [];
        this.teachers = [];
    }

    addStudent(student) {
        this.students.push(student);
    }

    removeStudent(studentId) {
        this.students = this.students.filter(student => student.id !== studentId);
    }

    addCourse(course) {
        this.courses.push(course);
    }

    removeCourse(courseId) {
        this.courses = this.courses.filter(course => course.id !== courseId);
    }

    assignTeacherToCourse(teacherId, courseId) {
        const course = this.courses.find(course => course.id === courseId);
        if (course) {
            course.teacherId = teacherId;
        }
    }

    getStudentGrades(studentId) {
        const student = this.students.find(student => student.id === studentId);
        return student ? student.grades : null;
    }

    printReportCard(studentId) {
        const student = this.students.find(student => student.id === studentId);
        if (student) {
            console.log(`Report Card for ${student.name}`);
            for (const [courseId, grade] of Object.entries(student.grades)) {
                console.log(`Course: ${courseId}, Grade: ${grade}`);
            }
        }
    }

    listAllCourses() {
        return this.courses.map(course => course.name);
    }

    enrollStudentInCourse(studentId, courseId) {
        const student = this.students.find(student => student.id === studentId);
        const course = this.courses.find(course => course.id === courseId);
        if (student && course) {
            student.enrolledCourses.push(courseId);
        }
    }

    expelStudent(studentId) {
        this.removeStudent(studentId);
        this.students.forEach(student => {
            student.enrolledCourses = student.enrolledCourses.filter(courseId => {
                const course = this.courses.find(course => course.id === courseId);
                return !course || course.teacherId === null;
            });
        });
    }

    calculateAverageGrade(studentId) {
        const grades = this.getStudentGrades(studentId);
        if (grades) {
            const total = Object.values(grades).reduce((sum, grade) => sum + grade, 0);
            return total / Object.values(grades).length;
        }
        return null;
    }
}
"
God Class,"class ConstructionManager {
    constructor() {
        this.projects = [];
        this.suppliers = [];
        this.employees = [];
        this.budgets = {};
        this.schedules = {};
    }

    addProject(name, budget, schedule) {
        this.projects.push({ name, budget, schedule });
        this.budgets[name] = budget;
        this.schedules[name] = schedule;
    }

    assignEmployeeToProject(employee, projectName) {
        if (!this.employees.includes(employee)) {
            this.employees.push(employee);
        }
        // Logic to assign employee to project...
    }

    addSupplier(supplier) {
        this.suppliers.push(supplier);
    }

    calculateTotalBudget() {
        return Object.values(this.budgets).reduce((total, budget) => total + budget, 0);
    }

    generateScheduleReport() {
        // Generates a report based on the schedules...
    }

    resolveConflicts() {
        // Logic to resolve conflicts between projects...
    }

    monitorProgress() {
        // Logic to monitor progress of all projects...
    }

    handleCustomerFeedback(feedback) {
        // Logic to process customer feedback...
    }

    // Additional responsibilities and methods related to HR, finance, and project management
}
"
God Class,"class Vehicle {
public:
    void startEngine() {
        // Code to start the engine
    }

    void stopEngine() {
        // Code to stop the engine
    }

    void accelerate(int speed) {
        // Code to accelerate the vehicle
    }

    void brake() {
        // Code to apply brakes
    }

    void turnLeft() {
        // Code to turn left
    }

    void turnRight() {
        // Code to turn right
    }

    void refuel(int amount) {
        // Code to refuel the vehicle
    }

    void loadPassengers(int number) {
        // Code to load passengers
    }

    void unloadPassengers(int number) {
        // Code to unload passengers
    }

    void displayStatus() {
        // Code to display vehicle status
    }

    void checkOilLevel() {
        // Code to check oil level
    }

    void checkTirePressure() {
        // Code to check tire pressure
    }

    void scheduleMaintenance() {
        // Code to schedule maintenance
    }

    void playRadio() {
        // Code to play the radio
    }

    void stopRadio() {
        // Code to stop the radio
    }

    void activateCruiseControl() {
        // Code to activate cruise control
    }

    void deactivateCruiseControl() {
        // Code to deactivate cruise control
    }

private:
    int speed;
    bool engineRunning;
    int fuelLevel;
    int passengerCount;
};
"
Long Method,"void processOrder(int orderId) {
    Order order = orderRepository.getOrderById(orderId);
    if (!order.isValid()) {
        throw std::invalid_argument(""Invalid order"");
    }
    Customer customer = customerRepository.getCustomerById(order.getCustomerId());
    if (!customer.isActive()) {
        throw std::runtime_error(""Inactive customer"");
    }
    Payment payment = paymentService.processPayment(order.getTotalAmount(), customer.getPaymentMethod());
    if (!payment.isSuccessful()) {
        throw std::runtime_error(""Payment processing failed"");
    }
    for (const auto& item : order.getItems()) {
        Inventory inventory = inventoryRepository.getInventoryForProduct(item.getProductId());
        if (inventory.getQuantity() < item.getQuantity()) {
            throw std::runtime_error(""Insufficient inventory for product: "" + item.getProductId());
        }
        inventory.reduceQuantity(item.getQuantity());
        inventoryRepository.updateInventory(inventory);
    }
    shippingService.scheduleDelivery(order.getShippingAddress(), order.getDeliveryDate());
    order.setStatus(OrderStatus::COMPLETED);
    orderRepository.updateOrder(order);
    notificationService.sendOrderConfirmation(customer.getEmail(), order);
}
"
Code Clone,"class Soda {
public:
    Soda(std::string name, double volume, double sugarContent) 
        : name(name), volume(volume), sugarContent(sugarContent) {}

    void displayInfo() {
        std::cout << ""Soda Name: "" << name << std::endl;
        std::cout << ""Volume: "" << volume << "" ml"" << std::endl;
        std::cout << ""Sugar Content: "" << sugarContent << "" g"" << std::endl;
    }

private:
    std::string name;
    double volume;
    double sugarContent;
};

class Juice {
public:
    Juice(std::string name, double volume, double sugarContent) 
        : name(name), volume(volume), sugarContent(sugarContent) {}

    void displayInfo() {
        std::cout << ""Juice Name: "" << name << std::endl;
        std::cout << ""Volume: "" << volume << "" ml"" << std::endl;
        std::cout << ""Sugar Content: "" << sugarContent << "" g"" << std::endl;
    }

private:
    std::string name;
    double volume;
    double sugarContent;
};
"
God Class,"public class WebApplication {
    private String url;
    private String databaseConnection;
    private String userSession;
    
    public WebApplication(String url) {
        this.url = url;
        this.databaseConnection = ""defaultConnection"";
        this.userSession = ""guest"";
    }
    
    public void start() {
        initializeDatabase();
        startServer();
        initializeUser();
    }
    
    private void initializeDatabase() {
        // Logic to initialize database connection
        System.out.println(""Connecting to database..."");
    }
    
    private void startServer() {
        // Logic to start the web server
        System.out.println(""Starting server at "" + url);
    }
    
    private void initializeUser() {
        // Logic to initialize user session
        System.out.println(""Initializing user session for "" + userSession);
    }
    
    public void handleRequest(String request) {
        // Logic to handle incoming web requests
        System.out.println(""Handling request: "" + request);
    }
    
    public void sendResponse(String response) {
        // Logic to send responses back to the user
        System.out.println(""Sending response: "" + response);
    }

    public void logActivity(String activity) {
        // Logic to log user activities
        System.out.println(""Logging activity: "" + activity);
    }
    
    public String getDatabaseConnection() {
        return databaseConnection;
    }
    
    public String getUserSession() {
        return userSession;
    }
    
    public void updateSettings(String newSetting) {
        // Logic to update application settings
        System.out.println(""Updating settings: "" + newSetting);
    }
}
"
Feature Envy,"double calculateAverageGrade(const Student& student) {
    double total = 0.0;
    for (const auto& grade : student.getGrades()) {
        total += grade;
    }
    return total / student.getGrades().size();
}
"
Long Parameter List,"void createPropertyListing(const std::string& agentName, const std::string& propertyAddress, double price, int numBedrooms, int numBathrooms, int squareFootage, bool hasGarage, bool hasGarden, const std::string& propertyType, const std::string& listingDate, const std::string& expirationDate, const std::string& description) {
    // Method implementation
}
"
Data Class,"from dataclasses import dataclass
from datetime import datetime

@dataclass
class User:
    id: int
    username: str
    email: str
    created_at: datetime
    updated_at: datetime

    def update_email(self, new_email: str):
        self.email = new_email
        self.updated_at = datetime.now()

    def display_info(self):
        return f""User {self.username} with email {self.email} created at {self.created_at}""

    def is_recent(self) -> bool:
        return (datetime.now() - self.created_at).days <= 30
"
Long Parameter List,"function scheduleTrip(driverId, vehicleId, passengerCount, departureTime, arrivalTime, routeDetails, loyaltyProgramId, paymentInfo, specialRequests) {
    // Method implementation...
}
"
Long Method,"function calculateRouteDistance(startLocation, endLocation, waypoints) {
    let totalDistance = 0;
    let currentLocation = startLocation;

    for (let i = 0; i < waypoints.length; i++) {
        totalDistance += getDistanceBetween(currentLocation, waypoints[i]);
        currentLocation = waypoints[i];
    }
    
    totalDistance += getDistanceBetween(currentLocation, endLocation);
    
    if (totalDistance > 1000) {
        console.log(""Warning: The route is too long."");
        alert(""Consider alternative routes or check your settings."");
    }

    let speedLimit = 60; // assuming a speed limit of 60 km/h
    let estimatedTime = totalDistance / speedLimit;

    if (estimatedTime > 5) {
        console.log(""Note: This route will take longer than expected."");
        updateTrafficReports();
    }

    if (!isWeatherGood()) {
        console.log(""Weather conditions could affect your travel time."");
        totalDistance *= 1.1; // increase distance by 10% due to weather
    }

    if (isRoadUnderConstruction()) {
        console.log(""Road construction detected on route."");
        totalDistance += 15; // add extra distance due to detour
    }

    let fuelEfficiency = 15; // km per liter
    let totalFuelNeeded = totalDistance / fuelEfficiency;

    let tolls = calculateTolls(startLocation, endLocation, waypoints);
    if (tolls > 0) {
        console.log(""Total tolls on your route: "" + tolls);
    }

    totalDistance += tolls; // add tolls to total distance for cost analysis

    console.log(`Distance from ${startLocation} to ${endLocation} is ${totalDistance} km.`);
    console.log(`Estimated time of arrival is ${estimatedTime.toFixed(2)} hours.`);
    
    return {
        distance: totalDistance,
        estimatedTime: estimatedTime,
        fuelNeeded: totalFuelNeeded
    };
}
"
Long Parameter List,"public void createListing(Long propertyId, Long ownerId, Long agentId, Long locationId, Long price, Long squareFeet, Long bedrooms, Long bathrooms, Long yearBuilt, Long lotSize, Long garageSize) {
    // Implementation goes here
}
"
God Class,"class BeverageManager {
    constructor() {
        this.beverages = [];
    }

    addBeverage(beverage) {
        this.beverages.push(beverage);
    }

    removeBeverage(beverage) {
        this.beverages = this.beverages.filter(b => b !== beverage);
    }

    getBeverages() {
        return this.beverages;
    }

    calculateTotalCalories() {
        return this.beverages.reduce((total, beverage) => total + beverage.calories, 0);
    }

    calculateTotalPrice() {
        return this.beverages.reduce((total, beverage) => total + beverage.price, 0);
    }

    findBeverageByName(name) {
        return this.beverages.find(beverage => beverage.name === name);
    }

    printBeverageList() {
        this.beverages.forEach(beverage => {
            console.log(`${beverage.name}: ${beverage.price} USD, ${beverage.calories} kcal`);
        });
    }

    clearBeverages() {
        this.beverages = [];
    }

    sortBeveragesByPrice() {
        this.beverages.sort((a, b) => a.price - b.price);
    }

    sortBeveragesByCalories() {
        this.beverages.sort((a, b) => a.calories - b.calories);
    }

    getMostExpensiveBeverage() {
        return this.beverages.reduce((max, beverage) => (beverage.price > max.price ? beverage : max), this.beverages[0]);
    }
}
"
Long Method,"public void processInsuranceClaim(Claim claim) {
    if (claim == null) {
        throw new IllegalArgumentException(""Claim cannot be null"");
    }

    if (!isValidClaim(claim)) {
        throw new IllegalArgumentException(""Invalid claim"");
    }

    ClaimDetails details = getClaimDetails(claim);
    Policy policy = getPolicyForClaim(claim);
    
    if (policy == null) {
        notifyClaimRejected(claim);
        return;
    }

    if (!isClaimCovered(policy, details)) {
        notifyClaimRejected(claim);
        return;
    }

    double payoutAmount = calculatePayout(policy, details);
    
    if (payoutAmount > 0) {
        processPayment(claim, payoutAmount);
    } else {
        notifyClaimRejected(claim);
    }

    updateClaimStatus(claim, ClaimStatus.PROCESSED);
    logClaimProcessing(claim);
    
    // Additional checks and processing
    if (details.isFraudulent()) {
        flagClaimAsFraudulent(claim);
    }

    if (policy.hasRecurringPayments()) {
        scheduleRecurringCharge(policy, payoutAmount);
    }

    if (claim.isTimeSensitive()) {
        setTimeSensitiveAlert(claim);
    }

    evaluateCustomerFeedback(claim);
    sendConfirmationToClaimant(claim);
    notifyUnderwriters(claim);
    
    recordClaimHistory(claim);
    updateStatistics(claim);
}
"
Code Clone,"class DiscountCalculator {
public:
    double calculateDiscountForRegularCustomer(double originalPrice) {
        return originalPrice * 0.1; // 10% discount
    }

    double calculateDiscountForPremiumCustomer(double originalPrice) {
        return originalPrice * 0.15; // 15% discount
    }

    double calculateDiscountForLoyaltyMember(double originalPrice) {
        return originalPrice * 0.2; // 20% discount
    }
    
    double calculateDiscountForNewCustomer(double originalPrice) {
        return originalPrice * 0.05; // 5% discount
    }
};
"
Long Parameter List,"void processOrder(int orderId, const std::string& customerName, const std::string& customerEmail, const std::string& shippingAddress, const std::string& billingAddress, const std::vector<int>& productIds, const std::vector<int>& quantities, const std::string& paymentMethod, bool isGift, const std::string& giftMessage, const std::string& couponCode, const std::string& shippingMethod, const std::string& trackingNumber) {
    // Implementation of order processing
}
"
Code Clone,"class Property {
    constructor(address, price, area, bedrooms, bathrooms) {
        this.address = address;
        this.price = price;
        this.area = area;
        this.bedrooms = bedrooms;
        this.bathrooms = bathrooms;
    }

    calculatePricePerSquareFoot() {
        return this.price / this.area;
    }

    displayDetails() {
        console.log(`Address: ${this.address}`);
        console.log(`Price: $${this.price}`);
        console.log(`Area: ${this.area} sq ft`);
        console.log(`Bedrooms: ${this.bedrooms}`);
        console.log(`Bathrooms: ${this.bathrooms}`);
    }

    calculateMortgage(interestRate, years) {
        const monthlyRate = interestRate / 12 / 100;
        const numberOfPayments = years * 12;
        return (this.price * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -numberOfPayments));
    }

    displayMortgageDetails(interestRate, years) {
        const mortgage = this.calculateMortgage(interestRate, years);
        console.log(`Monthly Mortgage Payment for ${this.address}: $${mortgage.toFixed(2)}`);
    }
}

class CommercialProperty extends Property {
    constructor(address, price, area, bedrooms, bathrooms, businessType) {
        super(address, price, area, bedrooms, bathrooms);
        this.businessType = businessType;
    }

    displayDetails() {
        super.displayDetails();
        console.log(`Business Type: ${this.businessType}`);
    }

    displayMortgageDetails(interestRate, years) {
        const mortgage = this.calculateMortgage(interestRate, years);
        console.log(`Monthly Mortgage Payment for ${this.businessType} at ${this.address}: $${mortgage.toFixed(2)}`);
    }
}
"
God Class,"class FarmManagementSystem {
public:
    void manageCropGrowth() {
        // Logic for managing crop growth
    }

    void manageIrrigation() {
        // Logic for irrigation management
    }

    void managePestControl() {
        // Logic for pest control 
    }

    void manageHarvesting() {
        // Logic for harvesting
    }

    void manageSoilHealth() {
        // Logic for maintaining soil health
    }

    void analyzeMarketTrends() {
        // Logic for analyzing market trends
    }

    void manageFinancialRecords() {
        // Logic for financial record keeping
    }

    void scheduleLabor() {
        // Logic for scheduling labor
    }

    void manageEquipmentMaintenance() {
        // Logic for managing equipment maintenance
    }

    void handleRegulatoryCompliance() {
        // Logic for handling regulatory compliance
    }

    void generateReports() {
        // Logic for generating various reports
    }

    void manageSupplyChain() {
        // Logic for managing supply chain
    }

    void overseeCropRotation() {
        // Logic for overseeing crop rotation
    }
};
"
God Class,"class FinancialManager {
    constructor() {
        this.accounts = [];
    }

    createAccount(owner, balance) {
        const account = { owner, balance };
        this.accounts.push(account);
        return account;
    }

    getBalance(account) {
        return account.balance;
    }

    deposit(account, amount) {
        account.balance += amount;
    }

    withdraw(account, amount) {
        if (account.balance >= amount) {
            account.balance -= amount;
        } else {
            throw new Error(""Insufficient funds"");
        }
    }

    transfer(fromAccount, toAccount, amount) {
        this.withdraw(fromAccount, amount);
        this.deposit(toAccount, amount);
    }

    generateReport() {
        return this.accounts.map(account => `${account.owner}: $${account.balance}`).join('\n');
    }

    setInterestRate(account, rate) {
        account.interestRate = rate;
    }

    applyInterest(account) {
        if (account.interestRate) {
            account.balance += (account.balance * account.interestRate);
        }
    }

    calculateNetWorth() {
        return this.accounts.reduce((total, account) => total + account.balance, 0);
    }

    findAccount(owner) {
        return this.accounts.find(account => account.owner === owner);
    }

    deleteAccount(account) {
        this.accounts = this.accounts.filter(a => a !== account);
    }
}
"
Feature Envy,"calculateOrderTotal() {
    let total = 0;
    this.items.forEach(item => {
        total += item.price * item.quantity;
        total += item.calculateTax(); // Feature Envy
    });
    return total;
}
"
Feature Envy,"calculatePremium() {
    const baseRate = this.policy.getBaseRate();
    const coverageAmount = this.policy.getCoverageAmount();
    const ageFactor = this.policy.getInsuredAge() < 30 ? 1.2 : 1.5;
    const healthFactor = this.policy.getHealthStatus() === 'good' ? 0.9 : 1.1;

    return baseRate * coverageAmount * ageFactor * healthFactor;
}
"
Code Clone,"class MobilePlan {
    constructor(planName, dataLimit, callLimit) {
        this.planName = planName;
        this.dataLimit = dataLimit;
        this.callLimit = callLimit;
    }

    getPlanDetails() {
        return `${this.planName} offers ${this.dataLimit}GB of data and ${this.callLimit} minutes.`;
    }

    calculateOverage(dataUsed, callsMade) {
        let overageCharges = 0;

        if (dataUsed > this.dataLimit) {
            overageCharges += (dataUsed - this.dataLimit) * 10; // $10 per GB over
        }

        if (callsMade > this.callLimit) {
            overageCharges += (callsMade - this.callLimit) * 0.5; // $0.50 per minute over
        }

        return overageCharges;
    }
}

class FamilyPlan {
    constructor(planName, dataLimit, callLimit, numberOfLines) {
        this.planName = planName;
        this.dataLimit = dataLimit;
        this.callLimit = callLimit;
        this.numberOfLines = numberOfLines;
    }

    getPlanDetails() {
        return `${this.planName} offers ${this.dataLimit}GB of data and ${this.callLimit} minutes for ${this.numberOfLines} lines.`;
    }

    calculateOverage(dataUsed, callsMade) {
        let overageCharges = 0;

        if (dataUsed > this.dataLimit) {
            overageCharges += (dataUsed - this.dataLimit) * 10; // $10 per GB over
        }

        if (callsMade > this.callLimit) {
            overageCharges += (callsMade - this.callLimit) * 0.5; // $0.50 per minute over
        }

        return overageCharges;
    }
}
"
Code Clone,"public class DeliveryVehicle {
    private String vehicleId;
    private String type;
    private String destination;
    private double capacity;
    private double currentLoad;

    public DeliveryVehicle(String vehicleId, String type, String destination, double capacity) {
        this.vehicleId = vehicleId;
        this.type = type;
        this.destination = destination;
        this.capacity = capacity;
        this.currentLoad = 0;
    }

    public void load(double amount) {
        if(currentLoad + amount <= capacity) {
            currentLoad += amount;
        } else {
            System.out.println(""Load exceeds vehicle capacity!"");
        }
    }

    public void unload(double amount) {
        if(currentLoad - amount >= 0) {
            currentLoad -= amount;
        } else {
            System.out.println(""Cannot unload more than current load!"");
        }
    }

    public String getVehicleInfo() {
        return ""Vehicle ID: "" + vehicleId + "", Type: "" + type + "", Destination: "" + destination + 
               "", Capacity: "" + capacity + "", Current Load: "" + currentLoad;
    }
}

public class Truck extends DeliveryVehicle {
    private double fuelEfficiency;

    public Truck(String vehicleId, String destination, double capacity, double fuelEfficiency) {
        super(vehicleId, ""Truck"", destination, capacity);
        this.fuelEfficiency = fuelEfficiency;
    }

    @Override
    public String getVehicleInfo() {
        return super.getVehicleInfo() + "", Fuel Efficiency: "" + fuelEfficiency;
    }
}

public class Van extends DeliveryVehicle {
    private double fuelEfficiency;

    public Van(String vehicleId, String destination, double capacity, double fuelEfficiency) {
        super(vehicleId, ""Van"", destination, capacity);
        this.fuelEfficiency = fuelEfficiency;
    }

    @Override
    public String getVehicleInfo() {
        return super.getVehicleInfo() + "", Fuel Efficiency: "" + fuelEfficiency;
    }
}
"
God Class,"class PolicyManager:
    def __init__(self):
        self.policies = []
        
    def add_policy(self, policy):
        self.policies.append(policy)

    def calculate_premium(self, policy):
        # Some complicated logic to calculate premium
        return policy.base_amount * 0.1  # Example rate

    def approve_claim(self, policy_id, claim_amount):
        # Logic to approve the claim
        policy = self.find_policy(policy_id)
        if policy and claim_amount <= policy.covered_amount:
            return True
        return False

    def find_policy(self, policy_id):
        for policy in self.policies:
            if policy.id == policy_id:
                return policy
        return None

    def renew_policy(self, policy_id):
        policy = self.find_policy(policy_id)
        if policy:
            policy.is_renewed = True
            policy.renewal_date = ""2024-01-01""  # Example renewal date

    def cancel_policy(self, policy_id):
        policy = self.find_policy(policy_id)
        if policy:
            self.policies.remove(policy)

    def total_claims(self):
        # Logic to calculate total claims
        total = 0
        for policy in self.policies:
            total += policy.claims_made
        return total

    def report(self):
        # Method to generate reports
        report_data = {
            ""total_policies"": len(self.policies),
            ""total_claims"": self.total_claims(),
            ""active_policies"": sum(1 for p in self.policies if p.is_active)
        }
        return report_data
"
Long Method,"function calculateConstructionCost(area, costPerSquareFoot, laborCost, permits, equipmentRental, miscellaneousExpenses) {
    let totalCost = 0;
    const baseCost = area * costPerSquareFoot;
    totalCost += baseCost;

    if (laborCost > 0) {
        totalCost += laborCost;
    }

    if (permits && permits.length > 0) {
        permits.forEach(permit => {
            totalCost += permit.fee;
        });
    }

    if (equipmentRental) {
        totalCost += equipmentRental.cost;
    }

    if (miscellaneousExpenses && miscellaneousExpenses.length > 0) {
        miscellaneousExpenses.forEach(expense => {
            totalCost += expense.amount;
        });
    }

    const inflationAdjustment = totalCost * 0.05; // Consider 5% inflation
    totalCost += inflationAdjustment;

    const contingencyBuffer = totalCost * 0.10; // 10% contingency
    totalCost += contingencyBuffer;

    // Final considerations for weather-related delays
    if (area > 1000) {
        totalCost += 500; // Adding extra cost for large areas
    }

    const projectDuration = calculateProjectDuration(area);
    if (projectDuration > 30) {
        totalCost += 1000; // Additional costs for prolonged projects
    }

    totalCost = applyDiscounts(totalCost, area);

    return totalCost;
}
"
Feature Envy,"def calculate_dosage(patient, medication):
    weight = patient.get_weight()
    age = patient.get_age()
    base_dosage = medication.base_dosage
    dosage = base_dosage * (weight / 70) * (age / 30)
    return dosage
"
Code Clone,"public class Crop {
    private String name;
    private int growthTime; // in days
    private double yield; // in tons per hectare

    public Crop(String name, int growthTime, double yield) {
        this.name = name;
        this.growthTime = growthTime;
        this.yield = yield;
    }

    public String getName() {
        return name;
    }

    public int getGrowthTime() {
        return growthTime;
    }

    public double getYield() {
        return yield;
    }

    public void printInfo() {
        System.out.println(""Crop Name: "" + name);
        System.out.println(""Growth Time: "" + growthTime + "" days"");
        System.out.println(""Yield: "" + yield + "" tons/hectare"");
    }
}

public class Vegetable {
    private String name;
    private int growthTime; // in days
    private double yield; // in tons per hectare

    public Vegetable(String name, int growthTime, double yield) {
        this.name = name;
        this.growthTime = growthTime;
        this.yield = yield;
    }

    public String getName() {
        return name;
    }

    public int getGrowthTime() {
        return growthTime;
    }

    public double getYield() {
        return yield;
    }

    public void printInfo() {
        System.out.println(""Vegetable Name: "" + name);
        System.out.println(""Growth Time: "" + growthTime + "" days"");
        System.out.println(""Yield: "" + yield + "" tons/hectare"");
    }
}
"
Long Parameter List,"void ScheduleDelivery(int orderId, const std::string &customerName, const std::string &address, 
                      const std::string &deliveryDate, const std::string &deliveryTime, 
                      const std::string &deliveryInstructions, bool isExpress, 
                      const std::vector<std::string> &items, double totalWeight, 
                      double totalCost, const std::string &paymentMethod, 
                      const std::string &contactNumber, const std::string &email) {
    // Method implementation
}
"
Long Parameter List,"def enroll_student(student_id, course_id, semester, year, scholarship_id, payment_method, emergency_contact, health_issues, dietary_requirements, special_needs, language_preference):
    # Enroll the student in the specified course for the given semester and year
    pass
"
God Class,"class FinanceManager:
    def __init__(self):
        self.accounts = []
        self.investments = []
        self.expenses = []
        
    def add_account(self, account):
        self.accounts.append(account)

    def remove_account(self, account):
        self.accounts.remove(account)

    def add_investment(self, investment):
        self.investments.append(investment)

    def remove_investment(self, investment):
        self.investments.remove(investment)

    def add_expense(self, expense):
        self.expenses.append(expense)

    def remove_expense(self, expense):
        self.expenses.remove(expense)

    def calculate_net_worth(self):
        total_assets = sum(account.balance for account in self.accounts) + sum(investment.value for investment in self.investments)
        total_expenses = sum(expense.amount for expense in self.expenses)
        return total_assets - total_expenses

    def generate_financial_report(self):
        report = f""Accounts: {len(self.accounts)}\n""
        report += f""Investments: {len(self.investments)}\n""
        report += f""Expenses: {len(self.expenses)}\n""
        report += f""Net Worth: {self.calculate_net_worth()}\n""
        return report

    def analyze_investments(self):
        # Placeholder for complex investment analysis logic
        return ""Investment Analysis Done""

    def track_expense_trends(self):
        # Placeholder for expense trend tracking logic
        return ""Expense Trends Tracked""

    def advice_on_savings(self):
        # Placeholder for savings advice logic
        return ""Savings Advice Provided""

    def calculate_tax_liability(self):
        # Placeholder for tax liability calculation logic
        return ""Tax Liability Calculated""
"
God Class,"class EnergyManagementSystem:
    def __init__(self):
        self.energy_sources = []
        self.consumers = []
        self.energy_prices = {}
        self.weather_data = {}
        self.grid_status = {}

    def add_energy_source(self, source):
        self.energy_sources.append(source)

    def remove_energy_source(self, source):
        self.energy_sources.remove(source)

    def add_consumer(self, consumer):
        self.consumers.append(consumer)

    def calculate_energy_demand(self):
        total_demand = 0
        for consumer in self.consumers:
            total_demand += consumer.get_demand()
        return total_demand

    def forecast_energy_prices(self):
        # Implement some complex price forecasting logic
        pass

    def update_weather_data(self, data):
        self.weather_data = data

    def check_grid_status(self):
        # Check grid status with some internal logic
        pass

    def optimize_energy_distribution(self):
        # Optimize distribution of energy to consumers
        pass

    def generate_report(self):
        report = {
            'total_energy_sources': len(self.energy_sources),
            'total_consumers': len(self.consumers),
            'energy_prices': self.energy_prices,
            'weather_data': self.weather_data,
            'grid_status': self.grid_status,
        }
        return report
    
    def set_energy_price(self, source, price):
        self.energy_prices[source] = price
    
    def monitor_system(self):
        # Complex monitoring logic for the entire energy system
        pass

    def implement_energy_saving_measures(self):
        # Implement various energy-saving strategies
        pass
"
Data Class,"class Student {
    constructor(name, age, grade, email) {
        this.name = name;
        this.age = age;
        this.grade = grade;
        this.email = email;
    }

    getName() {
        return this.name;
    }

    getAge() {
        return this.age;
    }

    getGrade() {
        return this.grade;
    }

    getEmail() {
        return this.email;
    }

    setName(name) {
        this.name = name;
    }

    setAge(age) {
        this.age = age;
    }

    setGrade(grade) {
        this.grade = grade;
    }

    setEmail(email) {
        this.email = email;
    }
}
"
Data Class,"class Car {
    constructor(make, model, year, color, engineType, horsePower) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engineType = engineType;
        this.horsePower = horsePower;
    }

    getDetails() {
        return `${this.year} ${this.color} ${this.make} ${this.model} with ${this.engineType} engine and ${this.horsePower} HP`;
    }
}
"
Feature Envy,"function calculateMonthlyBill(customer) {
    let total = 0;
    total += customer.getPlan().baseRate;
    total += customer.getAddOns().reduce((sum, addOn) => sum + addOn.price, 0);
    total += customer.getUsage().callDuration * customer.getPlan().callRate;
    total += customer.getUsage().dataUsage * customer.getPlan().dataRate;
    return total;
}
"
Code Clone,"class LoanCalculator {
public:
    LoanCalculator(double principal, double rate, int years)
        : principal(principal), rate(rate), years(years) {}

    double calculateMonthlyPayment() {
        double monthlyRate = rate / 100 / 12;
        int n = years * 12;
        return (principal * monthlyRate) / (1 - pow(1 + monthlyRate, -n));
    }

    double calculateTotalPayment() {
        return calculateMonthlyPayment() * years * 12;
    }

    double calculateTotalInterest() {
        return calculateTotalPayment() - principal;
    }

private:
    double principal;
    double rate;
    int years;
};

class MortgageCalculator {
public:
    MortgageCalculator(double principal, double rate, int years)
        : principal(principal), rate(rate), years(years) {}

    double calculateMonthlyPayment() {
        double monthlyRate = rate / 100 / 12;
        int n = years * 12;
        return (principal * monthlyRate) / (1 - pow(1 + monthlyRate, -n));
    }

    double calculateTotalPayment() {
        return calculateMonthlyPayment() * years * 12;
    }

    double calculateTotalInterest() {
        return calculateTotalPayment() - principal;
    }

private:
    double principal;
    double rate;
    int years;
};
"
God Class,"class RetailManager {
    constructor() {
        this.inventory = [];
        this.orders = [];
        this.customers = [];
    }

    addProduct(product) {
        this.inventory.push(product);
    }

    removeProduct(productId) {
        this.inventory = this.inventory.filter(product => product.id !== productId);
    }

    placeOrder(order) {
        this.orders.push(order);
        this.updateStock(order.productId, order.quantity);
    }

    updateStock(productId, quantity) {
        const product = this.inventory.find(product => product.id === productId);
        if (product) {
            product.stock -= quantity;
        }
    }

    addCustomer(customer) {
        this.customers.push(customer);
    }

    getCustomerOrders(customerId) {
        return this.orders.filter(order => order.customerId === customerId);
    }

    calculateTotalSales() {
        return this.orders.reduce((total, order) => total + order.amount, 0);
    }

    generateReport() {
        return {
            totalSales: this.calculateTotalSales(),
            totalProducts: this.inventory.length,
            totalOrders: this.orders.length,
            totalCustomers: this.customers.length,
        };
    }

    sendPromotionalEmail(customerId, message) {
        const customer = this.customers.find(customer => customer.id === customerId);
        if (customer) {
            console.log(`Sending email to ${customer.email}: ${message}`);
        }
    }
}
"
God Class,"class HotelManagementSystem {
    constructor() {
        this.rooms = [];
        this.guests = [];
    }

    addRoom(room) {
        this.rooms.push(room);
    }

    removeRoom(roomNumber) {
        this.rooms = this.rooms.filter(room => room.number !== roomNumber);
    }

    checkInGuest(guest, roomNumber) {
        const room = this.rooms.find(room => room.number === roomNumber);
        if (room && !room.isOccupied) {
            room.isOccupied = true;
            this.guests.push(guest);
            guest.roomNumber = roomNumber;
        }
    }

    checkOutGuest(guest) {
        const room = this.rooms.find(room => room.number === guest.roomNumber);
        if (room) {
            room.isOccupied = false;
            this.guests = this.guests.filter(g => g !== guest);
            guest.roomNumber = null;
        }
    }

    getGuestList() {
        return this.guests;
    }

    getRoomStatus() {
        return this.rooms.map(room => ({
            number: room.number,
            isOccupied: room.isOccupied
        }));
    }

    calculateRevenue() {
        return this.guests.reduce((total, guest) => total + guest.paidAmount, 0);
    }

    sendInvoice(guest) {
        const invoice = `Invoice for ${guest.name}: ${guest.paidAmount}`;
        console.log(invoice);
    }

    manageComplaints(complaint) {
        console.log(`Handling complaint: ${complaint}`);
    }

    updateRoomServiceMenu(menu) {
        console.log(`Updated room service menu: ${menu}`);
    }

    handleBookingCancellation(bookingId) {
        console.log(`Booking ${bookingId} has been canceled.`);
    }
}
"
Long Parameter List,"def schedule_delivery(order_id, customer_id, delivery_address, delivery_date, delivery_time, delivery_method, package_weight, package_dimensions, special_instructions, insurance_required, payment_method):
    # method implementation here
    pass
"
Long Parameter List,"function calculateEnergyConsumption(deviceId, startDate, endDate, unitsConsumed, ratePerUnit, discountRate, userType, region, taxRate, additionalFees) {
    // implementation logic
}
"
Long Parameter List,"def process_call_data(call_id, caller_number, receiver_number, call_duration, call_start_time, call_end_time, call_type, billing_category, location, device_id, network_type, call_quality, service_plan):
    # processing logic for call data
    print(f""Processing call data for call ID: {call_id}"")
    # Additional processing logic here
"
God Class,"public class InsurancePolicyManager {
    private String policyNumber;
    private String policyHolderName;
    private double premiumAmount;
    private String coverageDetails;
    private String claimsHistory;

    public void createPolicy(String policyNumber, String policyHolderName, double premiumAmount, String coverageDetails) {
        this.policyNumber = policyNumber;
        this.policyHolderName = policyHolderName;
        this.premiumAmount = premiumAmount;
        this.coverageDetails = coverageDetails;
    }

    public void updatePolicy(String policyNumber, String coverageDetails, double premiumAmount) {
        // logic to update policy
        this.coverageDetails = coverageDetails;
        this.premiumAmount = premiumAmount;
    }

    public void deletePolicy(String policyNumber) {
        // logic to delete policy
    }

    public void processClaim(String claimDetails) {
        // logic to process claim
    }

    public void calculatePremium() {
        // logic to calculate premium
    }

    public void sendPolicyDocument() {
        // logic to send policy document
    }

    public void generatePolicyReport() {
        // logic to generate policy report
    }

    public void getPolicyHolderInformation() {
        // logic to get policy holder information
    }

    public void handleComplaints(String complaintDetails) {
        // logic to handle complaints
    }
}
"
Feature Envy,"calculateTotalInvestment() {
    return this.investments.reduce((total, investment) => {
        return total + investment.getValue() * investment.getQuantity();
    }, 0);
}
"
Data Class,"from dataclasses import dataclass, field
from typing import List

@dataclass
class CallRecord:
    caller: str
    receiver: str
    duration: int  # duration in seconds
    call_type: str  # e.g. ""incoming"", ""outgoing""
    timestamp: str
    
    def get_call_summary(self) -> str:
        return f""{self.timestamp}: {self.caller} called {self.receiver} for {self.duration} seconds ({self.call_type})""

@dataclass
class CallLog:
    records: List[CallRecord] = field(default_factory=list)

    def add_record(self, record: CallRecord):
        self.records.append(record)

    def get_total_duration(self) -> int:
        return sum(record.duration for record in self.records)

    def get_incoming_calls(self) -> List[CallRecord]:
        return [record for record in self.records if record.call_type == ""incoming""]
"
Feature Envy,"public void displayShippingDetails(Order order) {
    System.out.println(""Shipping Label:"");
    System.out.println(""Order ID: "" + order.getOrderId());
    System.out.println(""Customer Name: "" + order.getCustomer().getName());
    System.out.println(""Address: "" + order.getShippingAddress().getStreet() + "", "" + 
                       order.getShippingAddress().getCity() + 
                       "", "" + order.getShippingAddress().getState());
    System.out.println(""Zip Code: "" + order.getShippingAddress().getZip());
    System.out.println(""Shipping Method: "" + order.getShippingMethod().getDescription());
}
"
Feature Envy,"calculateMileage() {
    const totalDistance = this.tripData.getTotalDistance();
    const totalFuel = this.tripData.getTotalFuelUsed();
    return totalDistance / totalFuel;
}
"
Code Clone,"class ResidentialProperty {
public:
    ResidentialProperty(std::string address, int bedrooms, int bathrooms, double area)
        : address(address), bedrooms(bedrooms), bathrooms(bathrooms), area(area) {}

    void display() {
        std::cout << ""Residential Property at "" << address << ""\n""
                  << ""Bedrooms: "" << bedrooms << "", Bathrooms: "" << bathrooms 
                  << "", Area: "" << area << "" sq ft\n"";
    }

private:
    std::string address;
    int bedrooms;
    int bathrooms;
    double area;
};

class CommercialProperty {
public:
    CommercialProperty(std::string address, int offices, int bathrooms, double area)
        : address(address), offices(offices), bathrooms(bathrooms), area(area) {}

    void display() {
        std::cout << ""Commercial Property at "" << address << ""\n""
                  << ""Offices: "" << offices << "", Bathrooms: "" << bathrooms 
                  << "", Area: "" << area << "" sq ft\n"";
    }

private:
    std::string address;
    int offices;
    int bathrooms;
    double area;
};
"
Feature Envy,"def calculate_room_revenue(self):
    total_revenue = 0
    for booking in self.bookings:
        total_revenue += booking.get_nights() * booking.get_room().get_rate()
    return total_revenue
"
Data Class,"class Product {
    constructor(id, name, price, category, stockQuantity) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.category = category;
        this.stockQuantity = stockQuantity;
    }

    getDetails() {
        return `ID: ${this.id}, Name: ${this.name}, Price: ${this.price}, Category: ${this.category}, Stock Quantity: ${this.stockQuantity}`;
    }

    isInStock() {
        return this.stockQuantity > 0;
    }
}
"
Feature Envy,"public void calculateVehicleDepreciation(Vehicle vehicle) {
    double currentValue = vehicle.getOriginalPrice();
    double depreciationRate = vehicle.getDepreciationRate();
    int age = vehicle.getAge();

    double depreciatedValue = currentValue * Math.pow((1 - depreciationRate), age);
    System.out.println(""The depreciated value of the vehicle is: "" + depreciatedValue);
}
"
Long Parameter List,"public void createOrder(Long orderId, Long customerId, Long productId, Long quantity, Long discountId, Long paymentMethodId, Long shippingAddressId, Long billingAddressId) {
    // Method implementation
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Vehicle:
    make: str
    model: str
    year: int
    color: str
    mileage: int
    vin: str

    def start_engine(self):
        print(f""The engine of the {self.year} {self.make} {self.model} has started."")

    def stop_engine(self):
        print(f""The engine of the {self.year} {self.make} {self.model} has stopped."")

    def drive(self, distance: int):
        self.mileage += distance
        print(f""Driving {distance} miles. New mileage is {self.mileage}."")
"
God Class,"class Movie:
    def __init__(self, title, director, release_year, genre, duration, cast, budget, box_office, rating):
        self.title = title
        self.director = director
        self.release_year = release_year
        self.genre = genre
        self.duration = duration
        self.cast = cast
        self.budget = budget
        self.box_office = box_office
        self.rating = rating

    def get_movie_info(self):
        return f""{self.title} ({self.release_year}), directed by {self.director}. Genre: {self.genre}. Duration: {self.duration} minutes.""

    def calculate_profit(self):
        return self.box_office - self.budget

    def is_blockbuster(self):
        return self.box_office > (self.budget * 2)

    def add_cast_member(self, actor):
        self.cast.append(actor)

    def remove_cast_member(self, actor):
        self.cast.remove(actor)

    def update_rating(self, new_rating):
        self.rating = new_rating

    def get_cast(self):
        return ', '.join(self.cast)

    def display_movie_poster(self, poster_url):
        # Code to display movie poster
        pass

    def generate_summary(self):
        return f""{self.title} revolves around ... (summary content)""

    def get_director_bio(self):
        # Code to fetch director's biography
        pass

    def calculate_awards_won(self, awards_list):
        # Code to calculate the number of awards won
        return len(awards_list)

    def recommend_similar_movies(self):
        # Code to recommend similar movies
        pass
"
Feature Envy,"public double calculateTotalConsumption(List<Appliance> appliances) {
    double totalConsumption = 0;
    for (Appliance appliance : appliances) {
        totalConsumption += appliance.getPower() * appliance.getHoursUsed();
        totalConsumption += appliance.getEnergyEfficiencyRating() * 0.1; // example of feature envy
    }
    return totalConsumption;
}
"
Code Clone,"class SolarPanel {
public:
    SolarPanel(double area, double efficiency) 
        : area(area), efficiency(efficiency) {}

    double calculatePowerOutput(double sunlightIntensity) {
        return area * efficiency * sunlightIntensity;
    }

    double calculateCost(double costPerSquareMeter) {
        return area * costPerSquareMeter;
    }

private:
    double area;
    double efficiency;
};

class WindTurbine {
public:
    WindTurbine(double rotorDiameter, double efficiency) 
        : rotorDiameter(rotorDiameter), efficiency(efficiency) {}

    double calculatePowerOutput(double windSpeed) {
        return 0.5 * efficiency * 3.14159 * (rotorDiameter / 2) * (rotorDiameter / 2) * windSpeed * windSpeed * windSpeed;
    }

    double calculateCost(double costPerUnitDiameter) {
        return rotorDiameter * costPerUnitDiameter;
    }

private:
    double rotorDiameter;
    double efficiency;
};
"
Long Parameter List,"def book_room(customer_name, customer_email, room_type, check_in_date, check_out_date, special_requests, payment_method, discount_code, number_of_guests, contact_phone):
    # Method implementation goes here
    pass
"
Long Parameter List,"function createOrder(customerId, productId, quantity, paymentMethod, shippingAddress, billingAddress, couponCode, giftWrap, deliveryDate, specialInstructions) {
    // Implementation for creating an order
    // ...
}
"
Data Class,"public class Transaction {
    private String transactionId;
    private String accountId;
    private double amount;
    private String transactionDate;

    public Transaction(String transactionId, String accountId, double amount, String transactionDate) {
        this.transactionId = transactionId;
        this.accountId = accountId;
        this.amount = amount;
        this.transactionDate = transactionDate;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public String getAccountId() {
        return accountId;
    }

    public double getAmount() {
        return amount;
    }

    public String getTransactionDate() {
        return transactionDate;
    }
}
"
Code Clone,"class PharmaceuticalProduct:
    def __init__(self, name, dosage, volume, expiration_date):
        self.name = name
        self.dosage = dosage
        self.volume = volume
        self.expiration_date = expiration_date

    def display_info(self):
        print(f""Product Name: {self.name}"")
        print(f""Dosage: {self.dosage}"")
        print(f""Volume: {self.volume}ml"")
        print(f""Expiration Date: {self.expiration_date}"")

class InjectableProduct:
    def __init__(self, name, dosage, volume, expiration_date):
        self.name = name
        self.dosage = dosage
        self.volume = volume
        self.expiration_date = expiration_date

    def display_info(self):
        print(f""Injectable Product Name: {self.name}"")
        print(f""Dosage: {self.dosage}"")
        print(f""Volume: {self.volume}ml"")
        print(f""Expiration Date: {self.expiration_date}"")
"
God Class,"class RealEstateManager {
    constructor() {
        this.properties = [];
    }

    addProperty(property) {
        this.properties.push(property);
    }

    removeProperty(propertyId) {
        this.properties = this.properties.filter(property => property.id !== propertyId);
    }

    listProperties() {
        return this.properties;
    }

    findPropertyById(propertyId) {
        return this.properties.find(property => property.id === propertyId);
    }

    calculateTotalValue() {
        return this.properties.reduce((total, property) => total + property.value, 0);
    }

    notifyInterestedBuyers(propertyId) {
        const property = this.findPropertyById(propertyId);
        if (property) {
            property.interestedBuyers.forEach(buyer => {
                console.log(`Notifying ${buyer.name} about property ${property.name}`);
            });
        }
    }

    generatePropertyReport(propertyId) {
        const property = this.findPropertyById(propertyId);
        if (property) {
            return `Report for ${property.name}: Value - ${property.value}, Location - ${property.location}`;
        }
        return null;
    }

    updatePropertyValue(propertyId, newValue) {
        const property = this.findPropertyById(propertyId);
        if (property) {
            property.value = newValue;
        }
    }
}
"
Long Parameter List,"public void createUser(String username, String password, Long userId, Long accountId, Long clientId, Long projectId, Long roleId, Long departmentId) {
    // Method implementation
}
"
Feature Envy,"public double calculateRentalYield(Property property) {
    double rentalIncome = property.getMonthlyRent() * 12;
    double purchasePrice = property.getPurchasePrice();
    
    if (purchasePrice == 0) {
        throw new IllegalArgumentException(""Purchase price must not be zero."");
    }

    return (rentalIncome / purchasePrice) * 100;
}
"
Code Clone,"public class Property {
    private String address;
    private double price;
    private int squareFeet;
    private int bedrooms;
    private int bathrooms;

    public Property(String address, double price, int squareFeet, int bedrooms, int bathrooms) {
        this.address = address;
        this.price = price;
        this.squareFeet = squareFeet;
        this.bedrooms = bedrooms;
        this.bathrooms = bathrooms;
    }

    public void displayPropertyDetails() {
        System.out.println(""Property Address: "" + address);
        System.out.println(""Price: "" + price);
        System.out.println(""Square Feet: "" + squareFeet);
        System.out.println(""Bedrooms: "" + bedrooms);
        System.out.println(""Bathrooms: "" + bathrooms);
    }
}

class CommercialProperty {
    private String address;
    private double price;
    private int squareFeet;
    private int offices;
    private int restrooms;

    public CommercialProperty(String address, double price, int squareFeet, int offices, int restrooms) {
        this.address = address;
        this.price = price;
        this.squareFeet = squareFeet;
        this.offices = offices;
        this.restrooms = restrooms;
    }

    public void displayCommercialDetails() {
        System.out.println(""Commercial Property Address: "" + address);
        System.out.println(""Price: "" + price);
        System.out.println(""Square Feet: "" + squareFeet);
        System.out.println(""Offices: "" + offices);
        System.out.println(""Restrooms: "" + restrooms);
    }
}
"
Long Method,"void processTransaction(Transaction& transaction) {
    if (transaction.amount < 0) {
        std::cout << ""Invalid transaction amount"" << std::endl;
        return;
    }

    if (!transaction.isValid()) {
        std::cout << ""Transaction is not valid"" << std::endl;
        return;
    }

    if (transaction.type == TransactionType::CREDIT) {
        account.balance += transaction.amount;
        std::cout << ""Credit transaction processed. New balance: "" << account.balance << std::endl;
    } else if (transaction.type == TransactionType::DEBIT) {
        if (account.balance >= transaction.amount) {
            account.balance -= transaction.amount;
            std::cout << ""Debit transaction processed. New balance: "" << account.balance << std::endl;
        } else {
            std::cout << ""Insufficient funds for debit transaction"" << std::endl;
            return;
        }
    } else {
        std::cout << ""Unknown transaction type"" << std::endl;
        return;
    }

    transaction.timestamp = std::chrono::system_clock::now();
    transaction.status = TransactionStatus::COMPLETED;

    // Log transaction
    transactionLog.emplace_back(transaction);

    // Send notification
    NotificationService::sendNotification(transaction);

    // Update account statistics
    updateAccountStatistics(account);

    // Possible interest calculation 
    if (transaction.type == TransactionType::CREDIT) {
        double interest = calculateInterest(transaction.amount);
        account.balance += interest;
        std::cout << ""Interest added to account. New balance: "" << account.balance << std::endl;
    }

    // Final summary
    std::cout << ""Transaction processed successfully."" << std::endl;
    std::cout << ""Transaction ID: "" << transaction.id << "", Amount: "" << transaction.amount 
              << "", Type: "" << (transaction.type == TransactionType::CREDIT ? ""Credit"" : ""Debit"") 
              << "", Current Balance: "" << account.balance << std::endl;
}
"
God Class,"class LogisticsManager {
public:
    void planRoute(Delivery& delivery) {
        // Complex logic for route planning
    }

    void trackDelivery(int deliveryId) {
        // Logic for tracking delivery
    }

    void manageInventory(Item& item) {
        // Logic to update inventory
    }

    void scheduleTransport(Transport& transport) {
        // Logic to schedule transport
    }

    void handleCustomerService(Customer& customer) {
        // Customer service handling logic
    }

    void generateReport() {
        // Report generation logic
    }

    void analyzePerformance() {
        // Performance analysis logic
    }

    void optimizeOperations() {
        // Operations optimization logic
    }

    void handleReturns(Return& returnRequest) {
        // Logic for handling returns
    }

    void manageSuppliers(Supplier& supplier) {
        // Supplier management logic
    }

    void ensureCompliance(Regulation& regulation) {
        // Compliance logic
    }

    void maintainSafetyStandards() {
        // Safety standards maintenance logic
    }

private:
    std::vector<Delivery> deliveries;
    std::vector<Item> inventoryItems;
    std::vector<Transport> transportSchedules;
    std::vector<Customer> customers;
    std::vector<Return> returnRequests;
    std::vector<Supplier> suppliers;
    std::vector<Regulation> regulations;
};
"
Long Parameter List,"void configureVehicle(bool engineStatus, int tirePressure, double oilLevel, std::string color, int numSeats, bool isElectric, double maxSpeed, double currentSpeed, std::string model, std::string manufacturer, int productionYear) {
    // Configuration logic for the vehicle
    // ...
}
"
Long Method,"def generate_movie_report(movies):
    report = ""Movie Report\n""
    report += f""Total Movies: {len(movies)}\n""
    for movie in movies:
        report += f""Title: {movie['title']}\n""
        report += f""Director: {movie['director']}\n""
        report += f""Year: {movie['year']}\n""
        report += f""Genre: {', '.join(movie['genres'])}\n""
        report += f""Rating: {movie['rating']}/10\n""
        report += f""Runtime: {movie['runtime']} minutes\n""
        report += f""Synopsis: {movie['synopsis']}\n""
        report += f""Cast: {', '.join(movie['cast'])}\n""
        report += ""-----------------------------------\n""
    
    report += ""End of Report""
    return report
"
Feature Envy,"calculateTotalCost(prescriptions) {
    let totalCost = 0;
    prescriptions.forEach(prescription => {
        totalCost += prescription.getCost() * prescription.getQuantity();
        totalCost += prescription.getDiscount() ? prescription.getDiscount() : 0;
    });
    return totalCost;
}
"
God Class,"public class ConstructionProject {

    private String projectName;
    private String projectManager;
    private List<String> teamMembers;
    private double budget;
    private String location;
    private List<String> permits;
    private Timeline projectTimeline;
    private List<String> suppliers;
    private Report projectReport;
    
    public ConstructionProject(String projectName, String projectManager, double budget, String location) {
        this.projectName = projectName;
        this.projectManager = projectManager;
        this.budget = budget;
        this.location = location;
        this.teamMembers = new ArrayList<>();
        this.permits = new ArrayList<>();
        this.suppliers = new ArrayList<>();
        this.projectTimeline = new Timeline();
        this.projectReport = new Report();
    }

    public void addTeamMember(String member) {
        teamMembers.add(member);
    }

    public void removeTeamMember(String member) {
        teamMembers.remove(member);
    }

    public void addPermit(String permit) {
        permits.add(permit);
    }
    
    public void allocateBudget(double amount) {
        budget -= amount;
    }

    public void addSupplier(String supplier) {
        suppliers.add(supplier);
    }

    public void generateReport() {
        projectReport.createReport(projectName, budget, teamMembers, permits, suppliers);
    }

    public void updateTimeline(Date startDate, Date endDate) {
        projectTimeline.setStartDate(startDate);
        projectTimeline.setEndDate(endDate);
    }

    public void completeProject() {
        projectReport.finalizeReport();
        // Additional logic to mark the project as complete
    }

    // Getters and Setters for various fields
    public String getProjectName() {
        return projectName;
    }

    public String getProjectManager() {
        return projectManager;
    }

    public List<String> getTeamMembers() {
        return teamMembers;
    }

    public double getBudget() {
        return budget;
    }

    public String getLocation() {
        return location;
    }

    public List<String> getPermits() {
        return permits;
    }

    public List<String> getSuppliers() {
        return suppliers;
    }
}

class Timeline {
    private Date startDate;
    private Date endDate;

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }
}

class Report {
    public void createReport(String projectName, double budget, List<String> teamMembers, List<String> permits, List<String> suppliers) {
        // Report generation logic
    }

    public void finalizeReport() {
        // Finalize the report logic
    }
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Crop:
    name: str
    variety: str
    yield_per_acre: float
    harvest_time_days: int
    planting_date: str
    harvest_date: str
    fertilizer_used: str
    water_usage_liters: float

    def estimate_yield(self, acres: float) -> float:
        return self.yield_per_acre * acres

    def is_harvest_ready(self, current_date: str) -> bool:
        # simplified check assuming dates are in 'YYYY-MM-DD' format
        return current_date >= self.harvest_date
"
Long Method,"void Movie::renderScene(int sceneId) {
    // Set up the camera position
    camera.setPosition(0.0f, 5.0f, -10.0f);
    camera.setFov(45.0f);
    
    // Load the scene
    Scene scene = loadScene(sceneId);
    
    // Prepare the lighting
    Light mainLight;
    mainLight.setIntensity(1.0f);
    mainLight.setColor(1.0f, 1.0f, 0.8f);
    mainLight.setPosition(10.0f, 10.0f, 0.0f);
    
    // Render background
    renderBackground(scene.background);
    
    // Draw characters
    for (auto& character : scene.characters) {
        character.updateAnimation();
        character.draw();
    }
    
    // Render special effects
    for (auto& effect : scene.specialEffects) {
        effect.trigger();
        effect.draw();
    }
    
    // Draw environment
    for (auto& object : scene.objects) {
        object.draw();
    }
    
    // Apply post-processing effects
    applyPostProcessing();
    
    // Present the frame
    displayFrame();
}
"
Long Method,"public void calculateTripDetails(Trip trip) {
    double totalDistance = 0;
    double totalCost = 0;
    double totalTime = 0;
    
    for (Leg leg : trip.getLegs()) {
        Distance distance = leg.getDistance();
        double cost = leg.getCost();
        double duration = leg.getDuration();
        
        totalDistance += distance.getValue();
        totalCost += cost;
        totalTime += duration;
        
        if (leg.hasTrafficDelay()) {
            totalTime += leg.getTrafficDelay();
        }
        
        if (leg.getType() == LegType.FLIGHT) {
            totalCost += calculateFlightFees(leg);
        } else if (leg.getType() == LegType.DRIVING) {
            totalCost += calculateFuelCost(leg);
        } else if (leg.getType() == LegType.TRAIN) {
            totalCost += calculateTrainFees(leg);
        }
        
        if (leg.hasTransfers()) {
            for (Transfer transfer : leg.getTransfers()) {
                totalCost += transfer.getCost();
                totalTime += transfer.getDuration();
            }
        }
        
        if (leg.getStartTime() != null && leg.getEndTime() != null) {
            totalTime += calculateWaitingTime(leg.getStartTime(), leg.getEndTime());
        }

        if (leg.isExpress()) {
            totalCost += leg.getExpressFee();
        }
        
        if (leg.getAdditionalServices() != null) {
            for (Service service : leg.getAdditionalServices()) {
                totalCost += service.getCost();
            }
        }
    }

    trip.setTotalDistance(totalDistance);
    trip.setTotalCost(totalCost);
    trip.setTotalTime(totalTime);
}
"
Long Parameter List,"function createMovie(title, director, releaseYear, genre, cast, runtime, language, rating, boxOffice, synopsis) {
    // Implementation for creating a movie
}
"
God Class,"class TelecomServiceProvider:
    def __init__(self, name):
        self.name = name
        self.customers = []
        self.plans = []
        self.networks = []
        self.billing_info = []

    def add_customer(self, customer):
        self.customers.append(customer)

    def remove_customer(self, customer):
        self.customers.remove(customer)

    def create_plan(self, plan):
        self.plans.append(plan)

    def delete_plan(self, plan):
        self.plans.remove(plan)

    def add_network(self, network):
        self.networks.append(network)

    def remove_network(self, network):
        self.networks.remove(network)

    def generate_bill(self, customer):
        # Complex billing logic
        bill = f""Bill for {customer}: ""
        for plan in self.plans:
            bill += f""{plan}, ""
        self.billing_info.append(bill)

    def send_notification(self, customer, message):
        # Sending notification logic
        print(f""Notification to {customer}: {message}"")

    def handle_complaint(self, customer, complaint):
        # Handle customer complaint
        print(f""Handling complaint from {customer}: {complaint}"")

    def upgrade_plan(self, customer, new_plan):
        # Complex upgrade logic
        print(f""Upgrading {customer} to {new_plan}"")

    def downgrade_plan(self, customer, old_plan):
        # Complex downgrade logic
        print(f""Downgrading {customer} from {old_plan}"")

    def manage_network_issue(self, network, issue):
        # Network management logic
        print(f""Managing issue {issue} in network {network}"")
"
Data Class,"public class ConstructionProject {
    private String projectName;
    private String projectLocation;
    private String projectManager;
    private double budget;
    private int durationInDays;

    public ConstructionProject(String projectName, String projectLocation, String projectManager, double budget, int durationInDays) {
        this.projectName = projectName;
        this.projectLocation = projectLocation;
        this.projectManager = projectManager;
        this.budget = budget;
        this.durationInDays = durationInDays;
    }

    public String getProjectName() {
        return projectName;
    }

    public String getProjectLocation() {
        return projectLocation;
    }

    public String getProjectManager() {
        return projectManager;
    }

    public double getBudget() {
        return budget;
    }

    public int getDurationInDays() {
        return durationInDays;
    }
}
"
Feature Envy,"public void printCustomerDetails(Customer customer) {
    System.out.println(""Customer Name: "" + customer.getName());
    System.out.println(""Customer Phone: "" + customer.getPhoneNumber());
    System.out.println(""Customer Email: "" + customer.getEmail());
    System.out.println(""Customer Plan: "" + customer.getSubscriptionPlan().getPlanName());
    System.out.println(""Customer Balance: "" + customer.getSubscriptionPlan().getBalance());
}
"
Feature Envy,"calculateTotalBill() {
    let total = 0;
    total += this.roomService.getRoomServiceCharges();
    total += this.additionalServices.getSpaCharges();
    total += this.additionalServices.getRestaurantCharges();
    total += this.roomService.getMiniBarCharges();
    total += this.additionalServices.getLaundryCharges();
    return total;
}
"
God Class,"class EnergyManagementSystem {
    constructor() {
        this.energySources = [];
        this.consumers = [];
    }

    addEnergySource(source) {
        this.energySources.push(source);
    }

    addConsumer(consumer) {
        this.consumers.push(consumer);
    }

    calculateTotalEnergyProduction() {
        return this.energySources.reduce((total, source) => total + source.getEnergyProduced(), 0);
    }

    calculateTotalEnergyConsumption() {
        return this.consumers.reduce((total, consumer) => total + consumer.getEnergyConsumed(), 0);
    }

    analyzeEnergyBalance() {
        const totalProduction = this.calculateTotalEnergyProduction();
        const totalConsumption = this.calculateTotalEnergyConsumption();
        return {
            production: totalProduction,
            consumption: totalConsumption,
            balance: totalProduction - totalConsumption,
        };
    }

    generateEnergyReport() {
        const { production, consumption, balance } = this.analyzeEnergyBalance();
        return `
            Energy Production: ${production} kWh
            Energy Consumption: ${consumption} kWh
            Energy Balance: ${balance} kWh
        `;
    }

    sendAlertIfNeeded() {
        const balance = this.analyzeEnergyBalance().balance;
        if (balance < 0) {
            console.log('Alert: Energy consumption exceeds production!');
        }
    }

    optimizeEnergyUsage() {
        // Logic for optimizing energy usage across consumers
        this.consumers.forEach(consumer => {
            consumer.optimizeConsumption();
        });
    }

    displayEnergyStatistics() {
        console.log(this.generateEnergyReport());
        this.sendAlertIfNeeded();
    }
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Building:
    name: str
    height: float
    width: float
    length: float
    materials: list

    def area(self):
        return self.height * self.width

    def volume(self):
        return self.height * self.width * self.length

    def add_material(self, material):
        self.materials.append(material)

    def remove_material(self, material):
        self.materials.remove(material)
"
Feature Envy,"public void calculateTotalCartValue(Cart cart) {
    double total = 0.0;
    for (Item item : cart.getItems()) {
        total += item.getPrice() * item.getQuantity();
        total -= item.getDiscount() != null ? item.getDiscount() : 0;
    }
    System.out.println(""Total Cart Value: "" + total);
}
"
Long Parameter List,"function createOrder(customerId, productIds, shippingAddress, billingAddress, paymentMethod, giftWrap, discountCode, specialInstructions, deliveryDate, isExpress, additionalNotes) {
    // method implementation
}
"
Feature Envy,"def calculate_total_cost(order):
    total_cost = 0
    for item in order.items:
        total_cost += item.get_price() * item.quantity
        total_cost += item.get_tax()  # Feature Envy: accessing features of item
    return total_cost
"
Feature Envy,"public double calculateTotalCost(Order order) {
    double totalCost = 0.0;
    for (Item item : order.getItems()) {
        totalCost += item.getPrice() * item.getQuantity();
        totalCost += item.getShippingCost();
    }
    totalCost += order.getTax();
    totalCost -= order.getDiscount();
    return totalCost;
}
"
Feature Envy,"double calculateTotalCost(const Order &order) {
    double totalCost = 0.0;
    for (const auto &item : order.getItems()) {
        totalCost += item.getPrice() * item.getQuantity();
    }
    totalCost += order.getShippingCost();
    totalCost -= order.getDiscount();
    return totalCost;
}
"
Code Clone,"package com.manufacturing;

public class Machine {
    private String machineId;
    private String machineType;

    public Machine(String machineId, String machineType) {
        this.machineId = machineId;
        this.machineType = machineType;
    }

    public void start() {
        System.out.println(""Starting machine: "" + machineId);
    }

    public void stop() {
        System.out.println(""Stopping machine: "" + machineId);
    }

    public void restart() {
        System.out.println(""Restarting machine: "" + machineId);
    }

    public String getMachineId() {
        return machineId;
    }

    public String getMachineType() {
        return machineType;
    }
}

public class LatheMachine extends Machine {
    private String latheType;

    public LatheMachine(String machineId, String machineType, String latheType) {
        super(machineId, machineType);
        this.latheType = latheType;
    }

    public void start() {
        System.out.println(""Starting lathe machine: "" + getMachineId());
    }

    public void stop() {
        System.out.println(""Stopping lathe machine: "" + getMachineId());
    }

    public void restart() {
        System.out.println(""Restarting lathe machine: "" + getMachineId());
    }

    public String getLatheType() {
        return latheType;
    }
}

public class MillingMachine extends Machine {
    private String millingType;

    public MillingMachine(String machineId, String machineType, String millingType) {
        super(machineId, machineType);
        this.millingType = millingType;
    }

    public void start() {
        System.out.println(""Starting milling machine: "" + getMachineId());
    }

    public void stop() {
        System.out.println(""Stopping milling machine: "" + getMachineId());
    }

    public void restart() {
        System.out.println(""Restarting milling machine: "" + getMachineId());
    }

    public String getMillingType() {
        return millingType;
    }
}
"
Code Clone,"class Machine {
public:
    Machine(std::string name, double efficiency) : name(name), efficiency(efficiency) {}

    void start() {
        // Starting the machine
        std::cout << name << "" is starting."" << std::endl;
    }

    void stop() {
        // Stopping the machine
        std::cout << name << "" is stopping."" << std::endl;
    }

    void displayStatus() {
        std::cout << ""Machine: "" << name << "", Efficiency: "" << efficiency << std::endl;
    }

private:
    std::string name;
    double efficiency;
};

class Robot {
public:
    Robot(std::string identifier, double performance) : identifier(identifier), performance(performance) {}

    void start() {
        // Starting the robot
        std::cout << identifier << "" is starting."" << std::endl;
    }

    void stop() {
        // Stopping the robot
        std::cout << identifier << "" is stopping."" << std::endl;
    }

    void displayStatus() {
        std::cout << ""Robot: "" << identifier << "", Performance: "" << performance << std::endl;
    }

private:
    std::string identifier;
    double performance;
};
"
God Class,"public class OrderManager {
    private List<Order> orders;
    private PaymentService paymentService;
    private InventoryService inventoryService;
    private ShippingService shippingService;
    private UserService userService;

    public OrderManager() {
        this.orders = new ArrayList<>();
        this.paymentService = new PaymentService();
        this.inventoryService = new InventoryService();
        this.shippingService = new ShippingService();
        this.userService = new UserService();
    }

    public void createOrder(User user, List<Item> items) {
        if (!userService.isValidUser(user)) {
            throw new IllegalArgumentException(""Invalid user"");
        }
        Order order = new Order(user, items);
        double totalAmount = calculateTotalAmount(items);
        if (paymentService.processPayment(user, totalAmount)) {
            orders.add(order);
            inventoryService.updateInventory(items);
            shippingService.scheduleShipping(order);
        }
    }

    public double calculateTotalAmount(List<Item> items) {
        double total = 0;
        for (Item item : items) {
            total += item.getPrice();
        }
        return total;
    }

    public List<Order> getOrdersByUser(User user) {
        List<Order> userOrders = new ArrayList<>();
        for (Order order : orders) {
            if (order.getUser().equals(user)) {
                userOrders.add(order);
            }
        }
        return userOrders;
    }

    public void cancelOrder(Order order) {
        if (orders.contains(order)) {
            orders.remove(order);
            inventoryService.restockItems(order.getItems());
            paymentService.refund(order);
            shippingService.cancelShipping(order);
        }
    }
}
"
Long Method,"def calculate_property_value(self, property_type, location, size, amenities, year_built, recent_sales_data, market_trends):
    base_value = self.get_base_value(property_type)
    location_factor = self.get_location_factor(location)
    size_factor = self.get_size_factor(size)
    age_factor = self.get_age_factor(year_built)
    amenities_value = self.get_amenities_value(amenities)
    
    # Recent sales data adjustment
    sales_adjustment = 0
    for sale in recent_sales_data:
        if sale['property_type'] == property_type and sale['location'] == location:
            sales_adjustment += sale['sale_price'] * 0.1  # 10% of the sale price as adjustment

    # Market trends influence
    market_adjustment = 0
    if market_trends['demand'] == 'high':
        market_adjustment += base_value * 0.2  # Increase by 20%
    elif market_trends['demand'] == 'low':
        market_adjustment -= base_value * 0.15  # Decrease by 15%

    calculated_value = (base_value * location_factor * size_factor) + amenities_value + sales_adjustment + market_adjustment - age_factor
    return max(calculated_value, 0)  # Ensure the value is not negative
"
Feature Envy,"double calculateDiscountedPrice(const Order &order, const Customer &customer) {
    double discount = 0.0;
    if (customer.isPremiumMember()) {
        discount = order.getTotalPrice() * 0.2;
    } else if (customer.isLoyaltyMember()) {
        discount = order.getTotalPrice() * 0.1;
    }
    return order.getTotalPrice() - discount;
}
"
Long Parameter List,"function enrollStudent(studentId, courseId, semester, year, tuitionFee, scholarshipAmount, additionalSupportNeeded, parentContactInfo, previousGrades, emergencyContact) {
    // Logic for enrolling the student
    console.log(`Enrolling student ${studentId} in course ${courseId} for ${semester} ${year}`);
    // Further enrollment logic...
}
"
Feature Envy,"double calculateTotalCost(const ConstructionProject& project) {
    double totalCost = 0.0;
    totalCost += project.getMaterialCost();
    totalCost += project.getLaborCost();
    totalCost += project.getEquipmentCost();
    totalCost += project.getPermitFees();
    return totalCost;
}
"
Feature Envy,"public void printManufacturingReport(Order order) {
    System.out.println(""Order ID: "" + order.getId());
    System.out.println(""Customer Name: "" + order.getCustomer().getName());
    System.out.println(""Product Name: "" + order.getProduct().getName());
    System.out.println(""Quantity: "" + order.getQuantity());
    System.out.println(""Order Date: "" + order.getOrderDate());
    System.out.println(""Total Price: "" + order.getProduct().getPrice() * order.getQuantity());
}
"
Code Clone,"#include <iostream>
#include <string>
#include <vector>

class Student {
private:
    std::string name;
    int age;
    std::string major;

public:
    Student(std::string name, int age, std::string major) 
        : name(name), age(age), major(major) {}

    void display() {
        std::cout << ""Name: "" << name << "", Age: "" << age << "", Major: "" << major << std::endl;
    }
};

class Teacher {
private:
    std::string name;
    int age;
    std::string subject;

public:
    Teacher(std::string name, int age, std::string subject) 
        : name(name), age(age), subject(subject) {}

    void display() {
        std::cout << ""Name: "" << name << "", Age: "" << age << "", Subject: "" << subject << std::endl;
    }
};

class Staff {
private:
    std::string name;
    int age;
    std::string position;

public:
    Staff(std::string name, int age, std::string position) 
        : name(name), age(age), position(position) {}

    void display() {
        std::cout << ""Name: "" << name << "", Age: "" << age << "", Position: "" << position << std::endl;
    }
};
"
God Class,"class Restaurant {
public:
    void orderFood(const std::string& foodItem) {
        // Handles taking orders, checking inventory, preparing food, serving food, etc.
        if (isInInventory(foodItem)) {
            prepareFood(foodItem);
            serveFood(foodItem);
            processPayment();
            manageReservations();
            manageStaff();
            handleCustomerFeedback();
            updateMenu();
        } else {
            std::cout << ""Sorry, we don't have "" << foodItem << "" available."" << std::endl;
        }
    }

    void manageReservations() {
        // Manage reservations
    }

    void manageStaff() {
        // Manage staff schedules and roles
    }

    void handleCustomerFeedback() {
        // Handle customer feedback
    }

    void updateMenu() {
        // Update the menu with new items or remove items
    }

private:
    bool isInInventory(const std::string& foodItem) {
        // Check if the food item is in inventory
        return true; // Simplified for this example
    }

    void prepareFood(const std::string& foodItem) {
        // Prepare food logic
    }

    void serveFood(const std::string& foodItem) {
        // Serve food logic
    }

    void processPayment() {
        // Process payment
    }
};
"
Long Parameter List,"def calculate_premium(age, gender, vehicle_type, mileage, accident_history, credit_score, location, duration, coverage_amount, type_of_policy):
    # Logic to calculate premium based on the parameters provided
    base_premium = 500
    if age < 25:
        base_premium += 200
    if gender == 'male':
        base_premium += 100
    if vehicle_type == 'sports':
        base_premium += 300
    if mileage > 15000:
        base_premium += 150
    if accident_history:
        base_premium += 250
    if credit_score < 600:
        base_premium += 200
    if location == 'urban':
        base_premium += 100
    if duration > 5:
        base_premium -= 50
    if type_of_policy == 'full coverage':
        base_premium += 200
        
    return base_premium
"
Data Class,"public class Product {
    private String id;
    private String name;
    private double price;
    private String description;
    private String category;

    public Product(String id, String name, double price, String description, String category) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.description = description;
        this.category = category;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public String getDescription() {
        return description;
    }

    public String getCategory() {
        return category;
    }
}
"
Code Clone,"public class LoanCalculator {

    public double calculatePersonalLoan(double principal, double interestRate, int years) {
        double monthlyRate = interestRate / 100 / 12;
        int months = years * 12;
        return (principal * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -months));
    }

    public double calculateHomeLoan(double principal, double interestRate, int years) {
        double monthlyRate = interestRate / 100 / 12;
        int months = years * 12;
        return (principal * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -months));
    }

    public double calculateCarLoan(double principal, double interestRate, int years) {
        double monthlyRate = interestRate / 100 / 12;
        int months = years * 12;
        return (principal * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -months));
    }
}
"
Long Method,"public void processOrder(Order order) {
    if (order == null) {
        throw new IllegalArgumentException(""Order cannot be null"");
    }
    validateOrder(order);
    Customer customer = customerService.getCustomer(order.getCustomerId());
    if (customer == null) {
        throw new IllegalArgumentException(""Invalid customer ID"");
    }
    Inventory inventory = inventoryService.getInventoryForOrder(order);
    if (!inventory.isAvailable()) {
        throw new IllegalStateException(""Insufficient inventory for order items"");
    }
    Payment payment = paymentService.processPayment(order.getPaymentInfo());
    if (!payment.isSuccessful()) {
        throw new IllegalArgumentException(""Payment processing failed"");
    }
    shippingService.scheduleShipping(order);
    notificationService.sendOrderConfirmation(order);
    updateOrderStatus(order, ""Processed"");
    logOrderActivity(order);
    addToAnalytics(order);
    // More operations such as updating dashboards, third-party integrations, etc.
    completeOrder(order);
}
"
God Class,"public class HotelManager {
    private List<Room> rooms;
    private List<Guest> guests;
    private List<Staff> staff;
    
    public HotelManager() {
        this.rooms = new ArrayList<>();
        this.guests = new ArrayList<>();
        this.staff = new ArrayList<>();
    }
    
    public void addRoom(Room room) {
        rooms.add(room);
    }

    public void removeRoom(Room room) {
        rooms.remove(room);
    }

    public void checkInGuest(Guest guest, Room room) {
        if (rooms.contains(room) && !room.isOccupied()) {
            room.setOccupied(true);
            guests.add(guest);
            System.out.println(""Guest "" + guest.getName() + "" checked into room "" + room.getRoomNumber());
        } else {
            System.out.println(""Room is not available for check-in."");
        }
    }

    public void checkOutGuest(Guest guest, Room room) {
        if (room.isOccupied()) {
            room.setOccupied(false);
            guests.remove(guest);
            System.out.println(""Guest "" + guest.getName() + "" checked out from room "" + room.getRoomNumber());
        } else {
            System.out.println(""Room is not occupied."");
        }
    }
    
    public void assignStaff(Staff staffMember) {
        staff.add(staffMember);
        System.out.println(""Staff "" + staffMember.getName() + "" assigned to hotel."");
    }

    public void removeStaff(Staff staffMember) {
        staff.remove(staffMember);
        System.out.println(""Staff "" + staffMember.getName() + "" removed from hotel."");
    }

    public void manageRoomCleaning(Room room) {
        if (rooms.contains(room) && room.isOccupied()) {
            System.out.println(""Cleaning room "" + room.getRoomNumber());
        } else {
            System.out.println(""Room "" + room.getRoomNumber() + "" is not occupied or does not exist."");
        }
    }

    public void handleGuestRequests(Guest guest, String request) {
        System.out.println(""Handling request from "" + guest.getName() + "": "" + request);
    }

    public void generateReport() {
        System.out.println(""Generating report:"");
        System.out.println(""Total rooms: "" + rooms.size());
        System.out.println(""Total guests: "" + guests.size());
        System.out.println(""Total staff: "" + staff.size());
    }
}
"
Feature Envy,"getUserFullName() {
    return `${this.user.firstName} ${this.user.lastName}`;
}
"
God Class,"class Vehicle:
    def __init__(self, make, model, year, color, mileage, fuel_type, engine_size, weight, top_speed):
        self.make = make
        self.model = model
        self.year = year
        self.color = color
        self.mileage = mileage
        self.fuel_type = fuel_type
        self.engine_size = engine_size
        self.weight = weight
        self.top_speed = top_speed
        self.seats = 5
        self.doors = 4
        self.is_electric = False

    def start_engine(self):
        print(f""The {self.year} {self.make} {self.model}'s engine started."")

    def stop_engine(self):
        print(f""The {self.year} {self.make} {self.model}'s engine stopped."")

    def accelerate(self):
        print(f""The {self.year} {self.make} {self.model} is accelerating."")

    def brake(self):
        print(f""The {self.year} {self.make} {self.model} is braking."")

    def turn(self, direction):
        print(f""The {self.year} {self.make} {self.model} is turning {direction}."")

    def honk(self):
        print(f""The {self.year} {self.make} {self.model} honks its horn."")

    def fill_fuel(self, amount):
        print(f""Filling the {self.year} {self.make} {self.model} with {amount} liters of {self.fuel_type}."")

    def check_tire_pressure(self):
        print(f""Checking tire pressure for {self.year} {self.make} {self.model}."")

    def load_passengers(self, number_of_passengers):
        if number_of_passengers <= self.seats:
            print(f""Loading {number_of_passengers} passengers into the {self.year} {self.make} {self.model}."")
        else:
            print(f""Cannot load {number_of_passengers} passengers; the vehicle only has {self.seats} seats."")

    def display_info(self):
        print(f""Vehicle Info: {self.year} {self.make} {self.model}, Color: {self.color}, Mileage: {self.mileage} km, ""
              f""Fuel Type: {self.fuel_type}, Engine Size: {self.engine_size}L, Weight: {self.weight}kg, ""
              f""Top Speed: {self.top_speed} km/h, Seats: {self.seats}, Doors: {self.doors}, Electric: {self.is_electric}."")
"
God Class,"class FarmManagementSystem {
    constructor() {
        this.crops = [];
        this.animals = [];
        this.equipment = [];
        this.staff = [];
    }

    addCrop(crop) {
        this.crops.push(crop);
    }

    removeCrop(crop) {
        this.crops = this.crops.filter(c => c !== crop);
    }

    listCrops() {
        return this.crops;
    }

    addAnimal(animal) {
        this.animals.push(animal);
    }

    removeAnimal(animal) {
        this.animals = this.animals.filter(a => a !== animal);
    }

    listAnimals() {
        return this.animals;
    }

    addEquipment(equipment) {
        this.equipment.push(equipment);
    }

    removeEquipment(equipment) {
        this.equipment = this.equipment.filter(e => e !== equipment);
    }

    listEquipment() {
        return this.equipment;
    }

    hireStaff(member) {
        this.staff.push(member);
    }

    fireStaff(member) {
        this.staff = this.staff.filter(s => s !== member);
    }

    listStaff() {
        return this.staff;
    }

    generateReport() {
        return {
            crops: this.listCrops(),
            animals: this.listAnimals(),
            equipment: this.listEquipment(),
            staff: this.listStaff(),
        };
    }

    manageCropGrowth() {
        // logic for managing crop growth
    }

    manageAnimalHealth() {
        // logic for managing animal health
    }

    maintainEquipment() {
        // logic for maintaining equipment
    }

    scheduleStaffTraining() {
        // logic for scheduling staff training
    }

    allocateResources() {
        // logic for resource allocation
    }
}
"
Long Parameter List,"void applyFertilizer(const std::string& fertilizerType, float quantity, const std::string& cropType, const std::string& soilType, int temperature, float humidity, const std::string& region, const std::vector<std::string>& pestControlMethods, bool isOrganic, const std::string& applicationMethod, const std::string& weatherForecast) {
    // Method implementation
}
"
Long Parameter List,"calculateInsuranceQuote(policyHolderName, policyHolderAge, vehicleMake, vehicleModel, vehicleYear, coverageType, deductibleAmount, annualMileage, priorClaims, driverHistory, locationZipCode, paymentFrequency, additionalDrivers, policyStartDate) {
    // Logic to calculate insurance quote based on provided parameters
}
"
Feature Envy,"def calculate_total_price(order):
    total = 0
    for item in order.items:
        total += item.price * item.quantity
        total += item.get_tax()  # Feature Envy: accessing item details excessively
    return total
"
Data Class,"class Property {
    constructor(address, price, size, bedrooms, bathrooms) {
        this.address = address;
        this.price = price;
        this.size = size;
        this.bedrooms = bedrooms;
        this.bathrooms = bathrooms;
    }

    getFullDescription() {
        return `${this.size} sqft, ${this.bedrooms} beds, ${this.bathrooms} baths, listed at ${this.price} located at ${this.address}`;
    }

    calculatePricePerSquareFoot() {
        return this.price / this.size;
    }
}
"
Long Method,"def calculate_fuel_efficiency(distance_traveled, fuel_used, speed, engine_temperature, tire_pressure, load_weight, maintenance_status):
    if maintenance_status == ""good"":
        efficiency = (distance_traveled / fuel_used) * 100
    else:
        efficiency = (distance_traveled / (fuel_used * 1.2)) * 100
        
    if speed < 30:
        efficiency *= 0.9
    elif speed > 60:
        efficiency *= 0.85

    if engine_temperature > 200:
        efficiency *= 0.8

    if tire_pressure < 30:
        efficiency *= 0.95
    
    if load_weight > 1000:
        efficiency *= 0.9

    if load_weight > 2000:
        efficiency *= 0.85

    return efficiency
"
Feature Envy,"calculateEnergyConsumption() {
    let totalConsumption = 0;
    this.appliances.forEach(appliance => {
        totalConsumption += appliance.getPowerUsage() * appliance.getHoursUsed();
    });
    return totalConsumption;
}
"
Code Clone,"class Patient {
    constructor(name, age, gender, medicalHistory) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.medicalHistory = medicalHistory;
    }

    displayInfo() {
        console.log(`Patient Name: ${this.name}`);
        console.log(`Age: ${this.age}`);
        console.log(`Gender: ${this.gender}`);
    }

    displayMedicalHistory() {
        console.log(`Medical History for ${this.name}: ${this.medicalHistory.join(', ')}`);
    }

    updateMedicalHistory(condition) {
        this.medicalHistory.push(condition);
        console.log(`Updated Medical History for ${this.name}: ${this.medicalHistory.join(', ')}`);
    }
}

class Doctor {
    constructor(name, specialty, experience) {
        this.name = name;
        this.specialty = specialty;
        this.experience = experience;
    }

    displayInfo() {
        console.log(`Doctor Name: ${this.name}`);
        console.log(`Specialty: ${this.specialty}`);
        console.log(`Experience: ${this.experience} years`);
    }

    prescribeMedication(medication) {
        console.log(`Doctor ${this.name} prescribes: ${medication}`);
    }

    updatePatientRecord(patientName, update) {
        console.log(`Updating record for patient ${patientName} with: ${update}`);
    }
}
"
Feature Envy,"public void printInvoiceDetails(Invoice invoice) {
    System.out.println(""Invoice Number: "" + invoice.getInvoiceNumber());
    System.out.println(""Customer Name: "" + invoice.getCustomer().getName());
    System.out.println(""Service Details: "" + invoice.getService().getDescription());
    System.out.println(""Total Amount: "" + invoice.getTotalAmount());
    System.out.println(""Payment Status: "" + invoice.getPaymentStatus());
}
"
Data Class,"class Vehicle {
    constructor(make, model, year, color, weight) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
        this.weight = weight;
    }

    getDetails() {
        return `${this.year} ${this.color} ${this.make} ${this.model}`;
    }

    isHeavy() {
        return this.weight > 3000;  // Example threshold for heavy vehicles
    }
}
"
Code Clone,"public class Movie {
    private String title;
    private String director;
    private int releaseYear;

    public Movie(String title, String director, int releaseYear) {
        this.title = title;
        this.director = director;
        this.releaseYear = releaseYear;
    }

    public void play() {
        System.out.println(""Playing movie: "" + title);
    }

    public void stop() {
        System.out.println(""Stopping movie: "" + title);
    }

    public void pause() {
        System.out.println(""Pausing movie: "" + title);
    }

    public void rewind() {
        System.out.println(""Rewinding movie: "" + title);
    }

    public void forward() {
        System.out.println(""Forwarding movie: "" + title);
    }

    public String getDetails() {
        return title + "" directed by "" + director + "", released in "" + releaseYear;
    }
}

public class TVShow {
    private String title;
    private String creator;
    private int seasons;

    public TVShow(String title, String creator, int seasons) {
        this.title = title;
        this.creator = creator;
        this.seasons = seasons;
    }

    public void play() {
        System.out.println(""Playing show: "" + title);
    }

    public void stop() {
        System.out.println(""Stopping show: "" + title);
    }

    public void pause() {
        System.out.println(""Pausing show: "" + title);
    }

    public void rewind() {
        System.out.println(""Rewinding show: "" + title);
    }

    public void forward() {
        System.out.println(""Forwarding show: "" + title);
    }

    public String getDetails() {
        return title + "" created by "" + creator + "", with "" + seasons + "" seasons."";
    }
}
"
Code Clone,"public class HotelReservation {
    private String guestName;
    private String checkInDate;
    private String checkOutDate;
    private String roomType;
    private double price;

    public HotelReservation(String guestName, String checkInDate, String checkOutDate, String roomType, double price) {
        this.guestName = guestName;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
        this.roomType = roomType;
        this.price = price;
    }

    public void printReservationDetails() {
        System.out.println(""Reservation Details:"");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Room Type: "" + roomType);
        System.out.println(""Price: "" + price);
    }

    public void printConfirmation() {
        System.out.println(""Confirmation:"");
        System.out.println(""Guest Name: "" + guestName);
        System.out.println(""Check-in Date: "" + checkInDate);
        System.out.println(""Check-out Date: "" + checkOutDate);
        System.out.println(""Room Type: "" + roomType);
        System.out.println(""Price: "" + price);
    }
}
"
Long Parameter List,"public void scheduleMaintenance(Long vehicleId, Long ownerId, Long serviceId, Long mileage, Long scheduledDate, Long estimatedDuration, Long technicianId, Long costEstimate) {
    // implementation
}
"
Long Parameter List,"def schedule_patient_appointment(patient_id, doctor_id, appointment_time, appointment_type, insurance_info, language_preference, notes, referral_source, follow_up_required, patient_history):
    # Code to schedule an appointment
    pass
"
Code Clone,"class User {
    constructor(name, email) {
        this.name = name;
        this.email = email;
    }

    sendEmail(subject, message) {
        console.log(`Sending email to ${this.email} with subject: ${subject} and message: ${message}`);
    }

    notifyUser(message) {
        console.log(`Notifying ${this.name}: ${message}`);
    }
}

class Admin {
    constructor(name, email) {
        this.name = name;
        this.email = email;
    }

    sendEmail(subject, message) {
        console.log(`Sending email to ${this.email} with subject: ${subject} and message: ${message}`);
    }

    notifyAdmin(message) {
        console.log(`Notifying ${this.name}: ${message}`);
    }
}
"
Code Clone,"class MobileNetwork {
public:
    MobileNetwork(std::string name) : name(name) {}

    void connect() {
        std::cout << name << "" connected."" << std::endl;
    }

    void disconnect() {
        std::cout << name << "" disconnected."" << std::endl;
    }

    void setCoverageArea(int area) {
        coverageArea = area;
        std::cout << name << "" coverage area set to "" << coverageArea << "" square km."" << std::endl;
    }

    void setNumberOfTowers(int towers) {
        numberOfTowers = towers;
        std::cout << name << "" has "" << numberOfTowers << "" towers."" << std::endl;
    }

    void showDetails() {
        std::cout << ""Network Name: "" << name << "", Coverage Area: "" << coverageArea 
                  << "" sq. km, Number of Towers: "" << numberOfTowers << std::endl;
    }

private:
    std::string name;
    int coverageArea;
    int numberOfTowers;
};

class FixedLineNetwork {
public:
    FixedLineNetwork(std::string name) : name(name) {}

    void connect() {
        std::cout << name << "" connected."" << std::endl;
    }

    void disconnect() {
        std::cout << name << "" disconnected."" << std::endl;
    }

    void setCoverageArea(int area) {
        coverageArea = area;
        std::cout << name << "" coverage area set to "" << coverageArea << "" square km."" << std::endl;
    }

    void setNumberOfTowers(int towers) {
        numberOfTowers = towers;
        std::cout << name << "" has "" << numberOfTowers << "" towers."" << std::endl;
    }

    void showDetails() {
        std::cout << ""Network Name: "" << name << "", Coverage Area: "" << coverageArea 
                  << "" sq. km, Number of Towers: "" << numberOfTowers << std::endl;
    }

private:
    std::string name;
    int coverageArea;
    int numberOfTowers;
};
"
Long Parameter List,"function schedulePatientAppointment(patientId, doctorId, appointmentDate, appointmentTime, duration, consultationType, notes, insuranceProvider, paymentMethod, allergies, previousConditions, referralSource) {
    // Scheduling logic here
}
"
Data Class,"public class Guest {
    private String name;
    private String email;
    private String phoneNumber;
    private String address;

    public Guest(String name, String email, String phoneNumber, String address) {
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.address = address;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getAddress() {
        return address;
    }
}
"
Feature Envy,"def calculate_route_cost(self, route):
    total_cost = 0
    for leg in route.legs:
        total_cost += leg.distance * leg.vehicle.get_cost_per_mile()
    return total_cost
"
Code Clone,"class Engine {
public:
    Engine(int horsepower, int fuelConsumption) 
        : horsepower(horsepower), fuelConsumption(fuelConsumption) {}

    void start() {
        // Logic to start the engine
    }

    void stop() {
        // Logic to stop the engine
    }

    int getHorsepower() const { return horsepower; }
    int getFuelConsumption() const { return fuelConsumption; }

private:
    int horsepower;
    int fuelConsumption;
};

class ElectricEngine {
public:
    ElectricEngine(int horsepower, int batteryCapacity) 
        : horsepower(horsepower), batteryCapacity(batteryCapacity) {}

    void start() {
        // Logic to start the electric engine
    }

    void stop() {
        // Logic to stop the electric engine
    }

    int getHorsepower() const { return horsepower; }
    int getBatteryCapacity() const { return batteryCapacity; }

private:
    int horsepower;
    int batteryCapacity;
};
"
Long Parameter List,"public void scheduleMovie(String title, long duration, long releaseYear, long directorId, long actorId, long genreId, long rating, long boxOfficeCollection, long budget, long contentRating) {
    // Method implementation goes here
}
"
God Class,"class ShoppingCart {
public:
    void addItem(int itemId, int quantity) {
        // Logic to add item
    }

    void removeItem(int itemId) {
        // Logic to remove item
    }

    double calculateTotalPrice() {
        // Logic to calculate total price of cart
        return totalPrice;
    }

    void applyDiscount(double discountPercentage) {
        // Logic to apply discount
    }

    void checkout() {
        // Logic to process checkout
    }

    void sendConfirmationEmail(const std::string &email) {
        // Logic to send confirmation email
    }

    void printReceipt() {
        // Logic to print receipt
    }

private:
    std::vector<int> items;
    double totalPrice;
};
"
Long Method,"public void processStudentGrades(List<Student> students) {
    for (Student student : students) {
        double totalGrade = 0;
        int numberOfSubjects = student.getGrades().size();
        
        for (Double grade : student.getGrades()) {
            totalGrade += grade;
        }
        
        double averageGrade = totalGrade / numberOfSubjects;
        student.setAverageGrade(averageGrade);
        
        if (averageGrade >= 90) {
            student.setStatus(""Honor"");
        } else if (averageGrade >= 75) {
            student.setStatus(""Pass"");
        } else {
            student.setStatus(""Fail"");
        }

        if (student.isOnScholarship() && averageGrade < 80) {
            sendWarningToStudent(student);
        }

        if (student.getAttendance() < 75) {
            recordAttendanceIssue(student);
        }
        
        if (student.getExtraCurricularActivities().size() > 3) {
            student.setExtraCurricularStatus(""Active"");
        } else {
            student.setExtraCurricularStatus(""Limited"");
        }

        courseFeedback(student);
        
        if (averageGrade >= 95) {
            awardScholarship(student);
        } else if (averageGrade < 65) {
            notifyParents(student);
        }
        
        // Additional conditions and logic for student performance reporting
        
        generatePerformanceReport(student);
        
        // Further business logic can be added here
    }
}
"
Long Method,"function processCallData(callRecords) {
    let totalDuration = 0;
    let callCount = 0;
    let longestCall = 0;
    let shortestCall = Infinity;
    let totalDataUsage = 0;
    let peakHours = {};
    let summaryReport = {};

    for (let record of callRecords) {
        totalDuration += record.duration;
        callCount++;

        if (record.duration > longestCall) {
            longestCall = record.duration;
        }
        if (record.duration < shortestCall) {
            shortestCall = record.duration;
        }

        totalDataUsage += record.dataUsage;

        let hour = new Date(record.startTime).getHours();
        if (!peakHours[hour]) {
            peakHours[hour] = 0;
        }
        peakHours[hour]++;
    }

    summaryReport.totalDuration = totalDuration;
    summaryReport.callCount = callCount;
    summaryReport.averageDuration = totalDuration / callCount;
    summaryReport.longestCall = longestCall;
    summaryReport.shortestCall = shortestCall;
    summaryReport.totalDataUsage = totalDataUsage;
    summaryReport.peakHours = Object.entries(peakHours).sort((a, b) => b[1] - a[1]).slice(0, 3);

    return summaryReport;
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Product:
    id: int
    name: str
    description: str
    quantity: int
    price: float
    supplier: str
    
    def calculate_total_value(self) -> float:
        return self.quantity * self.price
    
    def restock(self, amount: int) -> None:
        self.quantity += amount
        
    def apply_discount(self, discount_percentage: float) -> None:
        self.price -= self.price * (discount_percentage / 100)
"
God Class,"class LogisticsManager:
    def __init__(self):
        self.warehouses = []
        self.trucks = []
        self.orders = []

    def add_warehouse(self, warehouse):
        self.warehouses.append(warehouse)

    def add_truck(self, truck):
        self.trucks.append(truck)

    def add_order(self, order):
        self.orders.append(order)
    
    def allocate_truck(self, order):
        for truck in self.trucks:
            if truck.is_available():
                truck.assign_order(order)
                return True
        return False
    
    def get_order_status(self, order_id):
        for order in self.orders:
            if order.id == order_id:
                return order.status
        return None
        
    def generate_report(self):
        report = {}
        report['total_orders'] = len(self.orders)
        report['total_warehouses'] = len(self.warehouses)
        report['total_trucks'] = len(self.trucks)
        return report
        
    def track_shipment(self, order_id):
        for order in self.orders:
            if order.id == order_id:
                return order.get_tracking_info()
        return None
    
    def calculate_delivery_time(self, order):
        distance = self.get_distance(order.warehouse_location, order.destination)
        delivery_speed = 60  # example speed in km/h
        time = distance / delivery_speed
        return time
    
    def get_distance(self, location1, location2):
        # Method for calculating distance between two locations
        return 0  # dummy return for simplicity
"
Data Class,"class Product {
    constructor(id, name, description, price, stock) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.price = price;
        this.stock = stock;
    }

    getProductDetails() {
        return {
            id: this.id,
            name: this.name,
            description: this.description,
            price: this.price,
            stock: this.stock,
        };
    }
}
"
Long Parameter List,"void processTransaction(const std::string& accountId, const std::string& transactionId, double amount, const std::string& currency, const std::string& transactionDate, const std::string& transactionType, bool isInternational, double exchangeRate, const std::string& destinationAccountId, const std::string& memo, const std::string& merchantId) {
    // Method implementation goes here
}
"
Code Clone,"class Building {
    constructor(name, floors, area) {
        this.name = name;
        this.floors = floors;
        this.area = area;
    }

    calculateFloorArea() {
        return this.area / this.floors;
    }

    displayBuildingInfo() {
        console.log(`Building: ${this.name}, Floors: ${this.floors}, Area: ${this.area}`);
    }
}

class House {
    constructor(name, floors, area) {
        this.name = name;
        this.floors = floors;
        this.area = area;
    }

    calculateFloorArea() {
        return this.area / this.floors;
    }

    displayHouseInfo() {
        console.log(`House: ${this.name}, Floors: ${this.floors}, Area: ${this.area}`);
    }
}
"
Feature Envy,"def calculate_total_cost(self):
    total = 0
    for material in self.materials:
        total += material.get_cost() * material.quantity
    total += self.labor_hours * self.labor_rate
    total += self.equipment_cost.get_rental_fee()
    return total
"
Long Method,"public void calculateVehicleRegistration(Vehicle vehicle) {
    double baseFee = 100.0;
    double weightFee = vehicle.getWeight() * 0.1;
    double emissionsFee = (vehicle.getEmissions() > 150) ? (vehicle.getEmissions() - 150) * 0.2 : 0;
    double ageFee = (2023 - vehicle.getYear()) * 5;

    double totalFee = baseFee + weightFee + emissionsFee + ageFee;

    if (vehicle.isElectric()) {
        totalFee -= 50; // discount for electric vehicles
    }

    if (vehicle.getType() == VehicleType.TRUCK) {
        totalFee += 50; // additional fee for trucks
    } else if (vehicle.getType() == VehicleType.SUV) {
        totalFee += 30; // additional fee for SUVs
    }

    if (vehicle.getInsuranceProvider() == null || vehicle.getInsuranceProvider().isEmpty()) {
        throw new IllegalArgumentException(""Insurance provider is required"");
    }

    if (totalFee < 0) {
        totalFee = 0; // fee cannot be negative
    }

    vehicle.setRegistrationFee(totalFee);
    vehicle.setRegistrationDate(LocalDate.now());

    System.out.println(""Registration calculated for vehicle ID: "" + vehicle.getId());
    System.out.println(""Base Fee: "" + baseFee);
    System.out.println(""Weight Fee: "" + weightFee);
    System.out.println(""Emissions Fee: "" + emissionsFee);
    System.out.println(""Age Fee: "" + ageFee);
    System.out.println(""Total Registration Fee: "" + totalFee);
}
"
Data Class,"class Patient {
    constructor(id, name, age, gender, address, phoneNumber, allergies, medications, history) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.allergies = allergies;
        this.medications = medications;
        this.history = history;
    }

    getPatientInfo() {
        return {
            id: this.id,
            name: this.name,
            age: this.age,
            gender: this.gender,
        };
    }

    getContactInfo() {
        return {
            address: this.address,
            phoneNumber: this.phoneNumber,
        };
    }

    getMedicalInfo() {
        return {
            allergies: this.allergies,
            medications: this.medications,
            history: this.history,
        };
    }
}
"
Code Clone,"class Course {
    constructor(name, code, credits) {
        this.name = name;
        this.code = code;
        this.credits = credits;
    }

    getCourseDetails() {
        return `${this.name} (${this.code}) - ${this.credits} credits`;
    }
}

class OnlineCourse {
    constructor(name, code, credits, platform) {
        this.name = name;
        this.code = code;
        this.credits = credits;
        this.platform = platform;
    }

    getCourseDetails() {
        return `${this.name} (${this.code}) - ${this.credits} credits on ${this.platform}`;
    }
}

class OfflineCourse {
    constructor(name, code, credits, location) {
        this.name = name;
        this.code = code;
        this.credits = credits;
        this.location = location;
    }

    getCourseDetails() {
        return `${this.name} (${this.code}) - ${this.credits} credits at ${this.location}`;
    }
}
"
Long Method,"function processManufacturingOrder(order) {
    const orderId = order.id;
    const items = order.items;
    let totalQuantity = 0;
    let totalWeight = 0;
    let productionTime = 0;

    // Validate the order
    if (!orderId || items.length === 0) {
        throw new Error(""Invalid order."");
    }

    // Process each item
    for (let i = 0; i < items.length; i++) {
        const item = items[i];
        if (!item.productId || item.quantity <= 0) {
            throw new Error(`Invalid item ${i + 1} in order.`);
        }

        // Fetch product details
        const product = getProductDetails(item.productId);
        if (!product) {
            throw new Error(`Product with ID ${item.productId} not found.`);
        }

        // Calculate total quantity and weight
        const quantity = item.quantity;
        totalQuantity += quantity;
        const weight = product.weight * quantity;
        totalWeight += weight;

        // Calculate production time
        productionTime += product.productionTime * quantity;

        // Log processing
        console.log(`Processed item ${product.name}: Quantity = ${quantity}, Weight = ${weight}`);
    }

    // Finalize order
    submitOrder(orderId, totalQuantity, totalWeight, productionTime);

    // Notify user
    console.log(`Order ${orderId} processed successfully: Total Quantity = ${totalQuantity}, Total Weight = ${totalWeight}, Total Production Time = ${productionTime}`);
}
"
Long Method,"calculateAnnualReport(financialData) {
    let totalRevenue = 0;
    let totalExpenses = 0;
    let totalProfit = 0;
    let totalAssets = 0;
    let totalLiabilities = 0;
    let totalEquity = 0;

    for (let entry of financialData) {
        totalRevenue += entry.revenue;
        totalExpenses += entry.expenses;
        totalProfit += entry.profit;
        totalAssets += entry.assets;
        totalLiabilities += entry.liabilities;
        totalEquity += entry.equity;

        if (entry.type === 'one-time') {
            totalProfit += entry.oneTimeEventProfit;
        }
    }

    let averageRevenue = totalRevenue / financialData.length;
    let averageExpenses = totalExpenses / financialData.length;
    let averageProfit = totalProfit / financialData.length;
    let debtToEquityRatio = totalLiabilities / totalEquity;

    return {
        totalRevenue,
        totalExpenses,
        totalProfit,
        averageRevenue,
        averageExpenses,
        averageProfit,
        debtToEquityRatio,
        totalAssets,
        totalLiabilities,
        totalEquity
    };
}
"
Long Parameter List,"void BookRoom(const std::string& guestName, const std::string& guestPhone, const std::string& guestEmail, 
              int roomNumber, const std::string& checkInDate, const std::string& checkOutDate, 
              int numberOfAdults, int numberOfChildren, bool requireAirportPickup, 
              const std::string& specialRequests, double specialRate, bool prepaid, 
              const std::string& paymentMethod) {
    // Method implementation
}
"
Long Method,"def calculate_student_performance(grades):
    total_score = 0
    number_of_subjects = len(grades)
    highest_score = 0
    lowest_score = 100
    subject_scores = []
    
    for subject, score in grades.items():
        total_score += score
        subject_scores.append((subject, score))
        if score > highest_score:
            highest_score = score
        if score < lowest_score:
            lowest_score = score

    average_score = total_score / number_of_subjects
    grade = """"
    
    if average_score >= 90:
        grade = ""A""
    elif average_score >= 80:
        grade = ""B""
    elif average_score >= 70:
        grade = ""C""
    elif average_score >= 60:
        grade = ""D""
    else:
        grade = ""F""

    performance_summary = {
        ""total_score"": total_score,
        ""average_score"": average_score,
        ""highest_score"": highest_score,
        ""lowest_score"": lowest_score,
        ""grade"": grade,
        ""subject_scores"": subject_scores
    }
    
    return performance_summary
"
Code Clone,"class HealthInsurance {
    constructor(memberName, planType) {
        this.memberName = memberName;
        this.planType = planType;
    }

    calculatePremium() {
        let basePremium = 200;

        if (this.planType === 'Silver') {
            return basePremium * 1.2;
        } else if (this.planType === 'Gold') {
            return basePremium * 1.5;
        } else if (this.planType === 'Platinum') {
            return basePremium * 1.8;
        }

        return basePremium;
    }

    calculateDeductible() {
        if (this.planType === 'Silver') {
            return 500;
        } else if (this.planType === 'Gold') {
            return 300;
        } else if (this.planType === 'Platinum') {
            return 100;
        }

        return 1000;
    }
}

class LifeInsurance {
    constructor(insuredName, coverageAmount) {
        this.insuredName = insuredName;
        this.coverageAmount = coverageAmount;
    }

    calculatePremium() {
        let basePremium = 150;

        if (this.coverageAmount < 100000) {
            return basePremium * 1.1;
        } else if (this.coverageAmount < 500000) {
            return basePremium * 1.3;
        } else {
            return basePremium * 1.6;
        }
    }

    calculateBeneficiaryAmount() {
        if (this.coverageAmount < 100000) {
            return 50000;
        } else if (this.coverageAmount < 500000) {
            return 100000;
        } else {
            return 200000;
        }
    }
}
"
Feature Envy,"public void printCropDetails(Crop crop) {
    System.out.println(""Crop Name: "" + crop.getName());
    System.out.println(""Crop Type: "" + crop.getType());
    System.out.println(""Crop Yield: "" + crop.getYield());
    System.out.println(""Crop Price: "" + crop.getPrice());
    System.out.println(""Crop Region: "" + crop.getRegion().getName());
    System.out.println(""Region Climate: "" + crop.getRegion().getClimate().getDescription());
}
"
Long Parameter List,"def create_movie(title, director, release_year, genre, duration, rating, budget, box_office, language, country, cast, crew, soundtrack, production_company):
    movie = {
        'title': title,
        'director': director,
        'release_year': release_year,
        'genre': genre,
        'duration': duration,
        'rating': rating,
        'budget': budget,
        'box_office': box_office,
        'language': language,
        'country': country,
        'cast': cast,
        'crew': crew,
        'soundtrack': soundtrack,
        'production_company': production_company
    }
    return movie
"
Code Clone,"class LifeInsurance {
public:
    LifeInsurance(std::string name, double premium, double coverage)
        : policyholderName(name), premiumAmount(premium), coverageAmount(coverage) {}

    void displayPolicyDetails() {
        std::cout << ""Life Insurance Policy Holder: "" << policyholderName << std::endl;
        std::cout << ""Premium Amount: "" << premiumAmount << std::endl;
        std::cout << ""Coverage Amount: "" << coverageAmount << std::endl;
    }

private:
    std::string policyholderName;
    double premiumAmount;
    double coverageAmount;
};

class HealthInsurance {
public:
    HealthInsurance(std::string name, double premium, double coverage)
        : policyholderName(name), premiumAmount(premium), coverageAmount(coverage) {}

    void displayPolicyDetails() {
        std::cout << ""Health Insurance Policy Holder: "" << policyholderName << std::endl;
        std::cout << ""Premium Amount: "" << premiumAmount << std::endl;
        std::cout << ""Coverage Amount: "" << coverageAmount << std::endl;
    }

private:
    std::string policyholderName;
    double premiumAmount;
    double coverageAmount;
};
"
God Class,"class RetailManager:
    def __init__(self):
        self.inventory = {}
        self.sales_data = []
        self.staff = []
        self.suppliers = []

    def add_inventory(self, item, quantity):
        if item in self.inventory:
            self.inventory[item] += quantity
        else:
            self.inventory[item] = quantity

    def sell_item(self, item, quantity):
        if item in self.inventory and self.inventory[item] >= quantity:
            self.inventory[item] -= quantity
            self.sales_data.append((item, quantity))
        else:
            print(""Item not available or insufficient quantity."")

    def add_staff(self, staff_member):
        self.staff.append(staff_member)

    def remove_staff(self, staff_member):
        self.staff.remove(staff_member)

    def order_supplies(self, supplier, item, quantity):
        if supplier in self.suppliers:
            print(f""Ordering {quantity} of {item} from {supplier}."")
        else:
            print(""Supplier not recognized."")

    def generate_sales_report(self):
        report = {}
        for item, quantity in self.sales_data:
            if item in report:
                report[item] += quantity
            else:
                report[item] = quantity
        return report

    def track_employee_performance(self):
        # Logic for tracking employee performance
        pass

    def manage_marketing_campaigns(self):
        # Logic for managing marketing campaigns
        pass

    def handle_customer_support(self):
        # Logic for handling customer queries and issues
        pass
"
Feature Envy,"calculateTotalPrice(cart) {
    let totalPrice = 0;
    cart.items.forEach(item => {
        totalPrice += item.getPrice() * item.quantity;
    });
    totalPrice += cart.getShippingCost();
    totalPrice -= cart.getDiscount();
    return totalPrice;
}
"
Feature Envy,"public void printInvoiceSummary(Invoice invoice) {
    System.out.println(""Invoice ID: "" + invoice.getId());
    System.out.println(""Customer Name: "" + invoice.getCustomer().getName());
    System.out.println(""Total Amount: "" + invoice.getTotalAmount());
    System.out.println(""Due Date: "" + invoice.getDueDate());
    System.out.println(""Item Count: "" + invoice.getItems().size());
    System.out.println(""Invoice Status: "" + invoice.getStatus().getDescription());
}
"
Long Parameter List,"void createManufacturingOrder(int orderId, const std::string& productCode, int quantity, double unitPrice, const std::string& customerName, const std::string& deliveryAddress, bool isUrgent, const std::string& notes, const std::string& orderDate, const std::string& scheduledDate, std::vector<std::string> components) {
    // Implementation 
}
"
Long Parameter List,"def calculate_energy_consumption(usage_type, start_time, end_time, energy_source, location, building_type, occupancy, appliance_list, seasonal_factor, average_temperature, humidity_level):
    total_consumption = 0
    # Logic to calculate energy consumption based on the provided parameters
    return total_consumption
"
Code Clone,"class Robot {
    constructor(name, model) {
        this.name = name;
        this.model = model;
    }

    assemble() {
        console.log(`${this.name} is assembling the components of the ${this.model}`);
    }

    paint() {
        console.log(`${this.name} is painting the ${this.model}`);
    }

    package() {
        console.log(`${this.name} is packaging the ${this.model}`);
    }
}

class Drone {
    constructor(name, model) {
        this.name = name;
        this.model = model;
    }

    assemble() {
        console.log(`${this.name} is assembling the components of the ${this.model}`);
    }

    paint() {
        console.log(`${this.name} is painting the ${this.model}`);
    }

    package() {
        console.log(`${this.name} is packaging the ${this.model}`);
    }
}
"
Data Class,"from dataclasses import dataclass

@dataclass
class Beverage:
    name: str
    type: str
    volume_ml: int
    price: float
    alcohol_content: float

    def is_alcoholic(self) -> bool:
        return self.alcohol_content > 0.0

    def discount_price(self, percentage: float) -> float:
        return self.price * (1 - percentage / 100.0)

    def display_info(self) -> str:
        return f""Beverage: {self.name}, Type: {self.type}, Volume: {self.volume_ml}ml, Price: ${self.price}, Alcohol Content: {self.alcohol_content}%""
"
Feature Envy,"def calculate_patient_bmi(self, patient):
    weight_kg = patient.get_weight_kg()
    height_m = patient.get_height_m()
    if height_m == 0:
        return None
    bmi = weight_kg / (height_m ** 2)
    return bmi
"
God Class,"class FactoryManager:
    def __init__(self):
        self.production_line = []
        self.employees = []
        self.machinery_status = {}
    
    def hire_employee(self, name, position):
        self.employees.append({'name': name, 'position': position})
    
    def fire_employee(self, name):
        self.employees = [emp for emp in self.employees if emp['name'] != name]
    
    def start_production(self, product):
        self.production_line.append(product)
    
    def stop_production(self):
        self.production_line.clear()
    
    def assign_machine(self, machine_name, status):
        self.machinery_status[machine_name] = status
    
    def update_machine_status(self, machine_name, status):
        if machine_name in self.machinery_status:
            self.machinery_status[machine_name] = status
    
    def get_employee_list(self):
        return self.employees
    
    def get_production_status(self):
        return self.production_line
    
    def get_machine_status(self, machine_name):
        return self.machinery_status.get(machine_name, ""Unknown machine"")
    
    def generate_report(self):
        report = {
            'employees': self.get_employee_list(),
            'production': self.get_production_status(),
            'machines': self.machinery_status
        }
        return report
    
    def evaluate_employee_performance(self, name):
        # Dummy implementation for evaluation
        return f""Performance report for {name}: satisfactory""
    
    def handle_quality_control(self):
        # Dummy implementation
        return ""Quality control checks completed.""
    
    def schedule_maintenance(self, machine_name):
        if machine_name in self.machinery_status:
            return f""Maintenance scheduled for {machine_name}.""
        return ""Machine not found.""
"
Feature Envy,"def calculate_fruit_yield(self):
    total_yield = 0
    for tree in self.trees:
        total_yield += tree.get_ripe_fruits() * tree.get_fruit_weight()
    return total_yield
"
Feature Envy,"double calculateTotalPrice(const ShoppingCart& cart) {
    double total = 0.0;
    for (const auto& item : cart.getItems()) {
        total += item.getPrice() * item.getQuantity();
        total += item.getTax(); // Feature Envy: Accessing methods of item excessively
    }
    return total;
}
"
God Class,"public class School {
    private String name;
    private String address;
    private List<Student> students;
    private List<Teacher> teachers;
    private List<Course> courses;

    public School(String name, String address) {
        this.name = name;
        this.address = address;
        this.students = new ArrayList<>();
        this.teachers = new ArrayList<>();
        this.courses = new ArrayList<>();
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public void removeStudent(Student student) {
        students.remove(student);
    }

    public void addTeacher(Teacher teacher) {
        teachers.add(teacher);
    }

    public void removeTeacher(Teacher teacher) {
        teachers.remove(teacher);
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public void removeCourse(Course course) {
        courses.remove(course);
    }

    public void assignTeacherToCourse(Teacher teacher, Course course) {
        course.setInstructor(teacher);
        teacher.addCourse(course);
    }

    public void enrollStudentInCourse(Student student, Course course) {
        course.enrollStudent(student);
        student.addCourse(course);
    }

    public void generateReport() {
        // Logic for generating report for the school
    }

    public void scheduleMeeting() {
        // Logic for scheduling meetings for teachers and parents
    }

    public void handleDisciplinaryAction(Student student) {
        // Logic for managing disciplinary actions
    }

    public void conductExtracurricularActivity(String activity) {
        // Logic for conducting extracurricular activities
    }

    public void notifyParents(String message) {
        // Logic for notifying parents about school events
    }
}
"
Long Method,"void processCropData(std::vector<Crop>& crops) {
    for (size_t i = 0; i < crops.size(); ++i) {
        if (crops[i].isHealthy()) {
            if (crops[i].getWaterLevel() < 30) {
                crops[i].water(20);
            }

            if (crops[i].getNutrientLevel() < 40) {
                crops[i].applyFertilizer(15);
            }

            if (crops[i].getGrowthStage() == Seedling) {
                crops[i].proceedToNextStage();
            }

            if (crops[i].getGrowthStage() == Vegetative && crops[i].getPestLevel() > 5) {
                crops[i].applyPesticide();
            }

            if (crops[i].getGrowthStage() == Flowering) {
                if (crops[i].getWaterLevel() < 50) {
                    crops[i].water(30);
                }
                if (crops[i].getSunlightHours() < 6) {
                    crops[i].increaseSunExposure(3);
                }
            }

            if (crops[i].getGrowthStage() == HarvestReady) {
                if (crops[i].getHarvestDate() < currentDate) {
                    crops[i].harvest();
                }
            }

            if (crops[i].getGrowthStage() == Mature) {
                if (crops[i].getDiseaseLevel() > 3) {
                    crops[i].applyDiseaseControl();
                }
                if (crops[i].getWaterLevel() < 20) {
                    crops[i].water(10);
                }
            }
        } else {
            crops[i].markForReview();
        }
    }
}
"
God Class,"#include <string>
#include <vector>

class RealEstateAgency {
public:
    void addProperty(const std::string& propertyName, double price, const std::string& location) {
        Property property(propertyName, price, location);
        properties.push_back(property);
    }

    void removeProperty(const std::string& propertyName) {
        properties.erase(std::remove_if(properties.begin(), properties.end(),
            [&](const Property& p) { return p.getName() == propertyName; }), properties.end());
    }

    void listProperties() const {
        for (const auto& property : properties) {
            std::cout << property.getName() << "", "" << property.getPrice() << "", "" << property.getLocation() << std::endl;
        }
    }

    void calculateTotalValue() const {
        double total = 0;
        for (const auto& property : properties) {
            total += property.getPrice();
        }
        std::cout << ""Total property value: "" << total << std::endl;
    }

    void findPropertiesInLocation(const std::string& location) const {
        for (const auto& property : properties) {
            if (property.getLocation() == location) {
                std::cout << property.getName() << std::endl;
            }
        }
    }

private:
    class Property {
    public:
        Property(const std::string& name, double price, const std::string& location)
            : name(name), price(price), location(location) {}
        
        std::string getName() const { return name; }
        double getPrice() const { return price; }
        std::string getLocation() const { return location; }

    private:
        std::string name;
        double price;
        std::string location;
    };

    std::vector<Property> properties;
};
"
Data Class,"class User {
    constructor(name, email, age) {
        this.name = name;
        this.email = email;
        this.age = age;
    }

    getName() {
        return this.name;
    }

    getEmail() {
        return this.email;
    }

    getAge() {
        return this.age;
    }

    setName(name) {
        this.name = name;
    }

    setEmail(email) {
        this.email = email;
    }

    setAge(age) {
        this.age = age;
    }
}
"
Data Class,"class Product {
public:
    std::string name;
    double price;
    int quantity;

    Product(std::string n, double p, int q) : name(n), price(p), quantity(q) {}

    double totalValue() {
        return price * quantity;
    }

    void printDetails() {
        std::cout << ""Product Name: "" << name << "", Price: $"" << price
                  << "", Quantity: "" << quantity << "", Total Value: $"" << totalValue() << std::endl;
    }
};
"
Long Method,"def process_order(order):
    customer = fetch_customer(order.customer_id)
    if not customer:
        raise ValueError(""Customer not found"")
    
    items = fetch_order_items(order.id)
    if not items:
        raise ValueError(""No items in the order"")
    
    total = 0
    for item in items:
        product = fetch_product(item.product_id)
        if not product:
            raise ValueError(f""Product {item.product_id} not found"")
        
        if product.stock < item.quantity:
            raise ValueError(f""Insufficient stock for product {product.name}"")
        
        total += product.price * item.quantity
        product.stock -= item.quantity
        log_stock_change(product.id, item.quantity)

    if not payment_gateway.charge(customer.payment_info, total):
        raise ValueError(""Payment failed"")
    
    order.status = ""Processed""
    save_order(order)
    
    return order
"
God Class,"public class LogisticsManager {
    private List<Shipment> shipments;
    private List<Vehicle> vehicles;
    private List<Warehouse> warehouses;

    public void scheduleShipment(Shipment shipment, Vehicle vehicle) {
        // Implementation code
    }

    public void manageInventory(Warehouse warehouse) {
        // Implementation code
    }

    public void optimizeRoutes() {
        // Implementation code
    }

    public void handleCustomerService() {
        // Implementation code
    }

    public void generateReports() {
        // Implementation code
    }

    public void trackShipment(int shipmentId) {
        // Implementation code
    }

    public void updateVehicleStatus(Vehicle vehicle) {
        // Implementation code
    }

    public void assignWarehouseToShipment(Shipment shipment, Warehouse warehouse) {
        // Implementation code
    }

    public void manageSupplierRelationships() {
        // Implementation code
    }

    public void analyzeLogisticsCosts() {
        // Implementation code
    }

    public void planDeliveryTimes() {
        // Implementation code
    }

    public void coordinateTrainingForStaff() {
        // Implementation code
    }
}
"
Data Class,"class Beverage {
    constructor(name, volume, isCarbonated) {
        this.name = name;
        this.volume = volume;
        this.isCarbonated = isCarbonated;
    }
}

class Order {
    constructor(orderId, beverages) {
        this.orderId = orderId;
        this.beverages = beverages; // Array of Beverage objects
    }

    getTotalVolume() {
        return this.beverages.reduce((total, beverage) => total + beverage.volume, 0);
    }

    isAnyCarbonated() {
        return this.beverages.some(beverage => beverage.isCarbonated);
    }
}
"
Data Class,"class Movie {
  constructor(title, director, releaseYear, genre, duration, rating) {
    this.title = title;
    this.director = director;
    this.releaseYear = releaseYear;
    this.genre = genre;
    this.duration = duration;
    this.rating = rating;
  }

  getDetails() {
    return `${this.title}, directed by ${this.director}, released in ${this.releaseYear}, is a ${this.genre} film with a duration of ${this.duration} minutes and a rating of ${this.rating}/10.`;
  }
}
"
Long Parameter List,"public void calculateCropYield(Long farmId, Long cropId, Long seasonId, Long soilTypeId, Long irrigationMethodId, Long fertilizerTypeId, Long pestControlMethodId, Long laborCostId, Long machineryCostId) {
    // Method implementation
}
"
Data Class,"public class Car {
    private String make;
    private String model;
    private int year;
    private String color;

    public Car(String make, String model, int year, String color) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
    }

    public String getMake() {
        return make;
    }

    public String getModel() {
        return model;
    }

    public int getYear() {
        return year;
    }

    public String getColor() {
        return color;
    }
}
"
Long Method,"def process_data(data):
    cleaned_data = []
    for item in data:
        if item is not None:
            cleaned_item = item.strip()
            if cleaned_item:
                if cleaned_item.isdigit():
                    number = int(cleaned_item)
                    if number < 100:
                        cleaned_data.append(number)
                    else:
                        cleaned_data.append(100)
                elif cleaned_item.replace('.', '', 1).isdigit():
                    float_number = float(cleaned_item)
                    if float_number < 100.0:
                        cleaned_data.append(float_number)
                    else:
                        cleaned_data.append(100.0)
                else:
                    cleaned_data.append(cleaned_item.lower())
    processed_data = [x * 2 if isinstance(x, int) else x for x in cleaned_data]
    return processed_data
"
Data Class,"from dataclasses import dataclass

@dataclass
class Student:
    name: str
    age: int
    email: str
    grades: list

    def __post_init__(self):
        self.grades = []

    def add_grade(self, grade: float):
        self.grades.append(grade)

    def average_grade(self) -> float:
        return sum(self.grades) / len(self.grades) if self.grades else 0.0
"
Long Parameter List,"public void processOrder(Long orderId, Long customerId, Long productId, Long quantity, Long price, Long discount, Long shippingCost, Long tax, Long paymentMethodId, Long deliveryAddressId) {
    // Implementation for processing order
}
"
God Class,"class NetworkManager:
    def __init__(self):
        self.connections = []
        self.network_config = {}
        self.dns_records = []
        self.firewall_rules = []

    def connect(self, ip_address):
        # Connect to a network
        self.connections.append(ip_address)
        print(f""Connected to {ip_address}"")

    def disconnect(self, ip_address):
        # Disconnect from a network
        self.connections.remove(ip_address)
        print(f""Disconnected from {ip_address}"")

    def add_firewall_rule(self, rule):
        # Add a firewall rule
        self.firewall_rules.append(rule)
        print(f""Added firewall rule: {rule}"")

    def remove_firewall_rule(self, rule):
        # Remove a firewall rule
        self.firewall_rules.remove(rule)
        print(f""Removed firewall rule: {rule}"")

    def configure_network(self, config):
        # Configure network settings
        self.network_config.update(config)
        print(f""Network configured with: {config}"")

    def resolve_dns(self, hostname):
        # Resolve DNS for a hostname
        # Simulated DNS resolution
        ip_address = ""192.168.1.1""  # Placeholder
        self.dns_records.append((hostname, ip_address))
        print(f""Resolved {hostname} to {ip_address}"")

    def get_status(self):
        # Get the status of connections, rules, etc.
        return {
            ""connections"": self.connections,
            ""network_config"": self.network_config,
            ""dns_records"": self.dns_records,
            ""firewall_rules"": self.firewall_rules
        }
"
Code Clone,"class House:
    def __init__(self, rooms, bathrooms, garages):
        self.rooms = rooms
        self.bathrooms = bathrooms
        self.garages = garages

    def calculate_area(self):
        return (self.rooms * 150) + (self.bathrooms * 50) + (self.garages * 100)

    def calculate_value(self):
        return (self.rooms * 30000) + (self.bathrooms * 20000) + (self.garages * 25000)

class Apartment:
    def __init__(self, rooms, bathrooms, balconies):
        self.rooms = rooms
        self.bathrooms = bathrooms
        self.balconies = balconies

    def calculate_area(self):
        return (self.rooms * 120) + (self.bathrooms * 50) + (self.balconies * 30)

    def calculate_value(self):
        return (self.rooms * 20000) + (self.bathrooms * 15000) + (self.balconies * 10000)
"
God Class,"class ManufacturingManager {
    constructor() {
        this.productionLine = [];
        this.qualityControlChecks = [];
        this.supplyInventory = [];
    }

    addToProductionLine(item) {
        this.productionLine.push(item);
    }

    startProduction() {
        // Logic to start production
    }

    stopProduction() {
        // Logic to stop production
    }

    conductQualityCheck() {
        // Logic for quality checks
    }

    addToSupplyInventory(supply) {
        this.supplyInventory.push(supply);
    }

    manageEmployeeSchedules() {
        // Logic to manage employee schedules
    }

    processOrders() {
        // Logic to process manufacturing orders
    }

    trackFulfillment() {
        // Logic to track order fulfillment
    }

    generateProductionReports() {
        // Logic to generate production reports
    }

    handleCustomerComplaints() {
        // Logic to handle customer complaints
    }

    coordinateLogistics() {
        // Logic to coordinate logistics for shipping
    }
}
"
God Class,"public class VehicleManager {
    private List<Vehicle> vehicles;
    
    public VehicleManager() {
        vehicles = new ArrayList<>();
    }

    public void addVehicle(Vehicle vehicle) {
        vehicles.add(vehicle);
    }

    public void removeVehicle(Vehicle vehicle) {
        vehicles.remove(vehicle);
    }

    public Vehicle findVehicleById(String id) {
        for (Vehicle vehicle : vehicles) {
            if (vehicle.getId().equals(id)) {
                return vehicle;
            }
        }
        return null;
    }

    public void startVehicle(String id) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.start();
        }
    }

    public void stopVehicle(String id) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.stop();
        }
    }

    public void refuelVehicle(String id, double amount) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.refuel(amount);
        }
    }

    public void serviceVehicle(String id) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.service();
        }
    }

    public void displayAllVehicles() {
        for (Vehicle vehicle : vehicles) {
            System.out.println(vehicle);
        }
    }

    public void parkVehicle(String id) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.park();
        }
    }
    
    public void loadCargo(String id, double weight) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.loadCargo(weight);
        }
    }
    
    public void unloadCargo(String id) {
        Vehicle vehicle = findVehicleById(id);
        if (vehicle != null) {
            vehicle.unloadCargo();
        }
    }
}
"
Long Method,"void processOrder(Order& order) {
    if (order.isValid()) {
        calculateTotal(order);
        applyDiscounts(order);
        if (order.requiresShipping()) {
            Shipments shipment = initiateShipping(order);
            shipment.addItem(order.getItemList());
            shipment.calculateShippingCost();
            shipment.scheduleDelivery();
        }
        if (order.hasPaymentDetails()) {
            if (processPayment(order.getPaymentDetails())) {
                order.updateStatus(OrderStatus::Processed);
                notifyCustomer(order.getCustomerEmail());
                updateInventory(order.getItemList());
                logOrder(order);
            } else {
                order.updateStatus(OrderStatus::PaymentFailed);
                notifyCustomer(order.getCustomerEmail(), ""Payment processing failed."");
            }
        } else {
            order.updateStatus(OrderStatus::PendingPayment);
            notifyCustomer(order.getCustomerEmail(), ""Payment details required."");
        }
        printReceipt(order);
    } else {
        order.updateStatus(OrderStatus::Invalid);
        notifyCustomer(order.getCustomerEmail(), ""Order is invalid."");
    }
}
"
Data Class,"class Crop {
public:
    std::string name;
    std::string type;
    double yield;
    double area;

    Crop(std::string n, std::string t, double y, double a)
        : name(n), type(t), yield(y), area(a) {}

    double calculateTotalYield() {
        return yield * area;
    }

    void displayInfo() {
        std::cout << ""Crop Name: "" << name << ""\nType: "" << type 
                  << ""\nYield: "" << yield << ""\nArea: "" << area << std::endl;
    }
};
"
Code Clone,"class MobileService:
    def __init__(self, plan_type, data_limit, call_limit):
        self.plan_type = plan_type
        self.data_limit = data_limit
        self.call_limit = call_limit

    def calculate_bill(self, used_data, used_calls):
        excess_data = max(0, used_data - self.data_limit)
        excess_calls = max(0, used_calls - self.call_limit)
        bill = self.base_charge() + excess_data * self.data_rate() + excess_calls * self.call_rate()
        return bill

    def base_charge(self):
        if self.plan_type == ""basic"":
            return 30
        elif self.plan_type == ""premium"":
            return 50
        elif self.plan_type == ""family"":
            return 70

    def data_rate(self):
        if self.plan_type == ""basic"":
            return 10
        elif self.plan_type == ""premium"":
            return 5
        elif self.plan_type == ""family"":
            return 7

    def call_rate(self):
        if self.plan_type == ""basic"":
            return 1.5
        elif self.plan_type == ""premium"":
            return 1
        elif self.plan_type == ""family"":
            return 1.2


class InternetService:
    def __init__(self, plan_type, speed_limit, data_limit):
        self.plan_type = plan_type
        self.speed_limit = speed_limit
        self.data_limit = data_limit

    def calculate_bill(self, used_data, speed_used):
        excess_data = max(0, used_data - self.data_limit)
        bill = self.base_charge() + excess_data * self.data_rate()
        if speed_used > self.speed_limit:
            bill += (speed_used - self.speed_limit) * self.speed_rate()
        return bill

    def base_charge(self):
        if self.plan_type == ""basic"":
            return 25
        elif self.plan_type == ""premium"":
            return 45
        elif self.plan_type == ""family"":
            return 65

    def data_rate(self):
        if self.plan_type == ""basic"":
            return 2
        elif self.plan_type == ""premium"":
            return 1
        elif self.plan_type == ""family"":
            return 1.5

    def speed_rate(self):
        if self.plan_type == ""basic"":
            return 0.5
        elif self.plan_type == ""premium"":
            return 0.25
        elif self.plan_type == ""family"":
            return 0.3
"
Long Method,"public void processPatientAdmission(Patient patient, String insurancePlan, String admissionDate, String dischargeDate, List<String> medications, List<String> allergies, String contactInfo, String emergencyContact, String doctorAssigned, String roomNumber, String notes, boolean isPreAdmission, boolean isOutPatient, String followUpInstructions, String referralSource) {
    // Validate patient information
    if (patient == null || insurancePlan == null || admissionDate == null) {
        throw new IllegalArgumentException(""Patient and admission details are required."");
    }

    // Process insurance details
    if (!validateInsurance(insurancePlan)) {
        throw new IllegalArgumentException(""Invalid insurance plan."");
    }

    // Record admission date
    patient.setAdmissionDate(admissionDate);

    // Manage medications
    for (String medication : medications) {
        patient.addMedication(medication);
    }

    // Record allergies
    for (String allergy : allergies) {
        patient.addAllergy(allergy);
    }

    // Set contact information
    patient.setContactInfo(contactInfo);
    patient.setEmergencyContact(emergencyContact);

    // Assign doctor and room
    patient.setDoctorAssigned(doctorAssigned);
    patient.setRoomNumber(roomNumber);

    // Add notes to patient's file
    patient.addNotes(notes);

    // Pre-admission checks or outpatient considerations
    if (isPreAdmission) {
        patient.setPreAdmission(true);
    } else if (isOutPatient) {
        patient.setOutPatient(true);
    }

    // Guidance for follow-up
    patient.setFollowUpInstructions(followUpInstructions);

    // Record referral source
    patient.setReferralSource(referralSource);

    // Generate a summary report
    generateAdmissionReport(patient);

    // Notify healthcare providers
    notifyProviders(patient);

    // Update hospital records
    updateHospitalRecords(patient);

    // Conduct any required initial assessments
    conductInitialAssessments(patient);
}
"
Code Clone,"class Car {
public:
    Car(int speed, int fuel) : speed(speed), fuel(fuel) {}
    
    void accelerate() {
        speed += 10;
        fuel -= 1;
    }

    void brake() {
        speed -= 10;
    }

    void refuel(int amount) {
        fuel += amount;
    }

    void displayStatus() {
        std::cout << ""Car speed: "" << speed << "", fuel: "" << fuel << std::endl;
    }

private:
    int speed;
    int fuel;
};

class Truck {
public:
    Truck(int speed, int fuel) : speed(speed), fuel(fuel) {}
    
    void accelerate() {
        speed += 10;
        fuel -= 2;  // Different fuel consumption
    }

    void brake() {
        speed -= 10;
    }

    void refuel(int amount) {
        fuel += amount;
    }

    void displayStatus() {
        std::cout << ""Truck speed: "" << speed << "", fuel: "" << fuel << std::endl;
    }

private:
    int speed;
    int fuel;
};
"
Code Clone,"class Machine:
    def __init__(self, machine_id, type_, status):
        self.machine_id = machine_id
        self.type_ = type_
        self.status = status

    def start(self):
        if self.status == 'off':
            self.status = 'running'
            print(f""{self.type_} {self.machine_id} started."")
        else:
            print(f""{self.type_} {self.machine_id} is already running."")

    def stop(self):
        if self.status == 'running':
            self.status = 'off'
            print(f""{self.type_} {self.machine_id} stopped."")
        else:
            print(f""{self.type_} {self.machine_id} is already off."")

class ConveyorBelt(Machine):
    def __init__(self, machine_id, type_, status, length):
        super().__init__(machine_id, type_, status)
        self.length = length

    def start(self):
        if self.status == 'off':
            self.status = 'running'
            print(f""Conveyor Belt {self.machine_id} started with length {self.length}."")
        else:
            print(f""Conveyor Belt {self.machine_id} is already running."")

    def stop(self):
        if self.status == 'running':
            self.status = 'off'
            print(f""Conveyor Belt {self.machine_id} stopped."")
        else:
            print(f""Conveyor Belt {self.machine_id} is already off."")

class CncMachine(Machine):
    def __init__(self, machine_id, type_, status, workload):
        super().__init__(machine_id, type_, status)
        self.workload = workload

    def start(self):
        if self.status == 'off':
            self.status = 'running'
            print(f""CNC Machine {self.machine_id} started with workload {self.workload}."")
        else:
            print(f""CNC Machine {self.machine_id} is already running."")

    def stop(self):
        if self.status == 'running':
            self.status = 'off'
            print(f""CNC Machine {self.machine_id} stopped."")
        else:
            print(f""CNC Machine {self.machine_id} is already off."")
"
Long Parameter List,"void ProcessDrugTrialData(const std::string& trialID, const std::string& drugName, int studyPhase, double dosage, const std::string& patientID, const std::vector<std::string>& sideEffects, const std::string& trialLocation, const std::string& researcherName, const std::string& studyDesign, const std::string& approvalStatus, const std::string& dataCollectionMethod, const std::vector<std::string>& controlGroupIDs, const std::vector<std::string>& treatmentGroupIDs) {
    // Process the drug trial data
}
"
Feature Envy,"public void printDrugDetails(Drug drug) {
    System.out.println(""Drug Name: "" + drug.getName());
    System.out.println(""Chemical Formula: "" + drug.getChemicalFormula());
    System.out.println(""Dosage: "" + drug.getDosage() + "" mg"");
    System.out.println(""Side Effects: "" + drug.getSideEffects());
    System.out.println(""Manufacturer: "" + drug.getManufacturer().getName());
    System.out.println(""Approval Year: "" + drug.getManufacturer().getApprovalYear());
}
"
Data Class,"class Building {
public:
    std::string address;
    int floors;
    double area;

    Building(const std::string& addr, int flrs, double areaSize) 
        : address(addr), floors(flrs), area(areaSize) {}
};
"
Long Parameter List,"public void processInsuranceClaim(Long claimId, Long policyId, Long customerId, Long vehicleId, Long adjusterId, Long incidentId, Long damageAssessmentId) {
    // Method implementation here
}
"
Long Method,"def calculate_route_cost(distance, fuel_price, fuel_efficiency, tolls, driver_salary, maintenance_cost):
    total_fuel_cost = (distance / fuel_efficiency) * fuel_price
    total_toll_cost = tolls
    total_driver_cost = driver_salary
    total_maintenance_cost = maintenance_cost
    total_cost = total_fuel_cost + total_toll_cost + total_driver_cost + total_maintenance_cost

    # Additional calculations for cost adjustments based on distance
    if distance > 1000:
        total_cost *= 0.95  # 5% discount for long routes
    elif distance < 100:
        total_cost *= 1.1  # 10% increase for short routes

    # Adding environmental fee calculation
    if total_fuel_cost > 500:
        total_cost += 50  # Environmental fee for high fuel costs

    # Logistics handling costs
    logistics_cost = 0
    if distance > 500:
        logistics_cost = 200  # Flat logistics cost for long distances

    total_cost += logistics_cost

    # Seasonal adjustments
    if self.is_peak_season():
        total_cost *= 1.2  # 20% increase during peak season
    else:
        total_cost *= 0.9  # 10% discount during off-season

    return total_cost
"
Data Class,"class Patient {
public:
    std::string name;
    int age;
    std::string gender;
    std::string address;
    std::string phoneNumber;
    std::string medicalHistory;

    Patient(std::string n, int a, std::string g, std::string addr, std::string phone, std::string history)
        : name(n), age(a), gender(g), address(addr), phoneNumber(phone), medicalHistory(history) {}
};
"
Feature Envy,"calculateAverageGrade() {
    let total = 0;
    this.students.forEach(student => {
        total += student.getGrade();
    });
    return total / this.students.length;
}
"
Code Clone,"class Investment {
    constructor(amount, annualReturnRate) {
        this.amount = amount;
        this.annualReturnRate = annualReturnRate;
    }

    calculateFutureValue(years) {
        return this.amount * Math.pow((1 + this.annualReturnRate), years);
    }

    calculateInvestmentGrowth(years) {
        const futureValue = this.calculateFutureValue(years);
        return futureValue - this.amount;
    }

    calculateCompoundInterest(years) {
        const futureValue = this.calculateFutureValue(years);
        return futureValue - this.amount;
    }

    calculateRetirementSavings(years) {
        const futureValue = this.calculateFutureValue(years);
        return futureValue - this.amount;
    }
}
"
Feature Envy,"def calculate_average_price(properties):
    total_price = 0
    for property in properties:
        total_price += property.get_price()  # Feature Envy: depending on property method
    return total_price / len(properties) if properties else 0
"
Feature Envy,"double calculateTotalDistance(const std::vector<Route>& routes) {
    double totalDistance = 0.0;
    for (const auto& route : routes) {
        totalDistance += route.getLength(); // Feature Envy: accessing method of Route class
    }
    return totalDistance;
}
"
Feature Envy,"public double calculateTotalOrderPrice(Order order) {
    double total = 0;
    for (MenuItem item : order.getItems()) {
        total += item.getPrice() * item.getQuantity();
        total += item.getTaxAmount(); // This line indicates Feature Envy
    }
    return total;
}
"
Long Parameter List,"function createOrder(customerId, itemIds, deliveryAddress, paymentMethod, specialInstructions, orderDate, promoCode, isGift, giftMessage) {
    // implementation code here
}
"
Feature Envy,"def calculate_total_bill(customer):
    total = 0
    for call in customer.calls:
        total += call.duration * customer.rate_per_minute
    return total
"
Long Method,"def calculate_crop_yield(land_area, crop_type, soil_quality, fertilizer_used, rainfall, pest_control, planting_date, harvest_date, irrigation_method, previous_crops, labor_hours, machinery_used):
    if crop_type == ""corn"":
        base_yield = 3.5  # tons/acre
    elif crop_type == ""wheat"":
        base_yield = 2.5  # tons/acre
    elif crop_type == ""soybeans"":
        base_yield = 2.8  # tons/acre
    else:
        base_yield = 2.0  # tons/acre for other crops

    yield_adjustment = 1.0
    if soil_quality == ""poor"":
        yield_adjustment -= 0.3
    elif soil_quality == ""average"":
        yield_adjustment -= 0.1
        
    if fertilizer_used:
        yield_adjustment += 0.2

    if rainfall < 20:
        yield_adjustment -= 0.5
    elif rainfall > 40:
        yield_adjustment -= 0.2
        
    if not pest_control:
        yield_adjustment -= 0.4

    planting_duration_days = (harvest_date - planting_date).days
    if planting_duration_days < 90:
        yield_adjustment -= 0.5
    elif planting_duration_days > 120:
        yield_adjustment += 0.1
        
    if irrigation_method == ""drip"":
        yield_adjustment += 0.2
    elif irrigation_method == ""furrow"":
        yield_adjustment += 0.1

    if previous_crops == ""legumes"":
        yield_adjustment += 0.3
    elif previous_crops == ""grains"":
        yield_adjustment -= 0.1

    total_yield = land_area * base_yield * yield_adjustment

    if labor_hours > 100:
        total_yield += 1.0  # bonus yield for extra labor
    if machinery_used == ""advanced"":
        total_yield += 0.5  # bonus yield for using advanced machinery

    return total_yield
"
God Class,"class TelecommunicationSystem {
public:
    void processCall(int callId) {
        // Logic to process calls
    }

    void handleMessage(int messageId) {
        // Logic to handle messages
    }

    void manageNetwork() {
        // Logic to manage the network
    }

    void monitorConnections() {
        // Logic to monitor connections
    }

    void troubleshootIssue(int issueId) {
        // Logic to troubleshoot issues
    }

    void generateReport() {
        // Logic to generate reports
    }

    void configureDevice(int deviceId) {
        // Logic to configure devices
    }

    void updateSoftware(int deviceId) {
        // Logic to update software on devices
    }

    void authenticateUser(int userId) {
        // Logic to authenticate users
    }

    void logEvent(const std::string& eventDetails) {
        // Logic to log events
    }

private:
    void internalHelperFunction() {
        // Internal logic that is used by multiple methods
    }
};
"
Long Parameter List,"void processInsuranceClaim(const std::string& policyNumber, const std::string& claimantName, const std::string& dateOfIncident, 
                            const std::string& incidentDescription, double claimAmount, const std::string& supportingDocuments, 
                            const std::string& witnessName, const std::string& witnessContact, 
                            const std::string& adjusterName, const std::string& adjusterContact, 
                            const std::string& claimStatus, const std::string& paymentMethod, 
                            const std::string& additionalNotes) {
    // Implementation of claim processing
}
"
Long Method,"double calculateTotalInvestmentReturn(const std::vector<Investment>& investments, double inflationRate, double taxRate) {
    double totalReturn = 0.0;
    double totalInvestment = 0.0;

    for (const auto& investment : investments) {
        double investmentReturn = investment.getReturn();
        double investmentAmount = investment.getAmount();
        totalInvestment += investmentAmount;

        double adjustedReturn = investmentReturn - (investmentReturn * inflationRate);
        double taxableReturn = adjustedReturn - (adjustedReturn * taxRate);
        
        totalReturn += taxableReturn;

        if (investment.getRiskLevel() > 7) {
            double riskAdjustment = investment.getRiskLevel() * 0.1;
            totalReturn -= riskAdjustment;
        }

        if (investment.isLongTerm()) {
            totalReturn *= 1.1; // Bonus for long-term investments
        }

        if (investment.getType() == InvestmentType::Stocks) {
            totalReturn += investmentAmount * 0.05; // Stock market adjustment
        } else if (investment.getType() == InvestmentType::Bonds) {
            totalReturn += investmentAmount * 0.03; // Bonds adjustment
        } else if (investment.getType() == InvestmentType::RealEstate) {
            totalReturn += investmentAmount * 0.07; // Real estate adjustment
        }

        // Check for any special conditions
        if (investment.hasSpecialConditions()) {
            double specialAdjustment = investment.getSpecialConditionAdjustment();
            totalReturn += specialAdjustment;
        }

        // Deduct fees
        double fee = investmentAmount * investment.getFeePercentage();
        totalReturn -= fee;

        // Additional checks based on time
        if (investment.getTimeInvested() > 5) {
            totalReturn *= 1.05; // Bonus for long-term investments
        }

        if (investment.isDividendPaying()) {
            totalReturn += investment.getDividendYield() * investmentAmount;
        }
    }

    return totalReturn - (totalInvestment * 0.02); // Overall investment management fee
}
"
Code Clone,"class Movie:
    def __init__(self, title, director, release_year):
        self.title = title
        self.director = director
        self.release_year = release_year

    def get_info(self):
        return f""{self.title}, directed by {self.director}, released in {self.release_year}""

class Series:
    def __init__(self, title, director, seasons):
        self.title = title
        self.director = director
        self.seasons = seasons

    def get_info(self):
        return f""{self.title}, directed by {self.director}, with {self.seasons} seasons""
"
Code Clone,"class SolarPanel {
    constructor(area, efficiency) {
        this.area = area;
        this.efficiency = efficiency;
    }

    calculateEnergyOutput(solarIrradiance) {
        return this.area * this.efficiency * solarIrradiance;
    }
}

class WindTurbine {
    constructor(diameter, efficiency) {
        this.diameter = diameter;
        this.efficiency = efficiency;
    }

    calculateEnergyOutput(windSpeed) {
        return Math.PI * Math.pow(this.diameter / 2, 2) * this.efficiency * Math.pow(windSpeed, 3);
    }
}
"
Long Parameter List,"function createHouseBlueprint(length, width, height, numRooms, numFloors, hasBasement, hasGarage, hasGarden, roofType, wallColor) {
    // Implementation of the house blueprint creation
}
"
Long Method,"public void calculateAnnualReport(List<Transaction> transactions, int year) {
    double totalIncome = 0.0;
    double totalExpenses = 0.0;
    double totalSavings = 0.0;
    List<String> transactionDetails = new ArrayList<>();

    for (Transaction transaction : transactions) {
        if (transaction.getDate().getYear() == year) {
            if (transaction.getType() == TransactionType.INCOME) {
                totalIncome += transaction.getAmount();
                transactionDetails.add(""Income: "" + transaction.getAmount() + "" on "" + transaction.getDate());
            } else if (transaction.getType() == TransactionType.EXPENSE) {
                totalExpenses += transaction.getAmount();
                transactionDetails.add(""Expense: "" + transaction.getAmount() + "" on "" + transaction.getDate());
            }
        }
    }

    totalSavings = totalIncome - totalExpenses;

    System.out.println(""Annual Report for year: "" + year);
    System.out.println(""Total Income: "" + totalIncome);
    System.out.println(""Total Expenses: "" + totalExpenses);
    System.out.println(""Total Savings: "" + totalSavings);
    System.out.println(""Transaction Details: "");
    
    for (String details : transactionDetails) {
        System.out.println(details);
    }

    if (totalSavings < 0) {
        System.out.println(""Warning: You have a negative savings for this year!"");
    }

    if (totalIncome > 100000) {
        System.out.println(""Congratulations, you have exceeded the income threshold!"");
    }

    // Additional metrics and summaries would be calculated here
    double averageIncome = totalIncome / transactions.size();
    double averageExpenses = totalExpenses / transactions.size();

    System.out.println(""Average Monthly Income: "" + (averageIncome / 12));
    System.out.println(""Average Monthly Expenses: "" + (averageExpenses / 12));

    // Future investment suggestions based on savings.
    if (totalSavings > 0) {
        System.out.println(""You might consider investing this year's savings."");
        // Suggestion logic could be placed here
    }

    System.out.println(""End of annual report."");
}
"
Data Class,"public class Drug {
    private String name;
    private String manufacturer;
    private String dosage;
    private String sideEffects;

    public Drug(String name, String manufacturer, String dosage, String sideEffects) {
        this.name = name;
        this.manufacturer = manufacturer;
        this.dosage = dosage;
        this.sideEffects = sideEffects;
    }

    public String getName() {
        return name;
    }

    public String getManufacturer() {
        return manufacturer;
    }

    public String getDosage() {
        return dosage;
    }

    public String getSideEffects() {
        return sideEffects;
    }
}
"
Feature Envy,"double calculateRevenuePerHectare(const Farm& farm) {
    double totalRevenue = 0.0;
    for (const auto& crop : farm.getCrops()) {
        totalRevenue += crop.getYield() * crop.getMarketPrice();
    }
    return totalRevenue / farm.getTotalArea();
}
"
God Class,"class ConstructionManager {
public:
    void manageProject(const std::string& projectName) {
        scheduleTasks(projectName);
        allocateResources(projectName);
        manageBudget(projectName);
        superviseWorkers(projectName);
        manageClientCommunication(projectName);
        ensureSafetyStandards(projectName);
        resolveConflicts(projectName);
        reportProgress(projectName);
        evaluateRisks(projectName);
        updateDocumentation(projectName);
    }

private:
    void scheduleTasks(const std::string& projectName) {
        // Implementation for scheduling tasks
    }

    void allocateResources(const std::string& projectName) {
        // Implementation for resource allocation
    }

    void manageBudget(const std::string& projectName) {
        // Implementation for managing budget
    }

    void superviseWorkers(const std::string& projectName) {
        // Implementation for supervising workers
    }

    void manageClientCommunication(const std::string& projectName) {
        // Implementation for client communication
    }

    void ensureSafetyStandards(const std::string& projectName) {
        // Implementation for safety standards compliance
    }

    void resolveConflicts(const std::string& projectName) {
        // Implementation for resolving conflicts
    }

    void reportProgress(const std::string& projectName) {
        // Implementation for progress reporting
    }

    void evaluateRisks(const std::string& projectName) {
        // Implementation for risk evaluation
    }

    void updateDocumentation(const std::string& projectName) {
        // Implementation for updating project documentation
    }
};
"
God Class,"#include <string>
#include <vector>

class HotelManager {
public:
    void manageReservations(const std::string& guestName, const std::string& roomType, int numNights) {
        // Logic to process reservations
    }

    void manageCheckIn(const std::string& guestName) {
        // Logic to check in a guest
    }

    void manageCheckOut(const std::string& guestName) {
        // Logic to check out a guest
    }

    void handleGuestComplaints(const std::string& guestName, const std::string& complaint) {
        // Logic to handle complaints
    }

    void manageBilling(const std::string& guestName, double amount) {
        // Logic to manage billing
    }

    void organizeEvents(const std::string& eventName, const std::string& date) {
        // Logic to organize events
    }

    void manageHousekeeping(const std::string& roomNumber) {
        // Logic to manage housekeeping
    }

    void provideStaffManagement(const std::string& staffName, const std::string& task) {
        // Logic to manage staff
    }

    void maintainInventory(const std::string& item, int quantity) {
        // Logic to maintain inventory
    }

    void overseeMaintenance(const std::string& issue) {
        // Logic to oversee maintenance tasks
    }

    void performMarketAnalysis() {
        // Logic for market analysis
    }

private:
    std::vector<std::string> reservations;
    std::vector<std::string> guests;
    std::vector<std::string> complaints;
    // ... Other member variables related to hotel management
};
"
